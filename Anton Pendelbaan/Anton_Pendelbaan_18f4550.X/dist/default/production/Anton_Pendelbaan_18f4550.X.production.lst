

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Tue Nov 21 21:51:24 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    57                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    58                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    59  0000                     
    60                           	psect	idataBANK0
    61  003C0A                     __pidataBANK0:
    62                           	opt stack 0
    63                           
    64                           ;initializer for Junction@Return_Val
    65  003C0A  01                 	db	1
    66                           
    67                           ;initializer for Left_Mountain_From_The_Left@Return_Val
    68  003C0B  01                 	db	1
    69                           
    70                           ;initializer for Left_Mountain_From_The_Right@Return_Val
    71  003C0C  01                 	db	1
    72                           
    73                           ;initializer for Right_Mountain_From_The_Left@Return_Val
    74  003C0D  01                 	db	1
    75                           
    76                           ;initializer for Right_Mountain_From_The_Right@Return_Val
    77  003C0E  01                 	db	1
    78                           
    79                           ;initializer for Train_Move_Left_Brake@Return_Val
    80  003C0F  01                 	db	1
    81                           
    82                           ;initializer for Train_Move_Left_Start@Return_Val
    83  003C10  01                 	db	1
    84                           
    85                           ;initializer for Train_Move_Right_Brake@Return_Val
    86  003C11  01                 	db	1
    87                           
    88                           ;initializer for Train_Move_Right_Start@Return_Val
    89  003C12  01                 	db	1
    90                           
    91                           ;initializer for Train_Path@Return_Val
    92  003C13  01                 	db	1
    93                           
    94                           	psect	smallconst
    95  000800                     __psmallconst:
    96                           	opt stack 0
    97  000800  00                 	db	0
    98  000801                     _dpowers:
    99                           	opt stack 0
   100  000801  0001               	dw	1
   101  000803  000A               	dw	10
   102  000805  0064               	dw	100
   103  000807  03E8               	dw	1000
   104  000809  2710               	dw	10000
   105  00080B                     __end_of_dpowers:
   106                           	opt stack 0
   107  00080B                     _DataLen:
   108                           	opt stack 0
   109  00080B  0A                 	db	10
   110  00080C                     __end_of_DataLen:
   111                           	opt stack 0
   112  0000                     _ADCON1	set	4033
   113  0000                     _BAUDCONbits	set	4024
   114  0000                     _CCP1CON	set	4029
   115  0000                     _CCPR1L	set	4030
   116  0000                     _CMCON	set	4020
   117  0000                     _EEADR	set	4009
   118  0000                     _EECON1bits	set	4006
   119  0000                     _EECON2	set	4007
   120  0000                     _EEDATA	set	4008
   121  0000                     _INTCON	set	4082
   122  0000                     _INTCON2	set	4081
   123  0000                     _INTCONbits	set	4082
   124  0000                     _PIE1bits	set	3997
   125  0000                     _PIR1bits	set	3998
   126  0000                     _PIR2bits	set	4001
   127  0000                     _PORTAbits	set	3968
   128  0000                     _PORTBbits	set	3969
   129  0000                     _PORTCbits	set	3970
   130  0000                     _PORTDbits	set	3971
   131  0000                     _PORTEbits	set	3972
   132  0000                     _PR2	set	4043
   133  0000                     _RCONbits	set	4048
   134  0000                     _RCREG1	set	4014
   135  0000                     _RCSTA1bits	set	4011
   136  0000                     _RCSTAbits	set	4011
   137  0000                     _SPBRG	set	4015
   138  0000                     _SPBRGH	set	4016
   139  0000                     _T0CON	set	4053
   140  0000                     _T2CON	set	4042
   141  0000                     _TMR0H	set	4055
   142  0000                     _TMR0L	set	4054
   143  0000                     _TRISA	set	3986
   144  0000                     _TRISAbits	set	3986
   145  0000                     _TRISB	set	3987
   146  0000                     _TRISBbits	set	3987
   147  0000                     _TRISC	set	3988
   148  0000                     _TRISCbits	set	3988
   149  0000                     _TRISD	set	3989
   150  0000                     _TRISDbits	set	3989
   151  0000                     _TRISE	set	3990
   152  0000                     _TRISEbits	set	3990
   153  0000                     _TXREG1	set	4013
   154  0000                     _TXSTAbits	set	4012
   155  0000                     _TXIF	set	31988
   156  00080C                     STR_8:
   157  00080C  0D                 	db	13
   158  00080D  0A                 	db	10
   159  00080E  4D                 	db	77	;'M'
   160  00080F  23                 	db	35
   161  000810  25                 	db	37
   162  000811  64                 	db	100	;'d'
   163  000812  20                 	db	32
   164  000813  25                 	db	37
   165  000814  64                 	db	100	;'d'
   166  000815  0D                 	db	13
   167  000816  0A                 	db	10
   168  000817  00                 	db	0
   169  000818                     STR_1:
   170  000818  0D                 	db	13
   171  000819  0A                 	db	10
   172  00081A  45                 	db	69	;'E'
   173  00081B  23                 	db	35
   174  00081C  31                 	db	49	;'1'
   175  00081D  30                 	db	48	;'0'
   176  00081E  0D                 	db	13
   177  00081F  0A                 	db	10
   178  000820  00                 	db	0
   179  000821                     STR_2:
   180  000821  0D                 	db	13
   181  000822  0A                 	db	10
   182  000823  45                 	db	69	;'E'
   183  000824  23                 	db	35
   184  000825  31                 	db	49	;'1'
   185  000826  31                 	db	49	;'1'
   186  000827  0D                 	db	13
   187  000828  0A                 	db	10
   188  000829  00                 	db	0
   189  00082A                     STR_3:
   190  00082A  0D                 	db	13
   191  00082B  0A                 	db	10
   192  00082C  45                 	db	69	;'E'
   193  00082D  23                 	db	35
   194  00082E  31                 	db	49	;'1'
   195  00082F  32                 	db	50	;'2'
   196  000830  0D                 	db	13
   197  000831  0A                 	db	10
   198  000832  00                 	db	0
   199  000833                     STR_4:
   200  000833  0D                 	db	13
   201  000834  0A                 	db	10
   202  000835  45                 	db	69	;'E'
   203  000836  23                 	db	35
   204  000837  31                 	db	49	;'1'
   205  000838  33                 	db	51	;'3'
   206  000839  0D                 	db	13
   207  00083A  0A                 	db	10
   208  00083B  00                 	db	0
   209  00083C                     STR_5:
   210  00083C  0D                 	db	13
   211  00083D  0A                 	db	10
   212  00083E  45                 	db	69	;'E'
   213  00083F  23                 	db	35
   214  000840  31                 	db	49	;'1'
   215  000841  34                 	db	52	;'4'
   216  000842  0D                 	db	13
   217  000843  0A                 	db	10
   218  000844  00                 	db	0
   219  0000                     
   220                           ; #config settings
   221  000845  00                 	db	0	; dummy byte at the end
   222  0000                     
   223                           	psect	cinit
   224  0038CA                     __pcinit:
   225                           	opt stack 0
   226  0038CA                     start_initialization:
   227                           	opt stack 0
   228  0038CA                     __initialization:
   229                           	opt stack 0
   230                           
   231                           ; Clear objects allocated to BIGRAM (576 bytes)
   232  0038CA  EE01  F0FC         	lfsr	0,__pbssBIGRAM
   233  0038CE  EE12 F040          	lfsr	1,576
   234  0038D2                     clear_0:
   235  0038D2  6AEE               	clrf	postinc0,c
   236  0038D4  50E5               	movf	postdec1,w,c
   237  0038D6  50E1               	movf	fsr1l,w,c
   238  0038D8  E1FC               	bnz	clear_0
   239  0038DA  50E2               	movf	fsr1h,w,c
   240  0038DC  E1FA               	bnz	clear_0
   241                           
   242                           ; Clear objects allocated to BANK1 (252 bytes)
   243  0038DE  EE01  F000         	lfsr	0,__pbssBANK1
   244  0038E2  0EFC               	movlw	252
   245  0038E4                     clear_1:
   246  0038E4  6AEE               	clrf	postinc0,c
   247  0038E6  06E8               	decf	wreg,f,c
   248  0038E8  E1FD               	bnz	clear_1
   249                           
   250                           ; Clear objects allocated to BANK0 (45 bytes)
   251  0038EA  EE00  F060         	lfsr	0,__pbssBANK0
   252  0038EE  0E2D               	movlw	45
   253  0038F0                     clear_2:
   254  0038F0  6AEE               	clrf	postinc0,c
   255  0038F2  06E8               	decf	wreg,f,c
   256  0038F4  E1FD               	bnz	clear_2
   257                           
   258                           ; Clear objects allocated to COMRAM (34 bytes)
   259  0038F6  EE00  F001         	lfsr	0,__pbssCOMRAM
   260  0038FA  0E22               	movlw	34
   261  0038FC                     clear_3:
   262  0038FC  6AEE               	clrf	postinc0,c
   263  0038FE  06E8               	decf	wreg,f,c
   264  003900  E1FD               	bnz	clear_3
   265                           
   266                           ; Initialize objects allocated to BANK0 (10 bytes)
   267                           ; load TBLPTR registers with __pidataBANK0
   268  003902  0E0A               	movlw	low __pidataBANK0
   269  003904  6EF6               	movwf	tblptrl,c
   270  003906  0E3C               	movlw	high __pidataBANK0
   271  003908  6EF7               	movwf	tblptrh,c
   272  00390A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   273  00390C  6EF8               	movwf	tblptru,c
   274  00390E  EE00  F0B2         	lfsr	0,__pdataBANK0
   275  003912  EE10 F00A          	lfsr	1,10
   276  003916                     copy_data0:
   277  003916  0009               	tblrd		*+
   278  003918  CFF5 FFEE          	movff	tablat,postinc0
   279  00391C  50E5               	movf	postdec1,w,c
   280  00391E  50E1               	movf	fsr1l,w,c
   281  003920  E1FA               	bnz	copy_data0
   282  003922                     end_of_initialization:
   283                           	opt stack 0
   284  003922                     __end_of__initialization:
   285                           	opt stack 0
   286  003922  9042               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   287  003924  9242               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   288  003926  0E00               	movlw	low (__Lmediumconst shr (0+16))
   289  003928  6EF8               	movwf	tblptru,c
   290  00392A  0100               	movlb	0
   291  00392C  EF2B  F01C         	goto	_main	;jump to C main() function
   292                           tblptru	equ	0xFF8
   293                           tblptrh	equ	0xFF7
   294                           tblptrl	equ	0xFF6
   295                           tablat	equ	0xFF5
   296                           postinc0	equ	0xFEE
   297                           wreg	equ	0xFE8
   298                           postdec1	equ	0xFE5
   299                           fsr1h	equ	0xFE2
   300                           fsr1l	equ	0xFE1
   301                           
   302                           	psect	bssCOMRAM
   303  000001                     __pbssCOMRAM:
   304                           	opt stack 0
   305  000001                     _Green_Led_Counter:
   306                           	opt stack 0
   307  000001                     	ds	2
   308  000003                     _Red_Led_Counter:
   309                           	opt stack 0
   310  000003                     	ds	2
   311  000005                     _Train_Move_Pwm_Count:
   312                           	opt stack 0
   313  000005                     	ds	2
   314  000007                     _Train_Move_Pwm_Fast_Count:
   315                           	opt stack 0
   316  000007                     	ds	2
   317  000009                     _Button_Contact_Counter_LB:
   318                           	opt stack 0
   319  000009                     	ds	1
   320  00000A                     _Button_Contact_Counter_LF:
   321                           	opt stack 0
   322  00000A                     	ds	1
   323  00000B                     _Button_Contact_Counter_Middle:
   324                           	opt stack 0
   325  00000B                     	ds	1
   326  00000C                     _Button_Contact_Counter_RB:
   327                           	opt stack 0
   328  00000C                     	ds	1
   329  00000D                     _Button_Contact_Counter_RF:
   330                           	opt stack 0
   331  00000D                     	ds	1
   332  00000E                     _Button_Contact_Counter_Start:
   333                           	opt stack 0
   334  00000E                     	ds	1
   335  00000F                     _Button_Contact_Counter_Stop:
   336                           	opt stack 0
   337  00000F                     	ds	1
   338  000010                     _Reed_Contact_LB_Counter:
   339                           	opt stack 0
   340  000010                     	ds	1
   341  000011                     _Reed_Contact_LF_Counter:
   342                           	opt stack 0
   343  000011                     	ds	1
   344  000012                     _Reed_Contact_LMD_Counter:
   345                           	opt stack 0
   346  000012                     	ds	1
   347  000013                     _Reed_Contact_LMU_Counter:
   348                           	opt stack 0
   349  000013                     	ds	1
   350  000014                     _Reed_Contact_RB_Counter:
   351                           	opt stack 0
   352  000014                     	ds	1
   353  000015                     _Reed_Contact_RF_Counter:
   354                           	opt stack 0
   355  000015                     	ds	1
   356  000016                     _Reed_Contact_RMD_Counter:
   357                           	opt stack 0
   358  000016                     	ds	1
   359  000017                     _Reed_Contact_RMU_Counter:
   360                           	opt stack 0
   361  000017                     	ds	1
   362  000018                     _Stop_Program:
   363                           	opt stack 0
   364  000018                     	ds	1
   365  000019                     _Switch_Main:
   366                           	opt stack 0
   367  000019                     	ds	1
   368  00001A                     _Switch_Moutain:
   369                           	opt stack 0
   370  00001A                     	ds	1
   371  00001B                     _Switch_Program:
   372                           	opt stack 0
   373  00001B                     	ds	1
   374  00001C                     _Switch_Train_Move:
   375                           	opt stack 0
   376  00001C                     	ds	1
   377  00001D                     _eusart1RxCount:
   378                           	opt stack 0
   379  00001D                     	ds	1
   380  00001E                     _eusart1RxHead:
   381                           	opt stack 0
   382  00001E                     	ds	1
   383  00001F                     _eusart1RxTail:
   384                           	opt stack 0
   385  00001F                     	ds	1
   386  000020                     _eusart1TxBufferRemaining:
   387                           	opt stack 0
   388  000020                     	ds	1
   389  000021                     _eusart1TxHead:
   390                           	opt stack 0
   391  000021                     	ds	1
   392  000022                     _eusart1TxTail:
   393                           	opt stack 0
   394  000022                     	ds	1
   395                           tblptru	equ	0xFF8
   396                           tblptrh	equ	0xFF7
   397                           tblptrl	equ	0xFF6
   398                           tablat	equ	0xFF5
   399                           postinc0	equ	0xFEE
   400                           wreg	equ	0xFE8
   401                           postdec1	equ	0xFE5
   402                           fsr1h	equ	0xFE2
   403                           fsr1l	equ	0xFE1
   404                           
   405                           	psect	bssBANK0
   406  000060                     __pbssBANK0:
   407                           	opt stack 0
   408  000060                     Junction@Junction_Switch_Time:
   409                           	opt stack 0
   410  000060                     	ds	2
   411  000062                     Train_Move_Left_Brake@Train_Move_Wait_Time:
   412                           	opt stack 0
   413  000062                     	ds	2
   414  000064                     Train_Move_Left_Start@Train_Move_Wait_Time:
   415                           	opt stack 0
   416  000064                     	ds	2
   417  000066                     Train_Move_Right_Brake@Train_Move_Wait_Time:
   418                           	opt stack 0
   419  000066                     	ds	2
   420  000068                     Train_Move_Right_Start@Train_Move_Wait_Time:
   421                           	opt stack 0
   422  000068                     	ds	2
   423  00006A                     _Activate_Controls_Counter:
   424                           	opt stack 0
   425  00006A                     	ds	2
   426  00006C                     _Adjust_Counter:
   427                           	opt stack 0
   428  00006C                     	ds	2
   429  00006E                     _Led1_Counter:
   430                           	opt stack 0
   431  00006E                     	ds	2
   432  000070                     _Mountain_Delay_Counter:
   433                           	opt stack 0
   434  000070                     	ds	2
   435  000072                     _pData:
   436                           	opt stack 0
   437  000072                     	ds	2
   438  000074                     _pLen:
   439                           	opt stack 0
   440  000074                     	ds	2
   441  000076                     _Message_To_Translate:
   442                           	opt stack 0
   443  000076                     	ds	1
   444  000077                     _Received_Data:
   445                           	opt stack 0
   446  000077                     	ds	1
   447  000078                     _RxSwitch:
   448                           	opt stack 0
   449  000078                     	ds	1
   450  000079                     _Switch_Activate_Controls:
   451                           	opt stack 0
   452  000079                     	ds	1
   453  00007A                     _Switch_Adjust_LB:
   454                           	opt stack 0
   455  00007A                     	ds	1
   456  00007B                     _Switch_Adjust_LF:
   457                           	opt stack 0
   458  00007B                     	ds	1
   459  00007C                     _Switch_Adjust_RB:
   460                           	opt stack 0
   461  00007C                     	ds	1
   462  00007D                     _Switch_Adjust_RF:
   463                           	opt stack 0
   464  00007D                     	ds	1
   465  00007E                     _Switch_Init:
   466                           	opt stack 0
   467  00007E                     	ds	1
   468  00007F                     _Switch_Junction:
   469                           	opt stack 0
   470  00007F                     	ds	1
   471  000080                     _Switch_Train_Path:
   472                           	opt stack 0
   473  000080                     	ds	1
   474  000081                     _TrSwitch:
   475                           	opt stack 0
   476  000081                     	ds	1
   477  000082                     _Update_State_Machine:
   478                           	opt stack 0
   479  000082                     	ds	1
   480  000083                     _Data:
   481                           	opt stack 0
   482  000083                     	ds	10
   483                           tblptru	equ	0xFF8
   484                           tblptrh	equ	0xFF7
   485                           tblptrl	equ	0xFF6
   486                           tablat	equ	0xFF5
   487                           postinc0	equ	0xFEE
   488                           wreg	equ	0xFE8
   489                           postdec1	equ	0xFE5
   490                           fsr1h	equ	0xFE2
   491                           fsr1l	equ	0xFE1
   492                           
   493                           	psect	dataBANK0
   494  0000B2                     __pdataBANK0:
   495                           	opt stack 0
   496  0000B2                     Junction@Return_Val:
   497                           	opt stack 0
   498  0000B2                     	ds	1
   499  0000B3                     Left_Mountain_From_The_Left@Return_Val:
   500                           	opt stack 0
   501  0000B3                     	ds	1
   502  0000B4                     Left_Mountain_From_The_Right@Return_Val:
   503                           	opt stack 0
   504  0000B4                     	ds	1
   505  0000B5                     Right_Mountain_From_The_Left@Return_Val:
   506                           	opt stack 0
   507  0000B5                     	ds	1
   508  0000B6                     Right_Mountain_From_The_Right@Return_Val:
   509                           	opt stack 0
   510  0000B6                     	ds	1
   511  0000B7                     Train_Move_Left_Brake@Return_Val:
   512                           	opt stack 0
   513  0000B7                     	ds	1
   514  0000B8                     Train_Move_Left_Start@Return_Val:
   515                           	opt stack 0
   516  0000B8                     	ds	1
   517  0000B9                     Train_Move_Right_Brake@Return_Val:
   518                           	opt stack 0
   519  0000B9                     	ds	1
   520  0000BA                     Train_Move_Right_Start@Return_Val:
   521                           	opt stack 0
   522  0000BA                     	ds	1
   523  0000BB                     Train_Path@Return_Val:
   524                           	opt stack 0
   525  0000BB                     	ds	1
   526                           tblptru	equ	0xFF8
   527                           tblptrh	equ	0xFF7
   528                           tblptrl	equ	0xFF6
   529                           tablat	equ	0xFF5
   530                           postinc0	equ	0xFEE
   531                           wreg	equ	0xFE8
   532                           postdec1	equ	0xFE5
   533                           fsr1h	equ	0xFE2
   534                           fsr1l	equ	0xFE1
   535                           
   536                           	psect	bssBANK1
   537  000100                     __pbssBANK1:
   538                           	opt stack 0
   539  000100                     _eusart1RxBuffer:
   540                           	opt stack 0
   541  000100                     	ds	126
   542  00017E                     _eusart1TxBuffer:
   543                           	opt stack 0
   544  00017E                     	ds	126
   545                           tblptru	equ	0xFF8
   546                           tblptrh	equ	0xFF7
   547                           tblptrl	equ	0xFF6
   548                           tablat	equ	0xFF5
   549                           postinc0	equ	0xFEE
   550                           wreg	equ	0xFE8
   551                           postdec1	equ	0xFE5
   552                           fsr1h	equ	0xFE2
   553                           fsr1l	equ	0xFE1
   554                           
   555                           	psect	bssBIGRAM
   556  0001FC                     __pbssBIGRAM:
   557                           	opt stack 0
   558  0001FC                     _API:
   559                           	opt stack 0
   560  0001FC                     	ds	288
   561  00031C                     _API_RW:
   562                           	opt stack 0
   563  00031C                     	ds	288
   564                           tblptru	equ	0xFF8
   565                           tblptrh	equ	0xFF7
   566                           tblptrl	equ	0xFF6
   567                           tablat	equ	0xFF5
   568                           postinc0	equ	0xFEE
   569                           wreg	equ	0xFE8
   570                           postdec1	equ	0xFE5
   571                           fsr1h	equ	0xFE2
   572                           fsr1l	equ	0xFE1
   573                           
   574                           	psect	cstackBANK0
   575  00008D                     __pcstackBANK0:
   576                           	opt stack 0
   577  00008D                     ??_isdigit:
   578  00008D                     ?_GETxAPIxVAL:
   579                           	opt stack 0
   580  00008D                     ?_GETxAPIxRW:
   581                           	opt stack 0
   582  00008D                     ?___wmul:
   583                           	opt stack 0
   584  00008D                     ?___lwdiv:
   585                           	opt stack 0
   586  00008D                     EUSART1_Read@readValue:
   587                           	opt stack 0
   588  00008D                     putch@data:
   589                           	opt stack 0
   590  00008D                     Green_Led@Operation:
   591                           	opt stack 0
   592  00008D                     Red_Led@Operation:
   593                           	opt stack 0
   594  00008D                     EUSART1_Initialize@baud_rate:
   595                           	opt stack 0
   596  00008D                     APIxInitialize@i:
   597                           	opt stack 0
   598  00008D                     ___wmul@multiplier:
   599                           	opt stack 0
   600  00008D                     ___lwdiv@dividend:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x0
   604  00008D                     	ds	1
   605  00008E                     _isdigit$1858:
   606                           	opt stack 0
   607                           
   608                           ; 1 bytes @ 0x1
   609  00008E                     	ds	1
   610  00008F                     GETxAPIxRW@index:
   611                           	opt stack 0
   612  00008F                     GETxAPIxVAL@index:
   613                           	opt stack 0
   614  00008F                     isdigit@c:
   615                           	opt stack 0
   616  00008F                     ___wmul@multiplicand:
   617                           	opt stack 0
   618  00008F                     ___lwdiv@divisor:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x2
   622  00008F                     	ds	1
   623  000090                     SETxAPIxVAL@value:
   624                           	opt stack 0
   625  000090                     SetDCPWM1@dutycycle:
   626                           	opt stack 0
   627                           
   628                           ; 2 bytes @ 0x3
   629  000090                     	ds	1
   630  000091                     ___lwdiv@counter:
   631                           	opt stack 0
   632  000091                     ___wmul@product:
   633                           	opt stack 0
   634                           
   635                           ; 2 bytes @ 0x4
   636  000091                     	ds	1
   637  000092                     ??_SetDCPWM1:
   638  000092                     ___lwdiv@quotient:
   639                           	opt stack 0
   640                           
   641                           ; 2 bytes @ 0x5
   642  000092                     	ds	1
   643  000093                     ?_atoi:
   644                           	opt stack 0
   645  000093                     atoi@s:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0x6
   649  000093                     	ds	1
   650  000094                     ?___lwmod:
   651                           	opt stack 0
   652  000094                     SETxAPIxVAL@index:
   653                           	opt stack 0
   654  000094                     SetDCPWM1@DCycle:
   655                           	opt stack 0
   656  000094                     ___lwmod@dividend:
   657                           	opt stack 0
   658                           
   659                           ; 2 bytes @ 0x7
   660  000094                     	ds	1
   661  000095                     ??_atoi:
   662  000095                     Junction@Straight_Bend:
   663                           	opt stack 0
   664  000095                     SETxPWM@speed:
   665                           	opt stack 0
   666                           
   667                           ; 2 bytes @ 0x8
   668  000095                     	ds	1
   669  000096                     ??_Debounce_Inputs:
   670  000096                     Junction@Junction_Left_Right:
   671                           	opt stack 0
   672  000096                     ___lwmod@divisor:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0x9
   676  000096                     	ds	1
   677  000097                     SETxPWM@direction:
   678                           	opt stack 0
   679  000097                     atoi@sign:
   680                           	opt stack 0
   681                           
   682                           ; 1 bytes @ 0xA
   683  000097                     	ds	1
   684  000098                     ??_SETxPWM:
   685  000098                     ___lwmod@counter:
   686                           	opt stack 0
   687  000098                     atoi@a:
   688                           	opt stack 0
   689                           
   690                           ; 2 bytes @ 0xB
   691  000098                     	ds	1
   692  000099                     ?_printf:
   693                           	opt stack 0
   694  000099                     printf@f:
   695                           	opt stack 0
   696                           
   697                           ; 2 bytes @ 0xC
   698  000099                     	ds	1
   699  00009A                     SETxPWM@pwm_speed:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0xD
   703  00009A                     	ds	2
   704  00009C                     Right_Mountain_From_The_Right@rc:
   705                           	opt stack 0
   706  00009C                     Left_Mountain_From_The_Right@rc:
   707                           	opt stack 0
   708  00009C                     Left_Mountain_From_The_Left@rc:
   709                           	opt stack 0
   710  00009C                     Right_Mountain_From_The_Left@rc:
   711                           	opt stack 0
   712                           
   713                           ; 1 bytes @ 0xF
   714  00009C                     	ds	1
   715  00009D                     Train_Path@To:
   716                           	opt stack 0
   717                           
   718                           ; 1 bytes @ 0x10
   719  00009D                     	ds	1
   720  00009E                     Train_Path@From:
   721                           	opt stack 0
   722                           
   723                           ; 1 bytes @ 0x11
   724  00009E                     	ds	1
   725  00009F                     ??_Update_StateMchn:
   726  00009F                     ??_printf:
   727                           
   728                           ; 1 bytes @ 0x12
   729  00009F                     	ds	1
   730  0000A0                     printf@ap:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x13
   734  0000A0                     	ds	2
   735  0000A2                     printf@flag:
   736                           	opt stack 0
   737                           
   738                           ; 1 bytes @ 0x15
   739  0000A2                     	ds	1
   740  0000A3                     printf@prec:
   741                           	opt stack 0
   742                           
   743                           ; 1 bytes @ 0x16
   744  0000A3                     	ds	1
   745  0000A4                     printf@val:
   746                           	opt stack 0
   747                           
   748                           ; 2 bytes @ 0x17
   749  0000A4                     	ds	2
   750  0000A6                     printf@c:
   751                           	opt stack 0
   752                           
   753                           ; 1 bytes @ 0x19
   754  0000A6                     	ds	1
   755  0000A7                     SENDxMESSAGE@value:
   756                           	opt stack 0
   757                           
   758                           ; 2 bytes @ 0x1A
   759  0000A7                     	ds	2
   760  0000A9                     SENDxMESSAGE@index:
   761                           	opt stack 0
   762                           
   763                           ; 1 bytes @ 0x1C
   764  0000A9                     	ds	1
   765  0000AA                     TranslateMessage@Value:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0x1D
   769  0000AA                     	ds	2
   770  0000AC                     TranslateMessage@Index:
   771                           	opt stack 0
   772                           
   773                           ; 2 bytes @ 0x1F
   774  0000AC                     	ds	2
   775  0000AE                     ??_READxRECEIVEDxMESSAGE:
   776                           
   777                           ; 1 bytes @ 0x21
   778  0000AE                     	ds	4
   779  0000B2                     tblptru	equ	0xFF8
   780                           tblptrh	equ	0xFF7
   781                           tblptrl	equ	0xFF6
   782                           tablat	equ	0xFF5
   783                           postinc0	equ	0xFEE
   784                           wreg	equ	0xFE8
   785                           postdec1	equ	0xFE5
   786                           fsr1h	equ	0xFE2
   787                           fsr1l	equ	0xFE1
   788                           
   789                           ; 1 bytes @ 0x25
   790                           
   791                           	psect	cstackCOMRAM
   792  000023                     __pcstackCOMRAM:
   793                           	opt stack 0
   794  000023                     ??_tc_high:
   795  000023                     
   796                           ; 1 bytes @ 0x0
   797  000023                     	ds	14
   798  000031                     ??_tc_low:
   799                           
   800                           ; 1 bytes @ 0xE
   801  000031                     	ds	17
   802                           tblptru	equ	0xFF8
   803                           tblptrh	equ	0xFF7
   804                           tblptrl	equ	0xFF6
   805                           tablat	equ	0xFF5
   806                           postinc0	equ	0xFEE
   807                           wreg	equ	0xFE8
   808                           postdec1	equ	0xFE5
   809                           fsr1h	equ	0xFE2
   810                           fsr1l	equ	0xFE1
   811                           
   812 ;;
   813 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   814 ;;
   815 ;; *************** function _main *****************
   816 ;; Defined at:
   817 ;;		line 105 in file "../Main.c"
   818 ;; Parameters:    Size  Location     Type
   819 ;;		None
   820 ;; Auto vars:     Size  Location     Type
   821 ;;		None
   822 ;; Return value:  Size  Location     Type
   823 ;;                  1    wreg      void 
   824 ;; Registers used:
   825 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   826 ;; Tracked objects:
   827 ;;		On entry : 0/0
   828 ;;		On exit  : 0/0
   829 ;;		Unchanged: 0/0
   830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   831 ;;      Params:         0       0       0       0       0       0       0       0       0
   832 ;;      Locals:         0       0       0       0       0       0       0       0       0
   833 ;;      Temps:          0       0       0       0       0       0       0       0       0
   834 ;;      Totals:         0       0       0       0       0       0       0       0       0
   835 ;;Total ram usage:        0 bytes
   836 ;; Hardware stack levels required when called:    8
   837 ;; This function calls:
   838 ;;		_APIxInitialize
   839 ;;		_EUSART1_Initialize
   840 ;;		_Init_Pwm
   841 ;;		_Init_Timers
   842 ;;		_READxRECEIVEDxMESSAGE
   843 ;;		_Update_StateMchn
   844 ;; This function is called by:
   845 ;;		Startup code after reset
   846 ;; This function uses a non-reentrant model
   847 ;;
   848                           
   849                           	psect	text0
   850  003856                     __ptext0:
   851                           	opt stack 0
   852  003856                     _main:
   853                           	opt stack 23
   854                           
   855                           ;Main.c: 107: TRISA = 0xFF;TRISB = 0xFF;TRISC = 0xFF;TRISD = 0xFF;TRISE = 0xFF;
   856                           
   857                           ;incstack = 0
   858  003856  6892               	setf	3986,c	;volatile
   859  003858  6893               	setf	3987,c	;volatile
   860  00385A  6894               	setf	3988,c	;volatile
   861  00385C  6895               	setf	3989,c	;volatile
   862  00385E  6896               	setf	3990,c	;volatile
   863                           
   864                           ;Main.c: 108: ADCON1=0x0F;
   865  003860  0E0F               	movlw	15
   866  003862  6EC1               	movwf	4033,c	;volatile
   867                           
   868                           ;Main.c: 109: CMCON=0x07;
   869  003864  0E07               	movlw	7
   870  003866  6EB4               	movwf	4020,c	;volatile
   871                           
   872                           ;Main.c: 110: TRISAbits.TRISA4=0;TRISDbits.TRISD5=0;TRISDbits.TRISD6=0;;
   873  003868  9892               	bcf	3986,4,c	;volatile
   874  00386A  9A95               	bcf	3989,5,c	;volatile
   875  00386C  9C95               	bcf	3989,6,c	;volatile
   876                           
   877                           ;Main.c: 111: PORTAbits.RA4 = 0;
   878  00386E  9880               	bcf	3968,4,c	;volatile
   879                           
   880                           ;Main.c: 112: PORTDbits.RD6 = 0;
   881  003870  9C83               	bcf	3971,6,c	;volatile
   882                           
   883                           ;Main.c: 113: PORTDbits.RD5 = 0;
   884  003872  9A83               	bcf	3971,5,c	;volatile
   885                           
   886                           ;Main.c: 115: TRISAbits.TRISA0=0;TRISAbits.TRISA1=0;TRISAbits.TRISA2=0;TRISAbits.TRISA3=
      +                          0;;
   887  003874  9092               	bcf	3986,0,c	;volatile
   888  003876  9292               	bcf	3986,1,c	;volatile
   889  003878  9492               	bcf	3986,2,c	;volatile
   890  00387A  9692               	bcf	3986,3,c	;volatile
   891                           
   892                           ;Main.c: 116: PORTAbits.RA3 = 0;
   893  00387C  9680               	bcf	3968,3,c	;volatile
   894                           
   895                           ;Main.c: 117: PORTAbits.RA2 = 0;
   896  00387E  9480               	bcf	3968,2,c	;volatile
   897                           
   898                           ;Main.c: 118: PORTAbits.RA1 = 0;
   899  003880  9280               	bcf	3968,1,c	;volatile
   900                           
   901                           ;Main.c: 119: PORTAbits.RA0 = 0;
   902  003882  9080               	bcf	3968,0,c	;volatile
   903                           
   904                           ;Main.c: 121: TRISDbits.TRISD2=1;TRISDbits.TRISD3=1;TRISDbits.TRISD0=1;TRISDbits.TRISD1=
      +                          1;TRISCbits.TRISC1=1;TRISDbits.TRISD4=1;TRISEbits.TRISE0=1;TRISEbits.TRISE1=1;;
   905  003884  8495               	bsf	3989,2,c	;volatile
   906  003886  8695               	bsf	3989,3,c	;volatile
   907  003888  8095               	bsf	3989,0,c	;volatile
   908  00388A  8295               	bsf	3989,1,c	;volatile
   909  00388C  8294               	bsf	3988,1,c	;volatile
   910  00388E  8895               	bsf	3989,4,c	;volatile
   911  003890  8096               	bsf	3990,0,c	;volatile
   912  003892  8296               	bsf	3990,1,c	;volatile
   913                           
   914                           ;Main.c: 122: TRISBbits.TRISB0=1;TRISBbits.TRISB1=1;TRISBbits.TRISB2=1;TRISBbits.TRISB3=
      +                          1;TRISBbits.TRISB4=1;TRISBbits.TRISB5=1;TRISDbits.TRISD7=1;;
   915  003894  8093               	bsf	3987,0,c	;volatile
   916  003896  8293               	bsf	3987,1,c	;volatile
   917  003898  8493               	bsf	3987,2,c	;volatile
   918  00389A  8693               	bsf	3987,3,c	;volatile
   919  00389C  8893               	bsf	3987,4,c	;volatile
   920  00389E  8A93               	bsf	3987,5,c	;volatile
   921  0038A0  8E95               	bsf	3989,7,c	;volatile
   922                           
   923                           ;Main.c: 123: APIxInitialize();
   924  0038A2  ECA8  F00D         	call	_APIxInitialize	;wreg free
   925                           
   926                           ;Main.c: 124: Init_Pwm();
   927  0038A6  ECC0  F01D         	call	_Init_Pwm	;wreg free
   928                           
   929                           ;Main.c: 125: Init_Timers();
   930  0038AA  ECF2  F01D         	call	_Init_Timers	;wreg free
   931                           
   932                           ;Main.c: 126: EUSART1_Initialize();
   933  0038AE  ECC9  F01C         	call	_EUSART1_Initialize	;wreg free
   934  0038B2                     l8597:
   935                           
   936                           ;Main.c: 129: {
   937                           ;Main.c: 130: if (1 == Update_State_Machine)
   938  0038B2  0100               	movlb	0	; () banked
   939  0038B4  0582               	decf	_Update_State_Machine& (0+255),w,b
   940  0038B6  A4D8               	btfss	status,2,c
   941  0038B8  D005               	goto	l8603
   942                           
   943                           ; BSR set to: 0
   944                           ;Main.c: 131: {
   945                           ;Main.c: 132: Update_State_Machine = 0;
   946  0038BA  0E00               	movlw	0
   947  0038BC  0100               	movlb	0	; () banked
   948  0038BE  6F82               	movwf	_Update_State_Machine& (0+255),b
   949                           
   950                           ; BSR set to: 0
   951                           ;Main.c: 133: Update_StateMchn();
   952  0038C0  EC23  F004         	call	_Update_StateMchn	;wreg free
   953  0038C4                     l8603:
   954                           
   955                           ;Main.c: 134: }
   956                           ;Main.c: 136: READxRECEIVEDxMESSAGE();
   957  0038C4  EC75  F013         	call	_READxRECEIVEDxMESSAGE	;wreg free
   958  0038C8  D7F4               	goto	l8597
   959  0038CA                     __end_of_main:
   960                           	opt stack 0
   961                           tblptru	equ	0xFF8
   962                           tblptrh	equ	0xFF7
   963                           tblptrl	equ	0xFF6
   964                           tablat	equ	0xFF5
   965                           postinc0	equ	0xFEE
   966                           wreg	equ	0xFE8
   967                           postdec1	equ	0xFE5
   968                           fsr1h	equ	0xFE2
   969                           fsr1l	equ	0xFE1
   970                           status	equ	0xFD8
   971                           
   972 ;; *************** function _Update_StateMchn *****************
   973 ;; Defined at:
   974 ;;		line 40 in file "../State_Mchn.c"
   975 ;; Parameters:    Size  Location     Type
   976 ;;		None
   977 ;; Auto vars:     Size  Location     Type
   978 ;;		None
   979 ;; Return value:  Size  Location     Type
   980 ;;                  1    wreg      void 
   981 ;; Registers used:
   982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   983 ;; Tracked objects:
   984 ;;		On entry : 0/0
   985 ;;		On exit  : 0/0
   986 ;;		Unchanged: 0/0
   987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   988 ;;      Params:         0       0       0       0       0       0       0       0       0
   989 ;;      Locals:         0       0       0       0       0       0       0       0       0
   990 ;;      Temps:          0       2       0       0       0       0       0       0       0
   991 ;;      Totals:         0       2       0       0       0       0       0       0       0
   992 ;;Total ram usage:        2 bytes
   993 ;; Hardware stack levels used:    1
   994 ;; Hardware stack levels required when called:    7
   995 ;; This function calls:
   996 ;;		_Debounce_Inputs
   997 ;;		_Eeprom_Store
   998 ;;		_GETxAPIxVAL
   999 ;;		_Green_Led
  1000 ;;		_Junction
  1001 ;;		_Red_Led
  1002 ;;		_SETxAPIxVAL
  1003 ;;		_Train_Path
  1004 ;; This function is called by:
  1005 ;;		_main
  1006 ;; This function uses a non-reentrant model
  1007 ;;
  1008                           
  1009                           	psect	text1
  1010  000846                     __ptext1:
  1011                           	opt stack 0
  1012  000846                     _Update_StateMchn:
  1013                           	opt stack 23
  1014                           
  1015                           ;State_Mchn.c: 42: if (GETxAPIxVAL(72)){
  1016                           
  1017                           ;incstack = 0
  1018  000846  0E48               	movlw	72
  1019  000848  ECD2  F01D         	call	_GETxAPIxVAL
  1020  00084C  0100               	movlb	0	; () banked
  1021  00084E  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1022  000850  0100               	movlb	0	; () banked
  1023  000852  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1024  000854  B4D8               	btfsc	status,2,c
  1025  000856  D009               	goto	l164
  1026                           
  1027                           ; BSR set to: 0
  1028                           ;State_Mchn.c: 43: SETxAPIxVAL(72, 0);
  1029  000858  0E00               	movlw	0
  1030  00085A  0100               	movlb	0	; () banked
  1031  00085C  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1032  00085E  0E00               	movlw	0
  1033  000860  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  1034  000862  0E48               	movlw	72
  1035  000864  EC11  F01D         	call	_SETxAPIxVAL
  1036  000868  00FF               	reset		;# 
  1037  00086A                     l164:
  1038                           
  1039                           ;State_Mchn.c: 45: }
  1040                           ;State_Mchn.c: 47: Debounce_Inputs();
  1041  00086A  ECF0  F009         	call	_Debounce_Inputs	;wreg free
  1042                           
  1043                           ;State_Mchn.c: 49: switch (Switch_Main)
  1044  00086E  EFD6  F009         	goto	l8425
  1045  000872                     l7921:
  1046                           
  1047                           ;State_Mchn.c: 52: if (GETxAPIxVAL(74)){
  1048  000872  0E4A               	movlw	74
  1049  000874  ECD2  F01D         	call	_GETxAPIxVAL
  1050  000878  0100               	movlb	0	; () banked
  1051  00087A  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1052  00087C  0100               	movlb	0	; () banked
  1053  00087E  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1054  000880  B4D8               	btfsc	status,2,c
  1055  000882  D014               	goto	l7927
  1056                           
  1057                           ; BSR set to: 0
  1058                           ;State_Mchn.c: 53: if(Junction(0, 1) == 0){
  1059  000884  0E01               	movlw	1
  1060  000886  0100               	movlb	0	; () banked
  1061  000888  6F95               	movwf	Junction@Straight_Bend& (0+255),b
  1062  00088A  0E00               	movlw	0
  1063  00088C  ECCB  F014         	call	_Junction
  1064  000890  0900               	iorlw	0
  1065  000892  A4D8               	btfss	status,2,c
  1066  000894  EFE1  F009         	goto	l8427
  1067                           
  1068                           ;State_Mchn.c: 54: SETxAPIxVAL(74, 0);
  1069  000898  0E00               	movlw	0
  1070  00089A  0100               	movlb	0	; () banked
  1071  00089C  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1072  00089E  0E00               	movlw	0
  1073  0008A0  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  1074  0008A2  0E4A               	movlw	74
  1075  0008A4  EC11  F01D         	call	_SETxAPIxVAL
  1076                           
  1077                           ;State_Mchn.c: 55: }
  1078                           ;State_Mchn.c: 56: }
  1079  0008A8  EFE1  F009         	goto	l8427
  1080  0008AC                     l7927:
  1081                           
  1082                           ;State_Mchn.c: 57: else if (GETxAPIxVAL(73)){
  1083  0008AC  0E49               	movlw	73
  1084  0008AE  ECD2  F01D         	call	_GETxAPIxVAL
  1085  0008B2  0100               	movlb	0	; () banked
  1086  0008B4  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1087  0008B6  0100               	movlb	0	; () banked
  1088  0008B8  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1089  0008BA  B4D8               	btfsc	status,2,c
  1090  0008BC  D014               	goto	l7933
  1091                           
  1092                           ; BSR set to: 0
  1093                           ;State_Mchn.c: 58: if(Junction(0, 0) == 0){
  1094  0008BE  0E00               	movlw	0
  1095  0008C0  0100               	movlb	0	; () banked
  1096  0008C2  6F95               	movwf	Junction@Straight_Bend& (0+255),b
  1097  0008C4  0E00               	movlw	0
  1098  0008C6  ECCB  F014         	call	_Junction
  1099  0008CA  0900               	iorlw	0
  1100  0008CC  A4D8               	btfss	status,2,c
  1101  0008CE  EFE1  F009         	goto	l8427
  1102                           
  1103                           ;State_Mchn.c: 59: SETxAPIxVAL(73, 0);
  1104  0008D2  0E00               	movlw	0
  1105  0008D4  0100               	movlb	0	; () banked
  1106  0008D6  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1107  0008D8  0E00               	movlw	0
  1108  0008DA  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  1109  0008DC  0E49               	movlw	73
  1110  0008DE  EC11  F01D         	call	_SETxAPIxVAL
  1111                           
  1112                           ;State_Mchn.c: 60: }
  1113                           ;State_Mchn.c: 61: }
  1114  0008E2  EFE1  F009         	goto	l8427
  1115  0008E6                     l7933:
  1116                           
  1117                           ;State_Mchn.c: 62: else if (GETxAPIxVAL(76)){
  1118  0008E6  0E4C               	movlw	76
  1119  0008E8  ECD2  F01D         	call	_GETxAPIxVAL
  1120  0008EC  0100               	movlb	0	; () banked
  1121  0008EE  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1122  0008F0  0100               	movlb	0	; () banked
  1123  0008F2  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1124  0008F4  B4D8               	btfsc	status,2,c
  1125  0008F6  D014               	goto	l7939
  1126                           
  1127                           ; BSR set to: 0
  1128                           ;State_Mchn.c: 63: if(Junction(1, 1) == 0){
  1129  0008F8  0E01               	movlw	1
  1130  0008FA  0100               	movlb	0	; () banked
  1131  0008FC  6F95               	movwf	Junction@Straight_Bend& (0+255),b
  1132  0008FE  0E01               	movlw	1
  1133  000900  ECCB  F014         	call	_Junction
  1134  000904  0900               	iorlw	0
  1135  000906  A4D8               	btfss	status,2,c
  1136  000908  EFE1  F009         	goto	l8427
  1137                           
  1138                           ;State_Mchn.c: 64: SETxAPIxVAL(76, 0);
  1139  00090C  0E00               	movlw	0
  1140  00090E  0100               	movlb	0	; () banked
  1141  000910  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1142  000912  0E00               	movlw	0
  1143  000914  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  1144  000916  0E4C               	movlw	76
  1145  000918  EC11  F01D         	call	_SETxAPIxVAL
  1146                           
  1147                           ;State_Mchn.c: 65: }
  1148                           ;State_Mchn.c: 66: }
  1149  00091C  EFE1  F009         	goto	l8427
  1150  000920                     l7939:
  1151                           
  1152                           ;State_Mchn.c: 67: else if (GETxAPIxVAL(75)){
  1153  000920  0E4B               	movlw	75
  1154  000922  ECD2  F01D         	call	_GETxAPIxVAL
  1155  000926  0100               	movlb	0	; () banked
  1156  000928  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1157  00092A  0100               	movlb	0	; () banked
  1158  00092C  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1159  00092E  B4D8               	btfsc	status,2,c
  1160  000930  D014               	goto	l7945
  1161                           
  1162                           ; BSR set to: 0
  1163                           ;State_Mchn.c: 68: if(Junction(1, 0) == 0){
  1164  000932  0E00               	movlw	0
  1165  000934  0100               	movlb	0	; () banked
  1166  000936  6F95               	movwf	Junction@Straight_Bend& (0+255),b
  1167  000938  0E01               	movlw	1
  1168  00093A  ECCB  F014         	call	_Junction
  1169  00093E  0900               	iorlw	0
  1170  000940  A4D8               	btfss	status,2,c
  1171  000942  EFE1  F009         	goto	l8427
  1172                           
  1173                           ;State_Mchn.c: 69: SETxAPIxVAL(75, 0);
  1174  000946  0E00               	movlw	0
  1175  000948  0100               	movlb	0	; () banked
  1176  00094A  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1177  00094C  0E00               	movlw	0
  1178  00094E  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  1179  000950  0E4B               	movlw	75
  1180  000952  EC11  F01D         	call	_SETxAPIxVAL
  1181                           
  1182                           ;State_Mchn.c: 70: }
  1183                           ;State_Mchn.c: 71: }
  1184  000956  EFE1  F009         	goto	l8427
  1185  00095A                     l7945:
  1186                           
  1187                           ;State_Mchn.c: 72: else if (GETxAPIxVAL(77)){
  1188  00095A  0E4D               	movlw	77
  1189  00095C  ECD2  F01D         	call	_GETxAPIxVAL
  1190  000960  0100               	movlb	0	; () banked
  1191  000962  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1192  000964  0100               	movlb	0	; () banked
  1193  000966  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1194  000968  B4D8               	btfsc	status,2,c
  1195  00096A  D012               	goto	l7949
  1196                           
  1197                           ; BSR set to: 0
  1198                           ;State_Mchn.c: 73: SETxAPIxVAL(69, 1);
  1199  00096C  0E00               	movlw	0
  1200  00096E  0100               	movlb	0	; () banked
  1201  000970  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1202  000972  0E01               	movlw	1
  1203  000974  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  1204  000976  0E45               	movlw	69
  1205  000978  EC11  F01D         	call	_SETxAPIxVAL
  1206                           
  1207                           ;State_Mchn.c: 74: SETxAPIxVAL(77, 0);
  1208  00097C  0E00               	movlw	0
  1209  00097E  0100               	movlb	0	; () banked
  1210  000980  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1211  000982  0E00               	movlw	0
  1212  000984  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  1213  000986  0E4D               	movlw	77
  1214  000988  EC11  F01D         	call	_SETxAPIxVAL
  1215                           
  1216                           ;State_Mchn.c: 75: }
  1217  00098C  EFE1  F009         	goto	l8427
  1218  000990                     l7949:
  1219                           
  1220                           ;State_Mchn.c: 76: else if (GETxAPIxVAL(78)){
  1221  000990  0E4E               	movlw	78
  1222  000992  ECD2  F01D         	call	_GETxAPIxVAL
  1223  000996  0100               	movlb	0	; () banked
  1224  000998  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1225  00099A  0100               	movlb	0	; () banked
  1226  00099C  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1227  00099E  B4D8               	btfsc	status,2,c
  1228  0009A0  D012               	goto	l7953
  1229                           
  1230                           ; BSR set to: 0
  1231                           ;State_Mchn.c: 77: SETxAPIxVAL(69, 0);
  1232  0009A2  0E00               	movlw	0
  1233  0009A4  0100               	movlb	0	; () banked
  1234  0009A6  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1235  0009A8  0E00               	movlw	0
  1236  0009AA  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  1237  0009AC  0E45               	movlw	69
  1238  0009AE  EC11  F01D         	call	_SETxAPIxVAL
  1239                           
  1240                           ;State_Mchn.c: 78: SETxAPIxVAL(78, 0);
  1241  0009B2  0E00               	movlw	0
  1242  0009B4  0100               	movlb	0	; () banked
  1243  0009B6  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1244  0009B8  0E00               	movlw	0
  1245  0009BA  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  1246  0009BC  0E4E               	movlw	78
  1247  0009BE  EC11  F01D         	call	_SETxAPIxVAL
  1248                           
  1249                           ;State_Mchn.c: 79: }
  1250  0009C2  EFE1  F009         	goto	l8427
  1251  0009C6                     l7953:
  1252                           
  1253                           ;State_Mchn.c: 80: else if (GETxAPIxVAL(68) != GETxAPIxVAL(79)){
  1254  0009C6  0E44               	movlw	68
  1255  0009C8  ECD2  F01D         	call	_GETxAPIxVAL
  1256  0009CC  C08D  F09F         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1257  0009D0  C08E  F0A0         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1258  0009D4  0E4F               	movlw	79
  1259  0009D6  ECD2  F01D         	call	_GETxAPIxVAL
  1260  0009DA  0100               	movlb	0	; () banked
  1261  0009DC  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1262  0009DE  0100               	movlb	0	; () banked
  1263  0009E0  199F               	xorwf	??_Update_StateMchn& (0+255),w,b
  1264  0009E2  E106               	bnz	u8130
  1265  0009E4  0100               	movlb	0	; () banked
  1266  0009E6  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1267  0009E8  0100               	movlb	0	; () banked
  1268  0009EA  19A0               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1269  0009EC  B4D8               	btfsc	status,2,c
  1270  0009EE  D393               	goto	l8269
  1271  0009F0                     u8130:
  1272                           
  1273                           ; BSR set to: 0
  1274                           ;State_Mchn.c: 81: SETxAPIxVAL(68, GETxAPIxVAL(79));
  1275  0009F0  0E4F               	movlw	79
  1276  0009F2  ECD2  F01D         	call	_GETxAPIxVAL
  1277  0009F6  C08D  F090         	movff	?_GETxAPIxVAL,SETxAPIxVAL@value
  1278  0009FA  C08E  F091         	movff	?_GETxAPIxVAL+1,SETxAPIxVAL@value+1
  1279  0009FE  0E44               	movlw	68
  1280  000A00  EC11  F01D         	call	_SETxAPIxVAL
  1281                           
  1282                           ;State_Mchn.c: 82: }
  1283  000A04  EFE1  F009         	goto	l8427
  1284  000A08                     l7957:
  1285  000A08  0E00               	movlw	0
  1286  000A0A  ECAD  F01B         	call	_Green_Led
  1287                           
  1288                           ;State_Mchn.c: 88: Red_Led(0);
  1289  000A0E  0E00               	movlw	0
  1290  000A10  EC6B  F01B         	call	_Red_Led
  1291                           
  1292                           ;State_Mchn.c: 89: Switch_Init = 1;
  1293  000A14  0E01               	movlw	1
  1294  000A16  D012               	goto	L1
  1295  000A18                     l7961:
  1296                           
  1297                           ; BSR set to: 0
  1298  000A18  0E23               	movlw	35
  1299  000A1A  ECD2  F01D         	call	_GETxAPIxVAL
  1300  000A1E  0100               	movlb	0	; () banked
  1301  000A20  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1302  000A22  0100               	movlb	0	; () banked
  1303  000A24  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1304  000A26  B4D8               	btfsc	status,2,c
  1305  000A28  D00D               	goto	l7967
  1306                           
  1307                           ; BSR set to: 0
  1308                           ;State_Mchn.c: 93: {
  1309                           ;State_Mchn.c: 94: SETxAPIxVAL(39, 1);
  1310  000A2A  0E00               	movlw	0
  1311  000A2C  0100               	movlb	0	; () banked
  1312  000A2E  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1313  000A30  0E01               	movlw	1
  1314  000A32  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  1315  000A34  0E27               	movlw	39
  1316  000A36  EC11  F01D         	call	_SETxAPIxVAL
  1317  000A3A  D04B               	goto	l7989
  1318  000A3C                     L1:
  1319  000A3C  0100               	movlb	0	; () banked
  1320  000A3E  6F7E               	movwf	_Switch_Init& (0+255),b
  1321                           
  1322                           ;State_Mchn.c: 96: break;
  1323  000A40  EFE1  F009         	goto	l8427
  1324  000A44                     l7967:
  1325                           
  1326                           ; BSR set to: 0
  1327                           ;State_Mchn.c: 97: }
  1328                           ;State_Mchn.c: 98: if(GETxAPIxVAL(36))
  1329  000A44  0E24               	movlw	36
  1330  000A46  ECD2  F01D         	call	_GETxAPIxVAL
  1331  000A4A  0100               	movlb	0	; () banked
  1332  000A4C  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1333  000A4E  0100               	movlb	0	; () banked
  1334  000A50  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1335  000A52  B4D8               	btfsc	status,2,c
  1336  000A54  D009               	goto	l7973
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;State_Mchn.c: 99: {
  1340                           ;State_Mchn.c: 100: SETxAPIxVAL(39, 2);
  1341  000A56  0E00               	movlw	0
  1342  000A58  0100               	movlb	0	; () banked
  1343  000A5A  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1344  000A5C  0E02               	movlw	2
  1345  000A5E  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  1346  000A60  0E27               	movlw	39
  1347  000A62  EC11  F01D         	call	_SETxAPIxVAL
  1348  000A66  D035               	goto	l7989
  1349  000A68                     l7973:
  1350                           
  1351                           ; BSR set to: 0
  1352                           ;State_Mchn.c: 103: }
  1353                           ;State_Mchn.c: 104: if(GETxAPIxVAL(37))
  1354  000A68  0E25               	movlw	37
  1355  000A6A  ECD2  F01D         	call	_GETxAPIxVAL
  1356  000A6E  0100               	movlb	0	; () banked
  1357  000A70  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1358  000A72  0100               	movlb	0	; () banked
  1359  000A74  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1360  000A76  B4D8               	btfsc	status,2,c
  1361  000A78  D009               	goto	l7979
  1362                           
  1363                           ; BSR set to: 0
  1364                           ;State_Mchn.c: 105: {
  1365                           ;State_Mchn.c: 106: SETxAPIxVAL(39, 3);
  1366  000A7A  0E00               	movlw	0
  1367  000A7C  0100               	movlb	0	; () banked
  1368  000A7E  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1369  000A80  0E03               	movlw	3
  1370  000A82  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  1371  000A84  0E27               	movlw	39
  1372  000A86  EC11  F01D         	call	_SETxAPIxVAL
  1373  000A8A  D023               	goto	l7989
  1374  000A8C                     l7979:
  1375                           
  1376                           ; BSR set to: 0
  1377                           ;State_Mchn.c: 109: }
  1378                           ;State_Mchn.c: 110: if(GETxAPIxVAL(38))
  1379  000A8C  0E26               	movlw	38
  1380  000A8E  ECD2  F01D         	call	_GETxAPIxVAL
  1381  000A92  0100               	movlb	0	; () banked
  1382  000A94  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1383  000A96  0100               	movlb	0	; () banked
  1384  000A98  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1385  000A9A  B4D8               	btfsc	status,2,c
  1386  000A9C  D009               	goto	l7985
  1387                           
  1388                           ; BSR set to: 0
  1389                           ;State_Mchn.c: 111: {
  1390                           ;State_Mchn.c: 112: SETxAPIxVAL(39, 4);
  1391  000A9E  0E00               	movlw	0
  1392  000AA0  0100               	movlb	0	; () banked
  1393  000AA2  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1394  000AA4  0E04               	movlw	4
  1395  000AA6  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  1396  000AA8  0E27               	movlw	39
  1397  000AAA  EC11  F01D         	call	_SETxAPIxVAL
  1398  000AAE  D011               	goto	l7989
  1399  000AB0                     l7985:
  1400                           
  1401                           ; BSR set to: 0
  1402                           ;State_Mchn.c: 115: }
  1403                           ;State_Mchn.c: 116: if(GETxAPIxVAL(34))
  1404  000AB0  0E22               	movlw	34
  1405  000AB2  ECD2  F01D         	call	_GETxAPIxVAL
  1406  000AB6  0100               	movlb	0	; () banked
  1407  000AB8  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1408  000ABA  0100               	movlb	0	; () banked
  1409  000ABC  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1410  000ABE  B4D8               	btfsc	status,2,c
  1411  000AC0  D00A               	goto	l7991
  1412                           
  1413                           ; BSR set to: 0
  1414                           ;State_Mchn.c: 117: {
  1415                           ;State_Mchn.c: 118: SETxAPIxVAL(39, 5);
  1416  000AC2  0E00               	movlw	0
  1417  000AC4  0100               	movlb	0	; () banked
  1418  000AC6  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1419  000AC8  0E05               	movlw	5
  1420  000ACA  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  1421  000ACC  0E27               	movlw	39
  1422  000ACE  EC11  F01D         	call	_SETxAPIxVAL
  1423  000AD2                     l7989:
  1424                           
  1425                           ;State_Mchn.c: 119: Switch_Init = 2;
  1426  000AD2  0E02               	movlw	2
  1427  000AD4  D7B3               	goto	L1
  1428  000AD6                     l7991:
  1429                           
  1430                           ; BSR set to: 0
  1431                           ;State_Mchn.c: 121: }
  1432                           ;State_Mchn.c: 122: if(GETxAPIxVAL(39) > 0 && GETxAPIxVAL(40) > 0){
  1433  000AD6  0E27               	movlw	39
  1434  000AD8  ECD2  F01D         	call	_GETxAPIxVAL
  1435  000ADC  0100               	movlb	0	; () banked
  1436  000ADE  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1437  000AE0  0100               	movlb	0	; () banked
  1438  000AE2  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1439  000AE4  B4D8               	btfsc	status,2,c
  1440  000AE6  D009               	goto	l7997
  1441                           
  1442                           ; BSR set to: 0
  1443  000AE8  0E28               	movlw	40
  1444  000AEA  ECD2  F01D         	call	_GETxAPIxVAL
  1445  000AEE  0100               	movlb	0	; () banked
  1446  000AF0  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1447  000AF2  0100               	movlb	0	; () banked
  1448  000AF4  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1449  000AF6  A4D8               	btfss	status,2,c
  1450  000AF8  D0C7               	goto	l8059
  1451  000AFA                     l7997:
  1452                           
  1453                           ; BSR set to: 0
  1454                           ;State_Mchn.c: 125: }
  1455                           ;State_Mchn.c: 126: Switch_Init = 1;
  1456  000AFA  0E01               	movlw	1
  1457  000AFC  0100               	movlb	0	; () banked
  1458  000AFE  6F7E               	movwf	_Switch_Init& (0+255),b
  1459                           
  1460                           ; BSR set to: 0
  1461                           ;State_Mchn.c: 127: Green_Led(2);
  1462  000B00  0E02               	movlw	2
  1463  000B02  ECAD  F01B         	call	_Green_Led
  1464                           
  1465                           ;State_Mchn.c: 128: break;
  1466  000B06  EFE1  F009         	goto	l8427
  1467  000B0A                     l8001:
  1468  000B0A  0E23               	movlw	35
  1469  000B0C  ECD2  F01D         	call	_GETxAPIxVAL
  1470  000B10  0100               	movlb	0	; () banked
  1471  000B12  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1472  000B14  0100               	movlb	0	; () banked
  1473  000B16  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1474  000B18  A4D8               	btfss	status,2,c
  1475  000B1A  D030               	goto	l8015
  1476                           
  1477                           ; BSR set to: 0
  1478  000B1C  0E24               	movlw	36
  1479  000B1E  ECD2  F01D         	call	_GETxAPIxVAL
  1480  000B22  0100               	movlb	0	; () banked
  1481  000B24  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1482  000B26  0100               	movlb	0	; () banked
  1483  000B28  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1484  000B2A  A4D8               	btfss	status,2,c
  1485  000B2C  D027               	goto	l8015
  1486                           
  1487                           ; BSR set to: 0
  1488  000B2E  0E25               	movlw	37
  1489  000B30  ECD2  F01D         	call	_GETxAPIxVAL
  1490  000B34  0100               	movlb	0	; () banked
  1491  000B36  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1492  000B38  0100               	movlb	0	; () banked
  1493  000B3A  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1494  000B3C  A4D8               	btfss	status,2,c
  1495  000B3E  D01E               	goto	l8015
  1496                           
  1497                           ; BSR set to: 0
  1498  000B40  0E26               	movlw	38
  1499  000B42  ECD2  F01D         	call	_GETxAPIxVAL
  1500  000B46  0100               	movlb	0	; () banked
  1501  000B48  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1502  000B4A  0100               	movlb	0	; () banked
  1503  000B4C  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1504  000B4E  A4D8               	btfss	status,2,c
  1505  000B50  D015               	goto	l8015
  1506                           
  1507                           ; BSR set to: 0
  1508  000B52  0E22               	movlw	34
  1509  000B54  ECD2  F01D         	call	_GETxAPIxVAL
  1510  000B58  0100               	movlb	0	; () banked
  1511  000B5A  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1512  000B5C  0100               	movlb	0	; () banked
  1513  000B5E  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1514  000B60  A4D8               	btfss	status,2,c
  1515  000B62  D00C               	goto	l8015
  1516                           
  1517                           ; BSR set to: 0
  1518  000B64  0E20               	movlw	32
  1519  000B66  ECD2  F01D         	call	_GETxAPIxVAL
  1520  000B6A  0100               	movlb	0	; () banked
  1521  000B6C  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1522  000B6E  0100               	movlb	0	; () banked
  1523  000B70  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1524  000B72  A4D8               	btfss	status,2,c
  1525  000B74  D003               	goto	l8015
  1526                           
  1527                           ; BSR set to: 0
  1528                           ;State_Mchn.c: 131: {
  1529                           ;State_Mchn.c: 132: Switch_Init = 3;
  1530  000B76  0E03               	movlw	3
  1531  000B78  0100               	movlb	0	; () banked
  1532  000B7A  6F7E               	movwf	_Switch_Init& (0+255),b
  1533  000B7C                     l8015:
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;State_Mchn.c: 133: }
  1537                           ;State_Mchn.c: 134: Red_Led(0);
  1538  000B7C  0E00               	movlw	0
  1539  000B7E  EC6B  F01B         	call	_Red_Led
  1540                           
  1541                           ;State_Mchn.c: 135: Green_Led(2);
  1542  000B82  0E02               	movlw	2
  1543  000B84  ECAD  F01B         	call	_Green_Led
  1544                           
  1545                           ;State_Mchn.c: 136: break;
  1546  000B88  EFE1  F009         	goto	l8427
  1547  000B8C                     l8019:
  1548  000B8C  0E23               	movlw	35
  1549  000B8E  ECD2  F01D         	call	_GETxAPIxVAL
  1550  000B92  0100               	movlb	0	; () banked
  1551  000B94  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1552  000B96  0100               	movlb	0	; () banked
  1553  000B98  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1554  000B9A  B4D8               	btfsc	status,2,c
  1555  000B9C  D009               	goto	l8025
  1556                           
  1557                           ; BSR set to: 0
  1558                           ;State_Mchn.c: 139: {
  1559                           ;State_Mchn.c: 140: SETxAPIxVAL(40, 1);
  1560  000B9E  0E00               	movlw	0
  1561  000BA0  0100               	movlb	0	; () banked
  1562  000BA2  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1563  000BA4  0E01               	movlw	1
  1564  000BA6  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  1565  000BA8  0E28               	movlw	40
  1566  000BAA  EC11  F01D         	call	_SETxAPIxVAL
  1567  000BAE  D06C               	goto	l8059
  1568  000BB0                     l8025:
  1569                           
  1570                           ; BSR set to: 0
  1571                           ;State_Mchn.c: 143: }
  1572                           ;State_Mchn.c: 144: if(GETxAPIxVAL(36))
  1573  000BB0  0E24               	movlw	36
  1574  000BB2  ECD2  F01D         	call	_GETxAPIxVAL
  1575  000BB6  0100               	movlb	0	; () banked
  1576  000BB8  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1577  000BBA  0100               	movlb	0	; () banked
  1578  000BBC  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1579  000BBE  B4D8               	btfsc	status,2,c
  1580  000BC0  D009               	goto	l8031
  1581                           
  1582                           ; BSR set to: 0
  1583                           ;State_Mchn.c: 145: {
  1584                           ;State_Mchn.c: 146: SETxAPIxVAL(40, 2);
  1585  000BC2  0E00               	movlw	0
  1586  000BC4  0100               	movlb	0	; () banked
  1587  000BC6  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1588  000BC8  0E02               	movlw	2
  1589  000BCA  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  1590  000BCC  0E28               	movlw	40
  1591  000BCE  EC11  F01D         	call	_SETxAPIxVAL
  1592  000BD2  D05A               	goto	l8059
  1593  000BD4                     l8031:
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;State_Mchn.c: 149: }
  1597                           ;State_Mchn.c: 150: if(GETxAPIxVAL(37))
  1598  000BD4  0E25               	movlw	37
  1599  000BD6  ECD2  F01D         	call	_GETxAPIxVAL
  1600  000BDA  0100               	movlb	0	; () banked
  1601  000BDC  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1602  000BDE  0100               	movlb	0	; () banked
  1603  000BE0  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1604  000BE2  B4D8               	btfsc	status,2,c
  1605  000BE4  D009               	goto	l8037
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;State_Mchn.c: 151: {
  1609                           ;State_Mchn.c: 152: SETxAPIxVAL(40, 3);
  1610  000BE6  0E00               	movlw	0
  1611  000BE8  0100               	movlb	0	; () banked
  1612  000BEA  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1613  000BEC  0E03               	movlw	3
  1614  000BEE  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  1615  000BF0  0E28               	movlw	40
  1616  000BF2  EC11  F01D         	call	_SETxAPIxVAL
  1617  000BF6  D048               	goto	l8059
  1618  000BF8                     l8037:
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;State_Mchn.c: 155: }
  1622                           ;State_Mchn.c: 156: if(GETxAPIxVAL(38))
  1623  000BF8  0E26               	movlw	38
  1624  000BFA  ECD2  F01D         	call	_GETxAPIxVAL
  1625  000BFE  0100               	movlb	0	; () banked
  1626  000C00  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1627  000C02  0100               	movlb	0	; () banked
  1628  000C04  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1629  000C06  B4D8               	btfsc	status,2,c
  1630  000C08  D009               	goto	l8043
  1631                           
  1632                           ; BSR set to: 0
  1633                           ;State_Mchn.c: 157: {
  1634                           ;State_Mchn.c: 158: SETxAPIxVAL(40, 4);
  1635  000C0A  0E00               	movlw	0
  1636  000C0C  0100               	movlb	0	; () banked
  1637  000C0E  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1638  000C10  0E04               	movlw	4
  1639  000C12  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  1640  000C14  0E28               	movlw	40
  1641  000C16  EC11  F01D         	call	_SETxAPIxVAL
  1642  000C1A  D036               	goto	l8059
  1643  000C1C                     l8043:
  1644                           
  1645                           ; BSR set to: 0
  1646                           ;State_Mchn.c: 161: }
  1647                           ;State_Mchn.c: 162: if(GETxAPIxVAL(34))
  1648  000C1C  0E22               	movlw	34
  1649  000C1E  ECD2  F01D         	call	_GETxAPIxVAL
  1650  000C22  0100               	movlb	0	; () banked
  1651  000C24  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1652  000C26  0100               	movlb	0	; () banked
  1653  000C28  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1654  000C2A  B4D8               	btfsc	status,2,c
  1655  000C2C  D009               	goto	l8049
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;State_Mchn.c: 163: {
  1659                           ;State_Mchn.c: 164: SETxAPIxVAL(40, 5);
  1660  000C2E  0E00               	movlw	0
  1661  000C30  0100               	movlb	0	; () banked
  1662  000C32  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1663  000C34  0E05               	movlw	5
  1664  000C36  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  1665  000C38  0E28               	movlw	40
  1666  000C3A  EC11  F01D         	call	_SETxAPIxVAL
  1667  000C3E  D024               	goto	l8059
  1668  000C40                     l8049:
  1669                           
  1670                           ; BSR set to: 0
  1671                           ;State_Mchn.c: 167: }
  1672                           ;State_Mchn.c: 168: if(GETxAPIxVAL(32))
  1673  000C40  0E20               	movlw	32
  1674  000C42  ECD2  F01D         	call	_GETxAPIxVAL
  1675  000C46  0100               	movlb	0	; () banked
  1676  000C48  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1677  000C4A  0100               	movlb	0	; () banked
  1678  000C4C  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1679  000C4E  B4D8               	btfsc	status,2,c
  1680  000C50  D009               	goto	l8055
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;State_Mchn.c: 169: {
  1684                           ;State_Mchn.c: 170: SETxAPIxVAL(40, 9);
  1685  000C52  0E00               	movlw	0
  1686  000C54  0100               	movlb	0	; () banked
  1687  000C56  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1688  000C58  0E09               	movlw	9
  1689  000C5A  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  1690  000C5C  0E28               	movlw	40
  1691  000C5E  EC11  F01D         	call	_SETxAPIxVAL
  1692  000C62  D012               	goto	l8059
  1693  000C64                     l8055:
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;State_Mchn.c: 173: }
  1697                           ;State_Mchn.c: 174: if(GETxAPIxVAL(39) > 0 && GETxAPIxVAL(40) > 0){
  1698  000C64  0E27               	movlw	39
  1699  000C66  ECD2  F01D         	call	_GETxAPIxVAL
  1700  000C6A  0100               	movlb	0	; () banked
  1701  000C6C  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1702  000C6E  0100               	movlb	0	; () banked
  1703  000C70  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1704  000C72  B4D8               	btfsc	status,2,c
  1705  000C74  D00B               	goto	l8061
  1706                           
  1707                           ; BSR set to: 0
  1708  000C76  0E28               	movlw	40
  1709  000C78  ECD2  F01D         	call	_GETxAPIxVAL
  1710  000C7C  0100               	movlb	0	; () banked
  1711  000C7E  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1712  000C80  0100               	movlb	0	; () banked
  1713  000C82  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1714  000C84  B4D8               	btfsc	status,2,c
  1715  000C86  D002               	goto	l8061
  1716  000C88                     l8059:
  1717                           
  1718                           ; BSR set to: 0
  1719                           ;State_Mchn.c: 175: Switch_Init = 4;
  1720  000C88  0E04               	movlw	4
  1721  000C8A  D6D8               	goto	L1
  1722  000C8C                     l8061:
  1723                           
  1724                           ; BSR set to: 0
  1725                           ;State_Mchn.c: 177: }
  1726                           ;State_Mchn.c: 178: Green_Led(2);
  1727  000C8C  0E02               	movlw	2
  1728  000C8E  ECAD  F01B         	call	_Green_Led
  1729                           
  1730                           ;State_Mchn.c: 179: Switch_Init = 3;
  1731  000C92  0E03               	movlw	3
  1732  000C94  D6D3               	goto	L1
  1733  000C96                     l8065:
  1734                           
  1735                           ; BSR set to: 0
  1736  000C96  0E23               	movlw	35
  1737  000C98  ECD2  F01D         	call	_GETxAPIxVAL
  1738  000C9C  0100               	movlb	0	; () banked
  1739  000C9E  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1740  000CA0  0100               	movlb	0	; () banked
  1741  000CA2  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1742  000CA4  A4D8               	btfss	status,2,c
  1743  000CA6  D070               	goto	l8089
  1744                           
  1745                           ; BSR set to: 0
  1746  000CA8  0E24               	movlw	36
  1747  000CAA  ECD2  F01D         	call	_GETxAPIxVAL
  1748  000CAE  0100               	movlb	0	; () banked
  1749  000CB0  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1750  000CB2  0100               	movlb	0	; () banked
  1751  000CB4  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1752  000CB6  A4D8               	btfss	status,2,c
  1753  000CB8  D067               	goto	l8089
  1754                           
  1755                           ; BSR set to: 0
  1756  000CBA  0E25               	movlw	37
  1757  000CBC  ECD2  F01D         	call	_GETxAPIxVAL
  1758  000CC0  0100               	movlb	0	; () banked
  1759  000CC2  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1760  000CC4  0100               	movlb	0	; () banked
  1761  000CC6  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1762  000CC8  A4D8               	btfss	status,2,c
  1763  000CCA  D05E               	goto	l8089
  1764                           
  1765                           ; BSR set to: 0
  1766  000CCC  0E26               	movlw	38
  1767  000CCE  ECD2  F01D         	call	_GETxAPIxVAL
  1768  000CD2  0100               	movlb	0	; () banked
  1769  000CD4  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1770  000CD6  0100               	movlb	0	; () banked
  1771  000CD8  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1772  000CDA  A4D8               	btfss	status,2,c
  1773  000CDC  D055               	goto	l8089
  1774                           
  1775                           ; BSR set to: 0
  1776  000CDE  0E22               	movlw	34
  1777  000CE0  ECD2  F01D         	call	_GETxAPIxVAL
  1778  000CE4  0100               	movlb	0	; () banked
  1779  000CE6  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1780  000CE8  0100               	movlb	0	; () banked
  1781  000CEA  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1782  000CEC  A4D8               	btfss	status,2,c
  1783  000CEE  D04C               	goto	l8089
  1784                           
  1785                           ; BSR set to: 0
  1786  000CF0  0E20               	movlw	32
  1787  000CF2  ECD2  F01D         	call	_GETxAPIxVAL
  1788  000CF6  0100               	movlb	0	; () banked
  1789  000CF8  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1790  000CFA  0100               	movlb	0	; () banked
  1791  000CFC  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1792  000CFE  A4D8               	btfss	status,2,c
  1793  000D00  D043               	goto	l8089
  1794                           
  1795                           ; BSR set to: 0
  1796                           ;State_Mchn.c: 183: {
  1797                           ;State_Mchn.c: 184: if(GETxAPIxVAL(39) == GETxAPIxVAL(40))
  1798  000D02  0E27               	movlw	39
  1799  000D04  ECD2  F01D         	call	_GETxAPIxVAL
  1800  000D08  C08D  F09F         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1801  000D0C  C08E  F0A0         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1802  000D10  0E28               	movlw	40
  1803  000D12  ECD2  F01D         	call	_GETxAPIxVAL
  1804  000D16  0100               	movlb	0	; () banked
  1805  000D18  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1806  000D1A  0100               	movlb	0	; () banked
  1807  000D1C  199F               	xorwf	??_Update_StateMchn& (0+255),w,b
  1808  000D1E  E11C               	bnz	l8085
  1809  000D20  0100               	movlb	0	; () banked
  1810  000D22  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1811  000D24  0100               	movlb	0	; () banked
  1812  000D26  19A0               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1813  000D28  A4D8               	btfss	status,2,c
  1814  000D2A  D016               	goto	l8085
  1815                           
  1816                           ; BSR set to: 0
  1817                           ;State_Mchn.c: 185: {
  1818                           ;State_Mchn.c: 186: SETxAPIxVAL(40, 0);
  1819  000D2C  0E00               	movlw	0
  1820  000D2E  0100               	movlb	0	; () banked
  1821  000D30  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1822  000D32  0E00               	movlw	0
  1823  000D34  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  1824  000D36  0E28               	movlw	40
  1825  000D38  EC11  F01D         	call	_SETxAPIxVAL
  1826                           
  1827                           ;State_Mchn.c: 187: SETxAPIxVAL(39, 0);
  1828  000D3C  0E00               	movlw	0
  1829  000D3E  0100               	movlb	0	; () banked
  1830  000D40  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1831  000D42  0E00               	movlw	0
  1832  000D44  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  1833  000D46  0E27               	movlw	39
  1834  000D48  EC11  F01D         	call	_SETxAPIxVAL
  1835                           
  1836                           ;State_Mchn.c: 188: Red_Led(1);
  1837  000D4C  0E01               	movlw	1
  1838  000D4E  EC6B  F01B         	call	_Red_Led
  1839                           
  1840                           ;State_Mchn.c: 189: Switch_Init = 1;
  1841  000D52  0E01               	movlw	1
  1842  000D54  0100               	movlb	0	; () banked
  1843  000D56  6F7E               	movwf	_Switch_Init& (0+255),b
  1844  000D58                     l8085:
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;State_Mchn.c: 191: }
  1848                           ;State_Mchn.c: 192: if(GETxAPIxVAL(39) != GETxAPIxVAL(40))
  1849  000D58  0E27               	movlw	39
  1850  000D5A  ECD2  F01D         	call	_GETxAPIxVAL
  1851  000D5E  C08D  F09F         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1852  000D62  C08E  F0A0         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1853  000D66  0E28               	movlw	40
  1854  000D68  ECD2  F01D         	call	_GETxAPIxVAL
  1855  000D6C  0100               	movlb	0	; () banked
  1856  000D6E  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1857  000D70  0100               	movlb	0	; () banked
  1858  000D72  199F               	xorwf	??_Update_StateMchn& (0+255),w,b
  1859  000D74  E106               	bnz	u8420
  1860  000D76  0100               	movlb	0	; () banked
  1861  000D78  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1862  000D7A  0100               	movlb	0	; () banked
  1863  000D7C  19A0               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1864  000D7E  B4D8               	btfsc	status,2,c
  1865  000D80  D003               	goto	l8089
  1866  000D82                     u8420:
  1867                           
  1868                           ; BSR set to: 0
  1869                           ;State_Mchn.c: 193: {
  1870                           ;State_Mchn.c: 194: Switch_Init = 5;
  1871  000D82  0E05               	movlw	5
  1872  000D84  0100               	movlb	0	; () banked
  1873  000D86  6F7E               	movwf	_Switch_Init& (0+255),b
  1874  000D88                     l8089:
  1875                           
  1876                           ; BSR set to: 0
  1877                           ;State_Mchn.c: 195: }
  1878                           ;State_Mchn.c: 196: }
  1879                           ;State_Mchn.c: 197: Green_Led(2);
  1880  000D88  0E02               	movlw	2
  1881  000D8A  ECAD  F01B         	call	_Green_Led
  1882                           
  1883                           ;State_Mchn.c: 198: break;
  1884  000D8E  D319               	goto	l8427
  1885  000D90                     l8091:
  1886  000D90  0E28               	movlw	40
  1887  000D92  ECD2  F01D         	call	_GETxAPIxVAL
  1888  000D96  0E09               	movlw	9
  1889  000D98  0100               	movlb	0	; () banked
  1890  000D9A  198D               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1891  000D9C  0100               	movlb	0	; () banked
  1892  000D9E  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1893  000DA0  B4D8               	btfsc	status,2,c
  1894  000DA2  D003               	goto	l8095
  1895                           
  1896                           ; BSR set to: 0
  1897                           ;State_Mchn.c: 201: {
  1898                           ;State_Mchn.c: 202: Switch_Init = 6;
  1899  000DA4  0E06               	movlw	6
  1900  000DA6  0100               	movlb	0	; () banked
  1901  000DA8  6F7E               	movwf	_Switch_Init& (0+255),b
  1902  000DAA                     l8095:
  1903                           
  1904                           ; BSR set to: 0
  1905                           ;State_Mchn.c: 203: }
  1906                           ;State_Mchn.c: 204: if(GETxAPIxVAL(40) == 9)
  1907  000DAA  0E28               	movlw	40
  1908  000DAC  ECD2  F01D         	call	_GETxAPIxVAL
  1909  000DB0  0E09               	movlw	9
  1910  000DB2  0100               	movlb	0	; () banked
  1911  000DB4  198D               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1912  000DB6  0100               	movlb	0	; () banked
  1913  000DB8  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1914  000DBA  A4D8               	btfss	status,2,c
  1915  000DBC  D302               	goto	l8427
  1916                           
  1917                           ; BSR set to: 0
  1918                           ;State_Mchn.c: 205: {
  1919                           ;State_Mchn.c: 206: Switch_Init = 9;
  1920  000DBE  0E09               	movlw	9
  1921  000DC0  D63D               	goto	L1
  1922  000DC2                     l8099:
  1923                           
  1924                           ; BSR set to: 0
  1925  000DC2  0E08               	movlw	8
  1926  000DC4  D63B               	goto	L1
  1927  000DC6                     l8101:
  1928                           
  1929                           ; BSR set to: 0
  1930  000DC6  0E20               	movlw	32
  1931  000DC8  ECD2  F01D         	call	_GETxAPIxVAL
  1932  000DCC  0100               	movlb	0	; () banked
  1933  000DCE  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1934  000DD0  0100               	movlb	0	; () banked
  1935  000DD2  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1936  000DD4  A4D8               	btfss	status,2,c
  1937  000DD6  D009               	goto	l8105
  1938                           
  1939                           ; BSR set to: 0
  1940  000DD8  0E46               	movlw	70
  1941  000DDA  ECD2  F01D         	call	_GETxAPIxVAL
  1942  000DDE  0100               	movlb	0	; () banked
  1943  000DE0  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  1944  000DE2  0100               	movlb	0	; () banked
  1945  000DE4  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1946  000DE6  B4D8               	btfsc	status,2,c
  1947  000DE8  D00F               	goto	l8109
  1948  000DEA                     l8105:
  1949                           
  1950                           ; BSR set to: 0
  1951                           ;State_Mchn.c: 214: {
  1952                           ;State_Mchn.c: 215: Switch_Main = 1;
  1953  000DEA  0E01               	movlw	1
  1954  000DEC  6E19               	movwf	_Switch_Main,c
  1955                           
  1956                           ;State_Mchn.c: 216: Switch_Init = 0;
  1957  000DEE  0E00               	movlw	0
  1958  000DF0  0100               	movlb	0	; () banked
  1959  000DF2  6F7E               	movwf	_Switch_Init& (0+255),b
  1960                           
  1961                           ;State_Mchn.c: 217: Stop_Program = 0;
  1962  000DF4  0E00               	movlw	0
  1963  000DF6  6E18               	movwf	_Stop_Program,c
  1964                           
  1965                           ; BSR set to: 0
  1966                           ;State_Mchn.c: 218: SETxAPIxVAL(70, 0);
  1967  000DF8  0E00               	movlw	0
  1968  000DFA  0100               	movlb	0	; () banked
  1969  000DFC  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  1970  000DFE  0E00               	movlw	0
  1971  000E00  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  1972  000E02  0E46               	movlw	70
  1973  000E04  EC11  F01D         	call	_SETxAPIxVAL
  1974  000E08                     l8109:
  1975                           
  1976                           ;State_Mchn.c: 219: }
  1977                           ;State_Mchn.c: 220: Green_Led(3);
  1978  000E08  0E03               	movlw	3
  1979  000E0A  ECAD  F01B         	call	_Green_Led
  1980                           
  1981                           ;State_Mchn.c: 221: Red_Led(0);
  1982  000E0E  0E00               	movlw	0
  1983  000E10  EC6B  F01B         	call	_Red_Led
  1984                           
  1985                           ;State_Mchn.c: 222: break;
  1986  000E14  D2D6               	goto	l8427
  1987  000E16                     l8113:
  1988  000E16  0E27               	movlw	39
  1989  000E18  ECD2  F01D         	call	_GETxAPIxVAL
  1990  000E1C  0E05               	movlw	5
  1991  000E1E  0100               	movlb	0	; () banked
  1992  000E20  198D               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  1993  000E22  0100               	movlb	0	; () banked
  1994  000E24  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  1995  000E26  B4D8               	btfsc	status,2,c
  1996  000E28  D014               	goto	l8131
  1997  000E2A  D02A               	goto	l8133
  1998  000E2C                     l8117:
  1999                           
  2000                           ; BSR set to: 0
  2001  000E2C  0E01               	movlw	1
  2002  000E2E  D005               	goto	L4
  2003  000E30                     l8119:
  2004                           
  2005                           ; BSR set to: 0
  2006  000E30  0E05               	movlw	5
  2007  000E32  D003               	goto	L4
  2008  000E34                     l8121:
  2009                           
  2010                           ; BSR set to: 0
  2011  000E34  0E02               	movlw	2
  2012  000E36  D001               	goto	L4
  2013  000E38                     l8123:
  2014                           
  2015                           ; BSR set to: 0
  2016  000E38  0E03               	movlw	3
  2017  000E3A                     L4:
  2018  000E3A  6E1B               	movwf	_Switch_Program,c
  2019                           
  2020                           ;State_Mchn.c: 238: Switch_Init = 7;
  2021  000E3C  0E07               	movlw	7
  2022  000E3E  0100               	movlb	0	; () banked
  2023  000E40  6F7E               	movwf	_Switch_Init& (0+255),b
  2024                           
  2025                           ;State_Mchn.c: 239: break;
  2026  000E42  D01E               	goto	l8133
  2027  000E44                     l8125:
  2028                           
  2029                           ; BSR set to: 0
  2030  000E44  0E08               	movlw	8
  2031  000E46  0100               	movlb	0	; () banked
  2032  000E48  6F7E               	movwf	_Switch_Init& (0+255),b
  2033                           
  2034                           ; BSR set to: 0
  2035                           ;State_Mchn.c: 241: Red_Led(1);
  2036  000E4A  0E01               	movlw	1
  2037  000E4C  EC6B  F01B         	call	_Red_Led
  2038                           
  2039                           ;State_Mchn.c: 243: }
  2040                           
  2041                           ;State_Mchn.c: 242: break;
  2042  000E50  D017               	goto	l8133
  2043  000E52                     l8131:
  2044  000E52  0E28               	movlw	40
  2045  000E54  ECD2  F01D         	call	_GETxAPIxVAL
  2046                           
  2047                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2048                           ; Switch size 1, requested type "space"
  2049                           ; Number of cases is 1, Range of values is 0 to 0
  2050                           ; switch strategies available:
  2051                           ; Name         Instructions Cycles
  2052                           ; simple_byte            4     3 (average)
  2053                           ;	Chosen strategy is simple_byte
  2054  000E58  0100               	movlb	0	; () banked
  2055  000E5A  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2056  000E5C  0A00               	xorlw	0	; case 0
  2057  000E5E  A4D8               	btfss	status,2,c
  2058  000E60  D7F1               	goto	l8125
  2059                           
  2060                           ; BSR set to: 0
  2061                           ; Switch size 1, requested type "space"
  2062                           ; Number of cases is 4, Range of values is 1 to 4
  2063                           ; switch strategies available:
  2064                           ; Name         Instructions Cycles
  2065                           ; simple_byte           13     7 (average)
  2066                           ;	Chosen strategy is simple_byte
  2067  000E62  0100               	movlb	0	; () banked
  2068  000E64  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  2069  000E66  0A01               	xorlw	1	; case 1
  2070  000E68  B4D8               	btfsc	status,2,c
  2071  000E6A  D7E0               	goto	l8117
  2072  000E6C  0A03               	xorlw	3	; case 2
  2073  000E6E  B4D8               	btfsc	status,2,c
  2074  000E70  D7DF               	goto	l8119
  2075  000E72  0A01               	xorlw	1	; case 3
  2076  000E74  B4D8               	btfsc	status,2,c
  2077  000E76  D7DE               	goto	l8121
  2078  000E78  0A07               	xorlw	7	; case 4
  2079  000E7A  B4D8               	btfsc	status,2,c
  2080  000E7C  D7DD               	goto	l8123
  2081  000E7E  D7E2               	goto	l8125
  2082  000E80                     l8133:
  2083                           
  2084                           ;State_Mchn.c: 244: }
  2085                           ;State_Mchn.c: 245: if(GETxAPIxVAL(40) == 5)
  2086  000E80  0E28               	movlw	40
  2087  000E82  ECD2  F01D         	call	_GETxAPIxVAL
  2088  000E86  0E05               	movlw	5
  2089  000E88  0100               	movlb	0	; () banked
  2090  000E8A  198D               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  2091  000E8C  0100               	movlb	0	; () banked
  2092  000E8E  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2093  000E90  B4D8               	btfsc	status,2,c
  2094  000E92  D014               	goto	l8151
  2095  000E94  D02A               	goto	l8153
  2096  000E96                     l8137:
  2097                           
  2098                           ; BSR set to: 0
  2099  000E96  0E01               	movlw	1
  2100  000E98  D005               	goto	L7
  2101  000E9A                     l8139:
  2102                           
  2103                           ; BSR set to: 0
  2104  000E9A  0E05               	movlw	5
  2105  000E9C  D003               	goto	L7
  2106  000E9E                     l8141:
  2107                           
  2108                           ; BSR set to: 0
  2109  000E9E  0E02               	movlw	2
  2110  000EA0  D001               	goto	L7
  2111  000EA2                     l8143:
  2112                           
  2113                           ; BSR set to: 0
  2114  000EA2  0E03               	movlw	3
  2115  000EA4                     L7:
  2116  000EA4  6E1B               	movwf	_Switch_Program,c
  2117                           
  2118                           ;State_Mchn.c: 259: Switch_Init = 7;
  2119  000EA6  0E07               	movlw	7
  2120  000EA8  0100               	movlb	0	; () banked
  2121  000EAA  6F7E               	movwf	_Switch_Init& (0+255),b
  2122                           
  2123                           ;State_Mchn.c: 260: break;
  2124  000EAC  D01E               	goto	l8153
  2125  000EAE                     l8145:
  2126                           
  2127                           ; BSR set to: 0
  2128  000EAE  0E08               	movlw	8
  2129  000EB0  0100               	movlb	0	; () banked
  2130  000EB2  6F7E               	movwf	_Switch_Init& (0+255),b
  2131                           
  2132                           ; BSR set to: 0
  2133                           ;State_Mchn.c: 262: Red_Led(1);
  2134  000EB4  0E01               	movlw	1
  2135  000EB6  EC6B  F01B         	call	_Red_Led
  2136                           
  2137                           ;State_Mchn.c: 264: }
  2138                           
  2139                           ;State_Mchn.c: 263: break;
  2140  000EBA  D017               	goto	l8153
  2141  000EBC                     l8151:
  2142  000EBC  0E27               	movlw	39
  2143  000EBE  ECD2  F01D         	call	_GETxAPIxVAL
  2144                           
  2145                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2146                           ; Switch size 1, requested type "space"
  2147                           ; Number of cases is 1, Range of values is 0 to 0
  2148                           ; switch strategies available:
  2149                           ; Name         Instructions Cycles
  2150                           ; simple_byte            4     3 (average)
  2151                           ;	Chosen strategy is simple_byte
  2152  000EC2  0100               	movlb	0	; () banked
  2153  000EC4  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2154  000EC6  0A00               	xorlw	0	; case 0
  2155  000EC8  A4D8               	btfss	status,2,c
  2156  000ECA  D7F1               	goto	l8145
  2157                           
  2158                           ; BSR set to: 0
  2159                           ; Switch size 1, requested type "space"
  2160                           ; Number of cases is 4, Range of values is 1 to 4
  2161                           ; switch strategies available:
  2162                           ; Name         Instructions Cycles
  2163                           ; simple_byte           13     7 (average)
  2164                           ;	Chosen strategy is simple_byte
  2165  000ECC  0100               	movlb	0	; () banked
  2166  000ECE  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  2167  000ED0  0A01               	xorlw	1	; case 1
  2168  000ED2  B4D8               	btfsc	status,2,c
  2169  000ED4  D7E0               	goto	l8137
  2170  000ED6  0A03               	xorlw	3	; case 2
  2171  000ED8  B4D8               	btfsc	status,2,c
  2172  000EDA  D7DF               	goto	l8139
  2173  000EDC  0A01               	xorlw	1	; case 3
  2174  000EDE  B4D8               	btfsc	status,2,c
  2175  000EE0  D7DE               	goto	l8141
  2176  000EE2  0A07               	xorlw	7	; case 4
  2177  000EE4  B4D8               	btfsc	status,2,c
  2178  000EE6  D7DD               	goto	l8143
  2179  000EE8  D7E2               	goto	l8145
  2180  000EEA                     l8153:
  2181                           
  2182                           ;State_Mchn.c: 265: }
  2183                           ;State_Mchn.c: 266: if((GETxAPIxVAL(39) != 5) && (GETxAPIxVAL(40) != 5))
  2184  000EEA  0E27               	movlw	39
  2185  000EEC  ECD2  F01D         	call	_GETxAPIxVAL
  2186  000EF0  0E05               	movlw	5
  2187  000EF2  0100               	movlb	0	; () banked
  2188  000EF4  198D               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  2189  000EF6  0100               	movlb	0	; () banked
  2190  000EF8  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2191  000EFA  B4D8               	btfsc	status,2,c
  2192  000EFC  D262               	goto	l8427
  2193                           
  2194                           ; BSR set to: 0
  2195  000EFE  0E28               	movlw	40
  2196  000F00  ECD2  F01D         	call	_GETxAPIxVAL
  2197  000F04  0E05               	movlw	5
  2198  000F06  0100               	movlb	0	; () banked
  2199  000F08  198D               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  2200  000F0A  0100               	movlb	0	; () banked
  2201  000F0C  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2202  000F0E  A4D8               	btfss	status,2,c
  2203  000F10  D090               	goto	l8229
  2204  000F12  D257               	goto	l8427
  2205  000F14                     l8161:
  2206                           
  2207                           ; BSR set to: 0
  2208  000F14  0E01               	movlw	1
  2209  000F16  D063               	goto	L18
  2210  000F18                     l8163:
  2211                           
  2212                           ; BSR set to: 0
  2213  000F18  0E02               	movlw	2
  2214  000F1A  D061               	goto	L18
  2215  000F1C                     l8165:
  2216                           
  2217                           ; BSR set to: 0
  2218  000F1C  0E04               	movlw	4
  2219  000F1E  D05F               	goto	L18
  2220  000F20                     l8167:
  2221                           
  2222                           ; BSR set to: 0
  2223  000F20  0E08               	movlw	8
  2224  000F22  0100               	movlb	0	; () banked
  2225  000F24  6F7E               	movwf	_Switch_Init& (0+255),b
  2226                           
  2227                           ; BSR set to: 0
  2228                           ;State_Mchn.c: 284: Red_Led(1);
  2229  000F26  0E01               	movlw	1
  2230  000F28  EC6B  F01B         	call	_Red_Led
  2231                           
  2232                           ;State_Mchn.c: 286: }
  2233                           
  2234                           ;State_Mchn.c: 285: break;
  2235  000F2C  D24A               	goto	l8427
  2236  000F2E                     l8173:
  2237  000F2E  0E28               	movlw	40
  2238  000F30  ECD2  F01D         	call	_GETxAPIxVAL
  2239                           
  2240                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2241                           ; Switch size 1, requested type "space"
  2242                           ; Number of cases is 1, Range of values is 0 to 0
  2243                           ; switch strategies available:
  2244                           ; Name         Instructions Cycles
  2245                           ; simple_byte            4     3 (average)
  2246                           ;	Chosen strategy is simple_byte
  2247  000F34  0100               	movlb	0	; () banked
  2248  000F36  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2249  000F38  0A00               	xorlw	0	; case 0
  2250  000F3A  A4D8               	btfss	status,2,c
  2251  000F3C  D7F1               	goto	l8167
  2252                           
  2253                           ; BSR set to: 0
  2254                           ; Switch size 1, requested type "space"
  2255                           ; Number of cases is 4, Range of values is 1 to 4
  2256                           ; switch strategies available:
  2257                           ; Name         Instructions Cycles
  2258                           ; simple_byte           13     7 (average)
  2259                           ;	Chosen strategy is simple_byte
  2260  000F3E  0100               	movlb	0	; () banked
  2261  000F40  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  2262  000F42  0A01               	xorlw	1	; case 1
  2263  000F44  B4D8               	btfsc	status,2,c
  2264  000F46  D04E               	goto	l8213
  2265  000F48  0A03               	xorlw	3	; case 2
  2266  000F4A  B4D8               	btfsc	status,2,c
  2267  000F4C  D7E3               	goto	l8161
  2268  000F4E  0A01               	xorlw	1	; case 3
  2269  000F50  B4D8               	btfsc	status,2,c
  2270  000F52  D7E2               	goto	l8163
  2271  000F54  0A07               	xorlw	7	; case 4
  2272  000F56  B4D8               	btfsc	status,2,c
  2273  000F58  D7E1               	goto	l8165
  2274  000F5A  D7E2               	goto	l8167
  2275  000F5C                     l8179:
  2276                           
  2277                           ; BSR set to: 0
  2278  000F5C  0E00               	movlw	0
  2279  000F5E  D03F               	goto	L18
  2280  000F60                     l8183:
  2281                           
  2282                           ; BSR set to: 0
  2283  000F60  0E08               	movlw	8
  2284  000F62  0100               	movlb	0	; () banked
  2285  000F64  6F7E               	movwf	_Switch_Init& (0+255),b
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;State_Mchn.c: 302: Red_Led(1);
  2289  000F66  0E01               	movlw	1
  2290  000F68  EC6B  F01B         	call	_Red_Led
  2291                           
  2292                           ;State_Mchn.c: 304: }
  2293                           
  2294                           ;State_Mchn.c: 303: break;
  2295  000F6C  D22A               	goto	l8427
  2296  000F6E                     l8189:
  2297  000F6E  0E28               	movlw	40
  2298  000F70  ECD2  F01D         	call	_GETxAPIxVAL
  2299                           
  2300                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2301                           ; Switch size 1, requested type "space"
  2302                           ; Number of cases is 1, Range of values is 0 to 0
  2303                           ; switch strategies available:
  2304                           ; Name         Instructions Cycles
  2305                           ; simple_byte            4     3 (average)
  2306                           ;	Chosen strategy is simple_byte
  2307  000F74  0100               	movlb	0	; () banked
  2308  000F76  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2309  000F78  0A00               	xorlw	0	; case 0
  2310  000F7A  A4D8               	btfss	status,2,c
  2311  000F7C  D7F1               	goto	l8183
  2312                           
  2313                           ; BSR set to: 0
  2314                           ; Switch size 1, requested type "space"
  2315                           ; Number of cases is 4, Range of values is 1 to 4
  2316                           ; switch strategies available:
  2317                           ; Name         Instructions Cycles
  2318                           ; simple_byte           13     7 (average)
  2319                           ;	Chosen strategy is simple_byte
  2320  000F7E  0100               	movlb	0	; () banked
  2321  000F80  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  2322  000F82  0A01               	xorlw	1	; case 1
  2323  000F84  B4D8               	btfsc	status,2,c
  2324  000F86  D7C6               	goto	l8161
  2325  000F88  0A03               	xorlw	3	; case 2
  2326  000F8A  B4D8               	btfsc	status,2,c
  2327  000F8C  D02B               	goto	l8213
  2328  000F8E  0A01               	xorlw	1	; case 3
  2329  000F90  B4D8               	btfsc	status,2,c
  2330  000F92  D7E4               	goto	l8179
  2331  000F94  0A07               	xorlw	7	; case 4
  2332  000F96  B4D8               	btfsc	status,2,c
  2333  000F98  D01F               	goto	l8209
  2334  000F9A  D7E2               	goto	l8183
  2335  000F9C                     l8199:
  2336                           
  2337                           ; BSR set to: 0
  2338  000F9C  0E08               	movlw	8
  2339  000F9E  0100               	movlb	0	; () banked
  2340  000FA0  6F7E               	movwf	_Switch_Init& (0+255),b
  2341                           
  2342                           ; BSR set to: 0
  2343                           ;State_Mchn.c: 320: Red_Led(1);
  2344  000FA2  0E01               	movlw	1
  2345  000FA4  EC6B  F01B         	call	_Red_Led
  2346                           
  2347                           ;State_Mchn.c: 322: }
  2348                           
  2349                           ;State_Mchn.c: 321: break;
  2350  000FA8  D20C               	goto	l8427
  2351  000FAA                     l8205:
  2352  000FAA  0E28               	movlw	40
  2353  000FAC  ECD2  F01D         	call	_GETxAPIxVAL
  2354                           
  2355                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2356                           ; Switch size 1, requested type "space"
  2357                           ; Number of cases is 1, Range of values is 0 to 0
  2358                           ; switch strategies available:
  2359                           ; Name         Instructions Cycles
  2360                           ; simple_byte            4     3 (average)
  2361                           ;	Chosen strategy is simple_byte
  2362  000FB0  0100               	movlb	0	; () banked
  2363  000FB2  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2364  000FB4  0A00               	xorlw	0	; case 0
  2365  000FB6  A4D8               	btfss	status,2,c
  2366  000FB8  D7F1               	goto	l8199
  2367                           
  2368                           ; BSR set to: 0
  2369                           ; Switch size 1, requested type "space"
  2370                           ; Number of cases is 4, Range of values is 1 to 4
  2371                           ; switch strategies available:
  2372                           ; Name         Instructions Cycles
  2373                           ; simple_byte           13     7 (average)
  2374                           ;	Chosen strategy is simple_byte
  2375  000FBA  0100               	movlb	0	; () banked
  2376  000FBC  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  2377  000FBE  0A01               	xorlw	1	; case 1
  2378  000FC0  B4D8               	btfsc	status,2,c
  2379  000FC2  D7AA               	goto	l8163
  2380  000FC4  0A03               	xorlw	3	; case 2
  2381  000FC6  B4D8               	btfsc	status,2,c
  2382  000FC8  D7C9               	goto	l8179
  2383  000FCA  0A01               	xorlw	1	; case 3
  2384  000FCC  B4D8               	btfsc	status,2,c
  2385  000FCE  D00A               	goto	l8213
  2386  000FD0  0A07               	xorlw	7	; case 4
  2387  000FD2  B4D8               	btfsc	status,2,c
  2388  000FD4  D003               	goto	l8211
  2389  000FD6  D7E2               	goto	l8199
  2390  000FD8                     l8209:
  2391                           
  2392                           ; BSR set to: 0
  2393  000FD8  0E06               	movlw	6
  2394  000FDA  D001               	goto	L18
  2395  000FDC                     l8211:
  2396                           
  2397                           ; BSR set to: 0
  2398  000FDC  0E03               	movlw	3
  2399  000FDE                     L18:
  2400  000FDE  6E1B               	movwf	_Switch_Program,c
  2401                           
  2402                           ;State_Mchn.c: 333: Switch_Init = 7;
  2403  000FE0  0E07               	movlw	7
  2404  000FE2  D52C               	goto	L1
  2405  000FE4                     l8213:
  2406                           
  2407                           ; BSR set to: 0
  2408  000FE4  0E00               	movlw	0
  2409  000FE6  D52A               	goto	L1
  2410  000FE8                     l8215:
  2411                           
  2412                           ; BSR set to: 0
  2413  000FE8  0E08               	movlw	8
  2414  000FEA  0100               	movlb	0	; () banked
  2415  000FEC  6F7E               	movwf	_Switch_Init& (0+255),b
  2416                           
  2417                           ; BSR set to: 0
  2418                           ;State_Mchn.c: 338: Red_Led(1);
  2419  000FEE  0E01               	movlw	1
  2420  000FF0  EC6B  F01B         	call	_Red_Led
  2421                           
  2422                           ;State_Mchn.c: 340: }
  2423                           
  2424                           ;State_Mchn.c: 339: break;
  2425  000FF4  D1E6               	goto	l8427
  2426  000FF6                     l8221:
  2427  000FF6  0E28               	movlw	40
  2428  000FF8  ECD2  F01D         	call	_GETxAPIxVAL
  2429                           
  2430                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2431                           ; Switch size 1, requested type "space"
  2432                           ; Number of cases is 1, Range of values is 0 to 0
  2433                           ; switch strategies available:
  2434                           ; Name         Instructions Cycles
  2435                           ; simple_byte            4     3 (average)
  2436                           ;	Chosen strategy is simple_byte
  2437  000FFC  0100               	movlb	0	; () banked
  2438  000FFE  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2439  001000  0A00               	xorlw	0	; case 0
  2440  001002  A4D8               	btfss	status,2,c
  2441  001004  D7F1               	goto	l8215
  2442                           
  2443                           ; BSR set to: 0
  2444                           ; Switch size 1, requested type "space"
  2445                           ; Number of cases is 4, Range of values is 1 to 4
  2446                           ; switch strategies available:
  2447                           ; Name         Instructions Cycles
  2448                           ; simple_byte           13     7 (average)
  2449                           ;	Chosen strategy is simple_byte
  2450  001006  0100               	movlb	0	; () banked
  2451  001008  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  2452  00100A  0A01               	xorlw	1	; case 1
  2453  00100C  B4D8               	btfsc	status,2,c
  2454  00100E  D786               	goto	l8165
  2455  001010  0A03               	xorlw	3	; case 2
  2456  001012  B4D8               	btfsc	status,2,c
  2457  001014  D7E1               	goto	l8209
  2458  001016  0A01               	xorlw	1	; case 3
  2459  001018  B4D8               	btfsc	status,2,c
  2460  00101A  D7E0               	goto	l8211
  2461  00101C  0A07               	xorlw	7	; case 4
  2462  00101E  B4D8               	btfsc	status,2,c
  2463  001020  D7E1               	goto	l8213
  2464  001022  D7E2               	goto	l8215
  2465  001024                     l8223:
  2466                           
  2467                           ; BSR set to: 0
  2468  001024  0E08               	movlw	8
  2469  001026  0100               	movlb	0	; () banked
  2470  001028  6F7E               	movwf	_Switch_Init& (0+255),b
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;State_Mchn.c: 343: Red_Led(1);
  2474  00102A  0E01               	movlw	1
  2475  00102C  EC6B  F01B         	call	_Red_Led
  2476                           
  2477                           ;State_Mchn.c: 345: }
  2478                           
  2479                           ;State_Mchn.c: 344: break;
  2480  001030  D1C8               	goto	l8427
  2481  001032                     l8229:
  2482  001032  0E27               	movlw	39
  2483  001034  ECD2  F01D         	call	_GETxAPIxVAL
  2484                           
  2485                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2486                           ; Switch size 1, requested type "space"
  2487                           ; Number of cases is 1, Range of values is 0 to 0
  2488                           ; switch strategies available:
  2489                           ; Name         Instructions Cycles
  2490                           ; simple_byte            4     3 (average)
  2491                           ;	Chosen strategy is simple_byte
  2492  001038  0100               	movlb	0	; () banked
  2493  00103A  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2494  00103C  0A00               	xorlw	0	; case 0
  2495  00103E  A4D8               	btfss	status,2,c
  2496  001040  D7F1               	goto	l8223
  2497                           
  2498                           ; BSR set to: 0
  2499                           ; Switch size 1, requested type "space"
  2500                           ; Number of cases is 4, Range of values is 1 to 4
  2501                           ; switch strategies available:
  2502                           ; Name         Instructions Cycles
  2503                           ; simple_byte           13     7 (average)
  2504                           ;	Chosen strategy is simple_byte
  2505  001042  0100               	movlb	0	; () banked
  2506  001044  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  2507  001046  0A01               	xorlw	1	; case 1
  2508  001048  B4D8               	btfsc	status,2,c
  2509  00104A  D771               	goto	l8173
  2510  00104C  0A03               	xorlw	3	; case 2
  2511  00104E  B4D8               	btfsc	status,2,c
  2512  001050  D78E               	goto	l8189
  2513  001052  0A01               	xorlw	1	; case 3
  2514  001054  B4D8               	btfsc	status,2,c
  2515  001056  D7A9               	goto	l8205
  2516  001058  0A07               	xorlw	7	; case 4
  2517  00105A  B4D8               	btfsc	status,2,c
  2518  00105C  D7CC               	goto	l8221
  2519  00105E  D7E2               	goto	l8223
  2520  001060                     l8231:
  2521                           
  2522                           ; BSR set to: 0
  2523  001060  0E0B               	movlw	11
  2524  001062  D4EC               	goto	L1
  2525  001064                     l8233:
  2526                           
  2527                           ; BSR set to: 0
  2528  001064  0E20               	movlw	32
  2529  001066  ECD2  F01D         	call	_GETxAPIxVAL
  2530  00106A  0100               	movlb	0	; () banked
  2531  00106C  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  2532  00106E  0100               	movlb	0	; () banked
  2533  001070  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2534  001072  A4D8               	btfss	status,2,c
  2535  001074  D009               	goto	l8237
  2536                           
  2537                           ; BSR set to: 0
  2538  001076  0E46               	movlw	70
  2539  001078  ECD2  F01D         	call	_GETxAPIxVAL
  2540  00107C  0100               	movlb	0	; () banked
  2541  00107E  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  2542  001080  0100               	movlb	0	; () banked
  2543  001082  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2544  001084  B4D8               	btfsc	status,2,c
  2545  001086  D007               	goto	l8239
  2546  001088                     l8237:
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;State_Mchn.c: 353: {
  2550                           ;State_Mchn.c: 354: Switch_Main = 2;
  2551  001088  0E02               	movlw	2
  2552  00108A  6E19               	movwf	_Switch_Main,c
  2553                           
  2554                           ;State_Mchn.c: 355: Switch_Init = 0;
  2555  00108C  0E00               	movlw	0
  2556  00108E  0100               	movlb	0	; () banked
  2557  001090  6F7E               	movwf	_Switch_Init& (0+255),b
  2558                           
  2559                           ;State_Mchn.c: 356: Stop_Program = 0;
  2560  001092  0E00               	movlw	0
  2561  001094  6E18               	movwf	_Stop_Program,c
  2562  001096                     l8239:
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;State_Mchn.c: 357: }
  2566                           ;State_Mchn.c: 358: Green_Led(3);
  2567  001096  0E03               	movlw	3
  2568  001098  ECAD  F01B         	call	_Green_Led
  2569                           
  2570                           ;State_Mchn.c: 359: Red_Led(0);
  2571  00109C  0E00               	movlw	0
  2572  00109E  EC6B  F01B         	call	_Red_Led
  2573                           
  2574                           ;State_Mchn.c: 360: break;
  2575  0010A2  D18F               	goto	l8427
  2576  0010A4                     l8243:
  2577  0010A4  0E27               	movlw	39
  2578  0010A6  ECD2  F01D         	call	_GETxAPIxVAL
  2579  0010AA  0E05               	movlw	5
  2580  0010AC  0100               	movlb	0	; () banked
  2581  0010AE  198D               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  2582  0010B0  0100               	movlb	0	; () banked
  2583  0010B2  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2584  0010B4  A4D8               	btfss	status,2,c
  2585  0010B6  D011               	goto	l8261
  2586  0010B8                     l8245:
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;State_Mchn.c: 363: {
  2590                           ;State_Mchn.c: 364: Switch_Program = 0;
  2591  0010B8  0E00               	movlw	0
  2592  0010BA  D005               	goto	L22
  2593  0010BC                     l8247:
  2594                           
  2595                           ; BSR set to: 0
  2596  0010BC  0E01               	movlw	1
  2597  0010BE  D003               	goto	L22
  2598  0010C0                     l8249:
  2599                           
  2600                           ; BSR set to: 0
  2601  0010C0  0E03               	movlw	3
  2602  0010C2  D001               	goto	L22
  2603  0010C4                     l8253:
  2604                           
  2605                           ; BSR set to: 0
  2606  0010C4  0E02               	movlw	2
  2607  0010C6                     L22:
  2608  0010C6  6E1B               	movwf	_Switch_Program,c
  2609  0010C8  0E0A               	movlw	10
  2610  0010CA  D4B8               	goto	L1
  2611  0010CC                     l8255:
  2612                           
  2613                           ; BSR set to: 0
  2614  0010CC  0E0B               	movlw	11
  2615  0010CE  0100               	movlb	0	; () banked
  2616  0010D0  6F7E               	movwf	_Switch_Init& (0+255),b
  2617                           
  2618                           ; BSR set to: 0
  2619                           ;State_Mchn.c: 374: Red_Led(1);
  2620  0010D2  0E01               	movlw	1
  2621  0010D4  EC6B  F01B         	call	_Red_Led
  2622                           
  2623                           ;State_Mchn.c: 376: }
  2624                           
  2625                           ;State_Mchn.c: 375: break;
  2626  0010D8  D174               	goto	l8427
  2627  0010DA                     l8261:
  2628  0010DA  0E27               	movlw	39
  2629  0010DC  ECD2  F01D         	call	_GETxAPIxVAL
  2630                           
  2631                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2632                           ; Switch size 1, requested type "space"
  2633                           ; Number of cases is 1, Range of values is 0 to 0
  2634                           ; switch strategies available:
  2635                           ; Name         Instructions Cycles
  2636                           ; simple_byte            4     3 (average)
  2637                           ;	Chosen strategy is simple_byte
  2638  0010E0  0100               	movlb	0	; () banked
  2639  0010E2  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2640  0010E4  0A00               	xorlw	0	; case 0
  2641  0010E6  A4D8               	btfss	status,2,c
  2642  0010E8  D7F1               	goto	l8255
  2643                           
  2644                           ; BSR set to: 0
  2645                           ; Switch size 1, requested type "space"
  2646                           ; Number of cases is 4, Range of values is 1 to 4
  2647                           ; switch strategies available:
  2648                           ; Name         Instructions Cycles
  2649                           ; simple_byte           13     7 (average)
  2650                           ;	Chosen strategy is simple_byte
  2651  0010EA  0100               	movlb	0	; () banked
  2652  0010EC  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  2653  0010EE  0A01               	xorlw	1	; case 1
  2654  0010F0  B4D8               	btfsc	status,2,c
  2655  0010F2  D7E4               	goto	l8247
  2656  0010F4  0A03               	xorlw	3	; case 2
  2657  0010F6  B4D8               	btfsc	status,2,c
  2658  0010F8  D7E3               	goto	l8249
  2659  0010FA  0A01               	xorlw	1	; case 3
  2660  0010FC  B4D8               	btfsc	status,2,c
  2661  0010FE  D7DC               	goto	l8245
  2662  001100  0A07               	xorlw	7	; case 4
  2663  001102  B4D8               	btfsc	status,2,c
  2664  001104  D7DF               	goto	l8253
  2665  001106  D7E2               	goto	l8255
  2666  001108                     l8263:
  2667                           
  2668                           ; BSR set to: 0
  2669  001108  0E00               	movlw	0
  2670  00110A  0100               	movlb	0	; () banked
  2671  00110C  6F7E               	movwf	_Switch_Init& (0+255),b
  2672                           
  2673                           ; BSR set to: 0
  2674                           ;State_Mchn.c: 380: Red_Led(1);
  2675  00110E  0E01               	movlw	1
  2676  001110  EC6B  F01B         	call	_Red_Led
  2677                           
  2678                           ;State_Mchn.c: 382: }
  2679                           
  2680                           ;State_Mchn.c: 381: break;
  2681  001114  D156               	goto	l8427
  2682  001116                     l8269:
  2683  001116  0100               	movlb	0	; () banked
  2684  001118  517E               	movf	_Switch_Init& (0+255),w,b
  2685                           
  2686                           ; Switch size 1, requested type "space"
  2687                           ; Number of cases is 12, Range of values is 0 to 11
  2688                           ; switch strategies available:
  2689                           ; Name         Instructions Cycles
  2690                           ; simple_byte           37    19 (average)
  2691                           ;	Chosen strategy is simple_byte
  2692  00111A  0A00               	xorlw	0	; case 0
  2693  00111C  B4D8               	btfsc	status,2,c
  2694  00111E  D474               	goto	l7957
  2695  001120  0A01               	xorlw	1	; case 1
  2696  001122  B4D8               	btfsc	status,2,c
  2697  001124  D479               	goto	l7961
  2698  001126  0A03               	xorlw	3	; case 2
  2699  001128  B4D8               	btfsc	status,2,c
  2700  00112A  D4EF               	goto	l8001
  2701  00112C  0A01               	xorlw	1	; case 3
  2702  00112E  B4D8               	btfsc	status,2,c
  2703  001130  D52D               	goto	l8019
  2704  001132  0A07               	xorlw	7	; case 4
  2705  001134  B4D8               	btfsc	status,2,c
  2706  001136  D5AF               	goto	l8065
  2707  001138  0A01               	xorlw	1	; case 5
  2708  00113A  B4D8               	btfsc	status,2,c
  2709  00113C  D629               	goto	l8091
  2710  00113E  0A03               	xorlw	3	; case 6
  2711  001140  B4D8               	btfsc	status,2,c
  2712  001142  D63F               	goto	l8099
  2713  001144  0A01               	xorlw	1	; case 7
  2714  001146  B4D8               	btfsc	status,2,c
  2715  001148  D63E               	goto	l8101
  2716  00114A  0A0F               	xorlw	15	; case 8
  2717  00114C  B4D8               	btfsc	status,2,c
  2718  00114E  D663               	goto	l8113
  2719  001150  0A01               	xorlw	1	; case 9
  2720  001152  B4D8               	btfsc	status,2,c
  2721  001154  D785               	goto	l8231
  2722  001156  0A03               	xorlw	3	; case 10
  2723  001158  B4D8               	btfsc	status,2,c
  2724  00115A  D784               	goto	l8233
  2725  00115C  0A01               	xorlw	1	; case 11
  2726  00115E  B4D8               	btfsc	status,2,c
  2727  001160  D7A1               	goto	l8243
  2728  001162  D7D2               	goto	l8263
  2729  001164                     l8271:
  2730  001164  0E01               	movlw	1
  2731  001166  0100               	movlb	0	; () banked
  2732  001168  6F9D               	movwf	Train_Path@To& (0+255),b
  2733  00116A  0E03               	movlw	3
  2734  00116C  ECDB  F010         	call	_Train_Path
  2735  001170  0900               	iorlw	0
  2736  001172  A4D8               	btfss	status,2,c
  2737  001174  D085               	goto	l8355
  2738                           
  2739                           ;State_Mchn.c: 389: {
  2740                           ;State_Mchn.c: 390: Switch_Program = 1;
  2741  001176  0E01               	movlw	1
  2742  001178  6E1B               	movwf	_Switch_Program,c
  2743                           
  2744                           ;State_Mchn.c: 391: Eeprom_Store();
  2745  00117A  EC5A  F01A         	call	_Eeprom_Store	;wreg free
  2746  00117E                     l8277:
  2747                           
  2748                           ;State_Mchn.c: 392: if(Stop_Program == 1)
  2749  00117E  0418               	decf	_Stop_Program,w,c
  2750  001180  A4D8               	btfss	status,2,c
  2751  001182  D07E               	goto	l8355
  2752                           
  2753                           ;State_Mchn.c: 393: {
  2754                           ;State_Mchn.c: 394: Switch_Main = 0;
  2755  001184  0E00               	movlw	0
  2756  001186  6E19               	movwf	_Switch_Main,c
  2757                           
  2758                           ;State_Mchn.c: 396: }
  2759                           ;State_Mchn.c: 397: }
  2760                           ;State_Mchn.c: 398: break;
  2761  001188  D07B               	goto	l8355
  2762  00118A                     l8281:
  2763  00118A  0E03               	movlw	3
  2764  00118C  0100               	movlb	0	; () banked
  2765  00118E  6F9D               	movwf	Train_Path@To& (0+255),b
  2766  001190  0E02               	movlw	2
  2767  001192  ECDB  F010         	call	_Train_Path
  2768  001196  0900               	iorlw	0
  2769  001198  A4D8               	btfss	status,2,c
  2770  00119A  D072               	goto	l8355
  2771                           
  2772                           ;State_Mchn.c: 401: {
  2773                           ;State_Mchn.c: 402: Switch_Program = 2;
  2774  00119C  0E02               	movlw	2
  2775  00119E  6E1B               	movwf	_Switch_Program,c
  2776                           
  2777                           ;State_Mchn.c: 403: Eeprom_Store();
  2778  0011A0  EC5A  F01A         	call	_Eeprom_Store	;wreg free
  2779  0011A4  D7EC               	goto	l8277
  2780  0011A6                     l8291:
  2781  0011A6  0E04               	movlw	4
  2782  0011A8  0100               	movlb	0	; () banked
  2783  0011AA  6F9D               	movwf	Train_Path@To& (0+255),b
  2784  0011AC  0E01               	movlw	1
  2785  0011AE  ECDB  F010         	call	_Train_Path
  2786  0011B2  0900               	iorlw	0
  2787  0011B4  A4D8               	btfss	status,2,c
  2788  0011B6  D064               	goto	l8355
  2789                           
  2790                           ;State_Mchn.c: 413: {
  2791                           ;State_Mchn.c: 414: Switch_Program = 3;
  2792  0011B8  0E03               	movlw	3
  2793  0011BA  6E1B               	movwf	_Switch_Program,c
  2794                           
  2795                           ;State_Mchn.c: 415: Eeprom_Store();
  2796  0011BC  EC5A  F01A         	call	_Eeprom_Store	;wreg free
  2797  0011C0  D7DE               	goto	l8277
  2798  0011C2                     l8301:
  2799  0011C2  0E01               	movlw	1
  2800  0011C4  0100               	movlb	0	; () banked
  2801  0011C6  6F9D               	movwf	Train_Path@To& (0+255),b
  2802  0011C8  0E03               	movlw	3
  2803  0011CA  ECDB  F010         	call	_Train_Path
  2804  0011CE  0900               	iorlw	0
  2805  0011D0  A4D8               	btfss	status,2,c
  2806  0011D2  D056               	goto	l8355
  2807                           
  2808                           ;State_Mchn.c: 425: {
  2809                           ;State_Mchn.c: 426: Switch_Program = 4;
  2810  0011D4  0E04               	movlw	4
  2811  0011D6  6E1B               	movwf	_Switch_Program,c
  2812                           
  2813                           ;State_Mchn.c: 427: Eeprom_Store();
  2814  0011D8  EC5A  F01A         	call	_Eeprom_Store	;wreg free
  2815  0011DC  D7D0               	goto	l8277
  2816  0011DE                     l8311:
  2817  0011DE  0E02               	movlw	2
  2818  0011E0  0100               	movlb	0	; () banked
  2819  0011E2  6F9D               	movwf	Train_Path@To& (0+255),b
  2820  0011E4  0E04               	movlw	4
  2821  0011E6  ECDB  F010         	call	_Train_Path
  2822  0011EA  0900               	iorlw	0
  2823  0011EC  A4D8               	btfss	status,2,c
  2824  0011EE  D048               	goto	l8355
  2825                           
  2826                           ;State_Mchn.c: 437: {
  2827                           ;State_Mchn.c: 438: Switch_Program = 5;
  2828  0011F0  0E05               	movlw	5
  2829  0011F2  6E1B               	movwf	_Switch_Program,c
  2830                           
  2831                           ;State_Mchn.c: 439: Eeprom_Store();
  2832  0011F4  EC5A  F01A         	call	_Eeprom_Store	;wreg free
  2833  0011F8  D7C2               	goto	l8277
  2834  0011FA                     l8321:
  2835  0011FA  0E04               	movlw	4
  2836  0011FC  0100               	movlb	0	; () banked
  2837  0011FE  6F9D               	movwf	Train_Path@To& (0+255),b
  2838  001200  0E01               	movlw	1
  2839  001202  ECDB  F010         	call	_Train_Path
  2840  001206  0900               	iorlw	0
  2841  001208  A4D8               	btfss	status,2,c
  2842  00120A  D03A               	goto	l8355
  2843                           
  2844                           ;State_Mchn.c: 449: {
  2845                           ;State_Mchn.c: 450: Switch_Program = 6;
  2846  00120C  0E06               	movlw	6
  2847  00120E  6E1B               	movwf	_Switch_Program,c
  2848                           
  2849                           ;State_Mchn.c: 451: Eeprom_Store();
  2850  001210  EC5A  F01A         	call	_Eeprom_Store	;wreg free
  2851  001214  D7B4               	goto	l8277
  2852  001216                     l8331:
  2853  001216  0E03               	movlw	3
  2854  001218  0100               	movlb	0	; () banked
  2855  00121A  6F9D               	movwf	Train_Path@To& (0+255),b
  2856  00121C  0E02               	movlw	2
  2857  00121E  ECDB  F010         	call	_Train_Path
  2858  001222  0900               	iorlw	0
  2859  001224  A4D8               	btfss	status,2,c
  2860  001226  D02C               	goto	l8355
  2861                           
  2862                           ;State_Mchn.c: 461: {
  2863                           ;State_Mchn.c: 462: Switch_Program = 7;
  2864  001228  0E07               	movlw	7
  2865  00122A  6E1B               	movwf	_Switch_Program,c
  2866                           
  2867                           ;State_Mchn.c: 463: Eeprom_Store();
  2868  00122C  EC5A  F01A         	call	_Eeprom_Store	;wreg free
  2869  001230  D7A6               	goto	l8277
  2870  001232                     l8341:
  2871  001232  0E02               	movlw	2
  2872  001234  0100               	movlb	0	; () banked
  2873  001236  6F9D               	movwf	Train_Path@To& (0+255),b
  2874  001238  0E04               	movlw	4
  2875  00123A  ECDB  F010         	call	_Train_Path
  2876  00123E  0900               	iorlw	0
  2877  001240  A4D8               	btfss	status,2,c
  2878  001242  D01E               	goto	l8355
  2879                           
  2880                           ;State_Mchn.c: 473: {
  2881                           ;State_Mchn.c: 474: Switch_Program = 0;
  2882  001244  0E00               	movlw	0
  2883  001246  6E1B               	movwf	_Switch_Program,c
  2884                           
  2885                           ;State_Mchn.c: 475: Eeprom_Store();
  2886  001248  EC5A  F01A         	call	_Eeprom_Store	;wreg free
  2887  00124C  D798               	goto	l8277
  2888  00124E                     l8353:
  2889  00124E  501B               	movf	_Switch_Program,w,c
  2890                           
  2891                           ; Switch size 1, requested type "space"
  2892                           ; Number of cases is 8, Range of values is 0 to 7
  2893                           ; switch strategies available:
  2894                           ; Name         Instructions Cycles
  2895                           ; simple_byte           25    13 (average)
  2896                           ;	Chosen strategy is simple_byte
  2897  001250  0A00               	xorlw	0	; case 0
  2898  001252  B4D8               	btfsc	status,2,c
  2899  001254  D787               	goto	l8271
  2900  001256  0A01               	xorlw	1	; case 1
  2901  001258  B4D8               	btfsc	status,2,c
  2902  00125A  D797               	goto	l8281
  2903  00125C  0A03               	xorlw	3	; case 2
  2904  00125E  B4D8               	btfsc	status,2,c
  2905  001260  D7A2               	goto	l8291
  2906  001262  0A01               	xorlw	1	; case 3
  2907  001264  B4D8               	btfsc	status,2,c
  2908  001266  D7AD               	goto	l8301
  2909  001268  0A07               	xorlw	7	; case 4
  2910  00126A  B4D8               	btfsc	status,2,c
  2911  00126C  D7B8               	goto	l8311
  2912  00126E  0A01               	xorlw	1	; case 5
  2913  001270  B4D8               	btfsc	status,2,c
  2914  001272  D7C3               	goto	l8321
  2915  001274  0A03               	xorlw	3	; case 6
  2916  001276  B4D8               	btfsc	status,2,c
  2917  001278  D7CE               	goto	l8331
  2918  00127A  0A01               	xorlw	1	; case 7
  2919  00127C  B4D8               	btfsc	status,2,c
  2920  00127E  D7D9               	goto	l8341
  2921  001280                     l8355:
  2922                           
  2923                           ;State_Mchn.c: 671: if(GETxAPIxVAL(33) || GETxAPIxVAL(71))
  2924  001280  0E21               	movlw	33
  2925  001282  ECD2  F01D         	call	_GETxAPIxVAL
  2926  001286  0100               	movlb	0	; () banked
  2927  001288  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  2928  00128A  0100               	movlb	0	; () banked
  2929  00128C  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2930  00128E  A4D8               	btfss	status,2,c
  2931  001290  D009               	goto	l8359
  2932                           
  2933                           ; BSR set to: 0
  2934  001292  0E47               	movlw	71
  2935  001294  ECD2  F01D         	call	_GETxAPIxVAL
  2936  001298  0100               	movlb	0	; () banked
  2937  00129A  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  2938  00129C  0100               	movlb	0	; () banked
  2939  00129E  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  2940  0012A0  B4D8               	btfsc	status,2,c
  2941  0012A2  D00A               	goto	l8363
  2942  0012A4                     l8359:
  2943                           
  2944                           ; BSR set to: 0
  2945                           ;State_Mchn.c: 672: {
  2946                           ;State_Mchn.c: 673: Stop_Program = 1;
  2947  0012A4  0E01               	movlw	1
  2948  0012A6  6E18               	movwf	_Stop_Program,c
  2949                           
  2950                           ; BSR set to: 0
  2951                           ;State_Mchn.c: 674: SETxAPIxVAL(71, 0);
  2952  0012A8  0E00               	movlw	0
  2953  0012AA  0100               	movlb	0	; () banked
  2954  0012AC  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  2955  0012AE  0E00               	movlw	0
  2956  0012B0  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  2957  0012B2  0E47               	movlw	71
  2958  0012B4  EC11  F01D         	call	_SETxAPIxVAL
  2959  0012B8                     l8363:
  2960                           
  2961                           ;State_Mchn.c: 675: }
  2962                           ;State_Mchn.c: 677: if(Stop_Program == 1)
  2963  0012B8  0418               	decf	_Stop_Program,w,c
  2964  0012BA  A4D8               	btfss	status,2,c
  2965  0012BC  D003               	goto	l318
  2966                           
  2967                           ;State_Mchn.c: 678: {
  2968                           ;State_Mchn.c: 679: Red_Led(2);
  2969  0012BE  0E02               	movlw	2
  2970  0012C0  EC6B  F01B         	call	_Red_Led
  2971  0012C4                     l318:
  2972                           
  2973                           ;State_Mchn.c: 680: }
  2974                           ;State_Mchn.c: 682: Green_Led(1);
  2975  0012C4  0E01               	movlw	1
  2976  0012C6  ECAD  F01B         	call	_Green_Led
  2977                           
  2978                           ;State_Mchn.c: 684: break;
  2979  0012CA  D07B               	goto	l8427
  2980  0012CC                     l8367:
  2981  0012CC  0E01               	movlw	1
  2982  0012CE  0100               	movlb	0	; () banked
  2983  0012D0  6F9D               	movwf	Train_Path@To& (0+255),b
  2984  0012D2  0E03               	movlw	3
  2985  0012D4  ECDB  F010         	call	_Train_Path
  2986  0012D8  0900               	iorlw	0
  2987  0012DA  A4D8               	btfss	status,2,c
  2988  0012DC  D041               	goto	l8411
  2989                           
  2990                           ;State_Mchn.c: 690: {
  2991                           ;State_Mchn.c: 691: Switch_Program = 1;
  2992  0012DE  0E01               	movlw	1
  2993  0012E0  6E1B               	movwf	_Switch_Program,c
  2994                           
  2995                           ;State_Mchn.c: 692: Eeprom_Store();
  2996  0012E2  EC5A  F01A         	call	_Eeprom_Store	;wreg free
  2997  0012E6                     l8373:
  2998                           
  2999                           ;State_Mchn.c: 693: if(Stop_Program == 1)
  3000  0012E6  0418               	decf	_Stop_Program,w,c
  3001  0012E8  A4D8               	btfss	status,2,c
  3002  0012EA  D03A               	goto	l8411
  3003                           
  3004                           ;State_Mchn.c: 694: {
  3005                           ;State_Mchn.c: 695: Switch_Main = 0;
  3006  0012EC  0E00               	movlw	0
  3007  0012EE  6E19               	movwf	_Switch_Main,c
  3008                           
  3009                           ;State_Mchn.c: 697: }
  3010                           ;State_Mchn.c: 698: }
  3011                           ;State_Mchn.c: 699: break;
  3012  0012F0  D037               	goto	l8411
  3013  0012F2                     l8377:
  3014  0012F2  0E04               	movlw	4
  3015  0012F4  0100               	movlb	0	; () banked
  3016  0012F6  6F9D               	movwf	Train_Path@To& (0+255),b
  3017  0012F8  0E01               	movlw	1
  3018  0012FA  ECDB  F010         	call	_Train_Path
  3019  0012FE  0900               	iorlw	0
  3020  001300  A4D8               	btfss	status,2,c
  3021  001302  D02E               	goto	l8411
  3022                           
  3023                           ;State_Mchn.c: 702: {
  3024                           ;State_Mchn.c: 703: Switch_Program = 2;
  3025  001304  0E02               	movlw	2
  3026  001306  6E1B               	movwf	_Switch_Program,c
  3027                           
  3028                           ;State_Mchn.c: 704: Eeprom_Store();
  3029  001308  EC5A  F01A         	call	_Eeprom_Store	;wreg free
  3030  00130C  D7EC               	goto	l8373
  3031  00130E                     l8387:
  3032  00130E  0E02               	movlw	2
  3033  001310  0100               	movlb	0	; () banked
  3034  001312  6F9D               	movwf	Train_Path@To& (0+255),b
  3035  001314  0E04               	movlw	4
  3036  001316  ECDB  F010         	call	_Train_Path
  3037  00131A  0900               	iorlw	0
  3038  00131C  A4D8               	btfss	status,2,c
  3039  00131E  D020               	goto	l8411
  3040                           
  3041                           ;State_Mchn.c: 714: {
  3042                           ;State_Mchn.c: 715: Switch_Program = 3;
  3043  001320  0E03               	movlw	3
  3044  001322  6E1B               	movwf	_Switch_Program,c
  3045                           
  3046                           ;State_Mchn.c: 716: Eeprom_Store();
  3047  001324  EC5A  F01A         	call	_Eeprom_Store	;wreg free
  3048  001328  D7DE               	goto	l8373
  3049  00132A                     l8397:
  3050  00132A  0E03               	movlw	3
  3051  00132C  0100               	movlb	0	; () banked
  3052  00132E  6F9D               	movwf	Train_Path@To& (0+255),b
  3053  001330  0E02               	movlw	2
  3054  001332  ECDB  F010         	call	_Train_Path
  3055  001336  0900               	iorlw	0
  3056  001338  A4D8               	btfss	status,2,c
  3057  00133A  D012               	goto	l8411
  3058                           
  3059                           ;State_Mchn.c: 726: {
  3060                           ;State_Mchn.c: 727: Switch_Program = 0;
  3061  00133C  0E00               	movlw	0
  3062  00133E  6E1B               	movwf	_Switch_Program,c
  3063                           
  3064                           ;State_Mchn.c: 728: Eeprom_Store();
  3065  001340  EC5A  F01A         	call	_Eeprom_Store	;wreg free
  3066  001344  D7D0               	goto	l8373
  3067  001346                     l8409:
  3068  001346  501B               	movf	_Switch_Program,w,c
  3069                           
  3070                           ; Switch size 1, requested type "space"
  3071                           ; Number of cases is 4, Range of values is 0 to 3
  3072                           ; switch strategies available:
  3073                           ; Name         Instructions Cycles
  3074                           ; simple_byte           13     7 (average)
  3075                           ;	Chosen strategy is simple_byte
  3076  001348  0A00               	xorlw	0	; case 0
  3077  00134A  B4D8               	btfsc	status,2,c
  3078  00134C  D7BF               	goto	l8367
  3079  00134E  0A01               	xorlw	1	; case 1
  3080  001350  B4D8               	btfsc	status,2,c
  3081  001352  D7CF               	goto	l8377
  3082  001354  0A03               	xorlw	3	; case 2
  3083  001356  B4D8               	btfsc	status,2,c
  3084  001358  D7DA               	goto	l8387
  3085  00135A  0A01               	xorlw	1	; case 3
  3086  00135C  B4D8               	btfsc	status,2,c
  3087  00135E  D7E5               	goto	l8397
  3088  001360                     l8411:
  3089                           
  3090                           ;State_Mchn.c: 922: if(GETxAPIxVAL(33) || GETxAPIxVAL(71))
  3091  001360  0E21               	movlw	33
  3092  001362  ECD2  F01D         	call	_GETxAPIxVAL
  3093  001366  0100               	movlb	0	; () banked
  3094  001368  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  3095  00136A  0100               	movlb	0	; () banked
  3096  00136C  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3097  00136E  A4D8               	btfss	status,2,c
  3098  001370  D009               	goto	l8415
  3099                           
  3100                           ; BSR set to: 0
  3101  001372  0E47               	movlw	71
  3102  001374  ECD2  F01D         	call	_GETxAPIxVAL
  3103  001378  0100               	movlb	0	; () banked
  3104  00137A  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  3105  00137C  0100               	movlb	0	; () banked
  3106  00137E  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3107  001380  B4D8               	btfsc	status,2,c
  3108  001382  D00A               	goto	l8419
  3109  001384                     l8415:
  3110                           
  3111                           ; BSR set to: 0
  3112                           ;State_Mchn.c: 923: {
  3113                           ;State_Mchn.c: 924: Stop_Program = 1;
  3114  001384  0E01               	movlw	1
  3115  001386  6E18               	movwf	_Stop_Program,c
  3116                           
  3117                           ; BSR set to: 0
  3118                           ;State_Mchn.c: 925: SETxAPIxVAL(71, 0);
  3119  001388  0E00               	movlw	0
  3120  00138A  0100               	movlb	0	; () banked
  3121  00138C  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  3122  00138E  0E00               	movlw	0
  3123  001390  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  3124  001392  0E47               	movlw	71
  3125  001394  EC11  F01D         	call	_SETxAPIxVAL
  3126  001398                     l8419:
  3127                           
  3128                           ;State_Mchn.c: 926: }
  3129                           ;State_Mchn.c: 928: if(Stop_Program == 1)
  3130  001398  0418               	decf	_Stop_Program,w,c
  3131  00139A  A4D8               	btfss	status,2,c
  3132  00139C  D003               	goto	l338
  3133                           
  3134                           ;State_Mchn.c: 929: {
  3135                           ;State_Mchn.c: 930: Red_Led(2);
  3136  00139E  0E02               	movlw	2
  3137  0013A0  EC6B  F01B         	call	_Red_Led
  3138  0013A4                     l338:
  3139                           
  3140                           ;State_Mchn.c: 931: }
  3141                           ;State_Mchn.c: 933: Green_Led(1);
  3142  0013A4  0E01               	movlw	1
  3143  0013A6  ECAD  F01B         	call	_Green_Led
  3144                           
  3145                           ;State_Mchn.c: 938: }
  3146                           
  3147                           ;State_Mchn.c: 937: default : break;
  3148                           
  3149                           ;State_Mchn.c: 935: break;
  3150  0013AA  D00B               	goto	l8427
  3151  0013AC                     l8425:
  3152  0013AC  5019               	movf	_Switch_Main,w,c
  3153                           
  3154                           ; Switch size 1, requested type "space"
  3155                           ; Number of cases is 3, Range of values is 0 to 2
  3156                           ; switch strategies available:
  3157                           ; Name         Instructions Cycles
  3158                           ; simple_byte           10     6 (average)
  3159                           ;	Chosen strategy is simple_byte
  3160  0013AE  0A00               	xorlw	0	; case 0
  3161  0013B0  B4D8               	btfsc	status,2,c
  3162  0013B2  EF39  F004         	goto	l7921
  3163  0013B6  0A01               	xorlw	1	; case 1
  3164  0013B8  B4D8               	btfsc	status,2,c
  3165  0013BA  D749               	goto	l8353
  3166  0013BC  0A03               	xorlw	3	; case 2
  3167  0013BE  B4D8               	btfsc	status,2,c
  3168  0013C0  D7C2               	goto	l8409
  3169  0013C2                     l8427:
  3170                           
  3171                           ;State_Mchn.c: 939: SETxAPIxVAL(63, Switch_Main);
  3172  0013C2  C019  F090         	movff	_Switch_Main,SETxAPIxVAL@value
  3173  0013C6  0100               	movlb	0	; () banked
  3174  0013C8  6B91               	clrf	(SETxAPIxVAL@value+1)& (0+255),b
  3175  0013CA  0E3F               	movlw	63
  3176  0013CC  EC11  F01D         	call	_SETxAPIxVAL
  3177                           
  3178                           ;State_Mchn.c: 940: SETxAPIxVAL(80, Switch_Program);
  3179  0013D0  C01B  F090         	movff	_Switch_Program,SETxAPIxVAL@value
  3180  0013D4  0100               	movlb	0	; () banked
  3181  0013D6  6B91               	clrf	(SETxAPIxVAL@value+1)& (0+255),b
  3182  0013D8  0E50               	movlw	80
  3183  0013DA  EC11  F01D         	call	_SETxAPIxVAL
  3184  0013DE  0012               	return		;funcret
  3185  0013E0                     __end_of_Update_StateMchn:
  3186                           	opt stack 0
  3187                           tblptru	equ	0xFF8
  3188                           tblptrh	equ	0xFF7
  3189                           tblptrl	equ	0xFF6
  3190                           tablat	equ	0xFF5
  3191                           postinc0	equ	0xFEE
  3192                           wreg	equ	0xFE8
  3193                           postdec1	equ	0xFE5
  3194                           fsr1h	equ	0xFE2
  3195                           fsr1l	equ	0xFE1
  3196                           status	equ	0xFD8
  3197                           
  3198 ;; *************** function _Train_Path *****************
  3199 ;; Defined at:
  3200 ;;		line 958 in file "../State_Mchn.c"
  3201 ;; Parameters:    Size  Location     Type
  3202 ;;  From            1    wreg     unsigned char 
  3203 ;;  To              1   16[BANK0 ] unsigned char 
  3204 ;; Auto vars:     Size  Location     Type
  3205 ;;  From            1   17[BANK0 ] unsigned char 
  3206 ;; Return value:  Size  Location     Type
  3207 ;;                  1    wreg      unsigned char 
  3208 ;; Registers used:
  3209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3210 ;; Tracked objects:
  3211 ;;		On entry : 0/0
  3212 ;;		On exit  : 0/0
  3213 ;;		Unchanged: 0/0
  3214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3215 ;;      Params:         0       1       0       0       0       0       0       0       0
  3216 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3217 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3218 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3219 ;;Total ram usage:        2 bytes
  3220 ;; Hardware stack levels used:    1
  3221 ;; Hardware stack levels required when called:    6
  3222 ;; This function calls:
  3223 ;;		_GETxAPIxVAL
  3224 ;;		_Junction
  3225 ;;		_Left_Mountain_From_The_Left
  3226 ;;		_Left_Mountain_From_The_Right
  3227 ;;		_Right_Mountain_From_The_Left
  3228 ;;		_Right_Mountain_From_The_Right
  3229 ;;		_SETxAPIxVAL
  3230 ;;		_Train_Move_Left_Brake
  3231 ;;		_Train_Move_Left_Start
  3232 ;;		_Train_Move_Right_Brake
  3233 ;;		_Train_Move_Right_Start
  3234 ;; This function is called by:
  3235 ;;		_Update_StateMchn
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239                           	psect	text2
  3240  0021B6                     __ptext2:
  3241                           	opt stack 0
  3242  0021B6                     _Train_Path:
  3243                           	opt stack 23
  3244                           
  3245                           ;incstack = 0
  3246                           ;Train_Path@From stored from wreg
  3247  0021B6  0100               	movlb	0	; () banked
  3248  0021B8  6F9E               	movwf	Train_Path@From& (0+255),b
  3249                           
  3250                           ;State_Mchn.c: 960: static char Return_Val = 1;
  3251                           ;State_Mchn.c: 962: SETxAPIxVAL(61, From);
  3252  0021BA  C09E  F090         	movff	Train_Path@From,SETxAPIxVAL@value
  3253  0021BE  0100               	movlb	0	; () banked
  3254  0021C0  6B91               	clrf	(SETxAPIxVAL@value+1)& (0+255),b
  3255  0021C2  0E3D               	movlw	61
  3256  0021C4  EC11  F01D         	call	_SETxAPIxVAL
  3257                           
  3258                           ;State_Mchn.c: 963: SETxAPIxVAL(62, To);
  3259  0021C8  C09D  F090         	movff	Train_Path@To,SETxAPIxVAL@value
  3260  0021CC  0100               	movlb	0	; () banked
  3261  0021CE  6B91               	clrf	(SETxAPIxVAL@value+1)& (0+255),b
  3262  0021D0  0E3E               	movlw	62
  3263  0021D2  EC11  F01D         	call	_SETxAPIxVAL
  3264                           
  3265                           ;State_Mchn.c: 965: switch(Switch_Train_Path)
  3266  0021D6  D1A1               	goto	l7755
  3267  0021D8                     l7547:
  3268  0021D8  0E00               	movlw	0
  3269  0021DA  0100               	movlb	0	; () banked
  3270  0021DC  6F95               	movwf	Junction@Straight_Bend& (0+255),b
  3271  0021DE  0E01               	movlw	1
  3272  0021E0  ECCB  F014         	call	_Junction
  3273  0021E4  0900               	iorlw	0
  3274  0021E6  B4D8               	btfsc	status,2,c
  3275  0021E8  D01B               	goto	l7561
  3276  0021EA                     l349:
  3277                           
  3278                           ;State_Mchn.c: 973: }
  3279                           ;State_Mchn.c: 974: Return_Val = 1;
  3280  0021EA  0E01               	movlw	1
  3281  0021EC                     L39:
  3282  0021EC  0100               	movlb	0	; () banked
  3283  0021EE  6FBB               	movwf	Train_Path@Return_Val& (0+255),b
  3284                           
  3285                           ;State_Mchn.c: 975: break;
  3286  0021F0  D1BE               	goto	l7757
  3287  0021F2                     l7551:
  3288                           
  3289                           ; BSR set to: 0
  3290  0021F2  0E01               	movlw	1
  3291  0021F4  0100               	movlb	0	; () banked
  3292  0021F6  6F95               	movwf	Junction@Straight_Bend& (0+255),b
  3293  0021F8  0E01               	movlw	1
  3294  0021FA  ECCB  F014         	call	_Junction
  3295  0021FE  D7F2               	goto	L58
  3296  002200                     l7555:
  3297                           
  3298                           ; BSR set to: 0
  3299  002200  0E01               	movlw	1
  3300  002202  0100               	movlb	0	; () banked
  3301  002204  6F95               	movwf	Junction@Straight_Bend& (0+255),b
  3302  002206  0E00               	movlw	0
  3303  002208  ECCB  F014         	call	_Junction
  3304  00220C  D7EB               	goto	L58
  3305  00220E                     l7559:
  3306                           
  3307                           ; BSR set to: 0
  3308  00220E  0E00               	movlw	0
  3309  002210  0100               	movlb	0	; () banked
  3310  002212  6F95               	movwf	Junction@Straight_Bend& (0+255),b
  3311  002214  0E00               	movlw	0
  3312  002216  ECCB  F014         	call	_Junction
  3313  00221A  0900               	iorlw	0
  3314  00221C  A4D8               	btfss	status,2,c
  3315  00221E  D7E5               	goto	l349
  3316  002220                     l7561:
  3317                           
  3318                           ;State_Mchn.c: 991: {
  3319                           ;State_Mchn.c: 992: Switch_Train_Path = 1;
  3320  002220  0E01               	movlw	1
  3321  002222  D016               	goto	L40
  3322  002224                     l7565:
  3323  002224  0100               	movlb	0	; () banked
  3324  002226  519E               	movf	Train_Path@From& (0+255),w,b
  3325                           
  3326                           ; Switch size 1, requested type "space"
  3327                           ; Number of cases is 4, Range of values is 1 to 4
  3328                           ; switch strategies available:
  3329                           ; Name         Instructions Cycles
  3330                           ; simple_byte           13     7 (average)
  3331                           ;	Chosen strategy is simple_byte
  3332  002228  0A01               	xorlw	1	; case 1
  3333  00222A  B4D8               	btfsc	status,2,c
  3334  00222C  D7E9               	goto	l7555
  3335  00222E  0A03               	xorlw	3	; case 2
  3336  002230  B4D8               	btfsc	status,2,c
  3337  002232  D7ED               	goto	l7559
  3338  002234  0A01               	xorlw	1	; case 3
  3339  002236  B4D8               	btfsc	status,2,c
  3340  002238  D7CF               	goto	l7547
  3341  00223A  0A07               	xorlw	7	; case 4
  3342  00223C  B4D8               	btfsc	status,2,c
  3343  00223E  D7D9               	goto	l7551
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;State_Mchn.c: 999: break;
  3347  002240  D196               	goto	l7757
  3348  002242                     l7567:
  3349                           
  3350                           ; BSR set to: 0
  3351  002242  0E00               	movlw	0
  3352  002244  0100               	movlb	0	; () banked
  3353  002246  6F95               	movwf	Junction@Straight_Bend& (0+255),b
  3354  002248  0E01               	movlw	1
  3355  00224A  ECCB  F014         	call	_Junction
  3356  00224E  D01A               	goto	L45
  3357  002250                     L40:
  3358  002250  0100               	movlb	0	; () banked
  3359  002252  6F80               	movwf	_Switch_Train_Path& (0+255),b
  3360                           
  3361                           ;State_Mchn.c: 1006: Return_Val = 1;
  3362  002254  0E01               	movlw	1
  3363  002256  0100               	movlb	0	; () banked
  3364  002258  6FBB               	movwf	Train_Path@Return_Val& (0+255),b
  3365  00225A  D7C7               	goto	l349
  3366  00225C                     l7571:
  3367                           
  3368                           ; BSR set to: 0
  3369  00225C  0E01               	movlw	1
  3370  00225E  0100               	movlb	0	; () banked
  3371  002260  6F95               	movwf	Junction@Straight_Bend& (0+255),b
  3372  002262  0E01               	movlw	1
  3373  002264  ECCB  F014         	call	_Junction
  3374  002268  D00D               	goto	L45
  3375  00226A                     l7575:
  3376                           
  3377                           ; BSR set to: 0
  3378  00226A  0E01               	movlw	1
  3379  00226C  0100               	movlb	0	; () banked
  3380  00226E  6F95               	movwf	Junction@Straight_Bend& (0+255),b
  3381  002270  0E00               	movlw	0
  3382  002272  ECCB  F014         	call	_Junction
  3383  002276  D006               	goto	L45
  3384  002278                     l7579:
  3385                           
  3386                           ; BSR set to: 0
  3387  002278  0E00               	movlw	0
  3388  00227A  0100               	movlb	0	; () banked
  3389  00227C  6F95               	movwf	Junction@Straight_Bend& (0+255),b
  3390  00227E  0E00               	movlw	0
  3391  002280  ECCB  F014         	call	_Junction
  3392  002284                     L45:
  3393  002284  0900               	iorlw	0
  3394  002286  A4D8               	btfss	status,2,c
  3395  002288  D7B0               	goto	l349
  3396                           
  3397                           ;State_Mchn.c: 1025: {
  3398                           ;State_Mchn.c: 1026: Switch_Train_Path = 2;
  3399  00228A  0E02               	movlw	2
  3400  00228C  D7E1               	goto	L40
  3401  00228E                     l7585:
  3402                           
  3403                           ; BSR set to: 0
  3404  00228E  0100               	movlb	0	; () banked
  3405  002290  519D               	movf	Train_Path@To& (0+255),w,b
  3406                           
  3407                           ; Switch size 1, requested type "space"
  3408                           ; Number of cases is 4, Range of values is 1 to 4
  3409                           ; switch strategies available:
  3410                           ; Name         Instructions Cycles
  3411                           ; simple_byte           13     7 (average)
  3412                           ;	Chosen strategy is simple_byte
  3413  002292  0A01               	xorlw	1	; case 1
  3414  002294  B4D8               	btfsc	status,2,c
  3415  002296  D7E9               	goto	l7575
  3416  002298  0A03               	xorlw	3	; case 2
  3417  00229A  B4D8               	btfsc	status,2,c
  3418  00229C  D7ED               	goto	l7579
  3419  00229E  0A01               	xorlw	1	; case 3
  3420  0022A0  B4D8               	btfsc	status,2,c
  3421  0022A2  D7CF               	goto	l7567
  3422  0022A4  0A07               	xorlw	7	; case 4
  3423  0022A6  B4D8               	btfsc	status,2,c
  3424  0022A8  D7D9               	goto	l7571
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;State_Mchn.c: 1033: break;
  3428  0022AA  D161               	goto	l7757
  3429  0022AC                     l7587:
  3430                           
  3431                           ; BSR set to: 0
  3432  0022AC  EC99  F016         	call	_Train_Move_Right_Start	;wreg free
  3433  0022B0  D008               	goto	L48
  3434  0022B2                     l7591:
  3435                           
  3436                           ; BSR set to: 0
  3437  0022B2  EC99  F016         	call	_Train_Move_Right_Start	;wreg free
  3438  0022B6  D005               	goto	L48
  3439  0022B8                     l7595:
  3440                           
  3441                           ; BSR set to: 0
  3442  0022B8  EC2B  F017         	call	_Train_Move_Left_Start	;wreg free
  3443  0022BC  D002               	goto	L48
  3444  0022BE                     l7599:
  3445                           
  3446                           ; BSR set to: 0
  3447  0022BE  EC2B  F017         	call	_Train_Move_Left_Start	;wreg free
  3448  0022C2                     L48:
  3449  0022C2  0900               	iorlw	0
  3450  0022C4  A4D8               	btfss	status,2,c
  3451  0022C6  D791               	goto	l349
  3452                           
  3453                           ;State_Mchn.c: 1059: {
  3454                           ;State_Mchn.c: 1060: Switch_Train_Path = 3;
  3455  0022C8  0E03               	movlw	3
  3456  0022CA  D7C2               	goto	L40
  3457  0022CC                     l7605:
  3458                           
  3459                           ; BSR set to: 0
  3460  0022CC  0100               	movlb	0	; () banked
  3461  0022CE  519D               	movf	Train_Path@To& (0+255),w,b
  3462                           
  3463                           ; Switch size 1, requested type "space"
  3464                           ; Number of cases is 4, Range of values is 1 to 4
  3465                           ; switch strategies available:
  3466                           ; Name         Instructions Cycles
  3467                           ; simple_byte           13     7 (average)
  3468                           ;	Chosen strategy is simple_byte
  3469  0022D0  0A01               	xorlw	1	; case 1
  3470  0022D2  B4D8               	btfsc	status,2,c
  3471  0022D4  D7F1               	goto	l7595
  3472  0022D6  0A03               	xorlw	3	; case 2
  3473  0022D8  B4D8               	btfsc	status,2,c
  3474  0022DA  D7F1               	goto	l7599
  3475  0022DC  0A01               	xorlw	1	; case 3
  3476  0022DE  B4D8               	btfsc	status,2,c
  3477  0022E0  D7E5               	goto	l7587
  3478  0022E2  0A07               	xorlw	7	; case 4
  3479  0022E4  B4D8               	btfsc	status,2,c
  3480  0022E6  D7E5               	goto	l7591
  3481                           
  3482                           ; BSR set to: 0
  3483                           ;State_Mchn.c: 1067: break;
  3484  0022E8  D142               	goto	l7757
  3485  0022EA                     l7607:
  3486                           
  3487                           ; BSR set to: 0
  3488  0022EA  0E1C               	movlw	28
  3489  0022EC  ECD2  F01D         	call	_GETxAPIxVAL
  3490  0022F0  0100               	movlb	0	; () banked
  3491  0022F2  058D               	decf	?_GETxAPIxVAL& (0+255),w,b
  3492  0022F4  0100               	movlb	0	; () banked
  3493  0022F6  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3494  0022F8  B4D8               	btfsc	status,2,c
  3495  0022FA  D088               	goto	l7669
  3496                           
  3497                           ; BSR set to: 0
  3498                           ;State_Mchn.c: 1074: else if(GETxAPIxVAL(41) == 1){
  3499                           
  3500                           ; BSR set to: 0
  3501                           
  3502                           ;State_Mchn.c: 1073: }
  3503                           
  3504                           ; BSR set to: 0
  3505                           ;State_Mchn.c: 1072: Switch_Train_Path = 4;
  3506  0022FC  0E29               	movlw	41
  3507  0022FE  ECD2  F01D         	call	_GETxAPIxVAL
  3508  002302  0100               	movlb	0	; () banked
  3509  002304  058D               	decf	?_GETxAPIxVAL& (0+255),w,b
  3510  002306  0100               	movlb	0	; () banked
  3511  002308  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3512  00230A  A4D8               	btfss	status,2,c
  3513  00230C  D002               	goto	l7615
  3514  00230E                     
  3515                           ; BSR set to: 0
  3516                           ;State_Mchn.c: 1075: Switch_Train_Path = 5;
  3517  00230E  0E05               	movlw	5
  3518  002310  D049               	goto	L30
  3519  002312                     l7615:
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;State_Mchn.c: 1077: else if(GETxAPIxVAL(42) == 1){
  3523  002312  0E2A               	movlw	42
  3524  002314  ECD2  F01D         	call	_GETxAPIxVAL
  3525  002318  0100               	movlb	0	; () banked
  3526  00231A  058D               	decf	?_GETxAPIxVAL& (0+255),w,b
  3527  00231C  0100               	movlb	0	; () banked
  3528  00231E  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3529  002320  A4D8               	btfss	status,2,c
  3530  002322  D002               	goto	l7619
  3531  002324                     
  3532                           ; BSR set to: 0
  3533                           ;State_Mchn.c: 1078: Switch_Train_Path = 6;
  3534  002324  0E06               	movlw	6
  3535  002326  D03E               	goto	L30
  3536  002328                     l7619:
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;State_Mchn.c: 1080: else if(GETxAPIxVAL(44) == 1){
  3540  002328  0E2C               	movlw	44
  3541  00232A  ECD2  F01D         	call	_GETxAPIxVAL
  3542  00232E  0100               	movlb	0	; () banked
  3543  002330  058D               	decf	?_GETxAPIxVAL& (0+255),w,b
  3544  002332  0100               	movlb	0	; () banked
  3545  002334  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3546  002336  A4D8               	btfss	status,2,c
  3547  002338  D002               	goto	l7623
  3548  00233A                     
  3549                           ; BSR set to: 0
  3550                           ;State_Mchn.c: 1081: Switch_Train_Path = 7;
  3551  00233A  0E07               	movlw	7
  3552  00233C  D033               	goto	L30
  3553  00233E                     l7623:
  3554                           
  3555                           ; BSR set to: 0
  3556                           ;State_Mchn.c: 1083: else if(GETxAPIxVAL(43) == 1){
  3557  00233E  0E2B               	movlw	43
  3558  002340  ECD2  F01D         	call	_GETxAPIxVAL
  3559  002344  0100               	movlb	0	; () banked
  3560  002346  058D               	decf	?_GETxAPIxVAL& (0+255),w,b
  3561  002348  0100               	movlb	0	; () banked
  3562  00234A  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3563  00234C  A4D8               	btfss	status,2,c
  3564  00234E  D74D               	goto	l349
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;State_Mchn.c: 1084: Switch_Train_Path = 8;
  3568  002350  0E08               	movlw	8
  3569  002352  D028               	goto	L30
  3570  002354                     l7627:
  3571                           
  3572                           ; BSR set to: 0
  3573  002354  0E1D               	movlw	29
  3574  002356  ECD2  F01D         	call	_GETxAPIxVAL
  3575  00235A  0100               	movlb	0	; () banked
  3576  00235C  058D               	decf	?_GETxAPIxVAL& (0+255),w,b
  3577  00235E  0100               	movlb	0	; () banked
  3578  002360  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3579  002362  B4D8               	btfsc	status,2,c
  3580  002364  D053               	goto	l7669
  3581                           
  3582                           ; BSR set to: 0
  3583                           ;State_Mchn.c: 1091: else if(GETxAPIxVAL(41) == 1){
  3584                           
  3585                           ; BSR set to: 0
  3586                           
  3587                           ;State_Mchn.c: 1090: }
  3588                           
  3589                           ; BSR set to: 0
  3590                           ;State_Mchn.c: 1089: Switch_Train_Path = 4;
  3591  002366  0E29               	movlw	41
  3592  002368  ECD2  F01D         	call	_GETxAPIxVAL
  3593  00236C  0100               	movlb	0	; () banked
  3594  00236E  058D               	decf	?_GETxAPIxVAL& (0+255),w,b
  3595  002370  0100               	movlb	0	; () banked
  3596  002372  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3597  002374  B4D8               	btfsc	status,2,c
  3598  002376  D7CB               	goto	L95
  3599                           
  3600                           ; BSR set to: 0
  3601                           ;State_Mchn.c: 1094: else if(GETxAPIxVAL(42) == 1){
  3602                           
  3603                           ; BSR set to: 0
  3604                           
  3605                           ;State_Mchn.c: 1093: }
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;State_Mchn.c: 1092: Switch_Train_Path = 5;
  3609  002378  0E2A               	movlw	42
  3610  00237A  ECD2  F01D         	call	_GETxAPIxVAL
  3611  00237E  0100               	movlb	0	; () banked
  3612  002380  058D               	decf	?_GETxAPIxVAL& (0+255),w,b
  3613  002382  0100               	movlb	0	; () banked
  3614  002384  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3615  002386  B4D8               	btfsc	status,2,c
  3616  002388  D7CD               	goto	L96
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;State_Mchn.c: 1097: else if(GETxAPIxVAL(44) == 1){
  3620                           
  3621                           ; BSR set to: 0
  3622                           
  3623                           ;State_Mchn.c: 1096: }
  3624                           
  3625                           ; BSR set to: 0
  3626                           ;State_Mchn.c: 1095: Switch_Train_Path = 6;
  3627  00238A  0E2C               	movlw	44
  3628  00238C  ECD2  F01D         	call	_GETxAPIxVAL
  3629  002390  0100               	movlb	0	; () banked
  3630  002392  058D               	decf	?_GETxAPIxVAL& (0+255),w,b
  3631  002394  0100               	movlb	0	; () banked
  3632  002396  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3633  002398  B4D8               	btfsc	status,2,c
  3634  00239A  D7CF               	goto	L97
  3635                           
  3636                           ; BSR set to: 0
  3637                           ;State_Mchn.c: 1100: else if(GETxAPIxVAL(43) == 1){
  3638                           
  3639                           ; BSR set to: 0
  3640                           
  3641                           ;State_Mchn.c: 1099: }
  3642                           
  3643                           ; BSR set to: 0
  3644                           ;State_Mchn.c: 1098: Switch_Train_Path = 7;
  3645  00239C  0E2B               	movlw	43
  3646  00239E  ECD2  F01D         	call	_GETxAPIxVAL
  3647  0023A2  D7D0               	goto	L41
  3648  0023A4                     L30:
  3649  0023A4  0100               	movlb	0	; () banked
  3650  0023A6  6F80               	movwf	_Switch_Train_Path& (0+255),b
  3651                           
  3652                           ; BSR set to: 0
  3653                           
  3654                           ; BSR set to: 0
  3655                           
  3656                           ; BSR set to: 0
  3657  0023A8  D720               	goto	l349
  3658  0023AA                     l7647:
  3659                           
  3660                           ; BSR set to: 0
  3661  0023AA  0E1E               	movlw	30
  3662  0023AC  ECD2  F01D         	call	_GETxAPIxVAL
  3663  0023B0  0100               	movlb	0	; () banked
  3664  0023B2  058D               	decf	?_GETxAPIxVAL& (0+255),w,b
  3665  0023B4  0100               	movlb	0	; () banked
  3666  0023B6  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3667  0023B8  B4D8               	btfsc	status,2,c
  3668  0023BA  D028               	goto	l7669
  3669                           
  3670                           ; BSR set to: 0
  3671                           ;State_Mchn.c: 1109: else if(GETxAPIxVAL(41) == 1){
  3672                           
  3673                           ; BSR set to: 0
  3674                           
  3675                           ;State_Mchn.c: 1108: }
  3676                           
  3677                           ; BSR set to: 0
  3678                           ;State_Mchn.c: 1106: {
  3679                           ;State_Mchn.c: 1107: Switch_Train_Path = 4;
  3680  0023BC  0E29               	movlw	41
  3681  0023BE  ECD2  F01D         	call	_GETxAPIxVAL
  3682  0023C2  0100               	movlb	0	; () banked
  3683  0023C4  058D               	decf	?_GETxAPIxVAL& (0+255),w,b
  3684  0023C6  0100               	movlb	0	; () banked
  3685  0023C8  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3686  0023CA  B4D8               	btfsc	status,2,c
  3687  0023CC  D02A               	goto	l7673
  3688                           
  3689                           ; BSR set to: 0
  3690                           ;State_Mchn.c: 1112: else if(GETxAPIxVAL(42) == 1){
  3691                           
  3692                           ; BSR set to: 0
  3693                           
  3694                           ;State_Mchn.c: 1111: }
  3695                           
  3696                           ; BSR set to: 0
  3697                           ;State_Mchn.c: 1110: Switch_Train_Path = 12;
  3698  0023CE  0E2A               	movlw	42
  3699  0023D0  ECD2  F01D         	call	_GETxAPIxVAL
  3700  0023D4  0100               	movlb	0	; () banked
  3701  0023D6  058D               	decf	?_GETxAPIxVAL& (0+255),w,b
  3702  0023D8  0100               	movlb	0	; () banked
  3703  0023DA  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3704  0023DC  B4D8               	btfsc	status,2,c
  3705  0023DE  D02C               	goto	l7677
  3706                           
  3707                           ; BSR set to: 0
  3708                           ;State_Mchn.c: 1115: else if(GETxAPIxVAL(44) == 1){
  3709                           
  3710                           ; BSR set to: 0
  3711                           
  3712                           ;State_Mchn.c: 1114: }
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;State_Mchn.c: 1113: Switch_Train_Path = 11;
  3716  0023E0  0E2C               	movlw	44
  3717  0023E2  ECD2  F01D         	call	_GETxAPIxVAL
  3718  0023E6  0100               	movlb	0	; () banked
  3719  0023E8  058D               	decf	?_GETxAPIxVAL& (0+255),w,b
  3720  0023EA  0100               	movlb	0	; () banked
  3721  0023EC  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3722  0023EE  B4D8               	btfsc	status,2,c
  3723  0023F0  D02E               	goto	l7681
  3724                           
  3725                           ; BSR set to: 0
  3726                           ;State_Mchn.c: 1118: else if(GETxAPIxVAL(43) == 1){
  3727                           
  3728                           ; BSR set to: 0
  3729                           
  3730                           ;State_Mchn.c: 1117: }
  3731                           
  3732                           ; BSR set to: 0
  3733                           ;State_Mchn.c: 1116: Switch_Train_Path = 10;
  3734  0023F2  0E2B               	movlw	43
  3735  0023F4  ECD2  F01D         	call	_GETxAPIxVAL
  3736  0023F8  D02F               	goto	L49
  3737  0023FA                     l7667:
  3738                           
  3739                           ; BSR set to: 0
  3740  0023FA  0E1F               	movlw	31
  3741  0023FC  ECD2  F01D         	call	_GETxAPIxVAL
  3742  002400  0100               	movlb	0	; () banked
  3743  002402  058D               	decf	?_GETxAPIxVAL& (0+255),w,b
  3744  002404  0100               	movlb	0	; () banked
  3745  002406  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3746  002408  A4D8               	btfss	status,2,c
  3747  00240A  D002               	goto	l7671
  3748  00240C                     l7669:
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;State_Mchn.c: 1124: {
  3752                           ;State_Mchn.c: 1125: Switch_Train_Path = 4;
  3753  00240C  0E04               	movlw	4
  3754  00240E  D7CA               	goto	L30
  3755  002410                     l7671:
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;State_Mchn.c: 1127: else if(GETxAPIxVAL(41) == 1){
  3759  002410  0E29               	movlw	41
  3760  002412  ECD2  F01D         	call	_GETxAPIxVAL
  3761  002416  0100               	movlb	0	; () banked
  3762  002418  058D               	decf	?_GETxAPIxVAL& (0+255),w,b
  3763  00241A  0100               	movlb	0	; () banked
  3764  00241C  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3765  00241E  A4D8               	btfss	status,2,c
  3766  002420  D002               	goto	l7675
  3767  002422                     l7673:
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;State_Mchn.c: 1128: Switch_Train_Path = 12;
  3771  002422  0E0C               	movlw	12
  3772  002424  D7BF               	goto	L30
  3773  002426                     l7675:
  3774                           
  3775                           ; BSR set to: 0
  3776                           ;State_Mchn.c: 1130: else if(GETxAPIxVAL(42) == 1){
  3777  002426  0E2A               	movlw	42
  3778  002428  ECD2  F01D         	call	_GETxAPIxVAL
  3779  00242C  0100               	movlb	0	; () banked
  3780  00242E  058D               	decf	?_GETxAPIxVAL& (0+255),w,b
  3781  002430  0100               	movlb	0	; () banked
  3782  002432  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3783  002434  A4D8               	btfss	status,2,c
  3784  002436  D002               	goto	l7679
  3785  002438                     l7677:
  3786                           
  3787                           ; BSR set to: 0
  3788                           ;State_Mchn.c: 1131: Switch_Train_Path = 11;
  3789  002438  0E0B               	movlw	11
  3790  00243A  D7B4               	goto	L30
  3791  00243C                     l7679:
  3792                           
  3793                           ; BSR set to: 0
  3794                           ;State_Mchn.c: 1133: else if(GETxAPIxVAL(44) == 1){
  3795  00243C  0E2C               	movlw	44
  3796  00243E  ECD2  F01D         	call	_GETxAPIxVAL
  3797  002442  0100               	movlb	0	; () banked
  3798  002444  058D               	decf	?_GETxAPIxVAL& (0+255),w,b
  3799  002446  0100               	movlb	0	; () banked
  3800  002448  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3801  00244A  A4D8               	btfss	status,2,c
  3802  00244C  D002               	goto	l7683
  3803  00244E                     l7681:
  3804                           
  3805                           ; BSR set to: 0
  3806                           ;State_Mchn.c: 1134: Switch_Train_Path = 10;
  3807  00244E  0E0A               	movlw	10
  3808  002450  D7A9               	goto	L30
  3809  002452                     l7683:
  3810                           
  3811                           ; BSR set to: 0
  3812                           ;State_Mchn.c: 1136: else if(GETxAPIxVAL(43) == 1){
  3813  002452  0E2B               	movlw	43
  3814  002454  ECD2  F01D         	call	_GETxAPIxVAL
  3815  002458                     L49:
  3816  002458  0100               	movlb	0	; () banked
  3817  00245A  058D               	decf	?_GETxAPIxVAL& (0+255),w,b
  3818  00245C  0100               	movlb	0	; () banked
  3819  00245E  118E               	iorwf	(?_GETxAPIxVAL+1)& (0+255),w,b
  3820  002460  A4D8               	btfss	status,2,c
  3821  002462  D6C3               	goto	l349
  3822                           
  3823                           ; BSR set to: 0
  3824                           ;State_Mchn.c: 1137: Switch_Train_Path = 9;
  3825  002464  0E09               	movlw	9
  3826  002466  D79E               	goto	L30
  3827  002468                     l7689:
  3828                           
  3829                           ; BSR set to: 0
  3830  002468  0100               	movlb	0	; () banked
  3831  00246A  519D               	movf	Train_Path@To& (0+255),w,b
  3832                           
  3833                           ; Switch size 1, requested type "space"
  3834                           ; Number of cases is 4, Range of values is 1 to 4
  3835                           ; switch strategies available:
  3836                           ; Name         Instructions Cycles
  3837                           ; simple_byte           13     7 (average)
  3838                           ;	Chosen strategy is simple_byte
  3839  00246C  0A01               	xorlw	1	; case 1
  3840  00246E  B4D8               	btfsc	status,2,c
  3841  002470  D79C               	goto	l7647
  3842  002472  0A03               	xorlw	3	; case 2
  3843  002474  B4D8               	btfsc	status,2,c
  3844  002476  D7C1               	goto	l7667
  3845  002478  0A01               	xorlw	1	; case 3
  3846  00247A  B4D8               	btfsc	status,2,c
  3847  00247C  D736               	goto	l7607
  3848  00247E  0A07               	xorlw	7	; case 4
  3849  002480  B4D8               	btfsc	status,2,c
  3850  002482  D768               	goto	l7627
  3851                           
  3852                           ; BSR set to: 0
  3853                           ;State_Mchn.c: 1143: break;
  3854  002484  D074               	goto	l7757
  3855  002486                     l7691:
  3856                           
  3857                           ; BSR set to: 0
  3858  002486  EC03  F016         	call	_Train_Move_Right_Brake	;wreg free
  3859  00248A  D008               	goto	L93
  3860  00248C                     l7697:
  3861                           
  3862                           ; BSR set to: 0
  3863  00248C  EC03  F016         	call	_Train_Move_Right_Brake	;wreg free
  3864  002490  D005               	goto	L93
  3865  002492                     l7703:
  3866                           
  3867                           ; BSR set to: 0
  3868  002492  EC6A  F015         	call	_Train_Move_Left_Brake	;wreg free
  3869  002496  D002               	goto	L93
  3870  002498                     l7709:
  3871                           
  3872                           ; BSR set to: 0
  3873  002498  EC6A  F015         	call	_Train_Move_Left_Brake	;wreg free
  3874  00249C                     L93:
  3875  00249C  0900               	iorlw	0
  3876  00249E  A4D8               	btfss	status,2,c
  3877  0024A0  D6A4               	goto	l349
  3878                           
  3879                           ;State_Mchn.c: 1172: {
  3880                           ;State_Mchn.c: 1173: Switch_Train_Path = 0;
  3881  0024A2  0E00               	movlw	0
  3882  0024A4  0100               	movlb	0	; () banked
  3883  0024A6  6F80               	movwf	_Switch_Train_Path& (0+255),b
  3884                           
  3885                           ;State_Mchn.c: 1174: Return_Val = 0;
  3886  0024A8  0E00               	movlw	0
  3887  0024AA  D6A0               	goto	L39
  3888  0024AC                     l7717:
  3889                           
  3890                           ; BSR set to: 0
  3891  0024AC  0100               	movlb	0	; () banked
  3892  0024AE  519D               	movf	Train_Path@To& (0+255),w,b
  3893                           
  3894                           ; Switch size 1, requested type "space"
  3895                           ; Number of cases is 4, Range of values is 1 to 4
  3896                           ; switch strategies available:
  3897                           ; Name         Instructions Cycles
  3898                           ; simple_byte           13     7 (average)
  3899                           ;	Chosen strategy is simple_byte
  3900  0024B0  0A01               	xorlw	1	; case 1
  3901  0024B2  B4D8               	btfsc	status,2,c
  3902  0024B4  D7EE               	goto	l7703
  3903  0024B6  0A03               	xorlw	3	; case 2
  3904  0024B8  B4D8               	btfsc	status,2,c
  3905  0024BA  D7EE               	goto	l7709
  3906  0024BC  0A01               	xorlw	1	; case 3
  3907  0024BE  B4D8               	btfsc	status,2,c
  3908  0024C0  D7E2               	goto	l7691
  3909  0024C2  0A07               	xorlw	7	; case 4
  3910  0024C4  B4D8               	btfsc	status,2,c
  3911  0024C6  D7E2               	goto	l7697
  3912                           
  3913                           ; BSR set to: 0
  3914                           ;State_Mchn.c: 1181: break;
  3915  0024C8  D052               	goto	l7757
  3916  0024CA                     l7719:
  3917                           
  3918                           ; BSR set to: 0
  3919                           ;State_Mchn.c: 1184: if(Left_Mountain_From_The_Left(1) == 0){
  3920  0024CA  0E01               	movlw	1
  3921  0024CC  ECD0  F018         	call	_Left_Mountain_From_The_Left
  3922  0024D0  D01B               	goto	L94
  3923  0024D2                     l7723:
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;State_Mchn.c: 1191: if(Left_Mountain_From_The_Left(2) == 0){
  3927  0024D2  0E02               	movlw	2
  3928  0024D4  ECD0  F018         	call	_Left_Mountain_From_The_Left
  3929  0024D8  D017               	goto	L94
  3930  0024DA                     l7727:
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;State_Mchn.c: 1198: if(Right_Mountain_From_The_Left(3) == 0){
  3934  0024DA  0E03               	movlw	3
  3935  0024DC  EC46  F018         	call	_Right_Mountain_From_The_Left
  3936  0024E0  D013               	goto	L94
  3937  0024E2                     l7731:
  3938                           
  3939                           ; BSR set to: 0
  3940                           ;State_Mchn.c: 1205: if(Right_Mountain_From_The_Left(4) == 0){
  3941  0024E2  0E04               	movlw	4
  3942  0024E4  EC46  F018         	call	_Right_Mountain_From_The_Left
  3943  0024E8  D00F               	goto	L94
  3944  0024EA                     l7735:
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;State_Mchn.c: 1212: if(Right_Mountain_From_The_Right(4) == 0){
  3948  0024EA  0E04               	movlw	4
  3949  0024EC  ECBC  F017         	call	_Right_Mountain_From_The_Right
  3950  0024F0  D00B               	goto	L94
  3951  0024F2                     l7739:
  3952                           
  3953                           ; BSR set to: 0
  3954                           ;State_Mchn.c: 1219: if(Right_Mountain_From_The_Right(3) == 0){
  3955  0024F2  0E03               	movlw	3
  3956  0024F4  ECBC  F017         	call	_Right_Mountain_From_The_Right
  3957  0024F8  D007               	goto	L94
  3958  0024FA                     l7743:
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;State_Mchn.c: 1226: if(Left_Mountain_From_The_Right(2) == 0){
  3962  0024FA  0E02               	movlw	2
  3963  0024FC  EC59  F019         	call	_Left_Mountain_From_The_Right
  3964  002500  D003               	goto	L94
  3965  002502                     l7747:
  3966                           
  3967                           ; BSR set to: 0
  3968                           ;State_Mchn.c: 1233: if(Left_Mountain_From_The_Right(1) == 0){
  3969  002502  0E01               	movlw	1
  3970  002504  EC59  F019         	call	_Left_Mountain_From_The_Right
  3971  002508                     L94:
  3972  002508  0900               	iorlw	0
  3973  00250A  A4D8               	btfss	status,2,c
  3974  00250C  D66E               	goto	l349
  3975                           
  3976                           ;State_Mchn.c: 1234: Switch_Train_Path = 3;
  3977  00250E  0E03               	movlw	3
  3978  002510  D001               	goto	L42
  3979  002512                     l7751:
  3980                           
  3981                           ; BSR set to: 0
  3982  002512  0E00               	movlw	0
  3983  002514                     L42:
  3984  002514  0100               	movlb	0	; () banked
  3985  002516  6F80               	movwf	_Switch_Train_Path& (0+255),b
  3986  002518  D668               	goto	l349
  3987  00251A                     l7755:
  3988  00251A  0100               	movlb	0	; () banked
  3989  00251C  5180               	movf	_Switch_Train_Path& (0+255),w,b
  3990                           
  3991                           ; Switch size 1, requested type "space"
  3992                           ; Number of cases is 13, Range of values is 0 to 12
  3993                           ; switch strategies available:
  3994                           ; Name         Instructions Cycles
  3995                           ; simple_byte           40    21 (average)
  3996                           ;	Chosen strategy is simple_byte
  3997  00251E  0A00               	xorlw	0	; case 0
  3998  002520  B4D8               	btfsc	status,2,c
  3999  002522  D680               	goto	l7565
  4000  002524  0A01               	xorlw	1	; case 1
  4001  002526  B4D8               	btfsc	status,2,c
  4002  002528  D6B2               	goto	l7585
  4003  00252A  0A03               	xorlw	3	; case 2
  4004  00252C  B4D8               	btfsc	status,2,c
  4005  00252E  D6CE               	goto	l7605
  4006  002530  0A01               	xorlw	1	; case 3
  4007  002532  B4D8               	btfsc	status,2,c
  4008  002534  D799               	goto	l7689
  4009  002536  0A07               	xorlw	7	; case 4
  4010  002538  B4D8               	btfsc	status,2,c
  4011  00253A  D7B8               	goto	l7717
  4012  00253C  0A01               	xorlw	1	; case 5
  4013  00253E  B4D8               	btfsc	status,2,c
  4014  002540  D7C4               	goto	l7719
  4015  002542  0A03               	xorlw	3	; case 6
  4016  002544  B4D8               	btfsc	status,2,c
  4017  002546  D7C5               	goto	l7723
  4018  002548  0A01               	xorlw	1	; case 7
  4019  00254A  B4D8               	btfsc	status,2,c
  4020  00254C  D7C6               	goto	l7727
  4021  00254E  0A0F               	xorlw	15	; case 8
  4022  002550  B4D8               	btfsc	status,2,c
  4023  002552  D7C7               	goto	l7731
  4024  002554  0A01               	xorlw	1	; case 9
  4025  002556  B4D8               	btfsc	status,2,c
  4026  002558  D7C8               	goto	l7735
  4027  00255A  0A03               	xorlw	3	; case 10
  4028  00255C  B4D8               	btfsc	status,2,c
  4029  00255E  D7C9               	goto	l7739
  4030  002560  0A01               	xorlw	1	; case 11
  4031  002562  B4D8               	btfsc	status,2,c
  4032  002564  D7CA               	goto	l7743
  4033  002566  0A07               	xorlw	7	; case 12
  4034  002568  B4D8               	btfsc	status,2,c
  4035  00256A  D7CB               	goto	l7747
  4036  00256C  D7D2               	goto	l7751
  4037  00256E                     l7757:
  4038                           
  4039                           ; BSR set to: 0
  4040                           ;State_Mchn.c: 1242: return(Return_Val);
  4041  00256E  0100               	movlb	0	; () banked
  4042  002570  51BB               	movf	Train_Path@Return_Val& (0+255),w,b
  4043  002572  0012               	return	
  4044  002574                     __end_of_Train_Path:
  4045                           	opt stack 0
  4046                           tblptru	equ	0xFF8
  4047                           tblptrh	equ	0xFF7
  4048                           tblptrl	equ	0xFF6
  4049                           tablat	equ	0xFF5
  4050                           postinc0	equ	0xFEE
  4051                           wreg	equ	0xFE8
  4052                           postdec1	equ	0xFE5
  4053                           fsr1h	equ	0xFE2
  4054                           fsr1l	equ	0xFE1
  4055                           status	equ	0xFD8
  4056                           
  4057 ;; *************** function _Train_Move_Right_Start *****************
  4058 ;; Defined at:
  4059 ;;		line 27 in file "../train_move_right.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;		None
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;		None
  4064 ;; Return value:  Size  Location     Type
  4065 ;;                  1    wreg      unsigned char 
  4066 ;; Registers used:
  4067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4068 ;; Tracked objects:
  4069 ;;		On entry : 0/0
  4070 ;;		On exit  : 0/0
  4071 ;;		Unchanged: 0/0
  4072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4073 ;;      Params:         0       0       0       0       0       0       0       0       0
  4074 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4075 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4076 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4077 ;;Total ram usage:        0 bytes
  4078 ;; Hardware stack levels used:    1
  4079 ;; Hardware stack levels required when called:    5
  4080 ;; This function calls:
  4081 ;;		_GETxAPIxVAL
  4082 ;;		_SETxAPIxVAL
  4083 ;;		_SETxPWM
  4084 ;; This function is called by:
  4085 ;;		_Train_Path
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           	psect	text3
  4090  002D32                     __ptext3:
  4091                           	opt stack 0
  4092  002D32                     _Train_Move_Right_Start:
  4093                           	opt stack 23
  4094                           
  4095                           ;train_move_right.c: 29: static char Return_Val = 1;
  4096                           ;train_move_right.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  4097                           ;train_move_right.c: 32: switch(Switch_Train_Move)
  4098                           
  4099                           ; BSR set to: 0
  4100                           ;incstack = 0
  4101  002D32  D081               	goto	l6739
  4102  002D34                     l6699:
  4103  002D34  0E14               	movlw	20
  4104  002D36  ECD2  F01D         	call	_GETxAPIxVAL
  4105  002D3A  0100               	movlb	0	; () banked
  4106  002D3C  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  4107  002D3E  0100               	movlb	0	; () banked
  4108  002D40  5D68               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  4109  002D42  0100               	movlb	0	; () banked
  4110  002D44  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4111  002D46  0100               	movlb	0	; () banked
  4112  002D48  5969               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4113  002D4A  A0D8               	btfss	status,0,c
  4114  002D4C  D002               	goto	l6703
  4115                           
  4116                           ; BSR set to: 0
  4117                           ;train_move_right.c: 37: {
  4118                           ;train_move_right.c: 38: Switch_Train_Move = 1;
  4119  002D4E  0E01               	movlw	1
  4120  002D50  D033               	goto	L62
  4121  002D52                     l6703:
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;train_move_right.c: 42: }
  4125                           ;train_move_right.c: 43: Train_Move_Wait_Time++;
  4126  002D52  0100               	movlb	0	; () banked
  4127  002D54  4B68               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  4128  002D56  2B69               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4129                           
  4130                           ; BSR set to: 0
  4131                           ;train_move_right.c: 44: Switch_Train_Move = 0;
  4132  002D58  0E00               	movlw	0
  4133  002D5A  6E1C               	movwf	_Switch_Train_Move,c
  4134  002D5C  D068               	goto	L63
  4135  002D5E                     l6709:
  4136  002D5E  0E16               	movlw	22
  4137  002D60  ECD2  F01D         	call	_GETxAPIxVAL
  4138  002D64  C08D  F095         	movff	?_GETxAPIxVAL,SETxPWM@speed
  4139  002D68  C08E  F096         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  4140  002D6C  0E01               	movlw	1
  4141  002D6E  0100               	movlb	0	; () banked
  4142  002D70  6F97               	movwf	SETxPWM@direction& (0+255),b
  4143  002D72  EC25  F01B         	call	_SETxPWM	;wreg free
  4144                           
  4145                           ;train_move_right.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(22);
  4146  002D76  0E16               	movlw	22
  4147  002D78  ECD2  F01D         	call	_GETxAPIxVAL
  4148  002D7C  C08D  F005         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  4149  002D80  C08E  F006         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  4150                           
  4151                           ;train_move_right.c: 50: SETxAPIxVAL(69, 0);;
  4152  002D84  0E00               	movlw	0
  4153  002D86  0100               	movlb	0	; () banked
  4154  002D88  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  4155  002D8A  0E00               	movlw	0
  4156  002D8C  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  4157  002D8E  0E45               	movlw	69
  4158  002D90  EC11  F01D         	call	_SETxAPIxVAL
  4159                           
  4160                           ;train_move_right.c: 51: Return_Val = 1;
  4161  002D94  0E01               	movlw	1
  4162  002D96  0100               	movlb	0	; () banked
  4163  002D98  6FBA               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4164  002D9A  D01B               	goto	l6723
  4165  002D9C                     l6715:
  4166  002D9C  0E12               	movlw	18
  4167  002D9E  ECD2  F01D         	call	_GETxAPIxVAL
  4168  002DA2  0100               	movlb	0	; () banked
  4169  002DA4  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  4170  002DA6  0100               	movlb	0	; () banked
  4171  002DA8  5D68               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  4172  002DAA  0100               	movlb	0	; () banked
  4173  002DAC  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4174  002DAE  0100               	movlb	0	; () banked
  4175  002DB0  5969               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4176  002DB2  A0D8               	btfss	status,0,c
  4177  002DB4  D008               	goto	l6719
  4178                           
  4179                           ; BSR set to: 0
  4180                           ;train_move_right.c: 56: {
  4181                           ;train_move_right.c: 57: Switch_Train_Move = 3;
  4182  002DB6  0E03               	movlw	3
  4183  002DB8                     L62:
  4184  002DB8  6E1C               	movwf	_Switch_Train_Move,c
  4185                           
  4186                           ;train_move_right.c: 58: Train_Move_Wait_Time = 0;
  4187  002DBA  0E00               	movlw	0
  4188  002DBC  0100               	movlb	0	; () banked
  4189  002DBE  6F69               	movwf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),b
  4190  002DC0  0E00               	movlw	0
  4191  002DC2  6F68               	movwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),b
  4192  002DC4  D034               	goto	L63
  4193  002DC6                     l6719:
  4194                           
  4195                           ; BSR set to: 0
  4196                           ;train_move_right.c: 61: }
  4197                           ;train_move_right.c: 62: Return_Val = 1;
  4198  002DC6  0E01               	movlw	1
  4199  002DC8  0100               	movlb	0	; () banked
  4200  002DCA  6FBA               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4201                           
  4202                           ; BSR set to: 0
  4203                           ;train_move_right.c: 63: Train_Move_Wait_Time++;
  4204  002DCC  0100               	movlb	0	; () banked
  4205  002DCE  4B68               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  4206  002DD0  2B69               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4207  002DD2                     l6723:
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;train_move_right.c: 64: Switch_Train_Move = 2;
  4211  002DD2  0E02               	movlw	2
  4212  002DD4  6E1C               	movwf	_Switch_Train_Move,c
  4213                           
  4214                           ;train_move_right.c: 65: break;
  4215  002DD6  D03C               	goto	l6741
  4216  002DD8                     l6725:
  4217  002DD8  C005  F095         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  4218  002DDC  C006  F096         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  4219  002DE0  0E01               	movlw	1
  4220  002DE2  0100               	movlb	0	; () banked
  4221  002DE4  6F97               	movwf	SETxPWM@direction& (0+255),b
  4222  002DE6  EC25  F01B         	call	_SETxPWM	;wreg free
  4223                           
  4224                           ;train_move_right.c: 68: if (Train_Move_Pwm_Count >= GETxAPIxVAL(23))
  4225  002DEA  0E17               	movlw	23
  4226  002DEC  ECD2  F01D         	call	_GETxAPIxVAL
  4227  002DF0  0100               	movlb	0	; () banked
  4228  002DF2  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  4229  002DF4  5C05               	subwf	_Train_Move_Pwm_Count,w,c
  4230  002DF6  0100               	movlb	0	; () banked
  4231  002DF8  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4232  002DFA  5806               	subwfb	_Train_Move_Pwm_Count+1,w,c
  4233  002DFC  A0D8               	btfss	status,0,c
  4234  002DFE  D004               	goto	l6729
  4235                           
  4236                           ; BSR set to: 0
  4237                           ;train_move_right.c: 69: {
  4238                           ;train_move_right.c: 70: Switch_Train_Move = 0;
  4239  002E00  0E00               	movlw	0
  4240  002E02  6E1C               	movwf	_Switch_Train_Move,c
  4241                           
  4242                           ;train_move_right.c: 71: Return_Val = 0;
  4243  002E04  0E00               	movlw	0
  4244  002E06  D014               	goto	L61
  4245  002E08                     l6729:
  4246                           
  4247                           ; BSR set to: 0
  4248                           ;train_move_right.c: 73: }
  4249                           ;train_move_right.c: 74: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  4250  002E08  0E1A               	movlw	26
  4251  002E0A  ECD2  F01D         	call	_GETxAPIxVAL
  4252  002E0E  0100               	movlb	0	; () banked
  4253  002E10  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  4254  002E12  5C07               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  4255  002E14  0100               	movlb	0	; () banked
  4256  002E16  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4257  002E18  5808               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  4258  002E1A  A0D8               	btfss	status,0,c
  4259  002E1C  D006               	goto	l6735
  4260                           
  4261                           ; BSR set to: 0
  4262                           ;train_move_right.c: 75: {
  4263                           ;train_move_right.c: 76: Train_Move_Pwm_Count++;
  4264  002E1E  4A05               	infsnz	_Train_Move_Pwm_Count,f,c
  4265  002E20  2A06               	incf	_Train_Move_Pwm_Count+1,f,c
  4266                           
  4267                           ; BSR set to: 0
  4268                           ;train_move_right.c: 77: Train_Move_Pwm_Fast_Count = 0;
  4269  002E22  0E00               	movlw	0
  4270  002E24  6E08               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  4271  002E26  0E00               	movlw	0
  4272  002E28  6E07               	movwf	_Train_Move_Pwm_Fast_Count,c
  4273  002E2A                     l6735:
  4274                           
  4275                           ; BSR set to: 0
  4276                           ;train_move_right.c: 78: }
  4277                           ;train_move_right.c: 79: Train_Move_Pwm_Fast_Count++;
  4278  002E2A  4A07               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  4279  002E2C  2A08               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  4280  002E2E                     L63:
  4281                           
  4282                           ;train_move_right.c: 80: Return_Val = 1;
  4283  002E2E  0E01               	movlw	1
  4284  002E30                     L61:
  4285  002E30  0100               	movlb	0	; () banked
  4286  002E32  6FBA               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4287                           
  4288                           ; BSR set to: 0
  4289                           ;train_move_right.c: 84: }
  4290                           
  4291                           ; BSR set to: 0
  4292                           
  4293                           ;train_move_right.c: 83: default : break;
  4294                           
  4295                           ;train_move_right.c: 81: break;
  4296  002E34  D00D               	goto	l6741
  4297  002E36                     l6739:
  4298  002E36  501C               	movf	_Switch_Train_Move,w,c
  4299                           
  4300                           ; Switch size 1, requested type "space"
  4301                           ; Number of cases is 4, Range of values is 0 to 3
  4302                           ; switch strategies available:
  4303                           ; Name         Instructions Cycles
  4304                           ; simple_byte           13     7 (average)
  4305                           ;	Chosen strategy is simple_byte
  4306  002E38  0A00               	xorlw	0	; case 0
  4307  002E3A  B4D8               	btfsc	status,2,c
  4308  002E3C  D77B               	goto	l6699
  4309  002E3E  0A01               	xorlw	1	; case 1
  4310  002E40  B4D8               	btfsc	status,2,c
  4311  002E42  D78D               	goto	l6709
  4312  002E44  0A03               	xorlw	3	; case 2
  4313  002E46  B4D8               	btfsc	status,2,c
  4314  002E48  D7A9               	goto	l6715
  4315  002E4A  0A01               	xorlw	1	; case 3
  4316  002E4C  B4D8               	btfsc	status,2,c
  4317  002E4E  D7C4               	goto	l6725
  4318  002E50                     l6741:
  4319                           
  4320                           ;train_move_right.c: 86: return(Return_Val);
  4321  002E50  0100               	movlb	0	; () banked
  4322  002E52  51BA               	movf	Train_Move_Right_Start@Return_Val& (0+255),w,b
  4323  002E54  0012               	return	
  4324  002E56                     __end_of_Train_Move_Right_Start:
  4325                           	opt stack 0
  4326                           tblptru	equ	0xFF8
  4327                           tblptrh	equ	0xFF7
  4328                           tblptrl	equ	0xFF6
  4329                           tablat	equ	0xFF5
  4330                           postinc0	equ	0xFEE
  4331                           wreg	equ	0xFE8
  4332                           postdec1	equ	0xFE5
  4333                           fsr1h	equ	0xFE2
  4334                           fsr1l	equ	0xFE1
  4335                           status	equ	0xFD8
  4336                           
  4337 ;; *************** function _Train_Move_Right_Brake *****************
  4338 ;; Defined at:
  4339 ;;		line 254 in file "../train_move_right.c"
  4340 ;; Parameters:    Size  Location     Type
  4341 ;;		None
  4342 ;; Auto vars:     Size  Location     Type
  4343 ;;		None
  4344 ;; Return value:  Size  Location     Type
  4345 ;;                  1    wreg      unsigned char 
  4346 ;; Registers used:
  4347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4348 ;; Tracked objects:
  4349 ;;		On entry : 0/0
  4350 ;;		On exit  : 0/0
  4351 ;;		Unchanged: 0/0
  4352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4353 ;;      Params:         0       0       0       0       0       0       0       0       0
  4354 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4355 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4356 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4357 ;;Total ram usage:        0 bytes
  4358 ;; Hardware stack levels used:    1
  4359 ;; Hardware stack levels required when called:    5
  4360 ;; This function calls:
  4361 ;;		_GETxAPIxVAL
  4362 ;;		_SETxAPIxVAL
  4363 ;;		_SETxPWM
  4364 ;; This function is called by:
  4365 ;;		_Train_Path
  4366 ;; This function uses a non-reentrant model
  4367 ;;
  4368                           
  4369                           	psect	text4
  4370  002C06                     __ptext4:
  4371                           	opt stack 0
  4372  002C06                     _Train_Move_Right_Brake:
  4373                           	opt stack 23
  4374                           
  4375                           ;train_move_right.c: 256: static char Return_Val = 1;
  4376                           ;train_move_right.c: 257: static unsigned int Train_Move_Wait_Time = 0;
  4377                           ;train_move_right.c: 259: switch(Switch_Train_Move)
  4378                           
  4379                           ; BSR set to: 0
  4380                           ;incstack = 0
  4381  002C06  D085               	goto	l6843
  4382  002C08                     l6801:
  4383  002C08  C005  F095         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  4384  002C0C  C006  F096         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  4385  002C10  0E01               	movlw	1
  4386  002C12  0100               	movlb	0	; () banked
  4387  002C14  6F97               	movwf	SETxPWM@direction& (0+255),b
  4388  002C16  EC25  F01B         	call	_SETxPWM	;wreg free
  4389                           
  4390                           ;train_move_right.c: 262: if (Train_Move_Pwm_Count <= GETxAPIxVAL(22))
  4391  002C1A  0E16               	movlw	22
  4392  002C1C  ECD2  F01D         	call	_GETxAPIxVAL
  4393  002C20  5005               	movf	_Train_Move_Pwm_Count,w,c
  4394  002C22  0100               	movlb	0	; () banked
  4395  002C24  5D8D               	subwf	?_GETxAPIxVAL& (0+255),w,b
  4396  002C26  5006               	movf	_Train_Move_Pwm_Count+1,w,c
  4397  002C28  0100               	movlb	0	; () banked
  4398  002C2A  598E               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  4399  002C2C  A0D8               	btfss	status,0,c
  4400  002C2E  D002               	goto	l6805
  4401                           
  4402                           ; BSR set to: 0
  4403                           ;train_move_right.c: 263: {
  4404                           ;train_move_right.c: 264: Switch_Train_Move = 1;
  4405  002C30  0E01               	movlw	1
  4406  002C32  D06A               	goto	L68
  4407  002C34                     l6805:
  4408                           
  4409                           ; BSR set to: 0
  4410                           ;train_move_right.c: 267: }
  4411                           ;train_move_right.c: 268: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(25))
  4412  002C34  0E19               	movlw	25
  4413  002C36  ECD2  F01D         	call	_GETxAPIxVAL
  4414  002C3A  0100               	movlb	0	; () banked
  4415  002C3C  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  4416  002C3E  5C07               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  4417  002C40  0100               	movlb	0	; () banked
  4418  002C42  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4419  002C44  5808               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  4420  002C46  A0D8               	btfss	status,0,c
  4421  002C48  D008               	goto	l6811
  4422                           
  4423                           ; BSR set to: 0
  4424                           ;train_move_right.c: 269: {
  4425                           ;train_move_right.c: 270: Train_Move_Pwm_Count--;
  4426  002C4A  0605               	decf	_Train_Move_Pwm_Count,f,c
  4427  002C4C  A0D8               	btfss	status,0,c
  4428  002C4E  0606               	decf	_Train_Move_Pwm_Count+1,f,c
  4429                           
  4430                           ; BSR set to: 0
  4431                           ;train_move_right.c: 271: Train_Move_Pwm_Fast_Count = 0;
  4432  002C50  0E00               	movlw	0
  4433  002C52  6E08               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  4434  002C54  0E00               	movlw	0
  4435  002C56  6E07               	movwf	_Train_Move_Pwm_Fast_Count,c
  4436                           
  4437                           ;train_move_right.c: 272: }
  4438  002C58  D058               	goto	l6839
  4439  002C5A                     l6811:
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;train_move_right.c: 273: else{Train_Move_Pwm_Fast_Count++;}
  4443  002C5A  4A07               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  4444  002C5C  2A08               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  4445  002C5E  D055               	goto	l6839
  4446  002C60                     l6815:
  4447  002C60  0E12               	movlw	18
  4448  002C62  ECD2  F01D         	call	_GETxAPIxVAL
  4449  002C66  0100               	movlb	0	; () banked
  4450  002C68  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  4451  002C6A  0100               	movlb	0	; () banked
  4452  002C6C  5D66               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  4453  002C6E  0100               	movlb	0	; () banked
  4454  002C70  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4455  002C72  0100               	movlb	0	; () banked
  4456  002C74  5967               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  4457  002C76  A0D8               	btfss	status,0,c
  4458  002C78  D008               	goto	l6819
  4459                           
  4460                           ; BSR set to: 0
  4461                           ;train_move_right.c: 278: {
  4462                           ;train_move_right.c: 279: Switch_Train_Move = 2;
  4463  002C7A  0E02               	movlw	2
  4464  002C7C  6E1C               	movwf	_Switch_Train_Move,c
  4465                           
  4466                           ;train_move_right.c: 280: Train_Move_Wait_Time = 0;
  4467  002C7E  0E00               	movlw	0
  4468  002C80  0100               	movlb	0	; () banked
  4469  002C82  6F67               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  4470  002C84  0E00               	movlw	0
  4471  002C86  6F66               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  4472  002C88  D040               	goto	l6839
  4473  002C8A                     l6819:
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;train_move_right.c: 283: }
  4477                           ;train_move_right.c: 284: Return_Val = 1;
  4478  002C8A  0E01               	movlw	1
  4479  002C8C  0100               	movlb	0	; () banked
  4480  002C8E  6FB9               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  4481                           
  4482                           ; BSR set to: 0
  4483                           ;train_move_right.c: 285: Train_Move_Wait_Time++;
  4484  002C90  0100               	movlb	0	; () banked
  4485  002C92  4B66               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  4486  002C94  2B67               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  4487                           
  4488                           ; BSR set to: 0
  4489                           ;train_move_right.c: 286: Switch_Train_Move = 1;
  4490  002C96  0E01               	movlw	1
  4491  002C98  6E1C               	movwf	_Switch_Train_Move,c
  4492                           
  4493                           ;train_move_right.c: 287: break;
  4494  002C9A  D048               	goto	l6845
  4495  002C9C                     l6825:
  4496  002C9C  0E16               	movlw	22
  4497  002C9E  ECD2  F01D         	call	_GETxAPIxVAL
  4498  002CA2  C08D  F095         	movff	?_GETxAPIxVAL,SETxPWM@speed
  4499  002CA6  C08E  F096         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  4500  002CAA  0E01               	movlw	1
  4501  002CAC  0100               	movlb	0	; () banked
  4502  002CAE  6F97               	movwf	SETxPWM@direction& (0+255),b
  4503  002CB0  EC25  F01B         	call	_SETxPWM	;wreg free
  4504                           
  4505                           ;train_move_right.c: 290: SETxAPIxVAL(69, 1);;
  4506  002CB4  0E00               	movlw	0
  4507  002CB6  0100               	movlb	0	; () banked
  4508  002CB8  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  4509  002CBA  0E01               	movlw	1
  4510  002CBC  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  4511  002CBE  0E45               	movlw	69
  4512  002CC0  EC11  F01D         	call	_SETxAPIxVAL
  4513                           
  4514                           ;train_move_right.c: 291: Train_Move_Pwm_Count = GETxAPIxVAL(22);
  4515  002CC4  0E16               	movlw	22
  4516  002CC6  ECD2  F01D         	call	_GETxAPIxVAL
  4517  002CCA  C08D  F005         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  4518  002CCE  C08E  F006         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  4519  002CD2  D019               	goto	l6837
  4520  002CD4                     l6831:
  4521  002CD4  0E14               	movlw	20
  4522  002CD6  ECD2  F01D         	call	_GETxAPIxVAL
  4523  002CDA  0100               	movlb	0	; () banked
  4524  002CDC  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  4525  002CDE  0100               	movlb	0	; () banked
  4526  002CE0  5D66               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  4527  002CE2  0100               	movlb	0	; () banked
  4528  002CE4  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4529  002CE6  0100               	movlb	0	; () banked
  4530  002CE8  5967               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  4531  002CEA  A0D8               	btfss	status,0,c
  4532  002CEC  D009               	goto	l6835
  4533                           
  4534                           ; BSR set to: 0
  4535                           ;train_move_right.c: 297: {
  4536                           ;train_move_right.c: 298: Switch_Train_Move = 0;
  4537  002CEE  0E00               	movlw	0
  4538  002CF0  6E1C               	movwf	_Switch_Train_Move,c
  4539                           
  4540                           ;train_move_right.c: 299: Train_Move_Wait_Time = 0;
  4541  002CF2  0E00               	movlw	0
  4542  002CF4  0100               	movlb	0	; () banked
  4543  002CF6  6F67               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  4544  002CF8  0E00               	movlw	0
  4545  002CFA  6F66               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  4546                           
  4547                           ;train_move_right.c: 300: Return_Val = 0;
  4548  002CFC  0E00               	movlw	0
  4549  002CFE  D006               	goto	L66
  4550  002D00                     l6835:
  4551                           
  4552                           ; BSR set to: 0
  4553                           ;train_move_right.c: 302: }
  4554                           ;train_move_right.c: 303: Train_Move_Wait_Time++;
  4555  002D00  0100               	movlb	0	; () banked
  4556  002D02  4B66               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  4557  002D04  2B67               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  4558  002D06                     l6837:
  4559                           
  4560                           ; BSR set to: 0
  4561                           ;train_move_right.c: 304: Switch_Train_Move = 3;
  4562  002D06  0E03               	movlw	3
  4563  002D08                     L68:
  4564  002D08  6E1C               	movwf	_Switch_Train_Move,c
  4565  002D0A                     l6839:
  4566                           
  4567                           ; BSR set to: 0
  4568                           ;train_move_right.c: 305: Return_Val = 1;
  4569  002D0A  0E01               	movlw	1
  4570  002D0C                     L66:
  4571  002D0C  0100               	movlb	0	; () banked
  4572  002D0E  6FB9               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;train_move_right.c: 309: }
  4576                           
  4577                           ; BSR set to: 0
  4578                           
  4579                           ;train_move_right.c: 308: default : break;
  4580                           
  4581                           ;train_move_right.c: 306: break;
  4582  002D10  D00D               	goto	l6845
  4583  002D12                     l6843:
  4584  002D12  501C               	movf	_Switch_Train_Move,w,c
  4585                           
  4586                           ; Switch size 1, requested type "space"
  4587                           ; Number of cases is 4, Range of values is 0 to 3
  4588                           ; switch strategies available:
  4589                           ; Name         Instructions Cycles
  4590                           ; simple_byte           13     7 (average)
  4591                           ;	Chosen strategy is simple_byte
  4592  002D14  0A00               	xorlw	0	; case 0
  4593  002D16  B4D8               	btfsc	status,2,c
  4594  002D18  D777               	goto	l6801
  4595  002D1A  0A01               	xorlw	1	; case 1
  4596  002D1C  B4D8               	btfsc	status,2,c
  4597  002D1E  D7A0               	goto	l6815
  4598  002D20  0A03               	xorlw	3	; case 2
  4599  002D22  B4D8               	btfsc	status,2,c
  4600  002D24  D7BB               	goto	l6825
  4601  002D26  0A01               	xorlw	1	; case 3
  4602  002D28  B4D8               	btfsc	status,2,c
  4603  002D2A  D7D4               	goto	l6831
  4604  002D2C                     l6845:
  4605                           
  4606                           ;train_move_right.c: 311: return(Return_Val);
  4607  002D2C  0100               	movlb	0	; () banked
  4608  002D2E  51B9               	movf	Train_Move_Right_Brake@Return_Val& (0+255),w,b
  4609  002D30  0012               	return	
  4610  002D32                     __end_of_Train_Move_Right_Brake:
  4611                           	opt stack 0
  4612                           tblptru	equ	0xFF8
  4613                           tblptrh	equ	0xFF7
  4614                           tblptrl	equ	0xFF6
  4615                           tablat	equ	0xFF5
  4616                           postinc0	equ	0xFEE
  4617                           wreg	equ	0xFE8
  4618                           postdec1	equ	0xFE5
  4619                           fsr1h	equ	0xFE2
  4620                           fsr1l	equ	0xFE1
  4621                           status	equ	0xFD8
  4622                           
  4623 ;; *************** function _Train_Move_Left_Start *****************
  4624 ;; Defined at:
  4625 ;;		line 27 in file "../train_move_left.c"
  4626 ;; Parameters:    Size  Location     Type
  4627 ;;		None
  4628 ;; Auto vars:     Size  Location     Type
  4629 ;;		None
  4630 ;; Return value:  Size  Location     Type
  4631 ;;                  1    wreg      unsigned char 
  4632 ;; Registers used:
  4633 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4634 ;; Tracked objects:
  4635 ;;		On entry : 0/0
  4636 ;;		On exit  : 0/0
  4637 ;;		Unchanged: 0/0
  4638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4639 ;;      Params:         0       0       0       0       0       0       0       0       0
  4640 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4641 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4642 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4643 ;;Total ram usage:        0 bytes
  4644 ;; Hardware stack levels used:    1
  4645 ;; Hardware stack levels required when called:    5
  4646 ;; This function calls:
  4647 ;;		_GETxAPIxVAL
  4648 ;;		_SETxAPIxVAL
  4649 ;;		_SETxPWM
  4650 ;; This function is called by:
  4651 ;;		_Train_Path
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           	psect	text5
  4656  002E56                     __ptext5:
  4657                           	opt stack 0
  4658  002E56                     _Train_Move_Left_Start:
  4659                           	opt stack 23
  4660                           
  4661                           ;train_move_left.c: 29: static char Return_Val = 1;
  4662                           ;train_move_left.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  4663                           ;train_move_left.c: 32: switch(Switch_Train_Move)
  4664                           
  4665                           ; BSR set to: 0
  4666                           ;incstack = 0
  4667  002E56  D080               	goto	l6793
  4668  002E58                     l6747:
  4669  002E58  0E14               	movlw	20
  4670  002E5A  ECD2  F01D         	call	_GETxAPIxVAL
  4671  002E5E  0100               	movlb	0	; () banked
  4672  002E60  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  4673  002E62  0100               	movlb	0	; () banked
  4674  002E64  5D64               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  4675  002E66  0100               	movlb	0	; () banked
  4676  002E68  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4677  002E6A  0100               	movlb	0	; () banked
  4678  002E6C  5965               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4679  002E6E  A0D8               	btfss	status,0,c
  4680  002E70  D002               	goto	l6751
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;train_move_left.c: 37: {
  4684                           ;train_move_left.c: 38: Switch_Train_Move = 1;
  4685  002E72  0E01               	movlw	1
  4686  002E74  D035               	goto	L71
  4687  002E76                     l6751:
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;train_move_left.c: 42: }
  4691                           ;train_move_left.c: 43: Train_Move_Wait_Time++;
  4692  002E76  0100               	movlb	0	; () banked
  4693  002E78  4B64               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  4694  002E7A  2B65               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4695                           
  4696                           ; BSR set to: 0
  4697                           ;train_move_left.c: 44: Switch_Train_Move = 0;
  4698  002E7C  0E00               	movlw	0
  4699  002E7E  D020               	goto	L69
  4700  002E80                     l6755:
  4701                           
  4702                           ; BSR set to: 0
  4703                           ;train_move_left.c: 45: Return_Val = 1;
  4704  002E80  0E01               	movlw	1
  4705  002E82  0100               	movlb	0	; () banked
  4706  002E84  6FB8               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  4707                           
  4708                           ;train_move_left.c: 46: break;
  4709  002E86  D075               	goto	l6795
  4710  002E88                     l6757:
  4711  002E88  0E15               	movlw	21
  4712  002E8A  ECD2  F01D         	call	_GETxAPIxVAL
  4713  002E8E  C08D  F095         	movff	?_GETxAPIxVAL,SETxPWM@speed
  4714  002E92  C08E  F096         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  4715  002E96  0E00               	movlw	0
  4716  002E98  0100               	movlb	0	; () banked
  4717  002E9A  6F97               	movwf	SETxPWM@direction& (0+255),b
  4718  002E9C  EC25  F01B         	call	_SETxPWM	;wreg free
  4719                           
  4720                           ;train_move_left.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(21);
  4721  002EA0  0E15               	movlw	21
  4722  002EA2  ECD2  F01D         	call	_GETxAPIxVAL
  4723  002EA6  C08D  F005         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  4724  002EAA  C08E  F006         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  4725                           
  4726                           ;train_move_left.c: 50: SETxAPIxVAL(69, 0);
  4727  002EAE  0E00               	movlw	0
  4728  002EB0  0100               	movlb	0	; () banked
  4729  002EB2  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  4730  002EB4  0E00               	movlw	0
  4731  002EB6  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  4732  002EB8  0E45               	movlw	69
  4733  002EBA  EC11  F01D         	call	_SETxAPIxVAL
  4734  002EBE  D01A               	goto	l6769
  4735  002EC0                     L69:
  4736  002EC0  6E1C               	movwf	_Switch_Train_Move,c
  4737  002EC2  D7DE               	goto	l6755
  4738  002EC4                     l6763:
  4739  002EC4  0E12               	movlw	18
  4740  002EC6  ECD2  F01D         	call	_GETxAPIxVAL
  4741  002ECA  0100               	movlb	0	; () banked
  4742  002ECC  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  4743  002ECE  0100               	movlb	0	; () banked
  4744  002ED0  5D64               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  4745  002ED2  0100               	movlb	0	; () banked
  4746  002ED4  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4747  002ED6  0100               	movlb	0	; () banked
  4748  002ED8  5965               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4749  002EDA  A0D8               	btfss	status,0,c
  4750  002EDC  D008               	goto	l6767
  4751                           
  4752                           ; BSR set to: 0
  4753                           ;train_move_left.c: 56: {
  4754                           ;train_move_left.c: 57: Switch_Train_Move = 3;
  4755  002EDE  0E03               	movlw	3
  4756  002EE0                     L71:
  4757  002EE0  6E1C               	movwf	_Switch_Train_Move,c
  4758                           
  4759                           ;train_move_left.c: 58: Train_Move_Wait_Time = 0;
  4760  002EE2  0E00               	movlw	0
  4761  002EE4  0100               	movlb	0	; () banked
  4762  002EE6  6F65               	movwf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),b
  4763  002EE8  0E00               	movlw	0
  4764  002EEA  6F64               	movwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),b
  4765  002EEC  D7C9               	goto	l6755
  4766  002EEE                     l6767:
  4767                           
  4768                           ; BSR set to: 0
  4769                           ;train_move_left.c: 61: }
  4770                           ;train_move_left.c: 62: Train_Move_Wait_Time++;
  4771  002EEE  0100               	movlb	0	; () banked
  4772  002EF0  4B64               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  4773  002EF2  2B65               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4774  002EF4                     l6769:
  4775                           
  4776                           ; BSR set to: 0
  4777                           ;train_move_left.c: 63: Switch_Train_Move = 2;
  4778  002EF4  0E02               	movlw	2
  4779  002EF6  D7E4               	goto	L69
  4780  002EF8                     l6773:
  4781  002EF8  C005  F095         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  4782  002EFC  C006  F096         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  4783  002F00  0E00               	movlw	0
  4784  002F02  0100               	movlb	0	; () banked
  4785  002F04  6F97               	movwf	SETxPWM@direction& (0+255),b
  4786  002F06  EC25  F01B         	call	_SETxPWM	;wreg free
  4787                           
  4788                           ;train_move_left.c: 68: Return_Val = 1;
  4789  002F0A  0E01               	movlw	1
  4790  002F0C  0100               	movlb	0	; () banked
  4791  002F0E  6FB8               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  4792                           
  4793                           ; BSR set to: 0
  4794                           ;train_move_left.c: 69: if (Train_Move_Pwm_Count >= GETxAPIxVAL(24))
  4795  002F10  0E18               	movlw	24
  4796  002F12  ECD2  F01D         	call	_GETxAPIxVAL
  4797  002F16  0100               	movlb	0	; () banked
  4798  002F18  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  4799  002F1A  5C05               	subwf	_Train_Move_Pwm_Count,w,c
  4800  002F1C  0100               	movlb	0	; () banked
  4801  002F1E  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4802  002F20  5806               	subwfb	_Train_Move_Pwm_Count+1,w,c
  4803  002F22  A0D8               	btfss	status,0,c
  4804  002F24  D004               	goto	l6783
  4805                           
  4806                           ; BSR set to: 0
  4807                           ;train_move_left.c: 70: {
  4808                           ;train_move_left.c: 71: Switch_Train_Move = 0;
  4809  002F26  0E00               	movlw	0
  4810  002F28  6E1C               	movwf	_Switch_Train_Move,c
  4811                           
  4812                           ;train_move_left.c: 72: Return_Val = 0;
  4813  002F2A  0E00               	movlw	0
  4814  002F2C  D7AA               	goto	L70
  4815  002F2E                     l6783:
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;train_move_left.c: 75: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  4819  002F2E  0E1A               	movlw	26
  4820  002F30  ECD2  F01D         	call	_GETxAPIxVAL
  4821  002F34  0100               	movlb	0	; () banked
  4822  002F36  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  4823  002F38  5C07               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  4824  002F3A  0100               	movlb	0	; () banked
  4825  002F3C  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4826  002F3E  5808               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  4827  002F40  A0D8               	btfss	status,0,c
  4828  002F42  D007               	goto	l6789
  4829                           
  4830                           ; BSR set to: 0
  4831                           ;train_move_left.c: 76: {
  4832                           ;train_move_left.c: 77: Train_Move_Pwm_Count++;
  4833  002F44  4A05               	infsnz	_Train_Move_Pwm_Count,f,c
  4834  002F46  2A06               	incf	_Train_Move_Pwm_Count+1,f,c
  4835                           
  4836                           ; BSR set to: 0
  4837                           ;train_move_left.c: 78: Train_Move_Pwm_Fast_Count = 0;
  4838  002F48  0E00               	movlw	0
  4839  002F4A  6E08               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  4840  002F4C  0E00               	movlw	0
  4841  002F4E  6E07               	movwf	_Train_Move_Pwm_Fast_Count,c
  4842                           
  4843                           ;train_move_left.c: 79: }
  4844  002F50  D010               	goto	l6795
  4845  002F52                     l6789:
  4846                           
  4847                           ; BSR set to: 0
  4848                           ;train_move_left.c: 80: else{Train_Move_Pwm_Fast_Count++;}
  4849  002F52  4A07               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  4850  002F54  2A08               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  4851                           
  4852                           ; BSR set to: 0
  4853                           ;train_move_left.c: 83: }
  4854                           
  4855                           ; BSR set to: 0
  4856                           
  4857                           ;train_move_left.c: 82: default : break;
  4858                           
  4859                           ; BSR set to: 0
  4860                           ;train_move_left.c: 81: break;
  4861                           
  4862                           ; BSR set to: 0
  4863  002F56  D00D               	goto	l6795
  4864  002F58                     l6793:
  4865  002F58  501C               	movf	_Switch_Train_Move,w,c
  4866                           
  4867                           ; Switch size 1, requested type "space"
  4868                           ; Number of cases is 4, Range of values is 0 to 3
  4869                           ; switch strategies available:
  4870                           ; Name         Instructions Cycles
  4871                           ; simple_byte           13     7 (average)
  4872                           ;	Chosen strategy is simple_byte
  4873  002F5A  0A00               	xorlw	0	; case 0
  4874  002F5C  B4D8               	btfsc	status,2,c
  4875  002F5E  D77C               	goto	l6747
  4876  002F60  0A01               	xorlw	1	; case 1
  4877  002F62  B4D8               	btfsc	status,2,c
  4878  002F64  D791               	goto	l6757
  4879  002F66  0A03               	xorlw	3	; case 2
  4880  002F68  B4D8               	btfsc	status,2,c
  4881  002F6A  D7AC               	goto	l6763
  4882  002F6C  0A01               	xorlw	1	; case 3
  4883  002F6E  B4D8               	btfsc	status,2,c
  4884  002F70  D7C3               	goto	l6773
  4885  002F72                     l6795:
  4886                           
  4887                           ;train_move_left.c: 85: return(Return_Val);
  4888  002F72  0100               	movlb	0	; () banked
  4889  002F74  51B8               	movf	Train_Move_Left_Start@Return_Val& (0+255),w,b
  4890  002F76  0012               	return	
  4891  002F78                     __end_of_Train_Move_Left_Start:
  4892                           	opt stack 0
  4893                           tblptru	equ	0xFF8
  4894                           tblptrh	equ	0xFF7
  4895                           tblptrl	equ	0xFF6
  4896                           tablat	equ	0xFF5
  4897                           postinc0	equ	0xFEE
  4898                           wreg	equ	0xFE8
  4899                           postdec1	equ	0xFE5
  4900                           fsr1h	equ	0xFE2
  4901                           fsr1l	equ	0xFE1
  4902                           status	equ	0xFD8
  4903                           
  4904 ;; *************** function _Train_Move_Left_Brake *****************
  4905 ;; Defined at:
  4906 ;;		line 254 in file "../train_move_left.c"
  4907 ;; Parameters:    Size  Location     Type
  4908 ;;		None
  4909 ;; Auto vars:     Size  Location     Type
  4910 ;;		None
  4911 ;; Return value:  Size  Location     Type
  4912 ;;                  1    wreg      unsigned char 
  4913 ;; Registers used:
  4914 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4915 ;; Tracked objects:
  4916 ;;		On entry : 0/0
  4917 ;;		On exit  : 0/0
  4918 ;;		Unchanged: 0/0
  4919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4920 ;;      Params:         0       0       0       0       0       0       0       0       0
  4921 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4922 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4923 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4924 ;;Total ram usage:        0 bytes
  4925 ;; Hardware stack levels used:    1
  4926 ;; Hardware stack levels required when called:    5
  4927 ;; This function calls:
  4928 ;;		_GETxAPIxVAL
  4929 ;;		_SETxAPIxVAL
  4930 ;;		_SETxPWM
  4931 ;; This function is called by:
  4932 ;;		_Train_Path
  4933 ;; This function uses a non-reentrant model
  4934 ;;
  4935                           
  4936                           	psect	text6
  4937  002AD4                     __ptext6:
  4938                           	opt stack 0
  4939  002AD4                     _Train_Move_Left_Brake:
  4940                           	opt stack 23
  4941                           
  4942                           ;train_move_left.c: 256: static char Return_Val = 1;
  4943                           ;train_move_left.c: 257: static unsigned int Train_Move_Wait_Time = 0;
  4944                           ;train_move_left.c: 259: switch(Switch_Train_Move)
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;incstack = 0
  4948  002AD4  D088               	goto	l6895
  4949  002AD6                     l6851:
  4950  002AD6  C005  F095         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  4951  002ADA  C006  F096         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  4952  002ADE  0E00               	movlw	0
  4953  002AE0  0100               	movlb	0	; () banked
  4954  002AE2  6F97               	movwf	SETxPWM@direction& (0+255),b
  4955  002AE4  EC25  F01B         	call	_SETxPWM	;wreg free
  4956                           
  4957                           ;train_move_left.c: 262: Return_Val = 1;
  4958  002AE8  0E01               	movlw	1
  4959  002AEA  0100               	movlb	0	; () banked
  4960  002AEC  6FB7               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;train_move_left.c: 263: if (Train_Move_Pwm_Count <= GETxAPIxVAL(21))
  4964  002AEE  0E15               	movlw	21
  4965  002AF0  ECD2  F01D         	call	_GETxAPIxVAL
  4966  002AF4  5005               	movf	_Train_Move_Pwm_Count,w,c
  4967  002AF6  0100               	movlb	0	; () banked
  4968  002AF8  5D8D               	subwf	?_GETxAPIxVAL& (0+255),w,b
  4969  002AFA  5006               	movf	_Train_Move_Pwm_Count+1,w,c
  4970  002AFC  0100               	movlb	0	; () banked
  4971  002AFE  598E               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  4972  002B00  A0D8               	btfss	status,0,c
  4973  002B02  D002               	goto	l6859
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;train_move_left.c: 264: {
  4977                           ;train_move_left.c: 265: Switch_Train_Move = 1;
  4978  002B04  0E01               	movlw	1
  4979  002B06  D06A               	goto	L98
  4980  002B08                     l6859:
  4981                           
  4982                           ; BSR set to: 0
  4983                           ;train_move_left.c: 268: }
  4984                           ;train_move_left.c: 269: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(25))
  4985  002B08  0E19               	movlw	25
  4986  002B0A  ECD2  F01D         	call	_GETxAPIxVAL
  4987  002B0E  0100               	movlb	0	; () banked
  4988  002B10  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  4989  002B12  5C07               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  4990  002B14  0100               	movlb	0	; () banked
  4991  002B16  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  4992  002B18  5808               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  4993  002B1A  A0D8               	btfss	status,0,c
  4994  002B1C  D008               	goto	l6865
  4995                           
  4996                           ; BSR set to: 0
  4997                           ;train_move_left.c: 270: {
  4998                           ;train_move_left.c: 271: Train_Move_Pwm_Count--;
  4999  002B1E  0605               	decf	_Train_Move_Pwm_Count,f,c
  5000  002B20  A0D8               	btfss	status,0,c
  5001  002B22  0606               	decf	_Train_Move_Pwm_Count+1,f,c
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;train_move_left.c: 272: Train_Move_Pwm_Fast_Count = 0;
  5005  002B24  0E00               	movlw	0
  5006  002B26  6E08               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  5007  002B28  0E00               	movlw	0
  5008  002B2A  6E07               	movwf	_Train_Move_Pwm_Fast_Count,c
  5009                           
  5010                           ;train_move_left.c: 273: }
  5011  002B2C  D069               	goto	l6897
  5012  002B2E                     l6865:
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;train_move_left.c: 274: else{Train_Move_Pwm_Fast_Count++;}
  5016  002B2E  4A07               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  5017  002B30  2A08               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;train_move_left.c: 275: break;
  5021  002B32  D066               	goto	l6897
  5022  002B34                     l6867:
  5023  002B34  0E12               	movlw	18
  5024  002B36  ECD2  F01D         	call	_GETxAPIxVAL
  5025  002B3A  0100               	movlb	0	; () banked
  5026  002B3C  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  5027  002B3E  0100               	movlb	0	; () banked
  5028  002B40  5D62               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5029  002B42  0100               	movlb	0	; () banked
  5030  002B44  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5031  002B46  0100               	movlb	0	; () banked
  5032  002B48  5963               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5033  002B4A  A0D8               	btfss	status,0,c
  5034  002B4C  D008               	goto	l6871
  5035                           
  5036                           ; BSR set to: 0
  5037                           ;train_move_left.c: 278: {
  5038                           ;train_move_left.c: 279: Switch_Train_Move = 2;
  5039  002B4E  0E02               	movlw	2
  5040  002B50  6E1C               	movwf	_Switch_Train_Move,c
  5041                           
  5042                           ;train_move_left.c: 280: Train_Move_Wait_Time = 0;
  5043  002B52  0E00               	movlw	0
  5044  002B54  0100               	movlb	0	; () banked
  5045  002B56  6F63               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5046  002B58  0E00               	movlw	0
  5047  002B5A  6F62               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5048  002B5C  D040               	goto	l6891
  5049  002B5E                     l6871:
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;train_move_left.c: 283: }
  5053                           ;train_move_left.c: 284: Return_Val = 1;
  5054  002B5E  0E01               	movlw	1
  5055  002B60  0100               	movlb	0	; () banked
  5056  002B62  6FB7               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;train_move_left.c: 285: Train_Move_Wait_Time++;
  5060  002B64  0100               	movlb	0	; () banked
  5061  002B66  4B62               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  5062  002B68  2B63               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5063                           
  5064                           ; BSR set to: 0
  5065                           ;train_move_left.c: 286: Switch_Train_Move = 1;
  5066  002B6A  0E01               	movlw	1
  5067  002B6C  6E1C               	movwf	_Switch_Train_Move,c
  5068                           
  5069                           ;train_move_left.c: 287: break;
  5070  002B6E  D048               	goto	l6897
  5071  002B70                     l6877:
  5072  002B70  0E15               	movlw	21
  5073  002B72  ECD2  F01D         	call	_GETxAPIxVAL
  5074  002B76  C08D  F095         	movff	?_GETxAPIxVAL,SETxPWM@speed
  5075  002B7A  C08E  F096         	movff	?_GETxAPIxVAL+1,SETxPWM@speed+1
  5076  002B7E  0E00               	movlw	0
  5077  002B80  0100               	movlb	0	; () banked
  5078  002B82  6F97               	movwf	SETxPWM@direction& (0+255),b
  5079  002B84  EC25  F01B         	call	_SETxPWM	;wreg free
  5080                           
  5081                           ;train_move_left.c: 290: SETxAPIxVAL(69, 1);;
  5082  002B88  0E00               	movlw	0
  5083  002B8A  0100               	movlb	0	; () banked
  5084  002B8C  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  5085  002B8E  0E01               	movlw	1
  5086  002B90  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  5087  002B92  0E45               	movlw	69
  5088  002B94  EC11  F01D         	call	_SETxAPIxVAL
  5089                           
  5090                           ;train_move_left.c: 291: Train_Move_Pwm_Count = GETxAPIxVAL(21);
  5091  002B98  0E15               	movlw	21
  5092  002B9A  ECD2  F01D         	call	_GETxAPIxVAL
  5093  002B9E  C08D  F005         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5094  002BA2  C08E  F006         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5095  002BA6  D019               	goto	L99
  5096  002BA8                     l6883:
  5097  002BA8  0E14               	movlw	20
  5098  002BAA  ECD2  F01D         	call	_GETxAPIxVAL
  5099  002BAE  0100               	movlb	0	; () banked
  5100  002BB0  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  5101  002BB2  0100               	movlb	0	; () banked
  5102  002BB4  5D62               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5103  002BB6  0100               	movlb	0	; () banked
  5104  002BB8  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5105  002BBA  0100               	movlb	0	; () banked
  5106  002BBC  5963               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5107  002BBE  A0D8               	btfss	status,0,c
  5108  002BC0  D009               	goto	l6887
  5109                           
  5110                           ; BSR set to: 0
  5111                           ;train_move_left.c: 297: {
  5112                           ;train_move_left.c: 298: Switch_Train_Move = 0;
  5113  002BC2  0E00               	movlw	0
  5114  002BC4  6E1C               	movwf	_Switch_Train_Move,c
  5115                           
  5116                           ;train_move_left.c: 299: Train_Move_Wait_Time = 0;
  5117  002BC6  0E00               	movlw	0
  5118  002BC8  0100               	movlb	0	; () banked
  5119  002BCA  6F63               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5120  002BCC  0E00               	movlw	0
  5121  002BCE  6F62               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5122                           
  5123                           ;train_move_left.c: 300: Return_Val = 0;
  5124  002BD0  0E00               	movlw	0
  5125  002BD2  D006               	goto	L74
  5126  002BD4                     l6887:
  5127                           
  5128                           ; BSR set to: 0
  5129                           ;train_move_left.c: 302: }
  5130                           ;train_move_left.c: 303: Train_Move_Wait_Time++;
  5131  002BD4  0100               	movlb	0	; () banked
  5132  002BD6  4B62               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  5133  002BD8  2B63               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5134  002BDA                     L99:
  5135                           
  5136                           ; BSR set to: 0
  5137                           ;train_move_left.c: 304: Switch_Train_Move = 3;
  5138  002BDA  0E03               	movlw	3
  5139  002BDC                     L98:
  5140  002BDC  6E1C               	movwf	_Switch_Train_Move,c
  5141  002BDE                     l6891:
  5142                           
  5143                           ; BSR set to: 0
  5144                           ;train_move_left.c: 305: Return_Val = 1;
  5145  002BDE  0E01               	movlw	1
  5146  002BE0                     L74:
  5147  002BE0  0100               	movlb	0	; () banked
  5148  002BE2  6FB7               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5149                           
  5150                           ; BSR set to: 0
  5151                           ;train_move_left.c: 309: }
  5152                           
  5153                           ; BSR set to: 0
  5154                           
  5155                           ;train_move_left.c: 308: default : break;
  5156                           
  5157                           ;train_move_left.c: 306: break;
  5158  002BE4  D00D               	goto	l6897
  5159  002BE6                     l6895:
  5160  002BE6  501C               	movf	_Switch_Train_Move,w,c
  5161                           
  5162                           ; Switch size 1, requested type "space"
  5163                           ; Number of cases is 4, Range of values is 0 to 3
  5164                           ; switch strategies available:
  5165                           ; Name         Instructions Cycles
  5166                           ; simple_byte           13     7 (average)
  5167                           ;	Chosen strategy is simple_byte
  5168  002BE8  0A00               	xorlw	0	; case 0
  5169  002BEA  B4D8               	btfsc	status,2,c
  5170  002BEC  D774               	goto	l6851
  5171  002BEE  0A01               	xorlw	1	; case 1
  5172  002BF0  B4D8               	btfsc	status,2,c
  5173  002BF2  D7A0               	goto	l6867
  5174  002BF4  0A03               	xorlw	3	; case 2
  5175  002BF6  B4D8               	btfsc	status,2,c
  5176  002BF8  D7BB               	goto	l6877
  5177  002BFA  0A01               	xorlw	1	; case 3
  5178  002BFC  B4D8               	btfsc	status,2,c
  5179  002BFE  D7D4               	goto	l6883
  5180  002C00                     l6897:
  5181                           
  5182                           ;train_move_left.c: 311: return(Return_Val);
  5183  002C00  0100               	movlb	0	; () banked
  5184  002C02  51B7               	movf	Train_Move_Left_Brake@Return_Val& (0+255),w,b
  5185  002C04  0012               	return	
  5186  002C06                     __end_of_Train_Move_Left_Brake:
  5187                           	opt stack 0
  5188                           tblptru	equ	0xFF8
  5189                           tblptrh	equ	0xFF7
  5190                           tblptrl	equ	0xFF6
  5191                           tablat	equ	0xFF5
  5192                           postinc0	equ	0xFEE
  5193                           wreg	equ	0xFE8
  5194                           postdec1	equ	0xFE5
  5195                           fsr1h	equ	0xFE2
  5196                           fsr1l	equ	0xFE1
  5197                           status	equ	0xFD8
  5198                           
  5199 ;; *************** function _Right_Mountain_From_The_Right *****************
  5200 ;; Defined at:
  5201 ;;		line 103 in file "../train_move_left.c"
  5202 ;; Parameters:    Size  Location     Type
  5203 ;;  rc              1    wreg     unsigned char 
  5204 ;; Auto vars:     Size  Location     Type
  5205 ;;  rc              1   15[BANK0 ] unsigned char 
  5206 ;; Return value:  Size  Location     Type
  5207 ;;                  1    wreg      unsigned char 
  5208 ;; Registers used:
  5209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5210 ;; Tracked objects:
  5211 ;;		On entry : 0/0
  5212 ;;		On exit  : 0/0
  5213 ;;		Unchanged: 0/0
  5214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5215 ;;      Params:         0       0       0       0       0       0       0       0       0
  5216 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5217 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5218 ;;      Totals:         0       1       0       0       0       0       0       0       0
  5219 ;;Total ram usage:        1 bytes
  5220 ;; Hardware stack levels used:    1
  5221 ;; Hardware stack levels required when called:    5
  5222 ;; This function calls:
  5223 ;;		_GETxAPIxVAL
  5224 ;;		_SETxPWM
  5225 ;; This function is called by:
  5226 ;;		_Train_Path
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230                           	psect	text7
  5231  002F78                     __ptext7:
  5232                           	opt stack 0
  5233  002F78                     _Right_Mountain_From_The_Right:
  5234                           	opt stack 23
  5235                           
  5236                           ; BSR set to: 0
  5237                           ;incstack = 0
  5238                           ;Right_Mountain_From_The_Right@rc stored from wreg
  5239  002F78  0100               	movlb	0	; () banked
  5240  002F7A  6F9C               	movwf	Right_Mountain_From_The_Right@rc& (0+255),b
  5241                           
  5242                           ;train_move_left.c: 105: static char Return_Val = 1;
  5243                           ;train_move_left.c: 107: switch (Switch_Moutain){
  5244  002F7C  D07D               	goto	l7063
  5245  002F7E                     l7015:
  5246  002F7E  0E03               	movlw	3
  5247  002F80  0100               	movlb	0	; () banked
  5248  002F82  199C               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  5249  002F84  B4D8               	btfsc	status,2,c
  5250  002F86  D00D               	goto	l7021
  5251                           
  5252                           ; BSR set to: 0
  5253                           ;train_move_left.c: 112: else if(Mountain_Delay_Counter >= GETxAPIxVAL(53)){
  5254                           
  5255                           ; BSR set to: 0
  5256                           
  5257                           ;train_move_left.c: 111: }
  5258                           
  5259                           ;train_move_left.c: 110: Mountain_Delay_Counter = 0;
  5260                           
  5261                           ; BSR set to: 0
  5262                           ;train_move_left.c: 109: Switch_Moutain = 1;
  5263  002F88  0E35               	movlw	53
  5264  002F8A  ECD2  F01D         	call	_GETxAPIxVAL
  5265  002F8E  0100               	movlb	0	; () banked
  5266  002F90  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  5267  002F92  0100               	movlb	0	; () banked
  5268  002F94  5D70               	subwf	_Mountain_Delay_Counter& (0+255),w,b
  5269  002F96  0100               	movlb	0	; () banked
  5270  002F98  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5271  002F9A  0100               	movlb	0	; () banked
  5272  002F9C  5971               	subwfb	(_Mountain_Delay_Counter+1)& (0+255),w,b
  5273  002F9E  A0D8               	btfss	status,0,c
  5274  002FA0  D008               	goto	l7023
  5275  002FA2                     l7021:
  5276                           
  5277                           ; BSR set to: 0
  5278                           ;train_move_left.c: 113: Switch_Moutain = 1;
  5279  002FA2  0E01               	movlw	1
  5280  002FA4  6E1A               	movwf	_Switch_Moutain,c
  5281                           
  5282                           ;train_move_left.c: 114: Mountain_Delay_Counter = 0;
  5283  002FA6  0E00               	movlw	0
  5284  002FA8  0100               	movlb	0	; () banked
  5285  002FAA  6F71               	movwf	(_Mountain_Delay_Counter+1)& (0+255),b
  5286  002FAC  0E00               	movlw	0
  5287  002FAE  6F70               	movwf	_Mountain_Delay_Counter& (0+255),b
  5288                           
  5289                           ;train_move_left.c: 115: }
  5290  002FB0  D05F               	goto	l7059
  5291  002FB2                     l7023:
  5292                           
  5293                           ; BSR set to: 0
  5294                           ;train_move_left.c: 116: else{
  5295                           ;train_move_left.c: 117: Mountain_Delay_Counter++;
  5296  002FB2  0100               	movlb	0	; () banked
  5297  002FB4  4B70               	infsnz	_Mountain_Delay_Counter& (0+255),f,b
  5298  002FB6  2B71               	incf	(_Mountain_Delay_Counter+1)& (0+255),f,b
  5299                           
  5300                           ; BSR set to: 0
  5301  002FB8  D05B               	goto	l7059
  5302  002FBA                     l7027:
  5303  002FBA  0E04               	movlw	4
  5304  002FBC  0100               	movlb	0	; () banked
  5305  002FBE  199C               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  5306  002FC0  A4D8               	btfss	status,2,c
  5307  002FC2  D023               	goto	l7043
  5308                           
  5309                           ; BSR set to: 0
  5310                           ;train_move_left.c: 123: SETxPWM(Train_Move_Pwm_Count, 0);
  5311  002FC4  C005  F095         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5312  002FC8  C006  F096         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5313  002FCC  0E00               	movlw	0
  5314  002FCE  0100               	movlb	0	; () banked
  5315  002FD0  6F97               	movwf	SETxPWM@direction& (0+255),b
  5316  002FD2  EC25  F01B         	call	_SETxPWM	;wreg free
  5317                           
  5318                           ;train_move_left.c: 124: if (Train_Move_Pwm_Count <= GETxAPIxVAL(46))
  5319  002FD6  0E2E               	movlw	46
  5320  002FD8  ECD2  F01D         	call	_GETxAPIxVAL
  5321  002FDC  5005               	movf	_Train_Move_Pwm_Count,w,c
  5322  002FDE  0100               	movlb	0	; () banked
  5323  002FE0  5D8D               	subwf	?_GETxAPIxVAL& (0+255),w,b
  5324  002FE2  5006               	movf	_Train_Move_Pwm_Count+1,w,c
  5325  002FE4  0100               	movlb	0	; () banked
  5326  002FE6  598E               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  5327  002FE8  B0D8               	btfsc	status,0,c
  5328  002FEA  D028               	goto	l7047
  5329                           
  5330                           ; BSR set to: 0
  5331                           ;train_move_left.c: 131: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5332                           
  5333                           ; BSR set to: 0
  5334                           
  5335                           ; BSR set to: 0
  5336                           ;train_move_left.c: 130: }
  5337                           
  5338                           ;train_move_left.c: 129: break;
  5339                           
  5340                           ;train_move_left.c: 128: Return_Val = 0;
  5341                           
  5342                           ;train_move_left.c: 127: Switch_Moutain = 0;
  5343                           
  5344                           ; BSR set to: 0
  5345                           ;train_move_left.c: 125: {
  5346                           ;train_move_left.c: 126: Switch_Train_Move = 0;
  5347  002FEC  0E1A               	movlw	26
  5348  002FEE  ECD2  F01D         	call	_GETxAPIxVAL
  5349  002FF2  0100               	movlb	0	; () banked
  5350  002FF4  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  5351  002FF6  5C07               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  5352  002FF8  0100               	movlb	0	; () banked
  5353  002FFA  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5354  002FFC  5808               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  5355  002FFE  A0D8               	btfss	status,0,c
  5356  003000  D035               	goto	l7057
  5357                           
  5358                           ; BSR set to: 0
  5359                           ;train_move_left.c: 132: {
  5360                           ;train_move_left.c: 133: Train_Move_Pwm_Count--;
  5361  003002  0605               	decf	_Train_Move_Pwm_Count,f,c
  5362  003004  A0D8               	btfss	status,0,c
  5363  003006  0606               	decf	_Train_Move_Pwm_Count+1,f,c
  5364  003008  D02C               	goto	l7055
  5365  00300A                     l7043:
  5366                           
  5367                           ; BSR set to: 0
  5368                           ;train_move_left.c: 138: else if (rc == 3){
  5369  00300A  0E03               	movlw	3
  5370  00300C  0100               	movlb	0	; () banked
  5371  00300E  199C               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  5372  003010  A4D8               	btfss	status,2,c
  5373  003012  D02E               	goto	l7059
  5374                           
  5375                           ; BSR set to: 0
  5376                           ;train_move_left.c: 139: SETxPWM(Train_Move_Pwm_Count, 0);
  5377  003014  C005  F095         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5378  003018  C006  F096         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5379  00301C  0E00               	movlw	0
  5380  00301E  0100               	movlb	0	; () banked
  5381  003020  6F97               	movwf	SETxPWM@direction& (0+255),b
  5382  003022  EC25  F01B         	call	_SETxPWM	;wreg free
  5383                           
  5384                           ;train_move_left.c: 140: if (Train_Move_Pwm_Count >= GETxAPIxVAL(24))
  5385  003026  0E18               	movlw	24
  5386  003028  ECD2  F01D         	call	_GETxAPIxVAL
  5387  00302C  0100               	movlb	0	; () banked
  5388  00302E  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  5389  003030  5C05               	subwf	_Train_Move_Pwm_Count,w,c
  5390  003032  0100               	movlb	0	; () banked
  5391  003034  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5392  003036  5806               	subwfb	_Train_Move_Pwm_Count+1,w,c
  5393  003038  A0D8               	btfss	status,0,c
  5394  00303A  D006               	goto	l7051
  5395  00303C                     l7047:
  5396                           
  5397                           ; BSR set to: 0
  5398                           ;train_move_left.c: 141: {
  5399                           ;train_move_left.c: 142: Switch_Train_Move = 0;
  5400  00303C  0E00               	movlw	0
  5401  00303E  6E1C               	movwf	_Switch_Train_Move,c
  5402                           
  5403                           ;train_move_left.c: 143: Switch_Moutain = 0;
  5404  003040  0E00               	movlw	0
  5405  003042  6E1A               	movwf	_Switch_Moutain,c
  5406                           
  5407                           ;train_move_left.c: 144: Return_Val = 0;
  5408  003044  0E00               	movlw	0
  5409  003046  D015               	goto	L78
  5410  003048                     l7051:
  5411                           
  5412                           ; BSR set to: 0
  5413                           ;train_move_left.c: 147: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5414  003048  0E1A               	movlw	26
  5415  00304A  ECD2  F01D         	call	_GETxAPIxVAL
  5416  00304E  0100               	movlb	0	; () banked
  5417  003050  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  5418  003052  5C07               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  5419  003054  0100               	movlb	0	; () banked
  5420  003056  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5421  003058  5808               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  5422  00305A  A0D8               	btfss	status,0,c
  5423  00305C  D007               	goto	l7057
  5424                           
  5425                           ; BSR set to: 0
  5426                           ;train_move_left.c: 148: {
  5427                           ;train_move_left.c: 149: Train_Move_Pwm_Count++;
  5428  00305E  4A05               	infsnz	_Train_Move_Pwm_Count,f,c
  5429  003060  2A06               	incf	_Train_Move_Pwm_Count+1,f,c
  5430  003062                     l7055:
  5431                           
  5432                           ; BSR set to: 0
  5433                           ;train_move_left.c: 150: Train_Move_Pwm_Fast_Count = 0;
  5434  003062  0E00               	movlw	0
  5435  003064  6E08               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  5436  003066  0E00               	movlw	0
  5437  003068  6E07               	movwf	_Train_Move_Pwm_Fast_Count,c
  5438                           
  5439                           ;train_move_left.c: 151: }
  5440  00306A  D002               	goto	l7059
  5441  00306C                     l7057:
  5442                           
  5443                           ; BSR set to: 0
  5444                           ;train_move_left.c: 152: else{Train_Move_Pwm_Fast_Count++;}
  5445  00306C  4A07               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  5446  00306E  2A08               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  5447  003070                     l7059:
  5448                           
  5449                           ; BSR set to: 0
  5450                           ;train_move_left.c: 153: }
  5451                           ;train_move_left.c: 154: Return_Val = 1;
  5452  003070  0E01               	movlw	1
  5453  003072                     L78:
  5454  003072  0100               	movlb	0	; () banked
  5455  003074  6FB6               	movwf	Right_Mountain_From_The_Right@Return_Val& (0+255),b
  5456                           
  5457                           ; BSR set to: 0
  5458                           ;train_move_left.c: 159: }
  5459                           
  5460                           ; BSR set to: 0
  5461                           ;train_move_left.c: 158: break;
  5462                           
  5463                           ;train_move_left.c: 157: default:
  5464                           
  5465                           ;train_move_left.c: 155: break;
  5466  003076  D007               	goto	l7065
  5467  003078                     l7063:
  5468  003078  501A               	movf	_Switch_Moutain,w,c
  5469                           
  5470                           ; Switch size 1, requested type "space"
  5471                           ; Number of cases is 2, Range of values is 0 to 1
  5472                           ; switch strategies available:
  5473                           ; Name         Instructions Cycles
  5474                           ; simple_byte            7     4 (average)
  5475                           ;	Chosen strategy is simple_byte
  5476  00307A  0A00               	xorlw	0	; case 0
  5477  00307C  B4D8               	btfsc	status,2,c
  5478  00307E  D77F               	goto	l7015
  5479  003080  0A01               	xorlw	1	; case 1
  5480  003082  B4D8               	btfsc	status,2,c
  5481  003084  D79A               	goto	l7027
  5482  003086                     l7065:
  5483                           
  5484                           ;train_move_left.c: 161: return(Return_Val);
  5485  003086  0100               	movlb	0	; () banked
  5486  003088  51B6               	movf	Right_Mountain_From_The_Right@Return_Val& (0+255),w,b
  5487  00308A  0012               	return	
  5488  00308C                     __end_of_Right_Mountain_From_The_Right:
  5489                           	opt stack 0
  5490                           tblptru	equ	0xFF8
  5491                           tblptrh	equ	0xFF7
  5492                           tblptrl	equ	0xFF6
  5493                           tablat	equ	0xFF5
  5494                           postinc0	equ	0xFEE
  5495                           wreg	equ	0xFE8
  5496                           postdec1	equ	0xFE5
  5497                           fsr1h	equ	0xFE2
  5498                           fsr1l	equ	0xFE1
  5499                           status	equ	0xFD8
  5500                           
  5501 ;; *************** function _Right_Mountain_From_The_Left *****************
  5502 ;; Defined at:
  5503 ;;		line 179 in file "../train_move_right.c"
  5504 ;; Parameters:    Size  Location     Type
  5505 ;;  rc              1    wreg     unsigned char 
  5506 ;; Auto vars:     Size  Location     Type
  5507 ;;  rc              1   15[BANK0 ] unsigned char 
  5508 ;; Return value:  Size  Location     Type
  5509 ;;                  1    wreg      unsigned char 
  5510 ;; Registers used:
  5511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5512 ;; Tracked objects:
  5513 ;;		On entry : 0/0
  5514 ;;		On exit  : 0/0
  5515 ;;		Unchanged: 0/0
  5516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5517 ;;      Params:         0       0       0       0       0       0       0       0       0
  5518 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5519 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5520 ;;      Totals:         0       1       0       0       0       0       0       0       0
  5521 ;;Total ram usage:        1 bytes
  5522 ;; Hardware stack levels used:    1
  5523 ;; Hardware stack levels required when called:    5
  5524 ;; This function calls:
  5525 ;;		_GETxAPIxVAL
  5526 ;;		_SETxPWM
  5527 ;; This function is called by:
  5528 ;;		_Train_Path
  5529 ;; This function uses a non-reentrant model
  5530 ;;
  5531                           
  5532                           	psect	text8
  5533  00308C                     __ptext8:
  5534                           	opt stack 0
  5535  00308C                     _Right_Mountain_From_The_Left:
  5536                           	opt stack 23
  5537                           
  5538                           ; BSR set to: 0
  5539                           ;incstack = 0
  5540                           ;Right_Mountain_From_The_Left@rc stored from wreg
  5541  00308C  0100               	movlb	0	; () banked
  5542  00308E  6F9C               	movwf	Right_Mountain_From_The_Left@rc& (0+255),b
  5543                           
  5544                           ;train_move_right.c: 181: static char Return_Val = 1;
  5545                           ;train_move_right.c: 183: switch (Switch_Moutain){
  5546  003090  D07D               	goto	l7007
  5547  003092                     l6959:
  5548  003092  0E04               	movlw	4
  5549  003094  0100               	movlb	0	; () banked
  5550  003096  199C               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  5551  003098  B4D8               	btfsc	status,2,c
  5552  00309A  D00D               	goto	l6965
  5553                           
  5554                           ; BSR set to: 0
  5555                           ;train_move_right.c: 188: else if(Mountain_Delay_Counter >= GETxAPIxVAL(56)){
  5556                           
  5557                           ; BSR set to: 0
  5558                           
  5559                           ;train_move_right.c: 187: }
  5560                           
  5561                           ;train_move_right.c: 186: Mountain_Delay_Counter = 0;
  5562                           
  5563                           ; BSR set to: 0
  5564                           ;train_move_right.c: 185: Switch_Moutain = 1;
  5565  00309C  0E38               	movlw	56
  5566  00309E  ECD2  F01D         	call	_GETxAPIxVAL
  5567  0030A2  0100               	movlb	0	; () banked
  5568  0030A4  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  5569  0030A6  0100               	movlb	0	; () banked
  5570  0030A8  5D70               	subwf	_Mountain_Delay_Counter& (0+255),w,b
  5571  0030AA  0100               	movlb	0	; () banked
  5572  0030AC  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5573  0030AE  0100               	movlb	0	; () banked
  5574  0030B0  5971               	subwfb	(_Mountain_Delay_Counter+1)& (0+255),w,b
  5575  0030B2  A0D8               	btfss	status,0,c
  5576  0030B4  D008               	goto	l6967
  5577  0030B6                     l6965:
  5578                           
  5579                           ; BSR set to: 0
  5580                           ;train_move_right.c: 189: Switch_Moutain = 1;
  5581  0030B6  0E01               	movlw	1
  5582  0030B8  6E1A               	movwf	_Switch_Moutain,c
  5583                           
  5584                           ;train_move_right.c: 190: Mountain_Delay_Counter = 0;
  5585  0030BA  0E00               	movlw	0
  5586  0030BC  0100               	movlb	0	; () banked
  5587  0030BE  6F71               	movwf	(_Mountain_Delay_Counter+1)& (0+255),b
  5588  0030C0  0E00               	movlw	0
  5589  0030C2  6F70               	movwf	_Mountain_Delay_Counter& (0+255),b
  5590                           
  5591                           ;train_move_right.c: 191: }
  5592  0030C4  D05F               	goto	l7003
  5593  0030C6                     l6967:
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;train_move_right.c: 192: else{
  5597                           ;train_move_right.c: 193: Mountain_Delay_Counter++;
  5598  0030C6  0100               	movlb	0	; () banked
  5599  0030C8  4B70               	infsnz	_Mountain_Delay_Counter& (0+255),f,b
  5600  0030CA  2B71               	incf	(_Mountain_Delay_Counter+1)& (0+255),f,b
  5601                           
  5602                           ; BSR set to: 0
  5603  0030CC  D05B               	goto	l7003
  5604  0030CE                     l6971:
  5605  0030CE  0E03               	movlw	3
  5606  0030D0  0100               	movlb	0	; () banked
  5607  0030D2  199C               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  5608  0030D4  A4D8               	btfss	status,2,c
  5609  0030D6  D022               	goto	l6987
  5610                           
  5611                           ; BSR set to: 0
  5612                           ;train_move_right.c: 199: SETxPWM(Train_Move_Pwm_Count, 1);
  5613  0030D8  C005  F095         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5614  0030DC  C006  F096         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5615  0030E0  0E01               	movlw	1
  5616  0030E2  0100               	movlb	0	; () banked
  5617  0030E4  6F97               	movwf	SETxPWM@direction& (0+255),b
  5618  0030E6  EC25  F01B         	call	_SETxPWM	;wreg free
  5619                           
  5620                           ;train_move_right.c: 200: if (Train_Move_Pwm_Count >= GETxAPIxVAL(47))
  5621  0030EA  0E2F               	movlw	47
  5622  0030EC  ECD2  F01D         	call	_GETxAPIxVAL
  5623  0030F0  0100               	movlb	0	; () banked
  5624  0030F2  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  5625  0030F4  5C05               	subwf	_Train_Move_Pwm_Count,w,c
  5626  0030F6  0100               	movlb	0	; () banked
  5627  0030F8  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5628  0030FA  5806               	subwfb	_Train_Move_Pwm_Count+1,w,c
  5629  0030FC  B0D8               	btfsc	status,0,c
  5630  0030FE  D027               	goto	l6991
  5631                           
  5632                           ; BSR set to: 0
  5633                           ;train_move_right.c: 207: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5634                           
  5635                           ; BSR set to: 0
  5636                           
  5637                           ; BSR set to: 0
  5638                           ;train_move_right.c: 206: }
  5639                           
  5640                           ;train_move_right.c: 205: break;
  5641                           
  5642                           ;train_move_right.c: 204: Return_Val = 0;
  5643                           
  5644                           ;train_move_right.c: 203: Switch_Moutain = 0;
  5645                           
  5646                           ; BSR set to: 0
  5647                           ;train_move_right.c: 201: {
  5648                           ;train_move_right.c: 202: Switch_Train_Move = 0;
  5649  003100  0E1A               	movlw	26
  5650  003102  ECD2  F01D         	call	_GETxAPIxVAL
  5651  003106  0100               	movlb	0	; () banked
  5652  003108  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  5653  00310A  5C07               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  5654  00310C  0100               	movlb	0	; () banked
  5655  00310E  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5656  003110  5808               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  5657  003112  A0D8               	btfss	status,0,c
  5658  003114  D035               	goto	l7001
  5659                           
  5660                           ; BSR set to: 0
  5661                           ;train_move_right.c: 208: {
  5662                           ;train_move_right.c: 209: Train_Move_Pwm_Count++;
  5663  003116  4A05               	infsnz	_Train_Move_Pwm_Count,f,c
  5664  003118  2A06               	incf	_Train_Move_Pwm_Count+1,f,c
  5665  00311A  D02D               	goto	l6999
  5666  00311C                     l6987:
  5667                           
  5668                           ; BSR set to: 0
  5669                           ;train_move_right.c: 214: else if (rc == 4){
  5670  00311C  0E04               	movlw	4
  5671  00311E  0100               	movlb	0	; () banked
  5672  003120  199C               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  5673  003122  A4D8               	btfss	status,2,c
  5674  003124  D02F               	goto	l7003
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;train_move_right.c: 215: SETxPWM(Train_Move_Pwm_Count, 1);
  5678  003126  C005  F095         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5679  00312A  C006  F096         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5680  00312E  0E01               	movlw	1
  5681  003130  0100               	movlb	0	; () banked
  5682  003132  6F97               	movwf	SETxPWM@direction& (0+255),b
  5683  003134  EC25  F01B         	call	_SETxPWM	;wreg free
  5684                           
  5685                           ;train_move_right.c: 216: if (Train_Move_Pwm_Count <= GETxAPIxVAL(23))
  5686  003138  0E17               	movlw	23
  5687  00313A  ECD2  F01D         	call	_GETxAPIxVAL
  5688  00313E  5005               	movf	_Train_Move_Pwm_Count,w,c
  5689  003140  0100               	movlb	0	; () banked
  5690  003142  5D8D               	subwf	?_GETxAPIxVAL& (0+255),w,b
  5691  003144  5006               	movf	_Train_Move_Pwm_Count+1,w,c
  5692  003146  0100               	movlb	0	; () banked
  5693  003148  598E               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  5694  00314A  A0D8               	btfss	status,0,c
  5695  00314C  D006               	goto	l6995
  5696  00314E                     l6991:
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;train_move_right.c: 217: {
  5700                           ;train_move_right.c: 218: Switch_Train_Move = 0;
  5701  00314E  0E00               	movlw	0
  5702  003150  6E1C               	movwf	_Switch_Train_Move,c
  5703                           
  5704                           ;train_move_right.c: 219: Switch_Moutain = 0;
  5705  003152  0E00               	movlw	0
  5706  003154  6E1A               	movwf	_Switch_Moutain,c
  5707                           
  5708                           ;train_move_right.c: 220: Return_Val = 0;
  5709  003156  0E00               	movlw	0
  5710  003158  D016               	goto	L81
  5711  00315A                     l6995:
  5712                           
  5713                           ; BSR set to: 0
  5714                           ;train_move_right.c: 223: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5715  00315A  0E1A               	movlw	26
  5716  00315C  ECD2  F01D         	call	_GETxAPIxVAL
  5717  003160  0100               	movlb	0	; () banked
  5718  003162  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  5719  003164  5C07               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  5720  003166  0100               	movlb	0	; () banked
  5721  003168  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5722  00316A  5808               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  5723  00316C  A0D8               	btfss	status,0,c
  5724  00316E  D008               	goto	l7001
  5725                           
  5726                           ; BSR set to: 0
  5727                           ;train_move_right.c: 224: {
  5728                           ;train_move_right.c: 225: Train_Move_Pwm_Count--;
  5729  003170  0605               	decf	_Train_Move_Pwm_Count,f,c
  5730  003172  A0D8               	btfss	status,0,c
  5731  003174  0606               	decf	_Train_Move_Pwm_Count+1,f,c
  5732  003176                     l6999:
  5733                           
  5734                           ; BSR set to: 0
  5735                           ;train_move_right.c: 226: Train_Move_Pwm_Fast_Count = 0;
  5736  003176  0E00               	movlw	0
  5737  003178  6E08               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  5738  00317A  0E00               	movlw	0
  5739  00317C  6E07               	movwf	_Train_Move_Pwm_Fast_Count,c
  5740                           
  5741                           ;train_move_right.c: 227: }
  5742  00317E  D002               	goto	l7003
  5743  003180                     l7001:
  5744                           
  5745                           ; BSR set to: 0
  5746                           ;train_move_right.c: 228: else{Train_Move_Pwm_Fast_Count++;}
  5747  003180  4A07               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  5748  003182  2A08               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  5749  003184                     l7003:
  5750                           
  5751                           ; BSR set to: 0
  5752                           ;train_move_right.c: 229: }
  5753                           ;train_move_right.c: 230: Return_Val = 1;
  5754  003184  0E01               	movlw	1
  5755  003186                     L81:
  5756  003186  0100               	movlb	0	; () banked
  5757  003188  6FB5               	movwf	Right_Mountain_From_The_Left@Return_Val& (0+255),b
  5758                           
  5759                           ; BSR set to: 0
  5760                           ;train_move_right.c: 235: }
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;train_move_right.c: 234: break;
  5764                           
  5765                           ;train_move_right.c: 233: default:
  5766                           
  5767                           ;train_move_right.c: 231: break;
  5768  00318A  D007               	goto	l7009
  5769  00318C                     l7007:
  5770  00318C  501A               	movf	_Switch_Moutain,w,c
  5771                           
  5772                           ; Switch size 1, requested type "space"
  5773                           ; Number of cases is 2, Range of values is 0 to 1
  5774                           ; switch strategies available:
  5775                           ; Name         Instructions Cycles
  5776                           ; simple_byte            7     4 (average)
  5777                           ;	Chosen strategy is simple_byte
  5778  00318E  0A00               	xorlw	0	; case 0
  5779  003190  B4D8               	btfsc	status,2,c
  5780  003192  D77F               	goto	l6959
  5781  003194  0A01               	xorlw	1	; case 1
  5782  003196  B4D8               	btfsc	status,2,c
  5783  003198  D79A               	goto	l6971
  5784  00319A                     l7009:
  5785                           
  5786                           ;train_move_right.c: 237: return(Return_Val);
  5787  00319A  0100               	movlb	0	; () banked
  5788  00319C  51B5               	movf	Right_Mountain_From_The_Left@Return_Val& (0+255),w,b
  5789  00319E  0012               	return	
  5790  0031A0                     __end_of_Right_Mountain_From_The_Left:
  5791                           	opt stack 0
  5792                           tblptru	equ	0xFF8
  5793                           tblptrh	equ	0xFF7
  5794                           tblptrl	equ	0xFF6
  5795                           tablat	equ	0xFF5
  5796                           postinc0	equ	0xFEE
  5797                           wreg	equ	0xFE8
  5798                           postdec1	equ	0xFE5
  5799                           fsr1h	equ	0xFE2
  5800                           fsr1l	equ	0xFE1
  5801                           status	equ	0xFD8
  5802                           
  5803 ;; *************** function _Left_Mountain_From_The_Right *****************
  5804 ;; Defined at:
  5805 ;;		line 178 in file "../train_move_left.c"
  5806 ;; Parameters:    Size  Location     Type
  5807 ;;  rc              1    wreg     unsigned char 
  5808 ;; Auto vars:     Size  Location     Type
  5809 ;;  rc              1   15[BANK0 ] unsigned char 
  5810 ;; Return value:  Size  Location     Type
  5811 ;;                  1    wreg      unsigned char 
  5812 ;; Registers used:
  5813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5814 ;; Tracked objects:
  5815 ;;		On entry : 0/0
  5816 ;;		On exit  : 0/0
  5817 ;;		Unchanged: 0/0
  5818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5819 ;;      Params:         0       0       0       0       0       0       0       0       0
  5820 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5821 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5822 ;;      Totals:         0       1       0       0       0       0       0       0       0
  5823 ;;Total ram usage:        1 bytes
  5824 ;; Hardware stack levels used:    1
  5825 ;; Hardware stack levels required when called:    5
  5826 ;; This function calls:
  5827 ;;		_GETxAPIxVAL
  5828 ;;		_SETxPWM
  5829 ;; This function is called by:
  5830 ;;		_Train_Path
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           	psect	text9
  5835  0032B2                     __ptext9:
  5836                           	opt stack 0
  5837  0032B2                     _Left_Mountain_From_The_Right:
  5838                           	opt stack 23
  5839                           
  5840                           ; BSR set to: 0
  5841                           ;incstack = 0
  5842                           ;Left_Mountain_From_The_Right@rc stored from wreg
  5843  0032B2  0100               	movlb	0	; () banked
  5844  0032B4  6F9C               	movwf	Left_Mountain_From_The_Right@rc& (0+255),b
  5845                           
  5846                           ;train_move_left.c: 180: static char Return_Val = 1;
  5847                           ;train_move_left.c: 182: switch (Switch_Moutain){
  5848  0032B6  D07B               	goto	l7119
  5849  0032B8                     l7071:
  5850  0032B8  0100               	movlb	0	; () banked
  5851  0032BA  059C               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  5852  0032BC  B4D8               	btfsc	status,2,c
  5853  0032BE  D00D               	goto	l7077
  5854                           
  5855                           ; BSR set to: 0
  5856                           ;train_move_left.c: 187: else if(Mountain_Delay_Counter >= GETxAPIxVAL(58)){
  5857                           
  5858                           ; BSR set to: 0
  5859                           
  5860                           ;train_move_left.c: 186: }
  5861                           
  5862                           ;train_move_left.c: 185: Mountain_Delay_Counter = 0;
  5863                           
  5864                           ; BSR set to: 0
  5865                           ;train_move_left.c: 184: Switch_Moutain = 1;
  5866  0032C0  0E3A               	movlw	58
  5867  0032C2  ECD2  F01D         	call	_GETxAPIxVAL
  5868  0032C6  0100               	movlb	0	; () banked
  5869  0032C8  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  5870  0032CA  0100               	movlb	0	; () banked
  5871  0032CC  5D70               	subwf	_Mountain_Delay_Counter& (0+255),w,b
  5872  0032CE  0100               	movlb	0	; () banked
  5873  0032D0  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5874  0032D2  0100               	movlb	0	; () banked
  5875  0032D4  5971               	subwfb	(_Mountain_Delay_Counter+1)& (0+255),w,b
  5876  0032D6  A0D8               	btfss	status,0,c
  5877  0032D8  D008               	goto	l7079
  5878  0032DA                     l7077:
  5879                           
  5880                           ; BSR set to: 0
  5881                           ;train_move_left.c: 188: Switch_Moutain = 1;
  5882  0032DA  0E01               	movlw	1
  5883  0032DC  6E1A               	movwf	_Switch_Moutain,c
  5884                           
  5885                           ;train_move_left.c: 189: Mountain_Delay_Counter = 0;
  5886  0032DE  0E00               	movlw	0
  5887  0032E0  0100               	movlb	0	; () banked
  5888  0032E2  6F71               	movwf	(_Mountain_Delay_Counter+1)& (0+255),b
  5889  0032E4  0E00               	movlw	0
  5890  0032E6  6F70               	movwf	_Mountain_Delay_Counter& (0+255),b
  5891                           
  5892                           ;train_move_left.c: 190: }
  5893  0032E8  D05E               	goto	l7115
  5894  0032EA                     l7079:
  5895                           
  5896                           ; BSR set to: 0
  5897                           ;train_move_left.c: 191: else{
  5898                           ;train_move_left.c: 192: Mountain_Delay_Counter++;
  5899  0032EA  0100               	movlb	0	; () banked
  5900  0032EC  4B70               	infsnz	_Mountain_Delay_Counter& (0+255),f,b
  5901  0032EE  2B71               	incf	(_Mountain_Delay_Counter+1)& (0+255),f,b
  5902                           
  5903                           ; BSR set to: 0
  5904  0032F0  D05A               	goto	l7115
  5905  0032F2                     l7083:
  5906  0032F2  0E02               	movlw	2
  5907  0032F4  0100               	movlb	0	; () banked
  5908  0032F6  199C               	xorwf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  5909  0032F8  A4D8               	btfss	status,2,c
  5910  0032FA  D022               	goto	l7099
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;train_move_left.c: 198: SETxPWM(Train_Move_Pwm_Count, 0);
  5914  0032FC  C005  F095         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5915  003300  C006  F096         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5916  003304  0E00               	movlw	0
  5917  003306  0100               	movlb	0	; () banked
  5918  003308  6F97               	movwf	SETxPWM@direction& (0+255),b
  5919  00330A  EC25  F01B         	call	_SETxPWM	;wreg free
  5920                           
  5921                           ;train_move_left.c: 199: if (Train_Move_Pwm_Count >= GETxAPIxVAL(52))
  5922  00330E  0E34               	movlw	52
  5923  003310  ECD2  F01D         	call	_GETxAPIxVAL
  5924  003314  0100               	movlb	0	; () banked
  5925  003316  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  5926  003318  5C05               	subwf	_Train_Move_Pwm_Count,w,c
  5927  00331A  0100               	movlb	0	; () banked
  5928  00331C  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5929  00331E  5806               	subwfb	_Train_Move_Pwm_Count+1,w,c
  5930  003320  B0D8               	btfsc	status,0,c
  5931  003322  D026               	goto	l7103
  5932                           
  5933                           ; BSR set to: 0
  5934                           ;train_move_left.c: 206: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5935                           
  5936                           ; BSR set to: 0
  5937                           
  5938                           ; BSR set to: 0
  5939                           ;train_move_left.c: 205: }
  5940                           
  5941                           ;train_move_left.c: 204: break;
  5942                           
  5943                           ;train_move_left.c: 203: Return_Val = 0;
  5944                           
  5945                           ;train_move_left.c: 202: Switch_Moutain = 0;
  5946                           
  5947                           ; BSR set to: 0
  5948                           ;train_move_left.c: 200: {
  5949                           ;train_move_left.c: 201: Switch_Train_Move = 0;
  5950  003324  0E1A               	movlw	26
  5951  003326  ECD2  F01D         	call	_GETxAPIxVAL
  5952  00332A  0100               	movlb	0	; () banked
  5953  00332C  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  5954  00332E  5C07               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  5955  003330  0100               	movlb	0	; () banked
  5956  003332  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  5957  003334  5808               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  5958  003336  A0D8               	btfss	status,0,c
  5959  003338  D034               	goto	l7113
  5960                           
  5961                           ; BSR set to: 0
  5962                           ;train_move_left.c: 207: {
  5963                           ;train_move_left.c: 208: Train_Move_Pwm_Count++;
  5964  00333A  4A05               	infsnz	_Train_Move_Pwm_Count,f,c
  5965  00333C  2A06               	incf	_Train_Move_Pwm_Count+1,f,c
  5966  00333E  D02C               	goto	l7111
  5967  003340                     l7099:
  5968                           
  5969                           ; BSR set to: 0
  5970                           ;train_move_left.c: 213: else if (rc == 1){
  5971  003340  0100               	movlb	0	; () banked
  5972  003342  059C               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  5973  003344  A4D8               	btfss	status,2,c
  5974  003346  D02F               	goto	l7115
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;train_move_left.c: 214: SETxPWM(Train_Move_Pwm_Count, 0);
  5978  003348  C005  F095         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5979  00334C  C006  F096         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5980  003350  0E00               	movlw	0
  5981  003352  0100               	movlb	0	; () banked
  5982  003354  6F97               	movwf	SETxPWM@direction& (0+255),b
  5983  003356  EC25  F01B         	call	_SETxPWM	;wreg free
  5984                           
  5985                           ;train_move_left.c: 215: if (Train_Move_Pwm_Count <= GETxAPIxVAL(24))
  5986  00335A  0E18               	movlw	24
  5987  00335C  ECD2  F01D         	call	_GETxAPIxVAL
  5988  003360  5005               	movf	_Train_Move_Pwm_Count,w,c
  5989  003362  0100               	movlb	0	; () banked
  5990  003364  5D8D               	subwf	?_GETxAPIxVAL& (0+255),w,b
  5991  003366  5006               	movf	_Train_Move_Pwm_Count+1,w,c
  5992  003368  0100               	movlb	0	; () banked
  5993  00336A  598E               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  5994  00336C  A0D8               	btfss	status,0,c
  5995  00336E  D006               	goto	l7107
  5996  003370                     l7103:
  5997                           
  5998                           ; BSR set to: 0
  5999                           ;train_move_left.c: 216: {
  6000                           ;train_move_left.c: 217: Switch_Train_Move = 0;
  6001  003370  0E00               	movlw	0
  6002  003372  6E1C               	movwf	_Switch_Train_Move,c
  6003                           
  6004                           ;train_move_left.c: 218: Switch_Moutain = 0;
  6005  003374  0E00               	movlw	0
  6006  003376  6E1A               	movwf	_Switch_Moutain,c
  6007                           
  6008                           ;train_move_left.c: 219: Return_Val = 0;
  6009  003378  0E00               	movlw	0
  6010  00337A  D016               	goto	L84
  6011  00337C                     l7107:
  6012                           
  6013                           ; BSR set to: 0
  6014                           ;train_move_left.c: 222: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6015  00337C  0E1A               	movlw	26
  6016  00337E  ECD2  F01D         	call	_GETxAPIxVAL
  6017  003382  0100               	movlb	0	; () banked
  6018  003384  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  6019  003386  5C07               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  6020  003388  0100               	movlb	0	; () banked
  6021  00338A  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6022  00338C  5808               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  6023  00338E  A0D8               	btfss	status,0,c
  6024  003390  D008               	goto	l7113
  6025                           
  6026                           ; BSR set to: 0
  6027                           ;train_move_left.c: 223: {
  6028                           ;train_move_left.c: 224: Train_Move_Pwm_Count--;
  6029  003392  0605               	decf	_Train_Move_Pwm_Count,f,c
  6030  003394  A0D8               	btfss	status,0,c
  6031  003396  0606               	decf	_Train_Move_Pwm_Count+1,f,c
  6032  003398                     l7111:
  6033                           
  6034                           ; BSR set to: 0
  6035                           ;train_move_left.c: 225: Train_Move_Pwm_Fast_Count = 0;
  6036  003398  0E00               	movlw	0
  6037  00339A  6E08               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  6038  00339C  0E00               	movlw	0
  6039  00339E  6E07               	movwf	_Train_Move_Pwm_Fast_Count,c
  6040                           
  6041                           ;train_move_left.c: 226: }
  6042  0033A0  D002               	goto	l7115
  6043  0033A2                     l7113:
  6044                           
  6045                           ; BSR set to: 0
  6046                           ;train_move_left.c: 227: else{Train_Move_Pwm_Fast_Count++;}
  6047  0033A2  4A07               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  6048  0033A4  2A08               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  6049  0033A6                     l7115:
  6050                           
  6051                           ; BSR set to: 0
  6052                           ;train_move_left.c: 228: }
  6053                           ;train_move_left.c: 229: Return_Val = 1;
  6054  0033A6  0E01               	movlw	1
  6055  0033A8                     L84:
  6056  0033A8  0100               	movlb	0	; () banked
  6057  0033AA  6FB4               	movwf	Left_Mountain_From_The_Right@Return_Val& (0+255),b
  6058                           
  6059                           ; BSR set to: 0
  6060                           ;train_move_left.c: 234: }
  6061                           
  6062                           ; BSR set to: 0
  6063                           ;train_move_left.c: 233: break;
  6064                           
  6065                           ;train_move_left.c: 232: default:
  6066                           
  6067                           ;train_move_left.c: 230: break;
  6068  0033AC  D007               	goto	l7121
  6069  0033AE                     l7119:
  6070  0033AE  501A               	movf	_Switch_Moutain,w,c
  6071                           
  6072                           ; Switch size 1, requested type "space"
  6073                           ; Number of cases is 2, Range of values is 0 to 1
  6074                           ; switch strategies available:
  6075                           ; Name         Instructions Cycles
  6076                           ; simple_byte            7     4 (average)
  6077                           ;	Chosen strategy is simple_byte
  6078  0033B0  0A00               	xorlw	0	; case 0
  6079  0033B2  B4D8               	btfsc	status,2,c
  6080  0033B4  D781               	goto	l7071
  6081  0033B6  0A01               	xorlw	1	; case 1
  6082  0033B8  B4D8               	btfsc	status,2,c
  6083  0033BA  D79B               	goto	l7083
  6084  0033BC                     l7121:
  6085                           
  6086                           ;train_move_left.c: 236: return(Return_Val);
  6087  0033BC  0100               	movlb	0	; () banked
  6088  0033BE  51B4               	movf	Left_Mountain_From_The_Right@Return_Val& (0+255),w,b
  6089  0033C0  0012               	return	
  6090  0033C2                     __end_of_Left_Mountain_From_The_Right:
  6091                           	opt stack 0
  6092                           tblptru	equ	0xFF8
  6093                           tblptrh	equ	0xFF7
  6094                           tblptrl	equ	0xFF6
  6095                           tablat	equ	0xFF5
  6096                           postinc0	equ	0xFEE
  6097                           wreg	equ	0xFE8
  6098                           postdec1	equ	0xFE5
  6099                           fsr1h	equ	0xFE2
  6100                           fsr1l	equ	0xFE1
  6101                           status	equ	0xFD8
  6102                           
  6103 ;; *************** function _Left_Mountain_From_The_Left *****************
  6104 ;; Defined at:
  6105 ;;		line 104 in file "../train_move_right.c"
  6106 ;; Parameters:    Size  Location     Type
  6107 ;;  rc              1    wreg     unsigned char 
  6108 ;; Auto vars:     Size  Location     Type
  6109 ;;  rc              1   15[BANK0 ] unsigned char 
  6110 ;; Return value:  Size  Location     Type
  6111 ;;                  1    wreg      unsigned char 
  6112 ;; Registers used:
  6113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6114 ;; Tracked objects:
  6115 ;;		On entry : 0/0
  6116 ;;		On exit  : 0/0
  6117 ;;		Unchanged: 0/0
  6118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6119 ;;      Params:         0       0       0       0       0       0       0       0       0
  6120 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6121 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6122 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6123 ;;Total ram usage:        1 bytes
  6124 ;; Hardware stack levels used:    1
  6125 ;; Hardware stack levels required when called:    5
  6126 ;; This function calls:
  6127 ;;		_GETxAPIxVAL
  6128 ;;		_SETxPWM
  6129 ;; This function is called by:
  6130 ;;		_Train_Path
  6131 ;; This function uses a non-reentrant model
  6132 ;;
  6133                           
  6134                           	psect	text10
  6135  0031A0                     __ptext10:
  6136                           	opt stack 0
  6137  0031A0                     _Left_Mountain_From_The_Left:
  6138                           	opt stack 23
  6139                           
  6140                           ; BSR set to: 0
  6141                           ;incstack = 0
  6142                           ;Left_Mountain_From_The_Left@rc stored from wreg
  6143  0031A0  0100               	movlb	0	; () banked
  6144  0031A2  6F9C               	movwf	Left_Mountain_From_The_Left@rc& (0+255),b
  6145                           
  6146                           ;train_move_right.c: 106: static char Return_Val = 1;
  6147                           ;train_move_right.c: 108: switch (Switch_Moutain){
  6148  0031A4  D07C               	goto	l6951
  6149  0031A6                     l6903:
  6150  0031A6  0E02               	movlw	2
  6151  0031A8  0100               	movlb	0	; () banked
  6152  0031AA  199C               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  6153  0031AC  B4D8               	btfsc	status,2,c
  6154  0031AE  D00D               	goto	l6909
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;train_move_right.c: 113: else if(Mountain_Delay_Counter >= GETxAPIxVAL(59)){
  6158                           
  6159                           ; BSR set to: 0
  6160                           
  6161                           ;train_move_right.c: 112: }
  6162                           
  6163                           ;train_move_right.c: 111: Mountain_Delay_Counter = 0;
  6164                           
  6165                           ; BSR set to: 0
  6166                           ;train_move_right.c: 110: Switch_Moutain = 1;
  6167  0031B0  0E3B               	movlw	59
  6168  0031B2  ECD2  F01D         	call	_GETxAPIxVAL
  6169  0031B6  0100               	movlb	0	; () banked
  6170  0031B8  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  6171  0031BA  0100               	movlb	0	; () banked
  6172  0031BC  5D70               	subwf	_Mountain_Delay_Counter& (0+255),w,b
  6173  0031BE  0100               	movlb	0	; () banked
  6174  0031C0  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6175  0031C2  0100               	movlb	0	; () banked
  6176  0031C4  5971               	subwfb	(_Mountain_Delay_Counter+1)& (0+255),w,b
  6177  0031C6  A0D8               	btfss	status,0,c
  6178  0031C8  D008               	goto	l6911
  6179  0031CA                     l6909:
  6180                           
  6181                           ; BSR set to: 0
  6182                           ;train_move_right.c: 114: Switch_Moutain = 1;
  6183  0031CA  0E01               	movlw	1
  6184  0031CC  6E1A               	movwf	_Switch_Moutain,c
  6185                           
  6186                           ;train_move_right.c: 115: Mountain_Delay_Counter = 0;
  6187  0031CE  0E00               	movlw	0
  6188  0031D0  0100               	movlb	0	; () banked
  6189  0031D2  6F71               	movwf	(_Mountain_Delay_Counter+1)& (0+255),b
  6190  0031D4  0E00               	movlw	0
  6191  0031D6  6F70               	movwf	_Mountain_Delay_Counter& (0+255),b
  6192                           
  6193                           ;train_move_right.c: 116: }
  6194  0031D8  D05E               	goto	l6947
  6195  0031DA                     l6911:
  6196                           
  6197                           ; BSR set to: 0
  6198                           ;train_move_right.c: 117: else{
  6199                           ;train_move_right.c: 118: Mountain_Delay_Counter++;
  6200  0031DA  0100               	movlb	0	; () banked
  6201  0031DC  4B70               	infsnz	_Mountain_Delay_Counter& (0+255),f,b
  6202  0031DE  2B71               	incf	(_Mountain_Delay_Counter+1)& (0+255),f,b
  6203                           
  6204                           ; BSR set to: 0
  6205  0031E0  D05A               	goto	l6947
  6206  0031E2                     l6915:
  6207  0031E2  0100               	movlb	0	; () banked
  6208  0031E4  059C               	decf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  6209  0031E6  A4D8               	btfss	status,2,c
  6210  0031E8  D023               	goto	l6931
  6211                           
  6212                           ; BSR set to: 0
  6213                           ;train_move_right.c: 124: SETxPWM(Train_Move_Pwm_Count, 1);
  6214  0031EA  C005  F095         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6215  0031EE  C006  F096         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6216  0031F2  0E01               	movlw	1
  6217  0031F4  0100               	movlb	0	; () banked
  6218  0031F6  6F97               	movwf	SETxPWM@direction& (0+255),b
  6219  0031F8  EC25  F01B         	call	_SETxPWM	;wreg free
  6220                           
  6221                           ;train_move_right.c: 125: if (Train_Move_Pwm_Count <= GETxAPIxVAL(49))
  6222  0031FC  0E31               	movlw	49
  6223  0031FE  ECD2  F01D         	call	_GETxAPIxVAL
  6224  003202  5005               	movf	_Train_Move_Pwm_Count,w,c
  6225  003204  0100               	movlb	0	; () banked
  6226  003206  5D8D               	subwf	?_GETxAPIxVAL& (0+255),w,b
  6227  003208  5006               	movf	_Train_Move_Pwm_Count+1,w,c
  6228  00320A  0100               	movlb	0	; () banked
  6229  00320C  598E               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  6230  00320E  B0D8               	btfsc	status,0,c
  6231  003210  D028               	goto	l6935
  6232                           
  6233                           ; BSR set to: 0
  6234                           ;train_move_right.c: 132: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6235                           
  6236                           ; BSR set to: 0
  6237                           
  6238                           ; BSR set to: 0
  6239                           ;train_move_right.c: 131: }
  6240                           
  6241                           ;train_move_right.c: 130: break;
  6242                           
  6243                           ;train_move_right.c: 129: Return_Val = 0;
  6244                           
  6245                           ;train_move_right.c: 128: Switch_Moutain = 0;
  6246                           
  6247                           ; BSR set to: 0
  6248                           ;train_move_right.c: 126: {
  6249                           ;train_move_right.c: 127: Switch_Train_Move = 0;
  6250  003212  0E1A               	movlw	26
  6251  003214  ECD2  F01D         	call	_GETxAPIxVAL
  6252  003218  0100               	movlb	0	; () banked
  6253  00321A  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  6254  00321C  5C07               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  6255  00321E  0100               	movlb	0	; () banked
  6256  003220  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6257  003222  5808               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  6258  003224  A0D8               	btfss	status,0,c
  6259  003226  D035               	goto	l6945
  6260                           
  6261                           ; BSR set to: 0
  6262                           ;train_move_right.c: 133: {
  6263                           ;train_move_right.c: 134: Train_Move_Pwm_Count--;
  6264  003228  0605               	decf	_Train_Move_Pwm_Count,f,c
  6265  00322A  A0D8               	btfss	status,0,c
  6266  00322C  0606               	decf	_Train_Move_Pwm_Count+1,f,c
  6267  00322E  D02C               	goto	l6943
  6268  003230                     l6931:
  6269                           
  6270                           ; BSR set to: 0
  6271                           ;train_move_right.c: 139: else if (rc == 2){
  6272  003230  0E02               	movlw	2
  6273  003232  0100               	movlb	0	; () banked
  6274  003234  199C               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  6275  003236  A4D8               	btfss	status,2,c
  6276  003238  D02E               	goto	l6947
  6277                           
  6278                           ; BSR set to: 0
  6279                           ;train_move_right.c: 140: SETxPWM(Train_Move_Pwm_Count, 1);
  6280  00323A  C005  F095         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6281  00323E  C006  F096         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6282  003242  0E01               	movlw	1
  6283  003244  0100               	movlb	0	; () banked
  6284  003246  6F97               	movwf	SETxPWM@direction& (0+255),b
  6285  003248  EC25  F01B         	call	_SETxPWM	;wreg free
  6286                           
  6287                           ;train_move_right.c: 141: if (Train_Move_Pwm_Count >= GETxAPIxVAL(23))
  6288  00324C  0E17               	movlw	23
  6289  00324E  ECD2  F01D         	call	_GETxAPIxVAL
  6290  003252  0100               	movlb	0	; () banked
  6291  003254  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  6292  003256  5C05               	subwf	_Train_Move_Pwm_Count,w,c
  6293  003258  0100               	movlb	0	; () banked
  6294  00325A  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6295  00325C  5806               	subwfb	_Train_Move_Pwm_Count+1,w,c
  6296  00325E  A0D8               	btfss	status,0,c
  6297  003260  D006               	goto	l6939
  6298  003262                     l6935:
  6299                           
  6300                           ; BSR set to: 0
  6301                           ;train_move_right.c: 142: {
  6302                           ;train_move_right.c: 143: Switch_Train_Move = 0;
  6303  003262  0E00               	movlw	0
  6304  003264  6E1C               	movwf	_Switch_Train_Move,c
  6305                           
  6306                           ;train_move_right.c: 144: Switch_Moutain = 0;
  6307  003266  0E00               	movlw	0
  6308  003268  6E1A               	movwf	_Switch_Moutain,c
  6309                           
  6310                           ;train_move_right.c: 145: Return_Val = 0;
  6311  00326A  0E00               	movlw	0
  6312  00326C  D015               	goto	L87
  6313  00326E                     l6939:
  6314                           
  6315                           ; BSR set to: 0
  6316                           ;train_move_right.c: 148: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6317  00326E  0E1A               	movlw	26
  6318  003270  ECD2  F01D         	call	_GETxAPIxVAL
  6319  003274  0100               	movlb	0	; () banked
  6320  003276  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  6321  003278  5C07               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  6322  00327A  0100               	movlb	0	; () banked
  6323  00327C  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6324  00327E  5808               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  6325  003280  A0D8               	btfss	status,0,c
  6326  003282  D007               	goto	l6945
  6327                           
  6328                           ; BSR set to: 0
  6329                           ;train_move_right.c: 149: {
  6330                           ;train_move_right.c: 150: Train_Move_Pwm_Count++;
  6331  003284  4A05               	infsnz	_Train_Move_Pwm_Count,f,c
  6332  003286  2A06               	incf	_Train_Move_Pwm_Count+1,f,c
  6333  003288                     l6943:
  6334                           
  6335                           ; BSR set to: 0
  6336                           ;train_move_right.c: 151: Train_Move_Pwm_Fast_Count = 0;
  6337  003288  0E00               	movlw	0
  6338  00328A  6E08               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  6339  00328C  0E00               	movlw	0
  6340  00328E  6E07               	movwf	_Train_Move_Pwm_Fast_Count,c
  6341                           
  6342                           ;train_move_right.c: 152: }
  6343  003290  D002               	goto	l6947
  6344  003292                     l6945:
  6345                           
  6346                           ; BSR set to: 0
  6347                           ;train_move_right.c: 153: else {Train_Move_Pwm_Fast_Count++;}
  6348  003292  4A07               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  6349  003294  2A08               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  6350  003296                     l6947:
  6351                           
  6352                           ; BSR set to: 0
  6353                           ;train_move_right.c: 154: }
  6354                           ;train_move_right.c: 155: Return_Val = 1;
  6355  003296  0E01               	movlw	1
  6356  003298                     L87:
  6357  003298  0100               	movlb	0	; () banked
  6358  00329A  6FB3               	movwf	Left_Mountain_From_The_Left@Return_Val& (0+255),b
  6359                           
  6360                           ; BSR set to: 0
  6361                           ;train_move_right.c: 160: }
  6362                           
  6363                           ; BSR set to: 0
  6364                           ;train_move_right.c: 159: break;
  6365                           
  6366                           ;train_move_right.c: 158: default:
  6367                           
  6368                           ;train_move_right.c: 156: break;
  6369  00329C  D007               	goto	l6953
  6370  00329E                     l6951:
  6371  00329E  501A               	movf	_Switch_Moutain,w,c
  6372                           
  6373                           ; Switch size 1, requested type "space"
  6374                           ; Number of cases is 2, Range of values is 0 to 1
  6375                           ; switch strategies available:
  6376                           ; Name         Instructions Cycles
  6377                           ; simple_byte            7     4 (average)
  6378                           ;	Chosen strategy is simple_byte
  6379  0032A0  0A00               	xorlw	0	; case 0
  6380  0032A2  B4D8               	btfsc	status,2,c
  6381  0032A4  D780               	goto	l6903
  6382  0032A6  0A01               	xorlw	1	; case 1
  6383  0032A8  B4D8               	btfsc	status,2,c
  6384  0032AA  D79B               	goto	l6915
  6385  0032AC                     l6953:
  6386                           
  6387                           ;train_move_right.c: 162: return(Return_Val);
  6388  0032AC  0100               	movlb	0	; () banked
  6389  0032AE  51B3               	movf	Left_Mountain_From_The_Left@Return_Val& (0+255),w,b
  6390  0032B0  0012               	return	
  6391  0032B2                     __end_of_Left_Mountain_From_The_Left:
  6392                           	opt stack 0
  6393                           tblptru	equ	0xFF8
  6394                           tblptrh	equ	0xFF7
  6395                           tblptrl	equ	0xFF6
  6396                           tablat	equ	0xFF5
  6397                           postinc0	equ	0xFEE
  6398                           wreg	equ	0xFE8
  6399                           postdec1	equ	0xFE5
  6400                           fsr1h	equ	0xFE2
  6401                           fsr1l	equ	0xFE1
  6402                           status	equ	0xFD8
  6403                           
  6404 ;; *************** function _SETxPWM *****************
  6405 ;; Defined at:
  6406 ;;		line 20 in file "../set_pwm.c"
  6407 ;; Parameters:    Size  Location     Type
  6408 ;;  speed           2    8[BANK0 ] unsigned int 
  6409 ;;  direction       1   10[BANK0 ] unsigned char 
  6410 ;; Auto vars:     Size  Location     Type
  6411 ;;  pwm_speed       2   13[BANK0 ] unsigned int 
  6412 ;; Return value:  Size  Location     Type
  6413 ;;                  1    wreg      void 
  6414 ;; Registers used:
  6415 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6416 ;; Tracked objects:
  6417 ;;		On entry : 0/0
  6418 ;;		On exit  : 0/0
  6419 ;;		Unchanged: 0/0
  6420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6421 ;;      Params:         0       3       0       0       0       0       0       0       0
  6422 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6423 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6424 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6425 ;;Total ram usage:        7 bytes
  6426 ;; Hardware stack levels used:    1
  6427 ;; Hardware stack levels required when called:    4
  6428 ;; This function calls:
  6429 ;;		_SETxAPIxVAL
  6430 ;; This function is called by:
  6431 ;;		_Train_Move_Left_Start
  6432 ;;		_Right_Mountain_From_The_Right
  6433 ;;		_Left_Mountain_From_The_Right
  6434 ;;		_Train_Move_Left_Brake
  6435 ;;		_Train_Move_Right_Start
  6436 ;;		_Left_Mountain_From_The_Left
  6437 ;;		_Right_Mountain_From_The_Left
  6438 ;;		_Train_Move_Right_Brake
  6439 ;; This function uses a non-reentrant model
  6440 ;;
  6441                           
  6442                           	psect	text11
  6443  00364A                     __ptext11:
  6444                           	opt stack 0
  6445  00364A                     _SETxPWM:
  6446                           	opt stack 23
  6447                           
  6448                           ;set_pwm.c: 22: unsigned int pwm_speed = 511;
  6449                           
  6450                           ; BSR set to: 0
  6451                           ;incstack = 0
  6452  00364A  0E01               	movlw	1
  6453  00364C  0100               	movlb	0	; () banked
  6454  00364E  6F9B               	movwf	(SETxPWM@pwm_speed+1)& (0+255),b
  6455  003650  699A               	setf	SETxPWM@pwm_speed& (0+255),b
  6456                           
  6457                           ;set_pwm.c: 24: if (direction == 0){
  6458  003652  0100               	movlb	0	; () banked
  6459  003654  5197               	movf	SETxPWM@direction& (0+255),w,b
  6460  003656  0100               	movlb	0	; () banked
  6461  003658  A4D8               	btfss	status,2,c
  6462  00365A  D01F               	goto	l6625
  6463                           
  6464                           ; BSR set to: 0
  6465                           ;set_pwm.c: 25: pwm_speed = 511 - (speed * 2);
  6466  00365C  C095  F098         	movff	SETxPWM@speed,??_SETxPWM
  6467  003660  C096  F099         	movff	SETxPWM@speed+1,??_SETxPWM+1
  6468  003664  90D8               	bcf	status,0,c
  6469  003666  0100               	movlb	0	; () banked
  6470  003668  3798               	rlcf	??_SETxPWM& (0+255),f,b
  6471  00366A  3799               	rlcf	(??_SETxPWM+1)& (0+255),f,b
  6472  00366C  0100               	movlb	0	; () banked
  6473  00366E  1F98               	comf	??_SETxPWM& (0+255),f,b
  6474  003670  1F99               	comf	(??_SETxPWM+1)& (0+255),f,b
  6475  003672  4B98               	infsnz	??_SETxPWM& (0+255),f,b
  6476  003674  2B99               	incf	(??_SETxPWM+1)& (0+255),f,b
  6477  003676  0EFF               	movlw	255
  6478  003678  0100               	movlb	0	; () banked
  6479  00367A  2598               	addwf	??_SETxPWM& (0+255),w,b
  6480  00367C  0100               	movlb	0	; () banked
  6481  00367E  6F9A               	movwf	SETxPWM@pwm_speed& (0+255),b
  6482  003680  0E01               	movlw	1
  6483  003682  0100               	movlb	0	; () banked
  6484  003684  2199               	addwfc	(??_SETxPWM+1)& (0+255),w,b
  6485  003686  0100               	movlb	0	; () banked
  6486  003688  6F9B               	movwf	(SETxPWM@pwm_speed+1)& (0+255),b
  6487                           
  6488                           ; BSR set to: 0
  6489                           ;set_pwm.c: 26: SETxAPIxVAL(68, pwm_speed);
  6490  00368A  C09A  F090         	movff	SETxPWM@pwm_speed,SETxAPIxVAL@value
  6491  00368E  C09B  F091         	movff	SETxPWM@pwm_speed+1,SETxAPIxVAL@value+1
  6492  003692  0E44               	movlw	68
  6493  003694  EC11  F01D         	call	_SETxAPIxVAL
  6494                           
  6495                           ;set_pwm.c: 28: }
  6496  003698  0012               	return	
  6497  00369A                     l6625:
  6498                           
  6499                           ;set_pwm.c: 29: else if (direction == 1){
  6500  00369A  0100               	movlb	0	; () banked
  6501  00369C  0597               	decf	SETxPWM@direction& (0+255),w,b
  6502  00369E  A4D8               	btfss	status,2,c
  6503  0036A0  0012               	return	
  6504                           
  6505                           ; BSR set to: 0
  6506                           ;set_pwm.c: 30: pwm_speed = 511 + (speed * 2);
  6507  0036A2  C095  F098         	movff	SETxPWM@speed,??_SETxPWM
  6508  0036A6  C096  F099         	movff	SETxPWM@speed+1,??_SETxPWM+1
  6509  0036AA  90D8               	bcf	status,0,c
  6510  0036AC  0100               	movlb	0	; () banked
  6511  0036AE  3798               	rlcf	??_SETxPWM& (0+255),f,b
  6512  0036B0  3799               	rlcf	(??_SETxPWM+1)& (0+255),f,b
  6513  0036B2  0EFF               	movlw	255
  6514  0036B4  0100               	movlb	0	; () banked
  6515  0036B6  2598               	addwf	??_SETxPWM& (0+255),w,b
  6516  0036B8  0100               	movlb	0	; () banked
  6517  0036BA  6F9A               	movwf	SETxPWM@pwm_speed& (0+255),b
  6518  0036BC  0E01               	movlw	1
  6519  0036BE  0100               	movlb	0	; () banked
  6520  0036C0  2199               	addwfc	(??_SETxPWM+1)& (0+255),w,b
  6521  0036C2  0100               	movlb	0	; () banked
  6522  0036C4  6F9B               	movwf	(SETxPWM@pwm_speed+1)& (0+255),b
  6523                           
  6524                           ; BSR set to: 0
  6525                           ;set_pwm.c: 31: SETxAPIxVAL(68, pwm_speed);
  6526  0036C6  C09A  F090         	movff	SETxPWM@pwm_speed,SETxAPIxVAL@value
  6527  0036CA  C09B  F091         	movff	SETxPWM@pwm_speed+1,SETxAPIxVAL@value+1
  6528  0036CE  0E44               	movlw	68
  6529  0036D0  EC11  F01D         	call	_SETxAPIxVAL
  6530  0036D4  0012               	return	
  6531  0036D6                     __end_of_SETxPWM:
  6532                           	opt stack 0
  6533                           tblptru	equ	0xFF8
  6534                           tblptrh	equ	0xFF7
  6535                           tblptrl	equ	0xFF6
  6536                           tablat	equ	0xFF5
  6537                           postinc0	equ	0xFEE
  6538                           wreg	equ	0xFE8
  6539                           postdec1	equ	0xFE5
  6540                           fsr1h	equ	0xFE2
  6541                           fsr1l	equ	0xFE1
  6542                           status	equ	0xFD8
  6543                           
  6544 ;; *************** function _Junction *****************
  6545 ;; Defined at:
  6546 ;;		line 23 in file "../junction.c"
  6547 ;; Parameters:    Size  Location     Type
  6548 ;;  Junction_Lef    1    wreg     unsigned char 
  6549 ;;  Straight_Ben    1    8[BANK0 ] unsigned char 
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;  Junction_Lef    1    9[BANK0 ] unsigned char 
  6552 ;; Return value:  Size  Location     Type
  6553 ;;                  1    wreg      unsigned char 
  6554 ;; Registers used:
  6555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6556 ;; Tracked objects:
  6557 ;;		On entry : 0/0
  6558 ;;		On exit  : 0/0
  6559 ;;		Unchanged: 0/0
  6560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6561 ;;      Params:         0       1       0       0       0       0       0       0       0
  6562 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6563 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6564 ;;      Totals:         0       2       0       0       0       0       0       0       0
  6565 ;;Total ram usage:        2 bytes
  6566 ;; Hardware stack levels used:    1
  6567 ;; Hardware stack levels required when called:    4
  6568 ;; This function calls:
  6569 ;;		_GETxAPIxVAL
  6570 ;;		_SETxAPIxVAL
  6571 ;; This function is called by:
  6572 ;;		_Update_StateMchn
  6573 ;;		_Train_Path
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576                           
  6577                           	psect	text12
  6578  002996                     __ptext12:
  6579                           	opt stack 0
  6580  002996                     _Junction:
  6581                           	opt stack 24
  6582                           
  6583                           ;incstack = 0
  6584                           ;Junction@Junction_Left_Right stored from wreg
  6585  002996  0100               	movlb	0	; () banked
  6586  002998  6F96               	movwf	Junction@Junction_Left_Right& (0+255),b
  6587                           
  6588                           ;junction.c: 25: static char Return_Val = 1;
  6589                           ;junction.c: 26: static unsigned int Junction_Switch_Time = 0;
  6590                           ;junction.c: 28: switch (Switch_Junction)
  6591  00299A  D08E               	goto	l6691
  6592  00299C                     l6651:
  6593  00299C  0E01               	movlw	1
  6594  00299E  0100               	movlb	0	; () banked
  6595  0029A0  6FB2               	movwf	Junction@Return_Val& (0+255),b
  6596                           
  6597                           ;junction.c: 31: switch (Junction_Left_Right)
  6598  0029A2  D036               	goto	l6671
  6599  0029A4                     l6653:
  6600                           
  6601                           ; BSR set to: 0
  6602  0029A4  0E00               	movlw	0
  6603  0029A6  0100               	movlb	0	; () banked
  6604  0029A8  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  6605  0029AA  0E01               	movlw	1
  6606  0029AC  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  6607  0029AE  0E40               	movlw	64
  6608  0029B0  EC11  F01D         	call	_SETxAPIxVAL
  6609  0029B4  D035               	goto	l6673
  6610  0029B6                     l6655:
  6611  0029B6  0E00               	movlw	0
  6612  0029B8  0100               	movlb	0	; () banked
  6613  0029BA  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  6614  0029BC  0E01               	movlw	1
  6615  0029BE  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  6616  0029C0  0E41               	movlw	65
  6617  0029C2  EC11  F01D         	call	_SETxAPIxVAL
  6618                           
  6619                           ;junction.c: 38: }
  6620                           
  6621                           ;junction.c: 37: default : break;
  6622  0029C6  D02C               	goto	l6673
  6623  0029C8                     l6659:
  6624  0029C8  0100               	movlb	0	; () banked
  6625  0029CA  5195               	movf	Junction@Straight_Bend& (0+255),w,b
  6626                           
  6627                           ; Switch size 1, requested type "space"
  6628                           ; Number of cases is 2, Range of values is 0 to 1
  6629                           ; switch strategies available:
  6630                           ; Name         Instructions Cycles
  6631                           ; simple_byte            7     4 (average)
  6632                           ;	Chosen strategy is simple_byte
  6633  0029CC  0A00               	xorlw	0	; case 0
  6634  0029CE  B4D8               	btfsc	status,2,c
  6635  0029D0  D7E9               	goto	l6653
  6636  0029D2  0A01               	xorlw	1	; case 1
  6637  0029D4  B4D8               	btfsc	status,2,c
  6638  0029D6  D7EF               	goto	l6655
  6639                           
  6640                           ; BSR set to: 0
  6641                           ;junction.c: 39: break;
  6642  0029D8  D023               	goto	l6673
  6643  0029DA                     l6661:
  6644                           
  6645                           ; BSR set to: 0
  6646  0029DA  0E00               	movlw	0
  6647  0029DC  0100               	movlb	0	; () banked
  6648  0029DE  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  6649  0029E0  0E01               	movlw	1
  6650  0029E2  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  6651  0029E4  0E42               	movlw	66
  6652  0029E6  EC11  F01D         	call	_SETxAPIxVAL
  6653  0029EA  D01A               	goto	l6673
  6654  0029EC                     l6663:
  6655  0029EC  0E00               	movlw	0
  6656  0029EE  0100               	movlb	0	; () banked
  6657  0029F0  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  6658  0029F2  0E01               	movlw	1
  6659  0029F4  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  6660  0029F6  0E43               	movlw	67
  6661  0029F8  EC11  F01D         	call	_SETxAPIxVAL
  6662                           
  6663                           ;junction.c: 46: }
  6664                           
  6665                           ;junction.c: 45: default : break;
  6666  0029FC  D011               	goto	l6673
  6667  0029FE                     l6667:
  6668  0029FE  0100               	movlb	0	; () banked
  6669  002A00  5195               	movf	Junction@Straight_Bend& (0+255),w,b
  6670                           
  6671                           ; Switch size 1, requested type "space"
  6672                           ; Number of cases is 2, Range of values is 0 to 1
  6673                           ; switch strategies available:
  6674                           ; Name         Instructions Cycles
  6675                           ; simple_byte            7     4 (average)
  6676                           ;	Chosen strategy is simple_byte
  6677  002A02  0A00               	xorlw	0	; case 0
  6678  002A04  B4D8               	btfsc	status,2,c
  6679  002A06  D7E9               	goto	l6661
  6680  002A08  0A01               	xorlw	1	; case 1
  6681  002A0A  B4D8               	btfsc	status,2,c
  6682  002A0C  D7EF               	goto	l6663
  6683                           
  6684                           ; BSR set to: 0
  6685                           ;junction.c: 50: }
  6686                           
  6687                           ; BSR set to: 0
  6688                           
  6689                           ;junction.c: 49: default : break;
  6690                           
  6691                           ; BSR set to: 0
  6692                           ;junction.c: 47: break;
  6693  002A0E  D008               	goto	l6673
  6694  002A10                     l6671:
  6695                           
  6696                           ; BSR set to: 0
  6697  002A10  0100               	movlb	0	; () banked
  6698  002A12  5196               	movf	Junction@Junction_Left_Right& (0+255),w,b
  6699                           
  6700                           ; Switch size 1, requested type "space"
  6701                           ; Number of cases is 2, Range of values is 0 to 1
  6702                           ; switch strategies available:
  6703                           ; Name         Instructions Cycles
  6704                           ; simple_byte            7     4 (average)
  6705                           ;	Chosen strategy is simple_byte
  6706  002A14  0A00               	xorlw	0	; case 0
  6707  002A16  B4D8               	btfsc	status,2,c
  6708  002A18  D7D7               	goto	l6659
  6709  002A1A  0A01               	xorlw	1	; case 1
  6710  002A1C  B4D8               	btfsc	status,2,c
  6711  002A1E  D7EF               	goto	l6667
  6712  002A20                     l6673:
  6713                           
  6714                           ;junction.c: 51: Switch_Junction = 1;
  6715  002A20  0E01               	movlw	1
  6716  002A22  0100               	movlb	0	; () banked
  6717  002A24  6F7F               	movwf	_Switch_Junction& (0+255),b
  6718                           
  6719                           ;junction.c: 52: break;
  6720  002A26  D053               	goto	l6693
  6721  002A28                     l6675:
  6722                           
  6723                           ; BSR set to: 0
  6724  002A28  0E13               	movlw	19
  6725  002A2A  ECD2  F01D         	call	_GETxAPIxVAL
  6726  002A2E  0100               	movlb	0	; () banked
  6727  002A30  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  6728  002A32  0100               	movlb	0	; () banked
  6729  002A34  5D60               	subwf	Junction@Junction_Switch_Time& (0+255),w,b
  6730  002A36  0100               	movlb	0	; () banked
  6731  002A38  518E               	movf	(?_GETxAPIxVAL+1)& (0+255),w,b
  6732  002A3A  0100               	movlb	0	; () banked
  6733  002A3C  5961               	subwfb	(Junction@Junction_Switch_Time+1)& (0+255),w,b
  6734  002A3E  A0D8               	btfss	status,0,c
  6735  002A40  D00A               	goto	l6679
  6736                           
  6737                           ; BSR set to: 0
  6738                           ;junction.c: 55: {
  6739                           ;junction.c: 56: Switch_Junction = 2;
  6740  002A42  0E02               	movlw	2
  6741  002A44  0100               	movlb	0	; () banked
  6742  002A46  6F7F               	movwf	_Switch_Junction& (0+255),b
  6743                           
  6744                           ;junction.c: 57: Junction_Switch_Time = 0;
  6745  002A48  0E00               	movlw	0
  6746  002A4A  0100               	movlb	0	; () banked
  6747  002A4C  6F61               	movwf	(Junction@Junction_Switch_Time+1)& (0+255),b
  6748  002A4E  0E00               	movlw	0
  6749  002A50  6F60               	movwf	Junction@Junction_Switch_Time& (0+255),b
  6750                           
  6751                           ;junction.c: 58: Return_Val = 1;
  6752  002A52  0E01               	movlw	1
  6753  002A54  D02E               	goto	L88
  6754  002A56                     l6679:
  6755                           
  6756                           ; BSR set to: 0
  6757                           ;junction.c: 60: }
  6758                           ;junction.c: 61: Return_Val = 1;
  6759  002A56  0E01               	movlw	1
  6760  002A58  0100               	movlb	0	; () banked
  6761  002A5A  6FB2               	movwf	Junction@Return_Val& (0+255),b
  6762                           
  6763                           ;junction.c: 62: Switch_Junction = 1;
  6764  002A5C  0E01               	movlw	1
  6765  002A5E  0100               	movlb	0	; () banked
  6766  002A60  6F7F               	movwf	_Switch_Junction& (0+255),b
  6767                           
  6768                           ; BSR set to: 0
  6769                           ;junction.c: 63: Junction_Switch_Time++;
  6770  002A62  0100               	movlb	0	; () banked
  6771  002A64  4B60               	infsnz	Junction@Junction_Switch_Time& (0+255),f,b
  6772  002A66  2B61               	incf	(Junction@Junction_Switch_Time+1)& (0+255),f,b
  6773                           
  6774                           ;junction.c: 64: break;
  6775  002A68  D032               	goto	l6693
  6776  002A6A                     l6683:
  6777                           
  6778                           ; BSR set to: 0
  6779  002A6A  0E00               	movlw	0
  6780  002A6C  0100               	movlb	0	; () banked
  6781  002A6E  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  6782  002A70  0E00               	movlw	0
  6783  002A72  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  6784  002A74  0E40               	movlw	64
  6785  002A76  EC11  F01D         	call	_SETxAPIxVAL
  6786                           
  6787                           ;junction.c: 67: SETxAPIxVAL(65, 0);
  6788  002A7A  0E00               	movlw	0
  6789  002A7C  0100               	movlb	0	; () banked
  6790  002A7E  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  6791  002A80  0E00               	movlw	0
  6792  002A82  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  6793  002A84  0E41               	movlw	65
  6794  002A86  EC11  F01D         	call	_SETxAPIxVAL
  6795                           
  6796                           ;junction.c: 68: SETxAPIxVAL(66,0);
  6797  002A8A  0E00               	movlw	0
  6798  002A8C  0100               	movlb	0	; () banked
  6799  002A8E  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  6800  002A90  0E00               	movlw	0
  6801  002A92  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  6802  002A94  0E42               	movlw	66
  6803  002A96  EC11  F01D         	call	_SETxAPIxVAL
  6804                           
  6805                           ;junction.c: 69: SETxAPIxVAL(67,0);
  6806  002A9A  0E00               	movlw	0
  6807  002A9C  0100               	movlb	0	; () banked
  6808  002A9E  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  6809  002AA0  0E00               	movlw	0
  6810  002AA2  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  6811  002AA4  0E43               	movlw	67
  6812  002AA6  EC11  F01D         	call	_SETxAPIxVAL
  6813                           
  6814                           ;junction.c: 70: Switch_Junction = 0;
  6815  002AAA  0E00               	movlw	0
  6816  002AAC  0100               	movlb	0	; () banked
  6817  002AAE  6F7F               	movwf	_Switch_Junction& (0+255),b
  6818                           
  6819                           ; BSR set to: 0
  6820                           ;junction.c: 71: Return_Val = 0;
  6821  002AB0  0E00               	movlw	0
  6822  002AB2                     L88:
  6823  002AB2  0100               	movlb	0	; () banked
  6824  002AB4  6FB2               	movwf	Junction@Return_Val& (0+255),b
  6825                           
  6826                           ; BSR set to: 0
  6827                           ;junction.c: 75: }
  6828                           
  6829                           ; BSR set to: 0
  6830                           
  6831                           ;junction.c: 74: default : break;
  6832                           
  6833                           ;junction.c: 72: break;
  6834  002AB6  D00B               	goto	l6693
  6835  002AB8                     l6691:
  6836  002AB8  0100               	movlb	0	; () banked
  6837  002ABA  517F               	movf	_Switch_Junction& (0+255),w,b
  6838                           
  6839                           ; Switch size 1, requested type "space"
  6840                           ; Number of cases is 3, Range of values is 0 to 2
  6841                           ; switch strategies available:
  6842                           ; Name         Instructions Cycles
  6843                           ; simple_byte           10     6 (average)
  6844                           ;	Chosen strategy is simple_byte
  6845  002ABC  0A00               	xorlw	0	; case 0
  6846  002ABE  B4D8               	btfsc	status,2,c
  6847  002AC0  D76D               	goto	l6651
  6848  002AC2  0A01               	xorlw	1	; case 1
  6849  002AC4  B4D8               	btfsc	status,2,c
  6850  002AC6  D7B0               	goto	l6675
  6851  002AC8  0A03               	xorlw	3	; case 2
  6852  002ACA  B4D8               	btfsc	status,2,c
  6853  002ACC  D7CE               	goto	l6683
  6854  002ACE                     l6693:
  6855                           
  6856                           ; BSR set to: 0
  6857                           ;junction.c: 77: return (Return_Val);
  6858  002ACE  0100               	movlb	0	; () banked
  6859  002AD0  51B2               	movf	Junction@Return_Val& (0+255),w,b
  6860  002AD2  0012               	return	
  6861  002AD4                     __end_of_Junction:
  6862                           	opt stack 0
  6863                           tblptru	equ	0xFF8
  6864                           tblptrh	equ	0xFF7
  6865                           tblptrl	equ	0xFF6
  6866                           tablat	equ	0xFF5
  6867                           postinc0	equ	0xFEE
  6868                           wreg	equ	0xFE8
  6869                           postdec1	equ	0xFE5
  6870                           fsr1h	equ	0xFE2
  6871                           fsr1l	equ	0xFE1
  6872                           status	equ	0xFD8
  6873                           
  6874 ;; *************** function _Red_Led *****************
  6875 ;; Defined at:
  6876 ;;		line 97 in file "../io.c"
  6877 ;; Parameters:    Size  Location     Type
  6878 ;;  Operation       1    wreg     unsigned char 
  6879 ;; Auto vars:     Size  Location     Type
  6880 ;;  Operation       1    0[BANK0 ] unsigned char 
  6881 ;; Return value:  Size  Location     Type
  6882 ;;                  1    wreg      void 
  6883 ;; Registers used:
  6884 ;;		wreg, status,2, status,0
  6885 ;; Tracked objects:
  6886 ;;		On entry : 0/0
  6887 ;;		On exit  : 0/0
  6888 ;;		Unchanged: 0/0
  6889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6890 ;;      Params:         0       0       0       0       0       0       0       0       0
  6891 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6892 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6893 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6894 ;;Total ram usage:        1 bytes
  6895 ;; Hardware stack levels used:    1
  6896 ;; Hardware stack levels required when called:    3
  6897 ;; This function calls:
  6898 ;;		Nothing
  6899 ;; This function is called by:
  6900 ;;		_Update_StateMchn
  6901 ;; This function uses a non-reentrant model
  6902 ;;
  6903                           
  6904                           	psect	text13
  6905  0036D6                     __ptext13:
  6906                           	opt stack 0
  6907  0036D6                     _Red_Led:
  6908                           	opt stack 26
  6909                           
  6910                           ; BSR set to: 0
  6911                           ;incstack = 0
  6912                           ;Red_Led@Operation stored from wreg
  6913  0036D6  0100               	movlb	0	; () banked
  6914  0036D8  6F8D               	movwf	Red_Led@Operation& (0+255),b
  6915                           
  6916                           ;io.c: 99: switch(Operation)
  6917  0036DA  D030               	goto	l7543
  6918  0036DC                     l743:
  6919                           
  6920                           ; BSR set to: 0
  6921  0036DC  9A83               	bcf	3971,5,c	;volatile
  6922  0036DE  0012               	return	
  6923  0036E0                     l745:
  6924                           
  6925                           ; BSR set to: 0
  6926  0036E0  8A83               	bsf	3971,5,c	;volatile
  6927  0036E2  0012               	return	
  6928  0036E4                     l7521:
  6929                           
  6930                           ; BSR set to: 0
  6931  0036E4  4A03               	infsnz	_Red_Led_Counter,f,c
  6932  0036E6  2A04               	incf	_Red_Led_Counter+1,f,c
  6933                           
  6934                           ; BSR set to: 0
  6935                           ;io.c: 106: if(Red_Led_Counter >= 3000)
  6936  0036E8  0EB8               	movlw	184
  6937  0036EA  5C03               	subwf	_Red_Led_Counter,w,c
  6938  0036EC  0E0B               	movlw	11
  6939  0036EE  5804               	subwfb	_Red_Led_Counter+1,w,c
  6940  0036F0  A0D8               	btfss	status,0,c
  6941  0036F2  D004               	goto	l7527
  6942                           
  6943                           ; BSR set to: 0
  6944                           ;io.c: 107: {
  6945                           ;io.c: 108: Red_Led_Counter = 0;
  6946  0036F4  0E00               	movlw	0
  6947  0036F6  6E04               	movwf	_Red_Led_Counter+1,c
  6948  0036F8  0E00               	movlw	0
  6949  0036FA  6E03               	movwf	_Red_Led_Counter,c
  6950  0036FC                     l7527:
  6951                           
  6952                           ; BSR set to: 0
  6953                           ;io.c: 109: }
  6954                           ;io.c: 110: if(Red_Led_Counter >= 3000/2)
  6955  0036FC  0EDC               	movlw	220
  6956  0036FE  5C03               	subwf	_Red_Led_Counter,w,c
  6957  003700  0E05               	movlw	5
  6958  003702  5804               	subwfb	_Red_Led_Counter+1,w,c
  6959  003704  A0D8               	btfss	status,0,c
  6960  003706  D002               	goto	l748
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;io.c: 111: {
  6964                           ;io.c: 112: PORTDbits.RD5 = 1;
  6965  003708  8A83               	bsf	3971,5,c	;volatile
  6966                           
  6967                           ;io.c: 113: }
  6968  00370A  0012               	return	
  6969  00370C                     l748:
  6970                           
  6971                           ; BSR set to: 0
  6972                           ;io.c: 114: else {PORTDbits.RD5 = 0;}
  6973  00370C  9A83               	bcf	3971,5,c	;volatile
  6974                           
  6975                           ; BSR set to: 0
  6976                           ;io.c: 115: break;
  6977  00370E  0012               	return	
  6978  003710                     l7531:
  6979                           
  6980                           ; BSR set to: 0
  6981  003710  4A03               	infsnz	_Red_Led_Counter,f,c
  6982  003712  2A04               	incf	_Red_Led_Counter+1,f,c
  6983                           
  6984                           ; BSR set to: 0
  6985                           ;io.c: 118: if(Red_Led_Counter >= 1000)
  6986  003714  0EE8               	movlw	232
  6987  003716  5C03               	subwf	_Red_Led_Counter,w,c
  6988  003718  0E03               	movlw	3
  6989  00371A  5804               	subwfb	_Red_Led_Counter+1,w,c
  6990  00371C  A0D8               	btfss	status,0,c
  6991  00371E  D004               	goto	l7537
  6992                           
  6993                           ; BSR set to: 0
  6994                           ;io.c: 119: {
  6995                           ;io.c: 120: Red_Led_Counter = 0;
  6996  003720  0E00               	movlw	0
  6997  003722  6E04               	movwf	_Red_Led_Counter+1,c
  6998  003724  0E00               	movlw	0
  6999  003726  6E03               	movwf	_Red_Led_Counter,c
  7000  003728                     l7537:
  7001                           
  7002                           ; BSR set to: 0
  7003                           ;io.c: 121: }
  7004                           ;io.c: 122: if(Red_Led_Counter >= 1000/2)
  7005  003728  0EF4               	movlw	244
  7006  00372A  5C03               	subwf	_Red_Led_Counter,w,c
  7007  00372C  0E01               	movlw	1
  7008  00372E  5804               	subwfb	_Red_Led_Counter+1,w,c
  7009  003730  A0D8               	btfss	status,0,c
  7010  003732  D002               	goto	l752
  7011                           
  7012                           ; BSR set to: 0
  7013                           ;io.c: 123: {
  7014                           ;io.c: 124: PORTDbits.RD5 = 1;
  7015  003734  8A83               	bsf	3971,5,c	;volatile
  7016                           
  7017                           ;io.c: 125: }
  7018  003736  0012               	return	
  7019  003738                     l752:
  7020                           
  7021                           ; BSR set to: 0
  7022                           ;io.c: 126: else {PORTDbits.RD5 = 0;}
  7023  003738  9A83               	bcf	3971,5,c	;volatile
  7024                           
  7025                           ; BSR set to: 0
  7026                           ;io.c: 130: }
  7027                           
  7028                           ; BSR set to: 0
  7029                           
  7030                           ;io.c: 129: default : break;
  7031                           
  7032                           ; BSR set to: 0
  7033                           ;io.c: 127: break;
  7034  00373A  0012               	return	
  7035  00373C                     l7543:
  7036  00373C  0100               	movlb	0	; () banked
  7037  00373E  518D               	movf	Red_Led@Operation& (0+255),w,b
  7038                           
  7039                           ; Switch size 1, requested type "space"
  7040                           ; Number of cases is 4, Range of values is 0 to 3
  7041                           ; switch strategies available:
  7042                           ; Name         Instructions Cycles
  7043                           ; simple_byte           13     7 (average)
  7044                           ;	Chosen strategy is simple_byte
  7045  003740  0A00               	xorlw	0	; case 0
  7046  003742  B4D8               	btfsc	status,2,c
  7047  003744  D7CB               	goto	l743
  7048  003746  0A01               	xorlw	1	; case 1
  7049  003748  B4D8               	btfsc	status,2,c
  7050  00374A  D7CA               	goto	l745
  7051  00374C  0A03               	xorlw	3	; case 2
  7052  00374E  B4D8               	btfsc	status,2,c
  7053  003750  D7C9               	goto	l7521
  7054  003752  0A01               	xorlw	1	; case 3
  7055  003754  A4D8               	btfss	status,2,c
  7056  003756  0012               	return	
  7057  003758  D7DB               	goto	l7531
  7058  00375A                     __end_of_Red_Led:
  7059                           	opt stack 0
  7060                           tblptru	equ	0xFF8
  7061                           tblptrh	equ	0xFF7
  7062                           tblptrl	equ	0xFF6
  7063                           tablat	equ	0xFF5
  7064                           postinc0	equ	0xFEE
  7065                           wreg	equ	0xFE8
  7066                           postdec1	equ	0xFE5
  7067                           fsr1h	equ	0xFE2
  7068                           fsr1l	equ	0xFE1
  7069                           status	equ	0xFD8
  7070                           
  7071 ;; *************** function _Green_Led *****************
  7072 ;; Defined at:
  7073 ;;		line 47 in file "../io.c"
  7074 ;; Parameters:    Size  Location     Type
  7075 ;;  Operation       1    wreg     unsigned char 
  7076 ;; Auto vars:     Size  Location     Type
  7077 ;;  Operation       1    0[BANK0 ] unsigned char 
  7078 ;; Return value:  Size  Location     Type
  7079 ;;                  1    wreg      void 
  7080 ;; Registers used:
  7081 ;;		wreg, status,2, status,0
  7082 ;; Tracked objects:
  7083 ;;		On entry : 0/0
  7084 ;;		On exit  : 0/0
  7085 ;;		Unchanged: 0/0
  7086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7087 ;;      Params:         0       0       0       0       0       0       0       0       0
  7088 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7089 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7090 ;;      Totals:         0       1       0       0       0       0       0       0       0
  7091 ;;Total ram usage:        1 bytes
  7092 ;; Hardware stack levels used:    1
  7093 ;; Hardware stack levels required when called:    3
  7094 ;; This function calls:
  7095 ;;		Nothing
  7096 ;; This function is called by:
  7097 ;;		_Update_StateMchn
  7098 ;; This function uses a non-reentrant model
  7099 ;;
  7100                           
  7101                           	psect	text14
  7102  00375A                     __ptext14:
  7103                           	opt stack 0
  7104  00375A                     _Green_Led:
  7105                           	opt stack 26
  7106                           
  7107                           ; BSR set to: 0
  7108                           ;incstack = 0
  7109                           ;Green_Led@Operation stored from wreg
  7110  00375A  0100               	movlb	0	; () banked
  7111  00375C  6F8D               	movwf	Green_Led@Operation& (0+255),b
  7112                           
  7113                           ;io.c: 49: switch(Operation)
  7114  00375E  D030               	goto	l7517
  7115  003760                     l727:
  7116                           
  7117                           ; BSR set to: 0
  7118  003760  9C83               	bcf	3971,6,c	;volatile
  7119  003762  0012               	return	
  7120  003764                     l729:
  7121                           
  7122                           ; BSR set to: 0
  7123  003764  8C83               	bsf	3971,6,c	;volatile
  7124  003766  0012               	return	
  7125  003768                     l7495:
  7126                           
  7127                           ; BSR set to: 0
  7128  003768  4A01               	infsnz	_Green_Led_Counter,f,c
  7129  00376A  2A02               	incf	_Green_Led_Counter+1,f,c
  7130                           
  7131                           ; BSR set to: 0
  7132                           ;io.c: 56: if(Green_Led_Counter >= 3000)
  7133  00376C  0EB8               	movlw	184
  7134  00376E  5C01               	subwf	_Green_Led_Counter,w,c
  7135  003770  0E0B               	movlw	11
  7136  003772  5802               	subwfb	_Green_Led_Counter+1,w,c
  7137  003774  A0D8               	btfss	status,0,c
  7138  003776  D004               	goto	l7501
  7139                           
  7140                           ; BSR set to: 0
  7141                           ;io.c: 57: {
  7142                           ;io.c: 58: Green_Led_Counter = 0;
  7143  003778  0E00               	movlw	0
  7144  00377A  6E02               	movwf	_Green_Led_Counter+1,c
  7145  00377C  0E00               	movlw	0
  7146  00377E  6E01               	movwf	_Green_Led_Counter,c
  7147  003780                     l7501:
  7148                           
  7149                           ; BSR set to: 0
  7150                           ;io.c: 59: }
  7151                           ;io.c: 60: if(Green_Led_Counter >= 3000/2)
  7152  003780  0EDC               	movlw	220
  7153  003782  5C01               	subwf	_Green_Led_Counter,w,c
  7154  003784  0E05               	movlw	5
  7155  003786  5802               	subwfb	_Green_Led_Counter+1,w,c
  7156  003788  A0D8               	btfss	status,0,c
  7157  00378A  D002               	goto	l732
  7158                           
  7159                           ; BSR set to: 0
  7160                           ;io.c: 61: {
  7161                           ;io.c: 62: PORTDbits.RD6 = 1;
  7162  00378C  8C83               	bsf	3971,6,c	;volatile
  7163                           
  7164                           ;io.c: 63: }
  7165  00378E  0012               	return	
  7166  003790                     l732:
  7167                           
  7168                           ; BSR set to: 0
  7169                           ;io.c: 64: else {PORTDbits.RD6 = 0;}
  7170  003790  9C83               	bcf	3971,6,c	;volatile
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;io.c: 65: break;
  7174  003792  0012               	return	
  7175  003794                     l7505:
  7176                           
  7177                           ; BSR set to: 0
  7178  003794  4A01               	infsnz	_Green_Led_Counter,f,c
  7179  003796  2A02               	incf	_Green_Led_Counter+1,f,c
  7180                           
  7181                           ; BSR set to: 0
  7182                           ;io.c: 68: if(Green_Led_Counter >= 1000)
  7183  003798  0EE8               	movlw	232
  7184  00379A  5C01               	subwf	_Green_Led_Counter,w,c
  7185  00379C  0E03               	movlw	3
  7186  00379E  5802               	subwfb	_Green_Led_Counter+1,w,c
  7187  0037A0  A0D8               	btfss	status,0,c
  7188  0037A2  D004               	goto	l7511
  7189                           
  7190                           ; BSR set to: 0
  7191                           ;io.c: 69: {
  7192                           ;io.c: 70: Green_Led_Counter = 0;
  7193  0037A4  0E00               	movlw	0
  7194  0037A6  6E02               	movwf	_Green_Led_Counter+1,c
  7195  0037A8  0E00               	movlw	0
  7196  0037AA  6E01               	movwf	_Green_Led_Counter,c
  7197  0037AC                     l7511:
  7198                           
  7199                           ; BSR set to: 0
  7200                           ;io.c: 71: }
  7201                           ;io.c: 72: if(Green_Led_Counter >= 1000/2)
  7202  0037AC  0EF4               	movlw	244
  7203  0037AE  5C01               	subwf	_Green_Led_Counter,w,c
  7204  0037B0  0E01               	movlw	1
  7205  0037B2  5802               	subwfb	_Green_Led_Counter+1,w,c
  7206  0037B4  A0D8               	btfss	status,0,c
  7207  0037B6  D002               	goto	l736
  7208                           
  7209                           ; BSR set to: 0
  7210                           ;io.c: 73: {
  7211                           ;io.c: 74: PORTDbits.RD6 = 1;
  7212  0037B8  8C83               	bsf	3971,6,c	;volatile
  7213                           
  7214                           ;io.c: 75: }
  7215  0037BA  0012               	return	
  7216  0037BC                     l736:
  7217                           
  7218                           ; BSR set to: 0
  7219                           ;io.c: 76: else {PORTDbits.RD6 = 0;}
  7220  0037BC  9C83               	bcf	3971,6,c	;volatile
  7221                           
  7222                           ; BSR set to: 0
  7223                           ;io.c: 80: }
  7224                           
  7225                           ; BSR set to: 0
  7226                           
  7227                           ;io.c: 79: default : break;
  7228                           
  7229                           ; BSR set to: 0
  7230                           ;io.c: 77: break;
  7231  0037BE  0012               	return	
  7232  0037C0                     l7517:
  7233  0037C0  0100               	movlb	0	; () banked
  7234  0037C2  518D               	movf	Green_Led@Operation& (0+255),w,b
  7235                           
  7236                           ; Switch size 1, requested type "space"
  7237                           ; Number of cases is 4, Range of values is 0 to 3
  7238                           ; switch strategies available:
  7239                           ; Name         Instructions Cycles
  7240                           ; simple_byte           13     7 (average)
  7241                           ;	Chosen strategy is simple_byte
  7242  0037C4  0A00               	xorlw	0	; case 0
  7243  0037C6  B4D8               	btfsc	status,2,c
  7244  0037C8  D7CB               	goto	l727
  7245  0037CA  0A01               	xorlw	1	; case 1
  7246  0037CC  B4D8               	btfsc	status,2,c
  7247  0037CE  D7CA               	goto	l729
  7248  0037D0  0A03               	xorlw	3	; case 2
  7249  0037D2  B4D8               	btfsc	status,2,c
  7250  0037D4  D7C9               	goto	l7495
  7251  0037D6  0A01               	xorlw	1	; case 3
  7252  0037D8  A4D8               	btfss	status,2,c
  7253  0037DA  0012               	return	
  7254  0037DC  D7DB               	goto	l7505
  7255  0037DE                     __end_of_Green_Led:
  7256                           	opt stack 0
  7257                           tblptru	equ	0xFF8
  7258                           tblptrh	equ	0xFF7
  7259                           tblptrl	equ	0xFF6
  7260                           tablat	equ	0xFF5
  7261                           postinc0	equ	0xFEE
  7262                           wreg	equ	0xFE8
  7263                           postdec1	equ	0xFE5
  7264                           fsr1h	equ	0xFE2
  7265                           fsr1l	equ	0xFE1
  7266                           status	equ	0xFD8
  7267                           
  7268 ;; *************** function _Eeprom_Store *****************
  7269 ;; Defined at:
  7270 ;;		line 21 in file "../eeprom_settings.c"
  7271 ;; Parameters:    Size  Location     Type
  7272 ;;		None
  7273 ;; Auto vars:     Size  Location     Type
  7274 ;;		None
  7275 ;; Return value:  Size  Location     Type
  7276 ;;                  1    wreg      void 
  7277 ;; Registers used:
  7278 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7279 ;; Tracked objects:
  7280 ;;		On entry : 0/0
  7281 ;;		On exit  : 0/0
  7282 ;;		Unchanged: 0/0
  7283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7284 ;;      Params:         0       0       0       0       0       0       0       0       0
  7285 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7286 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7287 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7288 ;;Total ram usage:        0 bytes
  7289 ;; Hardware stack levels used:    1
  7290 ;; Hardware stack levels required when called:    4
  7291 ;; This function calls:
  7292 ;;		_GETxAPIxVAL
  7293 ;; This function is called by:
  7294 ;;		_Update_StateMchn
  7295 ;; This function uses a non-reentrant model
  7296 ;;
  7297                           
  7298                           	psect	text15
  7299  0034B4                     __ptext15:
  7300                           	opt stack 0
  7301  0034B4                     _Eeprom_Store:
  7302                           	opt stack 25
  7303                           
  7304                           ;eeprom_settings.c: 23: INTCON = 0x00;
  7305                           
  7306                           ; BSR set to: 0
  7307                           ;incstack = 0
  7308  0034B4  0E00               	movlw	0
  7309  0034B6  6EF2               	movwf	intcon,c	;volatile
  7310                           
  7311                           ;eeprom_settings.c: 25: EECON1bits.EEPGD = 0;
  7312  0034B8  9EA6               	bcf	4006,7,c	;volatile
  7313                           
  7314                           ;eeprom_settings.c: 26: EECON1bits.WREN = 1;
  7315  0034BA  84A6               	bsf	4006,2,c	;volatile
  7316                           
  7317                           ;eeprom_settings.c: 27: EEADR = 0x01;
  7318  0034BC  0E01               	movlw	1
  7319  0034BE  6EA9               	movwf	4009,c	;volatile
  7320                           
  7321                           ;eeprom_settings.c: 28: EEDATA = GETxAPIxVAL(23);
  7322  0034C0  0E17               	movlw	23
  7323  0034C2  ECD2  F01D         	call	_GETxAPIxVAL
  7324  0034C6  0100               	movlb	0	; () banked
  7325  0034C8  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  7326  0034CA  6EA8               	movwf	4008,c	;volatile
  7327                           
  7328                           ; BSR set to: 0
  7329                           ;eeprom_settings.c: 29: EECON2 = 0x55;
  7330  0034CC  0E55               	movlw	85
  7331  0034CE  6EA7               	movwf	4007,c	;volatile
  7332                           
  7333                           ; BSR set to: 0
  7334                           ;eeprom_settings.c: 30: EECON2 = 0xaa;
  7335  0034D0  0EAA               	movlw	170
  7336  0034D2  6EA7               	movwf	4007,c	;volatile
  7337                           
  7338                           ; BSR set to: 0
  7339                           ;eeprom_settings.c: 31: EECON1bits.WR = 1;
  7340  0034D4  82A6               	bsf	4006,1,c	;volatile
  7341  0034D6                     l656:
  7342  0034D6  A8A1               	btfss	4001,4,c	;volatile
  7343  0034D8  D7FE               	goto	l656
  7344                           
  7345                           ;eeprom_settings.c: 33: PIR2bits.EEIF = 0;
  7346  0034DA  98A1               	bcf	4001,4,c	;volatile
  7347                           
  7348                           ;eeprom_settings.c: 35: EECON1bits.EEPGD = 0;
  7349  0034DC  9EA6               	bcf	4006,7,c	;volatile
  7350                           
  7351                           ;eeprom_settings.c: 36: EECON1bits.WREN = 1;
  7352  0034DE  84A6               	bsf	4006,2,c	;volatile
  7353                           
  7354                           ;eeprom_settings.c: 37: EEADR = 0x00;
  7355  0034E0  0E00               	movlw	0
  7356  0034E2  6EA9               	movwf	4009,c	;volatile
  7357                           
  7358                           ;eeprom_settings.c: 38: EEDATA = GETxAPIxVAL(23)>>8;
  7359  0034E4  0E17               	movlw	23
  7360  0034E6  ECD2  F01D         	call	_GETxAPIxVAL
  7361  0034EA  0100               	movlb	0	; () banked
  7362  0034EC  C08E  F08D         	movff	?_GETxAPIxVAL+1,?_GETxAPIxVAL
  7363  0034F0  0100               	movlb	0	; () banked
  7364  0034F2  6B8E               	clrf	(?_GETxAPIxVAL+1)& (0+255),b
  7365  0034F4  0100               	movlb	0	; () banked
  7366  0034F6  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  7367  0034F8  6EA8               	movwf	4008,c	;volatile
  7368                           
  7369                           ; BSR set to: 0
  7370                           ;eeprom_settings.c: 39: EECON2 = 0x55;
  7371  0034FA  0E55               	movlw	85
  7372  0034FC  6EA7               	movwf	4007,c	;volatile
  7373                           
  7374                           ; BSR set to: 0
  7375                           ;eeprom_settings.c: 40: EECON2 = 0xaa;
  7376  0034FE  0EAA               	movlw	170
  7377  003500  6EA7               	movwf	4007,c	;volatile
  7378                           
  7379                           ; BSR set to: 0
  7380                           ;eeprom_settings.c: 41: EECON1bits.WR = 1;
  7381  003502  82A6               	bsf	4006,1,c	;volatile
  7382  003504                     l659:
  7383  003504  A8A1               	btfss	4001,4,c	;volatile
  7384  003506  D7FE               	goto	l659
  7385                           
  7386                           ;eeprom_settings.c: 43: PIR2bits.EEIF = 0;
  7387  003508  98A1               	bcf	4001,4,c	;volatile
  7388                           
  7389                           ;eeprom_settings.c: 45: EECON1bits.EEPGD = 0;
  7390  00350A  9EA6               	bcf	4006,7,c	;volatile
  7391                           
  7392                           ;eeprom_settings.c: 46: EECON1bits.WREN = 1;
  7393  00350C  84A6               	bsf	4006,2,c	;volatile
  7394                           
  7395                           ;eeprom_settings.c: 47: EEADR = 0x03;
  7396  00350E  0E03               	movlw	3
  7397  003510  6EA9               	movwf	4009,c	;volatile
  7398                           
  7399                           ;eeprom_settings.c: 48: EEDATA = GETxAPIxVAL(24);
  7400  003512  0E18               	movlw	24
  7401  003514  ECD2  F01D         	call	_GETxAPIxVAL
  7402  003518  0100               	movlb	0	; () banked
  7403  00351A  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  7404  00351C  6EA8               	movwf	4008,c	;volatile
  7405                           
  7406                           ; BSR set to: 0
  7407                           ;eeprom_settings.c: 49: EECON2 = 0x55;
  7408  00351E  0E55               	movlw	85
  7409  003520  6EA7               	movwf	4007,c	;volatile
  7410                           
  7411                           ; BSR set to: 0
  7412                           ;eeprom_settings.c: 50: EECON2 = 0xaa;
  7413  003522  0EAA               	movlw	170
  7414  003524  6EA7               	movwf	4007,c	;volatile
  7415                           
  7416                           ; BSR set to: 0
  7417                           ;eeprom_settings.c: 51: EECON1bits.WR = 1;
  7418  003526  82A6               	bsf	4006,1,c	;volatile
  7419  003528                     l662:
  7420  003528  A8A1               	btfss	4001,4,c	;volatile
  7421  00352A  D7FE               	goto	l662
  7422                           
  7423                           ;eeprom_settings.c: 53: PIR2bits.EEIF = 0;
  7424  00352C  98A1               	bcf	4001,4,c	;volatile
  7425                           
  7426                           ;eeprom_settings.c: 55: EECON1bits.EEPGD = 0;
  7427  00352E  9EA6               	bcf	4006,7,c	;volatile
  7428                           
  7429                           ;eeprom_settings.c: 56: EECON1bits.WREN = 1;
  7430  003530  84A6               	bsf	4006,2,c	;volatile
  7431                           
  7432                           ;eeprom_settings.c: 57: EEADR = 0x02;
  7433  003532  0E02               	movlw	2
  7434  003534  6EA9               	movwf	4009,c	;volatile
  7435                           
  7436                           ;eeprom_settings.c: 58: EEDATA = GETxAPIxVAL(24)>>8;
  7437  003536  0E18               	movlw	24
  7438  003538  ECD2  F01D         	call	_GETxAPIxVAL
  7439  00353C  0100               	movlb	0	; () banked
  7440  00353E  C08E  F08D         	movff	?_GETxAPIxVAL+1,?_GETxAPIxVAL
  7441  003542  0100               	movlb	0	; () banked
  7442  003544  6B8E               	clrf	(?_GETxAPIxVAL+1)& (0+255),b
  7443  003546  0100               	movlb	0	; () banked
  7444  003548  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  7445  00354A  6EA8               	movwf	4008,c	;volatile
  7446                           
  7447                           ; BSR set to: 0
  7448                           ;eeprom_settings.c: 59: EECON2 = 0x55;
  7449  00354C  0E55               	movlw	85
  7450  00354E  6EA7               	movwf	4007,c	;volatile
  7451                           
  7452                           ; BSR set to: 0
  7453                           ;eeprom_settings.c: 60: EECON2 = 0xaa;
  7454  003550  0EAA               	movlw	170
  7455  003552  6EA7               	movwf	4007,c	;volatile
  7456                           
  7457                           ; BSR set to: 0
  7458                           ;eeprom_settings.c: 61: EECON1bits.WR = 1;
  7459  003554  82A6               	bsf	4006,1,c	;volatile
  7460  003556                     l665:
  7461  003556  A8A1               	btfss	4001,4,c	;volatile
  7462  003558  D7FE               	goto	l665
  7463                           
  7464                           ;eeprom_settings.c: 63: PIR2bits.EEIF = 0;
  7465  00355A  98A1               	bcf	4001,4,c	;volatile
  7466                           
  7467                           ;eeprom_settings.c: 65: EECON1bits.EEPGD = 0;
  7468  00355C  9EA6               	bcf	4006,7,c	;volatile
  7469                           
  7470                           ;eeprom_settings.c: 66: EECON1bits.WREN = 1;
  7471  00355E  84A6               	bsf	4006,2,c	;volatile
  7472                           
  7473                           ;eeprom_settings.c: 67: EEADR = 0x04;
  7474  003560  0E04               	movlw	4
  7475  003562  6EA9               	movwf	4009,c	;volatile
  7476                           
  7477                           ;eeprom_settings.c: 68: EEDATA = GETxAPIxVAL(25);
  7478  003564  0E19               	movlw	25
  7479  003566  ECD2  F01D         	call	_GETxAPIxVAL
  7480  00356A  0100               	movlb	0	; () banked
  7481  00356C  518D               	movf	?_GETxAPIxVAL& (0+255),w,b
  7482  00356E  6EA8               	movwf	4008,c	;volatile
  7483                           
  7484                           ; BSR set to: 0
  7485                           ;eeprom_settings.c: 69: EECON2 = 0x55;
  7486  003570  0E55               	movlw	85
  7487  003572  6EA7               	movwf	4007,c	;volatile
  7488                           
  7489                           ; BSR set to: 0
  7490                           ;eeprom_settings.c: 70: EECON2 = 0xaa;
  7491  003574  0EAA               	movlw	170
  7492  003576  6EA7               	movwf	4007,c	;volatile
  7493                           
  7494                           ; BSR set to: 0
  7495                           ;eeprom_settings.c: 71: EECON1bits.WR = 1;
  7496  003578  82A6               	bsf	4006,1,c	;volatile
  7497  00357A                     l668:
  7498  00357A  A8A1               	btfss	4001,4,c	;volatile
  7499  00357C  D7FE               	goto	l668
  7500                           
  7501                           ;eeprom_settings.c: 73: PIR2bits.EEIF = 0;
  7502  00357E  98A1               	bcf	4001,4,c	;volatile
  7503                           
  7504                           ;eeprom_settings.c: 76: INTCON = 0xA0;
  7505  003580  0EA0               	movlw	160
  7506  003582  6EF2               	movwf	intcon,c	;volatile
  7507  003584  0012               	return		;funcret
  7508  003586                     __end_of_Eeprom_Store:
  7509                           	opt stack 0
  7510                           tblptru	equ	0xFF8
  7511                           tblptrh	equ	0xFF7
  7512                           tblptrl	equ	0xFF6
  7513                           tablat	equ	0xFF5
  7514                           intcon	equ	0xFF2
  7515                           postinc0	equ	0xFEE
  7516                           wreg	equ	0xFE8
  7517                           postdec1	equ	0xFE5
  7518                           fsr1h	equ	0xFE2
  7519                           fsr1l	equ	0xFE1
  7520                           status	equ	0xFD8
  7521                           
  7522 ;; *************** function _Debounce_Inputs *****************
  7523 ;; Defined at:
  7524 ;;		line 148 in file "../io.c"
  7525 ;; Parameters:    Size  Location     Type
  7526 ;;		None
  7527 ;; Auto vars:     Size  Location     Type
  7528 ;;		None
  7529 ;; Return value:  Size  Location     Type
  7530 ;;                  1    wreg      void 
  7531 ;; Registers used:
  7532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7533 ;; Tracked objects:
  7534 ;;		On entry : 0/0
  7535 ;;		On exit  : 0/0
  7536 ;;		Unchanged: 0/0
  7537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7538 ;;      Params:         0       0       0       0       0       0       0       0       0
  7539 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7540 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7541 ;;      Totals:         0       2       0       0       0       0       0       0       0
  7542 ;;Total ram usage:        2 bytes
  7543 ;; Hardware stack levels used:    1
  7544 ;; Hardware stack levels required when called:    4
  7545 ;; This function calls:
  7546 ;;		_GETxAPIxVAL
  7547 ;;		_SETxAPIxVAL
  7548 ;;		_SetDCPWM1
  7549 ;; This function is called by:
  7550 ;;		_Update_StateMchn
  7551 ;; This function uses a non-reentrant model
  7552 ;;
  7553                           
  7554                           	psect	text16
  7555  0013E0                     __ptext16:
  7556                           	opt stack 0
  7557  0013E0                     _Debounce_Inputs:
  7558                           	opt stack 25
  7559                           
  7560                           ;io.c: 150: PORTAbits.RA3 = GETxAPIxVAL(64);
  7561                           
  7562                           ;incstack = 0
  7563  0013E0  0E40               	movlw	64
  7564  0013E2  ECD2  F01D         	call	_GETxAPIxVAL
  7565  0013E6  0100               	movlb	0	; () banked
  7566  0013E8  478D               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  7567  0013EA  0100               	movlb	0	; () banked
  7568  0013EC  478D               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  7569  0013EE  0100               	movlb	0	; () banked
  7570  0013F0  478D               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  7571  0013F2  5080               	movf	3968,w,c	;volatile
  7572  0013F4  0100               	movlb	0	; () banked
  7573  0013F6  198D               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7574  0013F8  0BF7               	andlw	-9
  7575  0013FA  0100               	movlb	0	; () banked
  7576  0013FC  198D               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7577  0013FE  6E80               	movwf	3968,c	;volatile
  7578                           
  7579                           ;io.c: 151: PORTAbits.RA2 = GETxAPIxVAL(65);
  7580  001400  0E41               	movlw	65
  7581  001402  ECD2  F01D         	call	_GETxAPIxVAL
  7582  001406  0100               	movlb	0	; () banked
  7583  001408  478D               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  7584  00140A  0100               	movlb	0	; () banked
  7585  00140C  478D               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  7586  00140E  5080               	movf	3968,w,c	;volatile
  7587  001410  0100               	movlb	0	; () banked
  7588  001412  198D               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7589  001414  0BFB               	andlw	-5
  7590  001416  0100               	movlb	0	; () banked
  7591  001418  198D               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7592  00141A  6E80               	movwf	3968,c	;volatile
  7593                           
  7594                           ;io.c: 152: PORTAbits.RA1 = GETxAPIxVAL(66);
  7595  00141C  0E42               	movlw	66
  7596  00141E  ECD2  F01D         	call	_GETxAPIxVAL
  7597  001422  0100               	movlb	0	; () banked
  7598  001424  478D               	rlncf	?_GETxAPIxVAL& (0+255),f,b
  7599  001426  5080               	movf	3968,w,c	;volatile
  7600  001428  0100               	movlb	0	; () banked
  7601  00142A  198D               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7602  00142C  0BFD               	andlw	-3
  7603  00142E  0100               	movlb	0	; () banked
  7604  001430  198D               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7605  001432  6E80               	movwf	3968,c	;volatile
  7606                           
  7607                           ;io.c: 153: PORTAbits.RA0 = GETxAPIxVAL(67);
  7608  001434  0E43               	movlw	67
  7609  001436  ECD2  F01D         	call	_GETxAPIxVAL
  7610  00143A  5080               	movf	3968,w,c	;volatile
  7611  00143C  0100               	movlb	0	; () banked
  7612  00143E  198D               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7613  001440  0BFE               	andlw	-2
  7614  001442  0100               	movlb	0	; () banked
  7615  001444  198D               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7616  001446  6E80               	movwf	3968,c	;volatile
  7617                           
  7618                           ;io.c: 154: PORTCbits.RC0 = GETxAPIxVAL(69);
  7619  001448  0E45               	movlw	69
  7620  00144A  ECD2  F01D         	call	_GETxAPIxVAL
  7621  00144E  5082               	movf	3970,w,c	;volatile
  7622  001450  0100               	movlb	0	; () banked
  7623  001452  198D               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7624  001454  0BFE               	andlw	-2
  7625  001456  0100               	movlb	0	; () banked
  7626  001458  198D               	xorwf	?_GETxAPIxVAL& (0+255),w,b
  7627  00145A  6E82               	movwf	3970,c	;volatile
  7628                           
  7629                           ;io.c: 155: SetDCPWM1(GETxAPIxVAL(68));
  7630  00145C  0E44               	movlw	68
  7631  00145E  ECD2  F01D         	call	_GETxAPIxVAL
  7632  001462  C08D  F090         	movff	?_GETxAPIxVAL,SetDCPWM1@dutycycle
  7633  001466  C08E  F091         	movff	?_GETxAPIxVAL+1,SetDCPWM1@dutycycle+1
  7634  00146A  ECEF  F01C         	call	_SetDCPWM1	;wreg free
  7635                           
  7636                           ;io.c: 157: switch(PORTDbits.RD1)
  7637  00146E  D02A               	goto	l7183
  7638  001470                     l7165:
  7639  001470  5011               	movf	_Reed_Contact_LF_Counter,w,c
  7640  001472  B4D8               	btfsc	status,2,c
  7641  001474  D002               	goto	l7171
  7642                           
  7643                           ;io.c: 160: {
  7644                           ;io.c: 161: Reed_Contact_LF_Counter--;
  7645  001476  0611               	decf	_Reed_Contact_LF_Counter,f,c
  7646                           
  7647                           ;io.c: 163: }
  7648                           
  7649                           ;io.c: 162: break;
  7650  001478  D05B               	goto	l7203
  7651  00147A                     l7171:
  7652                           
  7653                           ;io.c: 164: else {SETxAPIxVAL(31, 0);}
  7654  00147A  0E00               	movlw	0
  7655  00147C  0100               	movlb	0	; () banked
  7656  00147E  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7657  001480  0E00               	movlw	0
  7658  001482  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  7659  001484  0E1F               	movlw	31
  7660  001486  EC11  F01D         	call	_SETxAPIxVAL
  7661                           
  7662                           ;io.c: 165: break;
  7663  00148A  D052               	goto	l7203
  7664  00148C                     l7173:
  7665  00148C  5011               	movf	_Reed_Contact_LF_Counter,w,c
  7666  00148E  0100               	movlb	0	; () banked
  7667  001490  6F96               	movwf	??_Debounce_Inputs& (0+255),b
  7668  001492  6B97               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  7669  001494  0E1B               	movlw	27
  7670  001496  ECD2  F01D         	call	_GETxAPIxVAL
  7671  00149A  0100               	movlb	0	; () banked
  7672  00149C  5196               	movf	??_Debounce_Inputs& (0+255),w,b
  7673  00149E  0100               	movlb	0	; () banked
  7674  0014A0  5D8D               	subwf	?_GETxAPIxVAL& (0+255),w,b
  7675  0014A2  0100               	movlb	0	; () banked
  7676  0014A4  5197               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  7677  0014A6  0100               	movlb	0	; () banked
  7678  0014A8  598E               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  7679  0014AA  A0D8               	btfss	status,0,c
  7680  0014AC  D002               	goto	l7179
  7681                           
  7682                           ; BSR set to: 0
  7683                           ;io.c: 168: {
  7684                           ;io.c: 169: Reed_Contact_LF_Counter++;
  7685  0014AE  2A11               	incf	_Reed_Contact_LF_Counter,f,c
  7686                           
  7687                           ; BSR set to: 0
  7688                           ;io.c: 171: }
  7689                           
  7690                           ;io.c: 170: break;
  7691  0014B0  D03F               	goto	l7203
  7692  0014B2                     l7179:
  7693                           
  7694                           ; BSR set to: 0
  7695                           ;io.c: 172: else {SETxAPIxVAL(31, 1);}
  7696  0014B2  0E00               	movlw	0
  7697  0014B4  0100               	movlb	0	; () banked
  7698  0014B6  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7699  0014B8  0E01               	movlw	1
  7700  0014BA  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  7701  0014BC  0E1F               	movlw	31
  7702  0014BE  EC11  F01D         	call	_SETxAPIxVAL
  7703                           
  7704                           ;io.c: 176: }
  7705                           
  7706                           ;io.c: 175: default : break;
  7707                           
  7708                           ;io.c: 173: break;
  7709  0014C2  D036               	goto	l7203
  7710  0014C4                     l7183:
  7711  0014C4  A283               	btfss	3971,1,c	;volatile
  7712  0014C6  D002               	goto	u6830
  7713  0014C8  0E01               	movlw	1
  7714  0014CA  D001               	goto	u6836
  7715  0014CC                     u6830:
  7716  0014CC  0E00               	movlw	0
  7717  0014CE                     u6836:
  7718                           
  7719                           ; Switch size 1, requested type "space"
  7720                           ; Number of cases is 2, Range of values is 0 to 1
  7721                           ; switch strategies available:
  7722                           ; Name         Instructions Cycles
  7723                           ; simple_byte            7     4 (average)
  7724                           ;	Chosen strategy is simple_byte
  7725  0014CE  0A00               	xorlw	0	; case 0
  7726  0014D0  B4D8               	btfsc	status,2,c
  7727  0014D2  D7DC               	goto	l7173
  7728  0014D4  0A01               	xorlw	1	; case 1
  7729  0014D6  B4D8               	btfsc	status,2,c
  7730  0014D8  D7CB               	goto	l7165
  7731                           
  7732                           ;io.c: 179: switch(PORTDbits.RD0)
  7733  0014DA  D02A               	goto	l7203
  7734  0014DC                     l7185:
  7735  0014DC  5010               	movf	_Reed_Contact_LB_Counter,w,c
  7736  0014DE  B4D8               	btfsc	status,2,c
  7737  0014E0  D002               	goto	l7191
  7738                           
  7739                           ;io.c: 182: {
  7740                           ;io.c: 183: Reed_Contact_LB_Counter--;
  7741  0014E2  0610               	decf	_Reed_Contact_LB_Counter,f,c
  7742                           
  7743                           ;io.c: 185: }
  7744                           
  7745                           ;io.c: 184: break;
  7746  0014E4  D05B               	goto	l7223
  7747  0014E6                     l7191:
  7748                           
  7749                           ;io.c: 186: else {SETxAPIxVAL(30, 0);}
  7750  0014E6  0E00               	movlw	0
  7751  0014E8  0100               	movlb	0	; () banked
  7752  0014EA  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7753  0014EC  0E00               	movlw	0
  7754  0014EE  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  7755  0014F0  0E1E               	movlw	30
  7756  0014F2  EC11  F01D         	call	_SETxAPIxVAL
  7757                           
  7758                           ;io.c: 187: break;
  7759  0014F6  D052               	goto	l7223
  7760  0014F8                     l7193:
  7761  0014F8  5010               	movf	_Reed_Contact_LB_Counter,w,c
  7762  0014FA  0100               	movlb	0	; () banked
  7763  0014FC  6F96               	movwf	??_Debounce_Inputs& (0+255),b
  7764  0014FE  6B97               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  7765  001500  0E1B               	movlw	27
  7766  001502  ECD2  F01D         	call	_GETxAPIxVAL
  7767  001506  0100               	movlb	0	; () banked
  7768  001508  5196               	movf	??_Debounce_Inputs& (0+255),w,b
  7769  00150A  0100               	movlb	0	; () banked
  7770  00150C  5D8D               	subwf	?_GETxAPIxVAL& (0+255),w,b
  7771  00150E  0100               	movlb	0	; () banked
  7772  001510  5197               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  7773  001512  0100               	movlb	0	; () banked
  7774  001514  598E               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  7775  001516  A0D8               	btfss	status,0,c
  7776  001518  D002               	goto	l7199
  7777                           
  7778                           ; BSR set to: 0
  7779                           ;io.c: 190: {
  7780                           ;io.c: 191: Reed_Contact_LB_Counter++;
  7781  00151A  2A10               	incf	_Reed_Contact_LB_Counter,f,c
  7782                           
  7783                           ; BSR set to: 0
  7784                           ;io.c: 193: }
  7785                           
  7786                           ;io.c: 192: break;
  7787  00151C  D03F               	goto	l7223
  7788  00151E                     l7199:
  7789                           
  7790                           ; BSR set to: 0
  7791                           ;io.c: 194: else {SETxAPIxVAL(30, 1);}
  7792  00151E  0E00               	movlw	0
  7793  001520  0100               	movlb	0	; () banked
  7794  001522  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7795  001524  0E01               	movlw	1
  7796  001526  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  7797  001528  0E1E               	movlw	30
  7798  00152A  EC11  F01D         	call	_SETxAPIxVAL
  7799                           
  7800                           ;io.c: 198: }
  7801                           
  7802                           ;io.c: 197: default : break;
  7803                           
  7804                           ;io.c: 195: break;
  7805  00152E  D036               	goto	l7223
  7806  001530                     l7203:
  7807  001530  A083               	btfss	3971,0,c	;volatile
  7808  001532  D002               	goto	u6860
  7809  001534  0E01               	movlw	1
  7810  001536  D001               	goto	u6866
  7811  001538                     u6860:
  7812  001538  0E00               	movlw	0
  7813  00153A                     u6866:
  7814                           
  7815                           ; Switch size 1, requested type "space"
  7816                           ; Number of cases is 2, Range of values is 0 to 1
  7817                           ; switch strategies available:
  7818                           ; Name         Instructions Cycles
  7819                           ; simple_byte            7     4 (average)
  7820                           ;	Chosen strategy is simple_byte
  7821  00153A  0A00               	xorlw	0	; case 0
  7822  00153C  B4D8               	btfsc	status,2,c
  7823  00153E  D7DC               	goto	l7193
  7824  001540  0A01               	xorlw	1	; case 1
  7825  001542  B4D8               	btfsc	status,2,c
  7826  001544  D7CB               	goto	l7185
  7827                           
  7828                           ;io.c: 201: switch(PORTDbits.RD3)
  7829  001546  D02A               	goto	l7223
  7830  001548                     l7205:
  7831  001548  5015               	movf	_Reed_Contact_RF_Counter,w,c
  7832  00154A  B4D8               	btfsc	status,2,c
  7833  00154C  D002               	goto	l7211
  7834                           
  7835                           ;io.c: 204: {
  7836                           ;io.c: 205: Reed_Contact_RF_Counter--;
  7837  00154E  0615               	decf	_Reed_Contact_RF_Counter,f,c
  7838                           
  7839                           ;io.c: 207: }
  7840                           
  7841                           ;io.c: 206: break;
  7842  001550  D05B               	goto	l7243
  7843  001552                     l7211:
  7844                           
  7845                           ;io.c: 208: else {SETxAPIxVAL(29, 0);}
  7846  001552  0E00               	movlw	0
  7847  001554  0100               	movlb	0	; () banked
  7848  001556  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7849  001558  0E00               	movlw	0
  7850  00155A  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  7851  00155C  0E1D               	movlw	29
  7852  00155E  EC11  F01D         	call	_SETxAPIxVAL
  7853                           
  7854                           ;io.c: 209: break;
  7855  001562  D052               	goto	l7243
  7856  001564                     l7213:
  7857  001564  5015               	movf	_Reed_Contact_RF_Counter,w,c
  7858  001566  0100               	movlb	0	; () banked
  7859  001568  6F96               	movwf	??_Debounce_Inputs& (0+255),b
  7860  00156A  6B97               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  7861  00156C  0E1B               	movlw	27
  7862  00156E  ECD2  F01D         	call	_GETxAPIxVAL
  7863  001572  0100               	movlb	0	; () banked
  7864  001574  5196               	movf	??_Debounce_Inputs& (0+255),w,b
  7865  001576  0100               	movlb	0	; () banked
  7866  001578  5D8D               	subwf	?_GETxAPIxVAL& (0+255),w,b
  7867  00157A  0100               	movlb	0	; () banked
  7868  00157C  5197               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  7869  00157E  0100               	movlb	0	; () banked
  7870  001580  598E               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  7871  001582  A0D8               	btfss	status,0,c
  7872  001584  D002               	goto	l7219
  7873                           
  7874                           ; BSR set to: 0
  7875                           ;io.c: 212: {
  7876                           ;io.c: 213: Reed_Contact_RF_Counter++;
  7877  001586  2A15               	incf	_Reed_Contact_RF_Counter,f,c
  7878                           
  7879                           ; BSR set to: 0
  7880                           ;io.c: 215: }
  7881                           
  7882                           ;io.c: 214: break;
  7883  001588  D03F               	goto	l7243
  7884  00158A                     l7219:
  7885                           
  7886                           ; BSR set to: 0
  7887                           ;io.c: 216: else {SETxAPIxVAL(29, 1);}
  7888  00158A  0E00               	movlw	0
  7889  00158C  0100               	movlb	0	; () banked
  7890  00158E  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7891  001590  0E01               	movlw	1
  7892  001592  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  7893  001594  0E1D               	movlw	29
  7894  001596  EC11  F01D         	call	_SETxAPIxVAL
  7895                           
  7896                           ;io.c: 220: }
  7897                           
  7898                           ;io.c: 219: default : break;
  7899                           
  7900                           ;io.c: 217: break;
  7901  00159A  D036               	goto	l7243
  7902  00159C                     l7223:
  7903  00159C  A683               	btfss	3971,3,c	;volatile
  7904  00159E  D002               	goto	u6890
  7905  0015A0  0E01               	movlw	1
  7906  0015A2  D001               	goto	u6896
  7907  0015A4                     u6890:
  7908  0015A4  0E00               	movlw	0
  7909  0015A6                     u6896:
  7910                           
  7911                           ; Switch size 1, requested type "space"
  7912                           ; Number of cases is 2, Range of values is 0 to 1
  7913                           ; switch strategies available:
  7914                           ; Name         Instructions Cycles
  7915                           ; simple_byte            7     4 (average)
  7916                           ;	Chosen strategy is simple_byte
  7917  0015A6  0A00               	xorlw	0	; case 0
  7918  0015A8  B4D8               	btfsc	status,2,c
  7919  0015AA  D7DC               	goto	l7213
  7920  0015AC  0A01               	xorlw	1	; case 1
  7921  0015AE  B4D8               	btfsc	status,2,c
  7922  0015B0  D7CB               	goto	l7205
  7923                           
  7924                           ;io.c: 223: switch(PORTDbits.RD2)
  7925  0015B2  D02A               	goto	l7243
  7926  0015B4                     l7225:
  7927  0015B4  5014               	movf	_Reed_Contact_RB_Counter,w,c
  7928  0015B6  B4D8               	btfsc	status,2,c
  7929  0015B8  D002               	goto	l7231
  7930                           
  7931                           ;io.c: 226: {
  7932                           ;io.c: 227: Reed_Contact_RB_Counter--;
  7933  0015BA  0614               	decf	_Reed_Contact_RB_Counter,f,c
  7934                           
  7935                           ;io.c: 229: }
  7936                           
  7937                           ;io.c: 228: break;
  7938  0015BC  D05B               	goto	l7263
  7939  0015BE                     l7231:
  7940                           
  7941                           ;io.c: 230: else {SETxAPIxVAL(28, 0);}
  7942  0015BE  0E00               	movlw	0
  7943  0015C0  0100               	movlb	0	; () banked
  7944  0015C2  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7945  0015C4  0E00               	movlw	0
  7946  0015C6  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  7947  0015C8  0E1C               	movlw	28
  7948  0015CA  EC11  F01D         	call	_SETxAPIxVAL
  7949                           
  7950                           ;io.c: 231: break;
  7951  0015CE  D052               	goto	l7263
  7952  0015D0                     l7233:
  7953  0015D0  5014               	movf	_Reed_Contact_RB_Counter,w,c
  7954  0015D2  0100               	movlb	0	; () banked
  7955  0015D4  6F96               	movwf	??_Debounce_Inputs& (0+255),b
  7956  0015D6  6B97               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  7957  0015D8  0E1B               	movlw	27
  7958  0015DA  ECD2  F01D         	call	_GETxAPIxVAL
  7959  0015DE  0100               	movlb	0	; () banked
  7960  0015E0  5196               	movf	??_Debounce_Inputs& (0+255),w,b
  7961  0015E2  0100               	movlb	0	; () banked
  7962  0015E4  5D8D               	subwf	?_GETxAPIxVAL& (0+255),w,b
  7963  0015E6  0100               	movlb	0	; () banked
  7964  0015E8  5197               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  7965  0015EA  0100               	movlb	0	; () banked
  7966  0015EC  598E               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  7967  0015EE  A0D8               	btfss	status,0,c
  7968  0015F0  D002               	goto	l7239
  7969                           
  7970                           ; BSR set to: 0
  7971                           ;io.c: 234: {
  7972                           ;io.c: 235: Reed_Contact_RB_Counter++;
  7973  0015F2  2A14               	incf	_Reed_Contact_RB_Counter,f,c
  7974                           
  7975                           ; BSR set to: 0
  7976                           ;io.c: 237: }
  7977                           
  7978                           ;io.c: 236: break;
  7979  0015F4  D03F               	goto	l7263
  7980  0015F6                     l7239:
  7981                           
  7982                           ; BSR set to: 0
  7983                           ;io.c: 238: else {SETxAPIxVAL(28, 1);}
  7984  0015F6  0E00               	movlw	0
  7985  0015F8  0100               	movlb	0	; () banked
  7986  0015FA  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  7987  0015FC  0E01               	movlw	1
  7988  0015FE  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  7989  001600  0E1C               	movlw	28
  7990  001602  EC11  F01D         	call	_SETxAPIxVAL
  7991                           
  7992                           ;io.c: 242: }
  7993                           
  7994                           ;io.c: 241: default : break;
  7995                           
  7996                           ;io.c: 239: break;
  7997  001606  D036               	goto	l7263
  7998  001608                     l7243:
  7999  001608  A483               	btfss	3971,2,c	;volatile
  8000  00160A  D002               	goto	u6920
  8001  00160C  0E01               	movlw	1
  8002  00160E  D001               	goto	u6926
  8003  001610                     u6920:
  8004  001610  0E00               	movlw	0
  8005  001612                     u6926:
  8006                           
  8007                           ; Switch size 1, requested type "space"
  8008                           ; Number of cases is 2, Range of values is 0 to 1
  8009                           ; switch strategies available:
  8010                           ; Name         Instructions Cycles
  8011                           ; simple_byte            7     4 (average)
  8012                           ;	Chosen strategy is simple_byte
  8013  001612  0A00               	xorlw	0	; case 0
  8014  001614  B4D8               	btfsc	status,2,c
  8015  001616  D7DC               	goto	l7233
  8016  001618  0A01               	xorlw	1	; case 1
  8017  00161A  B4D8               	btfsc	status,2,c
  8018  00161C  D7CB               	goto	l7225
  8019                           
  8020                           ;io.c: 245: switch(!PORTBbits.RB0)
  8021  00161E  D02A               	goto	l7263
  8022  001620                     l7245:
  8023  001620  500E               	movf	_Button_Contact_Counter_Start,w,c
  8024  001622  0100               	movlb	0	; () banked
  8025  001624  6F96               	movwf	??_Debounce_Inputs& (0+255),b
  8026  001626  6B97               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8027  001628  0E1B               	movlw	27
  8028  00162A  ECD2  F01D         	call	_GETxAPIxVAL
  8029  00162E  0100               	movlb	0	; () banked
  8030  001630  5196               	movf	??_Debounce_Inputs& (0+255),w,b
  8031  001632  0100               	movlb	0	; () banked
  8032  001634  5D8D               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8033  001636  0100               	movlb	0	; () banked
  8034  001638  5197               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8035  00163A  0100               	movlb	0	; () banked
  8036  00163C  598E               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8037  00163E  A0D8               	btfss	status,0,c
  8038  001640  D002               	goto	l7251
  8039                           
  8040                           ; BSR set to: 0
  8041                           ;io.c: 248: {
  8042                           ;io.c: 249: Button_Contact_Counter_Start++;
  8043  001642  2A0E               	incf	_Button_Contact_Counter_Start,f,c
  8044                           
  8045                           ; BSR set to: 0
  8046                           ;io.c: 251: }
  8047                           
  8048                           ;io.c: 250: break;
  8049  001644  D057               	goto	l7283
  8050  001646                     l7251:
  8051                           
  8052                           ; BSR set to: 0
  8053                           ;io.c: 252: else {SETxAPIxVAL(32, 1); }
  8054  001646  0E00               	movlw	0
  8055  001648  0100               	movlb	0	; () banked
  8056  00164A  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8057  00164C  0E01               	movlw	1
  8058  00164E  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  8059  001650  0E20               	movlw	32
  8060  001652  EC11  F01D         	call	_SETxAPIxVAL
  8061                           
  8062                           ;io.c: 253: break;
  8063  001656  D04E               	goto	l7283
  8064  001658                     l7253:
  8065  001658  500E               	movf	_Button_Contact_Counter_Start,w,c
  8066  00165A  B4D8               	btfsc	status,2,c
  8067  00165C  D002               	goto	l7259
  8068                           
  8069                           ;io.c: 256: {
  8070                           ;io.c: 257: Button_Contact_Counter_Start--;
  8071  00165E  060E               	decf	_Button_Contact_Counter_Start,f,c
  8072                           
  8073                           ;io.c: 259: }
  8074                           
  8075                           ;io.c: 258: break;
  8076  001660  D049               	goto	l7283
  8077  001662                     l7259:
  8078                           
  8079                           ;io.c: 260: else {SETxAPIxVAL(32, 0);}
  8080  001662  0E00               	movlw	0
  8081  001664  0100               	movlb	0	; () banked
  8082  001666  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8083  001668  0E00               	movlw	0
  8084  00166A  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  8085  00166C  0E20               	movlw	32
  8086  00166E  EC11  F01D         	call	_SETxAPIxVAL
  8087                           
  8088                           ;io.c: 264: }
  8089                           
  8090                           ;io.c: 263: default : break;
  8091                           
  8092                           ;io.c: 261: break;
  8093  001672  D040               	goto	l7283
  8094  001674                     l7263:
  8095  001674  B081               	btfsc	3969,0,c	;volatile
  8096  001676  D002               	goto	u6950
  8097  001678  0E01               	movlw	1
  8098  00167A  D001               	goto	u6960
  8099  00167C                     u6950:
  8100  00167C  0E00               	movlw	0
  8101  00167E                     u6960:
  8102  00167E  0100               	movlb	0	; () banked
  8103  001680  6F96               	movwf	??_Debounce_Inputs& (0+255),b
  8104  001682  6B97               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8105                           
  8106                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8107                           ; Switch size 1, requested type "space"
  8108                           ; Number of cases is 1, Range of values is 0 to 0
  8109                           ; switch strategies available:
  8110                           ; Name         Instructions Cycles
  8111                           ; simple_byte            4     3 (average)
  8112                           ;	Chosen strategy is simple_byte
  8113  001684  0100               	movlb	0	; () banked
  8114  001686  5197               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8115  001688  0A00               	xorlw	0	; case 0
  8116  00168A  A4D8               	btfss	status,2,c
  8117  00168C  D033               	goto	l7283
  8118                           
  8119                           ; BSR set to: 0
  8120                           ; Switch size 1, requested type "space"
  8121                           ; Number of cases is 2, Range of values is 0 to 1
  8122                           ; switch strategies available:
  8123                           ; Name         Instructions Cycles
  8124                           ; simple_byte            7     4 (average)
  8125                           ;	Chosen strategy is simple_byte
  8126  00168E  0100               	movlb	0	; () banked
  8127  001690  5196               	movf	??_Debounce_Inputs& (0+255),w,b
  8128  001692  0A00               	xorlw	0	; case 0
  8129  001694  B4D8               	btfsc	status,2,c
  8130  001696  D7E0               	goto	l7253
  8131  001698  0A01               	xorlw	1	; case 1
  8132  00169A  B4D8               	btfsc	status,2,c
  8133  00169C  D7C1               	goto	l7245
  8134                           
  8135                           ; BSR set to: 0
  8136                           ;io.c: 267: switch(!PORTDbits.RD7)
  8137  00169E  D02A               	goto	l7283
  8138  0016A0                     l7265:
  8139                           
  8140                           ; BSR set to: 0
  8141  0016A0  500F               	movf	_Button_Contact_Counter_Stop,w,c
  8142  0016A2  0100               	movlb	0	; () banked
  8143  0016A4  6F96               	movwf	??_Debounce_Inputs& (0+255),b
  8144  0016A6  6B97               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8145  0016A8  0E1B               	movlw	27
  8146  0016AA  ECD2  F01D         	call	_GETxAPIxVAL
  8147  0016AE  0100               	movlb	0	; () banked
  8148  0016B0  5196               	movf	??_Debounce_Inputs& (0+255),w,b
  8149  0016B2  0100               	movlb	0	; () banked
  8150  0016B4  5D8D               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8151  0016B6  0100               	movlb	0	; () banked
  8152  0016B8  5197               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8153  0016BA  0100               	movlb	0	; () banked
  8154  0016BC  598E               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8155  0016BE  A0D8               	btfss	status,0,c
  8156  0016C0  D002               	goto	l7271
  8157                           
  8158                           ; BSR set to: 0
  8159                           ;io.c: 270: {
  8160                           ;io.c: 271: Button_Contact_Counter_Stop++;
  8161  0016C2  2A0F               	incf	_Button_Contact_Counter_Stop,f,c
  8162                           
  8163                           ; BSR set to: 0
  8164                           ;io.c: 273: }
  8165                           
  8166                           ;io.c: 272: break;
  8167  0016C4  D057               	goto	l7303
  8168  0016C6                     l7271:
  8169                           
  8170                           ; BSR set to: 0
  8171                           ;io.c: 274: else {SETxAPIxVAL(33, 1); }
  8172  0016C6  0E00               	movlw	0
  8173  0016C8  0100               	movlb	0	; () banked
  8174  0016CA  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8175  0016CC  0E01               	movlw	1
  8176  0016CE  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  8177  0016D0  0E21               	movlw	33
  8178  0016D2  EC11  F01D         	call	_SETxAPIxVAL
  8179                           
  8180                           ;io.c: 275: break;
  8181  0016D6  D04E               	goto	l7303
  8182  0016D8                     l7273:
  8183  0016D8  500F               	movf	_Button_Contact_Counter_Stop,w,c
  8184  0016DA  B4D8               	btfsc	status,2,c
  8185  0016DC  D002               	goto	l7279
  8186                           
  8187                           ;io.c: 278: {
  8188                           ;io.c: 279: Button_Contact_Counter_Stop--;
  8189  0016DE  060F               	decf	_Button_Contact_Counter_Stop,f,c
  8190                           
  8191                           ;io.c: 281: }
  8192                           
  8193                           ;io.c: 280: break;
  8194  0016E0  D049               	goto	l7303
  8195  0016E2                     l7279:
  8196                           
  8197                           ;io.c: 282: else {SETxAPIxVAL(33, 0);}
  8198  0016E2  0E00               	movlw	0
  8199  0016E4  0100               	movlb	0	; () banked
  8200  0016E6  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8201  0016E8  0E00               	movlw	0
  8202  0016EA  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  8203  0016EC  0E21               	movlw	33
  8204  0016EE  EC11  F01D         	call	_SETxAPIxVAL
  8205                           
  8206                           ;io.c: 286: }
  8207                           
  8208                           ;io.c: 285: default : break;
  8209                           
  8210                           ;io.c: 283: break;
  8211  0016F2  D040               	goto	l7303
  8212  0016F4                     l7283:
  8213  0016F4  BE83               	btfsc	3971,7,c	;volatile
  8214  0016F6  D002               	goto	u6990
  8215  0016F8  0E01               	movlw	1
  8216  0016FA  D001               	goto	u7000
  8217  0016FC                     u6990:
  8218  0016FC  0E00               	movlw	0
  8219  0016FE                     u7000:
  8220  0016FE  0100               	movlb	0	; () banked
  8221  001700  6F96               	movwf	??_Debounce_Inputs& (0+255),b
  8222  001702  6B97               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8223                           
  8224                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8225                           ; Switch size 1, requested type "space"
  8226                           ; Number of cases is 1, Range of values is 0 to 0
  8227                           ; switch strategies available:
  8228                           ; Name         Instructions Cycles
  8229                           ; simple_byte            4     3 (average)
  8230                           ;	Chosen strategy is simple_byte
  8231  001704  0100               	movlb	0	; () banked
  8232  001706  5197               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8233  001708  0A00               	xorlw	0	; case 0
  8234  00170A  A4D8               	btfss	status,2,c
  8235  00170C  D033               	goto	l7303
  8236                           
  8237                           ; BSR set to: 0
  8238                           ; Switch size 1, requested type "space"
  8239                           ; Number of cases is 2, Range of values is 0 to 1
  8240                           ; switch strategies available:
  8241                           ; Name         Instructions Cycles
  8242                           ; simple_byte            7     4 (average)
  8243                           ;	Chosen strategy is simple_byte
  8244  00170E  0100               	movlb	0	; () banked
  8245  001710  5196               	movf	??_Debounce_Inputs& (0+255),w,b
  8246  001712  0A00               	xorlw	0	; case 0
  8247  001714  B4D8               	btfsc	status,2,c
  8248  001716  D7E0               	goto	l7273
  8249  001718  0A01               	xorlw	1	; case 1
  8250  00171A  B4D8               	btfsc	status,2,c
  8251  00171C  D7C1               	goto	l7265
  8252                           
  8253                           ; BSR set to: 0
  8254                           ;io.c: 289: switch(!PORTBbits.RB1)
  8255  00171E  D02A               	goto	l7303
  8256  001720                     l7285:
  8257                           
  8258                           ; BSR set to: 0
  8259  001720  500B               	movf	_Button_Contact_Counter_Middle,w,c
  8260  001722  0100               	movlb	0	; () banked
  8261  001724  6F96               	movwf	??_Debounce_Inputs& (0+255),b
  8262  001726  6B97               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8263  001728  0E1B               	movlw	27
  8264  00172A  ECD2  F01D         	call	_GETxAPIxVAL
  8265  00172E  0100               	movlb	0	; () banked
  8266  001730  5196               	movf	??_Debounce_Inputs& (0+255),w,b
  8267  001732  0100               	movlb	0	; () banked
  8268  001734  5D8D               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8269  001736  0100               	movlb	0	; () banked
  8270  001738  5197               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8271  00173A  0100               	movlb	0	; () banked
  8272  00173C  598E               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8273  00173E  A0D8               	btfss	status,0,c
  8274  001740  D002               	goto	l7291
  8275                           
  8276                           ; BSR set to: 0
  8277                           ;io.c: 292: {
  8278                           ;io.c: 293: Button_Contact_Counter_Middle++;
  8279  001742  2A0B               	incf	_Button_Contact_Counter_Middle,f,c
  8280                           
  8281                           ; BSR set to: 0
  8282                           ;io.c: 295: }
  8283                           
  8284                           ;io.c: 294: break;
  8285  001744  D057               	goto	l7323
  8286  001746                     l7291:
  8287                           
  8288                           ; BSR set to: 0
  8289                           ;io.c: 296: else {SETxAPIxVAL(34, 1); }
  8290  001746  0E00               	movlw	0
  8291  001748  0100               	movlb	0	; () banked
  8292  00174A  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8293  00174C  0E01               	movlw	1
  8294  00174E  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  8295  001750  0E22               	movlw	34
  8296  001752  EC11  F01D         	call	_SETxAPIxVAL
  8297                           
  8298                           ;io.c: 297: break;
  8299  001756  D04E               	goto	l7323
  8300  001758                     l7293:
  8301  001758  500B               	movf	_Button_Contact_Counter_Middle,w,c
  8302  00175A  B4D8               	btfsc	status,2,c
  8303  00175C  D002               	goto	l7299
  8304                           
  8305                           ;io.c: 300: {
  8306                           ;io.c: 301: Button_Contact_Counter_Middle--;
  8307  00175E  060B               	decf	_Button_Contact_Counter_Middle,f,c
  8308                           
  8309                           ;io.c: 303: }
  8310                           
  8311                           ;io.c: 302: break;
  8312  001760  D049               	goto	l7323
  8313  001762                     l7299:
  8314                           
  8315                           ;io.c: 304: else {SETxAPIxVAL(34, 0);}
  8316  001762  0E00               	movlw	0
  8317  001764  0100               	movlb	0	; () banked
  8318  001766  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8319  001768  0E00               	movlw	0
  8320  00176A  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  8321  00176C  0E22               	movlw	34
  8322  00176E  EC11  F01D         	call	_SETxAPIxVAL
  8323                           
  8324                           ;io.c: 308: }
  8325                           
  8326                           ;io.c: 307: default : break;
  8327                           
  8328                           ;io.c: 305: break;
  8329  001772  D040               	goto	l7323
  8330  001774                     l7303:
  8331  001774  B281               	btfsc	3969,1,c	;volatile
  8332  001776  D002               	goto	u7030
  8333  001778  0E01               	movlw	1
  8334  00177A  D001               	goto	u7040
  8335  00177C                     u7030:
  8336  00177C  0E00               	movlw	0
  8337  00177E                     u7040:
  8338  00177E  0100               	movlb	0	; () banked
  8339  001780  6F96               	movwf	??_Debounce_Inputs& (0+255),b
  8340  001782  6B97               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8341                           
  8342                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8343                           ; Switch size 1, requested type "space"
  8344                           ; Number of cases is 1, Range of values is 0 to 0
  8345                           ; switch strategies available:
  8346                           ; Name         Instructions Cycles
  8347                           ; simple_byte            4     3 (average)
  8348                           ;	Chosen strategy is simple_byte
  8349  001784  0100               	movlb	0	; () banked
  8350  001786  5197               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8351  001788  0A00               	xorlw	0	; case 0
  8352  00178A  A4D8               	btfss	status,2,c
  8353  00178C  D033               	goto	l7323
  8354                           
  8355                           ; BSR set to: 0
  8356                           ; Switch size 1, requested type "space"
  8357                           ; Number of cases is 2, Range of values is 0 to 1
  8358                           ; switch strategies available:
  8359                           ; Name         Instructions Cycles
  8360                           ; simple_byte            7     4 (average)
  8361                           ;	Chosen strategy is simple_byte
  8362  00178E  0100               	movlb	0	; () banked
  8363  001790  5196               	movf	??_Debounce_Inputs& (0+255),w,b
  8364  001792  0A00               	xorlw	0	; case 0
  8365  001794  B4D8               	btfsc	status,2,c
  8366  001796  D7E0               	goto	l7293
  8367  001798  0A01               	xorlw	1	; case 1
  8368  00179A  B4D8               	btfsc	status,2,c
  8369  00179C  D7C1               	goto	l7285
  8370                           
  8371                           ; BSR set to: 0
  8372                           ;io.c: 311: switch(!PORTBbits.RB5)
  8373  00179E  D02A               	goto	l7323
  8374  0017A0                     l7305:
  8375                           
  8376                           ; BSR set to: 0
  8377  0017A0  5009               	movf	_Button_Contact_Counter_LB,w,c
  8378  0017A2  0100               	movlb	0	; () banked
  8379  0017A4  6F96               	movwf	??_Debounce_Inputs& (0+255),b
  8380  0017A6  6B97               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8381  0017A8  0E1B               	movlw	27
  8382  0017AA  ECD2  F01D         	call	_GETxAPIxVAL
  8383  0017AE  0100               	movlb	0	; () banked
  8384  0017B0  5196               	movf	??_Debounce_Inputs& (0+255),w,b
  8385  0017B2  0100               	movlb	0	; () banked
  8386  0017B4  5D8D               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8387  0017B6  0100               	movlb	0	; () banked
  8388  0017B8  5197               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8389  0017BA  0100               	movlb	0	; () banked
  8390  0017BC  598E               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8391  0017BE  A0D8               	btfss	status,0,c
  8392  0017C0  D002               	goto	l7311
  8393                           
  8394                           ; BSR set to: 0
  8395                           ;io.c: 314: {
  8396                           ;io.c: 315: Button_Contact_Counter_LB++;
  8397  0017C2  2A09               	incf	_Button_Contact_Counter_LB,f,c
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;io.c: 317: }
  8401                           
  8402                           ;io.c: 316: break;
  8403  0017C4  D057               	goto	l7343
  8404  0017C6                     l7311:
  8405                           
  8406                           ; BSR set to: 0
  8407                           ;io.c: 318: else {SETxAPIxVAL(35, 1); }
  8408  0017C6  0E00               	movlw	0
  8409  0017C8  0100               	movlb	0	; () banked
  8410  0017CA  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8411  0017CC  0E01               	movlw	1
  8412  0017CE  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  8413  0017D0  0E23               	movlw	35
  8414  0017D2  EC11  F01D         	call	_SETxAPIxVAL
  8415                           
  8416                           ;io.c: 319: break;
  8417  0017D6  D04E               	goto	l7343
  8418  0017D8                     l7313:
  8419  0017D8  5009               	movf	_Button_Contact_Counter_LB,w,c
  8420  0017DA  B4D8               	btfsc	status,2,c
  8421  0017DC  D002               	goto	l7319
  8422                           
  8423                           ;io.c: 322: {
  8424                           ;io.c: 323: Button_Contact_Counter_LB--;
  8425  0017DE  0609               	decf	_Button_Contact_Counter_LB,f,c
  8426                           
  8427                           ;io.c: 325: }
  8428                           
  8429                           ;io.c: 324: break;
  8430  0017E0  D049               	goto	l7343
  8431  0017E2                     l7319:
  8432                           
  8433                           ;io.c: 326: else {SETxAPIxVAL(35, 0);}
  8434  0017E2  0E00               	movlw	0
  8435  0017E4  0100               	movlb	0	; () banked
  8436  0017E6  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8437  0017E8  0E00               	movlw	0
  8438  0017EA  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  8439  0017EC  0E23               	movlw	35
  8440  0017EE  EC11  F01D         	call	_SETxAPIxVAL
  8441                           
  8442                           ;io.c: 330: }
  8443                           
  8444                           ;io.c: 329: default : break;
  8445                           
  8446                           ;io.c: 327: break;
  8447  0017F2  D040               	goto	l7343
  8448  0017F4                     l7323:
  8449  0017F4  BA81               	btfsc	3969,5,c	;volatile
  8450  0017F6  D002               	goto	u7070
  8451  0017F8  0E01               	movlw	1
  8452  0017FA  D001               	goto	u7080
  8453  0017FC                     u7070:
  8454  0017FC  0E00               	movlw	0
  8455  0017FE                     u7080:
  8456  0017FE  0100               	movlb	0	; () banked
  8457  001800  6F96               	movwf	??_Debounce_Inputs& (0+255),b
  8458  001802  6B97               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8459                           
  8460                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8461                           ; Switch size 1, requested type "space"
  8462                           ; Number of cases is 1, Range of values is 0 to 0
  8463                           ; switch strategies available:
  8464                           ; Name         Instructions Cycles
  8465                           ; simple_byte            4     3 (average)
  8466                           ;	Chosen strategy is simple_byte
  8467  001804  0100               	movlb	0	; () banked
  8468  001806  5197               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8469  001808  0A00               	xorlw	0	; case 0
  8470  00180A  A4D8               	btfss	status,2,c
  8471  00180C  D033               	goto	l7343
  8472                           
  8473                           ; BSR set to: 0
  8474                           ; Switch size 1, requested type "space"
  8475                           ; Number of cases is 2, Range of values is 0 to 1
  8476                           ; switch strategies available:
  8477                           ; Name         Instructions Cycles
  8478                           ; simple_byte            7     4 (average)
  8479                           ;	Chosen strategy is simple_byte
  8480  00180E  0100               	movlb	0	; () banked
  8481  001810  5196               	movf	??_Debounce_Inputs& (0+255),w,b
  8482  001812  0A00               	xorlw	0	; case 0
  8483  001814  B4D8               	btfsc	status,2,c
  8484  001816  D7E0               	goto	l7313
  8485  001818  0A01               	xorlw	1	; case 1
  8486  00181A  B4D8               	btfsc	status,2,c
  8487  00181C  D7C1               	goto	l7305
  8488                           
  8489                           ; BSR set to: 0
  8490                           ;io.c: 333: switch(!PORTBbits.RB4)
  8491  00181E  D02A               	goto	l7343
  8492  001820                     l7325:
  8493                           
  8494                           ; BSR set to: 0
  8495  001820  500A               	movf	_Button_Contact_Counter_LF,w,c
  8496  001822  0100               	movlb	0	; () banked
  8497  001824  6F96               	movwf	??_Debounce_Inputs& (0+255),b
  8498  001826  6B97               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8499  001828  0E1B               	movlw	27
  8500  00182A  ECD2  F01D         	call	_GETxAPIxVAL
  8501  00182E  0100               	movlb	0	; () banked
  8502  001830  5196               	movf	??_Debounce_Inputs& (0+255),w,b
  8503  001832  0100               	movlb	0	; () banked
  8504  001834  5D8D               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8505  001836  0100               	movlb	0	; () banked
  8506  001838  5197               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8507  00183A  0100               	movlb	0	; () banked
  8508  00183C  598E               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8509  00183E  A0D8               	btfss	status,0,c
  8510  001840  D002               	goto	l7331
  8511                           
  8512                           ; BSR set to: 0
  8513                           ;io.c: 336: {
  8514                           ;io.c: 337: Button_Contact_Counter_LF++;
  8515  001842  2A0A               	incf	_Button_Contact_Counter_LF,f,c
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;io.c: 339: }
  8519                           
  8520                           ;io.c: 338: break;
  8521  001844  D057               	goto	l7363
  8522  001846                     l7331:
  8523                           
  8524                           ; BSR set to: 0
  8525                           ;io.c: 340: else {SETxAPIxVAL(36, 1); }
  8526  001846  0E00               	movlw	0
  8527  001848  0100               	movlb	0	; () banked
  8528  00184A  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8529  00184C  0E01               	movlw	1
  8530  00184E  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  8531  001850  0E24               	movlw	36
  8532  001852  EC11  F01D         	call	_SETxAPIxVAL
  8533                           
  8534                           ;io.c: 341: break;
  8535  001856  D04E               	goto	l7363
  8536  001858                     l7333:
  8537  001858  500A               	movf	_Button_Contact_Counter_LF,w,c
  8538  00185A  B4D8               	btfsc	status,2,c
  8539  00185C  D002               	goto	l7339
  8540                           
  8541                           ;io.c: 344: {
  8542                           ;io.c: 345: Button_Contact_Counter_LF--;
  8543  00185E  060A               	decf	_Button_Contact_Counter_LF,f,c
  8544                           
  8545                           ;io.c: 347: }
  8546                           
  8547                           ;io.c: 346: break;
  8548  001860  D049               	goto	l7363
  8549  001862                     l7339:
  8550                           
  8551                           ;io.c: 348: else {SETxAPIxVAL(36, 0);}
  8552  001862  0E00               	movlw	0
  8553  001864  0100               	movlb	0	; () banked
  8554  001866  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8555  001868  0E00               	movlw	0
  8556  00186A  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  8557  00186C  0E24               	movlw	36
  8558  00186E  EC11  F01D         	call	_SETxAPIxVAL
  8559                           
  8560                           ;io.c: 352: }
  8561                           
  8562                           ;io.c: 351: default : break;
  8563                           
  8564                           ;io.c: 349: break;
  8565  001872  D040               	goto	l7363
  8566  001874                     l7343:
  8567  001874  B881               	btfsc	3969,4,c	;volatile
  8568  001876  D002               	goto	u7110
  8569  001878  0E01               	movlw	1
  8570  00187A  D001               	goto	u7120
  8571  00187C                     u7110:
  8572  00187C  0E00               	movlw	0
  8573  00187E                     u7120:
  8574  00187E  0100               	movlb	0	; () banked
  8575  001880  6F96               	movwf	??_Debounce_Inputs& (0+255),b
  8576  001882  6B97               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8577                           
  8578                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8579                           ; Switch size 1, requested type "space"
  8580                           ; Number of cases is 1, Range of values is 0 to 0
  8581                           ; switch strategies available:
  8582                           ; Name         Instructions Cycles
  8583                           ; simple_byte            4     3 (average)
  8584                           ;	Chosen strategy is simple_byte
  8585  001884  0100               	movlb	0	; () banked
  8586  001886  5197               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8587  001888  0A00               	xorlw	0	; case 0
  8588  00188A  A4D8               	btfss	status,2,c
  8589  00188C  D033               	goto	l7363
  8590                           
  8591                           ; BSR set to: 0
  8592                           ; Switch size 1, requested type "space"
  8593                           ; Number of cases is 2, Range of values is 0 to 1
  8594                           ; switch strategies available:
  8595                           ; Name         Instructions Cycles
  8596                           ; simple_byte            7     4 (average)
  8597                           ;	Chosen strategy is simple_byte
  8598  00188E  0100               	movlb	0	; () banked
  8599  001890  5196               	movf	??_Debounce_Inputs& (0+255),w,b
  8600  001892  0A00               	xorlw	0	; case 0
  8601  001894  B4D8               	btfsc	status,2,c
  8602  001896  D7E0               	goto	l7333
  8603  001898  0A01               	xorlw	1	; case 1
  8604  00189A  B4D8               	btfsc	status,2,c
  8605  00189C  D7C1               	goto	l7325
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;io.c: 355: switch(!PORTBbits.RB3)
  8609  00189E  D02A               	goto	l7363
  8610  0018A0                     l7345:
  8611                           
  8612                           ; BSR set to: 0
  8613  0018A0  500C               	movf	_Button_Contact_Counter_RB,w,c
  8614  0018A2  0100               	movlb	0	; () banked
  8615  0018A4  6F96               	movwf	??_Debounce_Inputs& (0+255),b
  8616  0018A6  6B97               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8617  0018A8  0E1B               	movlw	27
  8618  0018AA  ECD2  F01D         	call	_GETxAPIxVAL
  8619  0018AE  0100               	movlb	0	; () banked
  8620  0018B0  5196               	movf	??_Debounce_Inputs& (0+255),w,b
  8621  0018B2  0100               	movlb	0	; () banked
  8622  0018B4  5D8D               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8623  0018B6  0100               	movlb	0	; () banked
  8624  0018B8  5197               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8625  0018BA  0100               	movlb	0	; () banked
  8626  0018BC  598E               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8627  0018BE  A0D8               	btfss	status,0,c
  8628  0018C0  D002               	goto	l7351
  8629                           
  8630                           ; BSR set to: 0
  8631                           ;io.c: 358: {
  8632                           ;io.c: 359: Button_Contact_Counter_RB++;
  8633  0018C2  2A0C               	incf	_Button_Contact_Counter_RB,f,c
  8634                           
  8635                           ; BSR set to: 0
  8636                           ;io.c: 361: }
  8637                           
  8638                           ;io.c: 360: break;
  8639  0018C4  D057               	goto	l7383
  8640  0018C6                     l7351:
  8641                           
  8642                           ; BSR set to: 0
  8643                           ;io.c: 362: else {SETxAPIxVAL(37, 1); }
  8644  0018C6  0E00               	movlw	0
  8645  0018C8  0100               	movlb	0	; () banked
  8646  0018CA  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8647  0018CC  0E01               	movlw	1
  8648  0018CE  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  8649  0018D0  0E25               	movlw	37
  8650  0018D2  EC11  F01D         	call	_SETxAPIxVAL
  8651                           
  8652                           ;io.c: 363: break;
  8653  0018D6  D04E               	goto	l7383
  8654  0018D8                     l7353:
  8655  0018D8  500C               	movf	_Button_Contact_Counter_RB,w,c
  8656  0018DA  B4D8               	btfsc	status,2,c
  8657  0018DC  D002               	goto	l7359
  8658                           
  8659                           ;io.c: 366: {
  8660                           ;io.c: 367: Button_Contact_Counter_RB--;
  8661  0018DE  060C               	decf	_Button_Contact_Counter_RB,f,c
  8662                           
  8663                           ;io.c: 369: }
  8664                           
  8665                           ;io.c: 368: break;
  8666  0018E0  D049               	goto	l7383
  8667  0018E2                     l7359:
  8668                           
  8669                           ;io.c: 370: else {SETxAPIxVAL(37, 0);}
  8670  0018E2  0E00               	movlw	0
  8671  0018E4  0100               	movlb	0	; () banked
  8672  0018E6  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8673  0018E8  0E00               	movlw	0
  8674  0018EA  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  8675  0018EC  0E25               	movlw	37
  8676  0018EE  EC11  F01D         	call	_SETxAPIxVAL
  8677                           
  8678                           ;io.c: 374: }
  8679                           
  8680                           ;io.c: 373: default : break;
  8681                           
  8682                           ;io.c: 371: break;
  8683  0018F2  D040               	goto	l7383
  8684  0018F4                     l7363:
  8685  0018F4  B681               	btfsc	3969,3,c	;volatile
  8686  0018F6  D002               	goto	u7150
  8687  0018F8  0E01               	movlw	1
  8688  0018FA  D001               	goto	u7160
  8689  0018FC                     u7150:
  8690  0018FC  0E00               	movlw	0
  8691  0018FE                     u7160:
  8692  0018FE  0100               	movlb	0	; () banked
  8693  001900  6F96               	movwf	??_Debounce_Inputs& (0+255),b
  8694  001902  6B97               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8695                           
  8696                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8697                           ; Switch size 1, requested type "space"
  8698                           ; Number of cases is 1, Range of values is 0 to 0
  8699                           ; switch strategies available:
  8700                           ; Name         Instructions Cycles
  8701                           ; simple_byte            4     3 (average)
  8702                           ;	Chosen strategy is simple_byte
  8703  001904  0100               	movlb	0	; () banked
  8704  001906  5197               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8705  001908  0A00               	xorlw	0	; case 0
  8706  00190A  A4D8               	btfss	status,2,c
  8707  00190C  D033               	goto	l7383
  8708                           
  8709                           ; BSR set to: 0
  8710                           ; Switch size 1, requested type "space"
  8711                           ; Number of cases is 2, Range of values is 0 to 1
  8712                           ; switch strategies available:
  8713                           ; Name         Instructions Cycles
  8714                           ; simple_byte            7     4 (average)
  8715                           ;	Chosen strategy is simple_byte
  8716  00190E  0100               	movlb	0	; () banked
  8717  001910  5196               	movf	??_Debounce_Inputs& (0+255),w,b
  8718  001912  0A00               	xorlw	0	; case 0
  8719  001914  B4D8               	btfsc	status,2,c
  8720  001916  D7E0               	goto	l7353
  8721  001918  0A01               	xorlw	1	; case 1
  8722  00191A  B4D8               	btfsc	status,2,c
  8723  00191C  D7C1               	goto	l7345
  8724                           
  8725                           ; BSR set to: 0
  8726                           ;io.c: 377: switch(!PORTBbits.RB2)
  8727  00191E  D02A               	goto	l7383
  8728  001920                     l7365:
  8729                           
  8730                           ; BSR set to: 0
  8731  001920  500D               	movf	_Button_Contact_Counter_RF,w,c
  8732  001922  0100               	movlb	0	; () banked
  8733  001924  6F96               	movwf	??_Debounce_Inputs& (0+255),b
  8734  001926  6B97               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8735  001928  0E1B               	movlw	27
  8736  00192A  ECD2  F01D         	call	_GETxAPIxVAL
  8737  00192E  0100               	movlb	0	; () banked
  8738  001930  5196               	movf	??_Debounce_Inputs& (0+255),w,b
  8739  001932  0100               	movlb	0	; () banked
  8740  001934  5D8D               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8741  001936  0100               	movlb	0	; () banked
  8742  001938  5197               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8743  00193A  0100               	movlb	0	; () banked
  8744  00193C  598E               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8745  00193E  A0D8               	btfss	status,0,c
  8746  001940  D002               	goto	l7371
  8747                           
  8748                           ; BSR set to: 0
  8749                           ;io.c: 380: {
  8750                           ;io.c: 381: Button_Contact_Counter_RF++;
  8751  001942  2A0D               	incf	_Button_Contact_Counter_RF,f,c
  8752                           
  8753                           ; BSR set to: 0
  8754                           ;io.c: 383: }
  8755                           
  8756                           ;io.c: 382: break;
  8757  001944  D057               	goto	l7403
  8758  001946                     l7371:
  8759                           
  8760                           ; BSR set to: 0
  8761                           ;io.c: 384: else {SETxAPIxVAL(38, 1); }
  8762  001946  0E00               	movlw	0
  8763  001948  0100               	movlb	0	; () banked
  8764  00194A  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8765  00194C  0E01               	movlw	1
  8766  00194E  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  8767  001950  0E26               	movlw	38
  8768  001952  EC11  F01D         	call	_SETxAPIxVAL
  8769                           
  8770                           ;io.c: 385: break;
  8771  001956  D04E               	goto	l7403
  8772  001958                     l7373:
  8773  001958  500D               	movf	_Button_Contact_Counter_RF,w,c
  8774  00195A  B4D8               	btfsc	status,2,c
  8775  00195C  D002               	goto	l7379
  8776                           
  8777                           ;io.c: 388: {
  8778                           ;io.c: 389: Button_Contact_Counter_RF--;
  8779  00195E  060D               	decf	_Button_Contact_Counter_RF,f,c
  8780                           
  8781                           ;io.c: 391: }
  8782                           
  8783                           ;io.c: 390: break;
  8784  001960  D049               	goto	l7403
  8785  001962                     l7379:
  8786                           
  8787                           ;io.c: 392: else {SETxAPIxVAL(38, 0);}
  8788  001962  0E00               	movlw	0
  8789  001964  0100               	movlb	0	; () banked
  8790  001966  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8791  001968  0E00               	movlw	0
  8792  00196A  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  8793  00196C  0E26               	movlw	38
  8794  00196E  EC11  F01D         	call	_SETxAPIxVAL
  8795                           
  8796                           ;io.c: 396: }
  8797                           
  8798                           ;io.c: 395: default : break;
  8799                           
  8800                           ;io.c: 393: break;
  8801  001972  D040               	goto	l7403
  8802  001974                     l7383:
  8803  001974  B481               	btfsc	3969,2,c	;volatile
  8804  001976  D002               	goto	u7190
  8805  001978  0E01               	movlw	1
  8806  00197A  D001               	goto	u7200
  8807  00197C                     u7190:
  8808  00197C  0E00               	movlw	0
  8809  00197E                     u7200:
  8810  00197E  0100               	movlb	0	; () banked
  8811  001980  6F96               	movwf	??_Debounce_Inputs& (0+255),b
  8812  001982  6B97               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8813                           
  8814                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8815                           ; Switch size 1, requested type "space"
  8816                           ; Number of cases is 1, Range of values is 0 to 0
  8817                           ; switch strategies available:
  8818                           ; Name         Instructions Cycles
  8819                           ; simple_byte            4     3 (average)
  8820                           ;	Chosen strategy is simple_byte
  8821  001984  0100               	movlb	0	; () banked
  8822  001986  5197               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8823  001988  0A00               	xorlw	0	; case 0
  8824  00198A  A4D8               	btfss	status,2,c
  8825  00198C  D033               	goto	l7403
  8826                           
  8827                           ; BSR set to: 0
  8828                           ; Switch size 1, requested type "space"
  8829                           ; Number of cases is 2, Range of values is 0 to 1
  8830                           ; switch strategies available:
  8831                           ; Name         Instructions Cycles
  8832                           ; simple_byte            7     4 (average)
  8833                           ;	Chosen strategy is simple_byte
  8834  00198E  0100               	movlb	0	; () banked
  8835  001990  5196               	movf	??_Debounce_Inputs& (0+255),w,b
  8836  001992  0A00               	xorlw	0	; case 0
  8837  001994  B4D8               	btfsc	status,2,c
  8838  001996  D7E0               	goto	l7373
  8839  001998  0A01               	xorlw	1	; case 1
  8840  00199A  B4D8               	btfsc	status,2,c
  8841  00199C  D7C1               	goto	l7365
  8842                           
  8843                           ; BSR set to: 0
  8844                           ;io.c: 399: switch(PORTCbits.RC1)
  8845  00199E  D02A               	goto	l7403
  8846  0019A0                     l7385:
  8847  0019A0  5013               	movf	_Reed_Contact_LMU_Counter,w,c
  8848  0019A2  0100               	movlb	0	; () banked
  8849  0019A4  6F96               	movwf	??_Debounce_Inputs& (0+255),b
  8850  0019A6  6B97               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8851  0019A8  0E1B               	movlw	27
  8852  0019AA  ECD2  F01D         	call	_GETxAPIxVAL
  8853  0019AE  0100               	movlb	0	; () banked
  8854  0019B0  5196               	movf	??_Debounce_Inputs& (0+255),w,b
  8855  0019B2  0100               	movlb	0	; () banked
  8856  0019B4  5D8D               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8857  0019B6  0100               	movlb	0	; () banked
  8858  0019B8  5197               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8859  0019BA  0100               	movlb	0	; () banked
  8860  0019BC  598E               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8861  0019BE  A0D8               	btfss	status,0,c
  8862  0019C0  D002               	goto	l7391
  8863                           
  8864                           ; BSR set to: 0
  8865                           ;io.c: 402: {
  8866                           ;io.c: 403: Reed_Contact_LMU_Counter++;
  8867  0019C2  2A13               	incf	_Reed_Contact_LMU_Counter,f,c
  8868                           
  8869                           ; BSR set to: 0
  8870                           ;io.c: 405: }
  8871                           
  8872                           ;io.c: 404: break;
  8873  0019C4  D04D               	goto	l7423
  8874  0019C6                     l7391:
  8875                           
  8876                           ; BSR set to: 0
  8877                           ;io.c: 406: else {SETxAPIxVAL(41, 1); }
  8878  0019C6  0E00               	movlw	0
  8879  0019C8  0100               	movlb	0	; () banked
  8880  0019CA  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8881  0019CC  0E01               	movlw	1
  8882  0019CE  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  8883  0019D0  0E29               	movlw	41
  8884  0019D2  EC11  F01D         	call	_SETxAPIxVAL
  8885                           
  8886                           ;io.c: 407: break;
  8887  0019D6  D044               	goto	l7423
  8888  0019D8                     l7393:
  8889  0019D8  5013               	movf	_Reed_Contact_LMU_Counter,w,c
  8890  0019DA  B4D8               	btfsc	status,2,c
  8891  0019DC  D002               	goto	l7399
  8892                           
  8893                           ;io.c: 410: {
  8894                           ;io.c: 411: Reed_Contact_LMU_Counter--;
  8895  0019DE  0613               	decf	_Reed_Contact_LMU_Counter,f,c
  8896                           
  8897                           ;io.c: 413: }
  8898                           
  8899                           ;io.c: 412: break;
  8900  0019E0  D03F               	goto	l7423
  8901  0019E2                     l7399:
  8902                           
  8903                           ;io.c: 414: else {SETxAPIxVAL(41, 0);}
  8904  0019E2  0E00               	movlw	0
  8905  0019E4  0100               	movlb	0	; () banked
  8906  0019E6  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8907  0019E8  0E00               	movlw	0
  8908  0019EA  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  8909  0019EC  0E29               	movlw	41
  8910  0019EE  EC11  F01D         	call	_SETxAPIxVAL
  8911                           
  8912                           ;io.c: 418: }
  8913                           
  8914                           ;io.c: 417: default : break;
  8915                           
  8916                           ;io.c: 415: break;
  8917  0019F2  D036               	goto	l7423
  8918  0019F4                     l7403:
  8919  0019F4  A282               	btfss	3970,1,c	;volatile
  8920  0019F6  D002               	goto	u7230
  8921  0019F8  0E01               	movlw	1
  8922  0019FA  D001               	goto	u7236
  8923  0019FC                     u7230:
  8924  0019FC  0E00               	movlw	0
  8925  0019FE                     u7236:
  8926                           
  8927                           ; Switch size 1, requested type "space"
  8928                           ; Number of cases is 2, Range of values is 0 to 1
  8929                           ; switch strategies available:
  8930                           ; Name         Instructions Cycles
  8931                           ; simple_byte            7     4 (average)
  8932                           ;	Chosen strategy is simple_byte
  8933  0019FE  0A00               	xorlw	0	; case 0
  8934  001A00  B4D8               	btfsc	status,2,c
  8935  001A02  D7CE               	goto	l7385
  8936  001A04  0A01               	xorlw	1	; case 1
  8937  001A06  B4D8               	btfsc	status,2,c
  8938  001A08  D7E7               	goto	l7393
  8939                           
  8940                           ;io.c: 421: switch(PORTDbits.RD4)
  8941  001A0A  D02A               	goto	l7423
  8942  001A0C                     l7405:
  8943  001A0C  5012               	movf	_Reed_Contact_LMD_Counter,w,c
  8944  001A0E  0100               	movlb	0	; () banked
  8945  001A10  6F96               	movwf	??_Debounce_Inputs& (0+255),b
  8946  001A12  6B97               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  8947  001A14  0E1B               	movlw	27
  8948  001A16  ECD2  F01D         	call	_GETxAPIxVAL
  8949  001A1A  0100               	movlb	0	; () banked
  8950  001A1C  5196               	movf	??_Debounce_Inputs& (0+255),w,b
  8951  001A1E  0100               	movlb	0	; () banked
  8952  001A20  5D8D               	subwf	?_GETxAPIxVAL& (0+255),w,b
  8953  001A22  0100               	movlb	0	; () banked
  8954  001A24  5197               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  8955  001A26  0100               	movlb	0	; () banked
  8956  001A28  598E               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  8957  001A2A  A0D8               	btfss	status,0,c
  8958  001A2C  D002               	goto	l7411
  8959                           
  8960                           ; BSR set to: 0
  8961                           ;io.c: 424: {
  8962                           ;io.c: 425: Reed_Contact_LMD_Counter++;
  8963  001A2E  2A12               	incf	_Reed_Contact_LMD_Counter,f,c
  8964                           
  8965                           ; BSR set to: 0
  8966                           ;io.c: 427: }
  8967                           
  8968                           ;io.c: 426: break;
  8969  001A30  D04D               	goto	l7443
  8970  001A32                     l7411:
  8971                           
  8972                           ; BSR set to: 0
  8973                           ;io.c: 428: else {SETxAPIxVAL(42, 1); }
  8974  001A32  0E00               	movlw	0
  8975  001A34  0100               	movlb	0	; () banked
  8976  001A36  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  8977  001A38  0E01               	movlw	1
  8978  001A3A  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  8979  001A3C  0E2A               	movlw	42
  8980  001A3E  EC11  F01D         	call	_SETxAPIxVAL
  8981                           
  8982                           ;io.c: 429: break;
  8983  001A42  D044               	goto	l7443
  8984  001A44                     l7413:
  8985  001A44  5012               	movf	_Reed_Contact_LMD_Counter,w,c
  8986  001A46  B4D8               	btfsc	status,2,c
  8987  001A48  D002               	goto	l7419
  8988                           
  8989                           ;io.c: 432: {
  8990                           ;io.c: 433: Reed_Contact_LMD_Counter--;
  8991  001A4A  0612               	decf	_Reed_Contact_LMD_Counter,f,c
  8992                           
  8993                           ;io.c: 435: }
  8994                           
  8995                           ;io.c: 434: break;
  8996  001A4C  D03F               	goto	l7443
  8997  001A4E                     l7419:
  8998                           
  8999                           ;io.c: 436: else {SETxAPIxVAL(42, 0);}
  9000  001A4E  0E00               	movlw	0
  9001  001A50  0100               	movlb	0	; () banked
  9002  001A52  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9003  001A54  0E00               	movlw	0
  9004  001A56  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  9005  001A58  0E2A               	movlw	42
  9006  001A5A  EC11  F01D         	call	_SETxAPIxVAL
  9007                           
  9008                           ;io.c: 440: }
  9009                           
  9010                           ;io.c: 439: default : break;
  9011                           
  9012                           ;io.c: 437: break;
  9013  001A5E  D036               	goto	l7443
  9014  001A60                     l7423:
  9015  001A60  A883               	btfss	3971,4,c	;volatile
  9016  001A62  D002               	goto	u7260
  9017  001A64  0E01               	movlw	1
  9018  001A66  D001               	goto	u7266
  9019  001A68                     u7260:
  9020  001A68  0E00               	movlw	0
  9021  001A6A                     u7266:
  9022                           
  9023                           ; Switch size 1, requested type "space"
  9024                           ; Number of cases is 2, Range of values is 0 to 1
  9025                           ; switch strategies available:
  9026                           ; Name         Instructions Cycles
  9027                           ; simple_byte            7     4 (average)
  9028                           ;	Chosen strategy is simple_byte
  9029  001A6A  0A00               	xorlw	0	; case 0
  9030  001A6C  B4D8               	btfsc	status,2,c
  9031  001A6E  D7CE               	goto	l7405
  9032  001A70  0A01               	xorlw	1	; case 1
  9033  001A72  B4D8               	btfsc	status,2,c
  9034  001A74  D7E7               	goto	l7413
  9035                           
  9036                           ;io.c: 443: switch(PORTEbits.RE1)
  9037  001A76  D02A               	goto	l7443
  9038  001A78                     l7425:
  9039  001A78  5017               	movf	_Reed_Contact_RMU_Counter,w,c
  9040  001A7A  0100               	movlb	0	; () banked
  9041  001A7C  6F96               	movwf	??_Debounce_Inputs& (0+255),b
  9042  001A7E  6B97               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9043  001A80  0E1B               	movlw	27
  9044  001A82  ECD2  F01D         	call	_GETxAPIxVAL
  9045  001A86  0100               	movlb	0	; () banked
  9046  001A88  5196               	movf	??_Debounce_Inputs& (0+255),w,b
  9047  001A8A  0100               	movlb	0	; () banked
  9048  001A8C  5D8D               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9049  001A8E  0100               	movlb	0	; () banked
  9050  001A90  5197               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9051  001A92  0100               	movlb	0	; () banked
  9052  001A94  598E               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9053  001A96  A0D8               	btfss	status,0,c
  9054  001A98  D002               	goto	l7431
  9055                           
  9056                           ; BSR set to: 0
  9057                           ;io.c: 446: {
  9058                           ;io.c: 447: Reed_Contact_RMU_Counter++;
  9059  001A9A  2A17               	incf	_Reed_Contact_RMU_Counter,f,c
  9060                           
  9061                           ; BSR set to: 0
  9062                           ;io.c: 449: }
  9063                           
  9064                           ;io.c: 448: break;
  9065  001A9C  D04D               	goto	l7463
  9066  001A9E                     l7431:
  9067                           
  9068                           ; BSR set to: 0
  9069                           ;io.c: 450: else {SETxAPIxVAL(43, 1); }
  9070  001A9E  0E00               	movlw	0
  9071  001AA0  0100               	movlb	0	; () banked
  9072  001AA2  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9073  001AA4  0E01               	movlw	1
  9074  001AA6  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  9075  001AA8  0E2B               	movlw	43
  9076  001AAA  EC11  F01D         	call	_SETxAPIxVAL
  9077                           
  9078                           ;io.c: 451: break;
  9079  001AAE  D044               	goto	l7463
  9080  001AB0                     l7433:
  9081  001AB0  5017               	movf	_Reed_Contact_RMU_Counter,w,c
  9082  001AB2  B4D8               	btfsc	status,2,c
  9083  001AB4  D002               	goto	l7439
  9084                           
  9085                           ;io.c: 454: {
  9086                           ;io.c: 455: Reed_Contact_RMU_Counter--;
  9087  001AB6  0617               	decf	_Reed_Contact_RMU_Counter,f,c
  9088                           
  9089                           ;io.c: 457: }
  9090                           
  9091                           ;io.c: 456: break;
  9092  001AB8  D03F               	goto	l7463
  9093  001ABA                     l7439:
  9094                           
  9095                           ;io.c: 458: else {SETxAPIxVAL(43, 0);}
  9096  001ABA  0E00               	movlw	0
  9097  001ABC  0100               	movlb	0	; () banked
  9098  001ABE  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9099  001AC0  0E00               	movlw	0
  9100  001AC2  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  9101  001AC4  0E2B               	movlw	43
  9102  001AC6  EC11  F01D         	call	_SETxAPIxVAL
  9103                           
  9104                           ;io.c: 462: }
  9105                           
  9106                           ;io.c: 461: default : break;
  9107                           
  9108                           ;io.c: 459: break;
  9109  001ACA  D036               	goto	l7463
  9110  001ACC                     l7443:
  9111  001ACC  A284               	btfss	3972,1,c	;volatile
  9112  001ACE  D002               	goto	u7290
  9113  001AD0  0E01               	movlw	1
  9114  001AD2  D001               	goto	u7296
  9115  001AD4                     u7290:
  9116  001AD4  0E00               	movlw	0
  9117  001AD6                     u7296:
  9118                           
  9119                           ; Switch size 1, requested type "space"
  9120                           ; Number of cases is 2, Range of values is 0 to 1
  9121                           ; switch strategies available:
  9122                           ; Name         Instructions Cycles
  9123                           ; simple_byte            7     4 (average)
  9124                           ;	Chosen strategy is simple_byte
  9125  001AD6  0A00               	xorlw	0	; case 0
  9126  001AD8  B4D8               	btfsc	status,2,c
  9127  001ADA  D7CE               	goto	l7425
  9128  001ADC  0A01               	xorlw	1	; case 1
  9129  001ADE  B4D8               	btfsc	status,2,c
  9130  001AE0  D7E7               	goto	l7433
  9131                           
  9132                           ;io.c: 465: switch(PORTEbits.RE0)
  9133  001AE2  D02A               	goto	l7463
  9134  001AE4                     l7445:
  9135  001AE4  5016               	movf	_Reed_Contact_RMD_Counter,w,c
  9136  001AE6  0100               	movlb	0	; () banked
  9137  001AE8  6F96               	movwf	??_Debounce_Inputs& (0+255),b
  9138  001AEA  6B97               	clrf	(??_Debounce_Inputs+1)& (0+255),b
  9139  001AEC  0E1B               	movlw	27
  9140  001AEE  ECD2  F01D         	call	_GETxAPIxVAL
  9141  001AF2  0100               	movlb	0	; () banked
  9142  001AF4  5196               	movf	??_Debounce_Inputs& (0+255),w,b
  9143  001AF6  0100               	movlb	0	; () banked
  9144  001AF8  5D8D               	subwf	?_GETxAPIxVAL& (0+255),w,b
  9145  001AFA  0100               	movlb	0	; () banked
  9146  001AFC  5197               	movf	(??_Debounce_Inputs+1)& (0+255),w,b
  9147  001AFE  0100               	movlb	0	; () banked
  9148  001B00  598E               	subwfb	(?_GETxAPIxVAL+1)& (0+255),w,b
  9149  001B02  A0D8               	btfss	status,0,c
  9150  001B04  D002               	goto	l7451
  9151                           
  9152                           ; BSR set to: 0
  9153                           ;io.c: 468: {
  9154                           ;io.c: 469: Reed_Contact_RMD_Counter++;
  9155  001B06  2A16               	incf	_Reed_Contact_RMD_Counter,f,c
  9156                           
  9157                           ; BSR set to: 0
  9158                           ;io.c: 471: }
  9159                           
  9160                           ;io.c: 470: break;
  9161  001B08  0012               	return	
  9162  001B0A                     l7451:
  9163                           
  9164                           ; BSR set to: 0
  9165                           ;io.c: 472: else {SETxAPIxVAL(44, 1); }
  9166  001B0A  0E00               	movlw	0
  9167  001B0C  0100               	movlb	0	; () banked
  9168  001B0E  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9169  001B10  0E01               	movlw	1
  9170  001B12  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  9171  001B14  0E2C               	movlw	44
  9172  001B16  EC11  F01D         	call	_SETxAPIxVAL
  9173                           
  9174                           ;io.c: 473: break;
  9175  001B1A  0012               	return	
  9176  001B1C                     l7453:
  9177  001B1C  5016               	movf	_Reed_Contact_RMD_Counter,w,c
  9178  001B1E  B4D8               	btfsc	status,2,c
  9179  001B20  D002               	goto	l7459
  9180                           
  9181                           ;io.c: 476: {
  9182                           ;io.c: 477: Reed_Contact_RMD_Counter--;
  9183  001B22  0616               	decf	_Reed_Contact_RMD_Counter,f,c
  9184                           
  9185                           ;io.c: 479: }
  9186                           
  9187                           ;io.c: 478: break;
  9188  001B24  0012               	return	
  9189  001B26                     l7459:
  9190                           
  9191                           ;io.c: 480: else {SETxAPIxVAL(44, 0);}
  9192  001B26  0E00               	movlw	0
  9193  001B28  0100               	movlb	0	; () banked
  9194  001B2A  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
  9195  001B2C  0E00               	movlw	0
  9196  001B2E  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
  9197  001B30  0E2C               	movlw	44
  9198  001B32  EC11  F01D         	call	_SETxAPIxVAL
  9199                           
  9200                           ;io.c: 484: }
  9201                           
  9202                           ;io.c: 483: default : break;
  9203                           
  9204                           ;io.c: 481: break;
  9205  001B36  0012               	return	
  9206  001B38                     l7463:
  9207  001B38  A084               	btfss	3972,0,c	;volatile
  9208  001B3A  D002               	goto	u7320
  9209  001B3C  0E01               	movlw	1
  9210  001B3E  D001               	goto	u7326
  9211  001B40                     u7320:
  9212  001B40  0E00               	movlw	0
  9213  001B42                     u7326:
  9214                           
  9215                           ; Switch size 1, requested type "space"
  9216                           ; Number of cases is 2, Range of values is 0 to 1
  9217                           ; switch strategies available:
  9218                           ; Name         Instructions Cycles
  9219                           ; simple_byte            7     4 (average)
  9220                           ;	Chosen strategy is simple_byte
  9221  001B42  0A00               	xorlw	0	; case 0
  9222  001B44  B4D8               	btfsc	status,2,c
  9223  001B46  D7CE               	goto	l7445
  9224  001B48  0A01               	xorlw	1	; case 1
  9225  001B4A  A4D8               	btfss	status,2,c
  9226  001B4C  0012               	return	
  9227  001B4E  D7E6               	goto	l7453
  9228  001B50                     __end_of_Debounce_Inputs:
  9229                           	opt stack 0
  9230                           tblptru	equ	0xFF8
  9231                           tblptrh	equ	0xFF7
  9232                           tblptrl	equ	0xFF6
  9233                           tablat	equ	0xFF5
  9234                           intcon	equ	0xFF2
  9235                           postinc0	equ	0xFEE
  9236                           wreg	equ	0xFE8
  9237                           postdec1	equ	0xFE5
  9238                           fsr1h	equ	0xFE2
  9239                           fsr1l	equ	0xFE1
  9240                           status	equ	0xFD8
  9241                           
  9242 ;; *************** function _SetDCPWM1 *****************
  9243 ;; Defined at:
  9244 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\pic18\plib\PWM\pw1setdc.c"
  9245 ;; Parameters:    Size  Location     Type
  9246 ;;  dutycycle       2    3[BANK0 ] unsigned int 
  9247 ;; Auto vars:     Size  Location     Type
  9248 ;;  DCycle          2    7[BANK0 ] struct PWMDC
  9249 ;; Return value:  Size  Location     Type
  9250 ;;                  1    wreg      void 
  9251 ;; Registers used:
  9252 ;;		wreg, status,2, status,0
  9253 ;; Tracked objects:
  9254 ;;		On entry : 0/0
  9255 ;;		On exit  : 0/0
  9256 ;;		Unchanged: 0/0
  9257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9258 ;;      Params:         0       2       0       0       0       0       0       0       0
  9259 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9260 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9261 ;;      Totals:         0       6       0       0       0       0       0       0       0
  9262 ;;Total ram usage:        6 bytes
  9263 ;; Hardware stack levels used:    1
  9264 ;; Hardware stack levels required when called:    3
  9265 ;; This function calls:
  9266 ;;		Nothing
  9267 ;; This function is called by:
  9268 ;;		_Debounce_Inputs
  9269 ;; This function uses a non-reentrant model
  9270 ;;
  9271                           
  9272                           	psect	text17
  9273  0039DE                     __ptext17:
  9274                           	opt stack 0
  9275  0039DE                     _SetDCPWM1:
  9276                           	opt stack 25
  9277                           
  9278                           ;incstack = 0
  9279  0039DE  C090  F092         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  9280  0039E2  C091  F093         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  9281  0039E6  0E06               	movlw	6
  9282  0039E8                     u6805:
  9283  0039E8  90D8               	bcf	status,0,c
  9284  0039EA  0100               	movlb	0	; () banked
  9285  0039EC  3792               	rlcf	??_SetDCPWM1& (0+255),f,b
  9286  0039EE  3793               	rlcf	(??_SetDCPWM1+1)& (0+255),f,b
  9287  0039F0  2EE8               	decfsz	wreg,f,c
  9288  0039F2  D7FA               	goto	u6805
  9289  0039F4  C092  F094         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  9290  0039F8  C093  F095         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  9291                           
  9292                           ; BSR set to: 0
  9293  0039FC  C095  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  9294  003A00  C094  F092         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  9295  003A04  0100               	movlb	0	; () banked
  9296  003A06  90D8               	bcf	status,0,c
  9297  003A08  3392               	rrcf	??_SetDCPWM1& (0+255),f,b
  9298  003A0A  0100               	movlb	0	; () banked
  9299  003A0C  90D8               	bcf	status,0,c
  9300  003A0E  3392               	rrcf	??_SetDCPWM1& (0+255),f,b
  9301  003A10  0E30               	movlw	48
  9302  003A12  0100               	movlb	0	; () banked
  9303  003A14  1792               	andwf	??_SetDCPWM1& (0+255),f,b
  9304  003A16  50BD               	movf	4029,w,c	;volatile
  9305  003A18  0BCF               	andlw	207
  9306  003A1A  0100               	movlb	0	; () banked
  9307  003A1C  1192               	iorwf	??_SetDCPWM1& (0+255),w,b
  9308  003A1E  6EBD               	movwf	4029,c	;volatile
  9309                           
  9310                           ; BSR set to: 0
  9311  003A20  0012               	return		;funcret
  9312  003A22                     __end_of_SetDCPWM1:
  9313                           	opt stack 0
  9314                           tblptru	equ	0xFF8
  9315                           tblptrh	equ	0xFF7
  9316                           tblptrl	equ	0xFF6
  9317                           tablat	equ	0xFF5
  9318                           intcon	equ	0xFF2
  9319                           postinc0	equ	0xFEE
  9320                           wreg	equ	0xFE8
  9321                           postdec1	equ	0xFE5
  9322                           fsr1h	equ	0xFE2
  9323                           fsr1l	equ	0xFE1
  9324                           status	equ	0xFD8
  9325                           
  9326 ;; *************** function _READxRECEIVEDxMESSAGE *****************
  9327 ;; Defined at:
  9328 ;;		line 32 in file "../terminal.c"
  9329 ;; Parameters:    Size  Location     Type
  9330 ;;		None
  9331 ;; Auto vars:     Size  Location     Type
  9332 ;;		None
  9333 ;; Return value:  Size  Location     Type
  9334 ;;                  1    wreg      void 
  9335 ;; Registers used:
  9336 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9337 ;; Tracked objects:
  9338 ;;		On entry : 0/0
  9339 ;;		On exit  : 0/0
  9340 ;;		Unchanged: 0/0
  9341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9342 ;;      Params:         0       0       0       0       0       0       0       0       0
  9343 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9344 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9345 ;;      Totals:         0       4       0       0       0       0       0       0       0
  9346 ;;Total ram usage:        4 bytes
  9347 ;; Hardware stack levels used:    1
  9348 ;; Hardware stack levels required when called:    7
  9349 ;; This function calls:
  9350 ;;		_EUSART1_Read
  9351 ;;		_TranslateMessage
  9352 ;;		_printf
  9353 ;; This function is called by:
  9354 ;;		_main
  9355 ;; This function uses a non-reentrant model
  9356 ;;
  9357                           
  9358                           	psect	text18
  9359  0026EA                     __ptext18:
  9360                           	opt stack 0
  9361  0026EA                     _READxRECEIVEDxMESSAGE:
  9362                           	opt stack 23
  9363                           
  9364                           ;terminal.c: 34: if ((eusart1RxCount) > 0){
  9365                           
  9366                           ; BSR set to: 0
  9367                           ;incstack = 0
  9368  0026EA  501D               	movf	_eusart1RxCount,w,c	;volatile
  9369  0026EC  B4D8               	btfsc	status,2,c
  9370  0026EE  D09C               	goto	l8519
  9371                           
  9372                           ;terminal.c: 37: Received_Data = EUSART1_Read();
  9373  0026F0  EC33  F01D         	call	_EUSART1_Read	;wreg free
  9374  0026F4  0100               	movlb	0	; () banked
  9375  0026F6  6F77               	movwf	_Received_Data& (0+255),b
  9376                           
  9377                           ;terminal.c: 39: switch (RxSwitch){
  9378  0026F8  D08B               	goto	l8517
  9379  0026FA                     l8465:
  9380                           
  9381                           ; BSR set to: 0
  9382                           ;terminal.c: 41: pData = &Data[0];
  9383  0026FA  0E83               	movlw	low _Data
  9384  0026FC  0100               	movlb	0	; () banked
  9385  0026FE  6F72               	movwf	_pData& (0+255),b
  9386  002700  0E00               	movlw	high _Data
  9387  002702  0100               	movlb	0	; () banked
  9388  002704  6F73               	movwf	(_pData+1)& (0+255),b
  9389                           
  9390                           ; BSR set to: 0
  9391                           ;terminal.c: 42: pLen = &Data[DataLen - 1];
  9392  002706  0EFF               	movlw	255
  9393  002708  0100               	movlb	0	; () banked
  9394  00270A  6FAE               	movwf	??_READxRECEIVEDxMESSAGE& (0+255),b
  9395  00270C  0EFF               	movlw	255
  9396  00270E  0100               	movlb	0	; () banked
  9397  002710  6FAF               	movwf	(??_READxRECEIVEDxMESSAGE+1)& (0+255),b
  9398  002712  0E0B               	movlw	low _DataLen
  9399  002714  6EF6               	movwf	tblptrl,c
  9400  002716                     	if	1	;There is more than 1 active tblptr byte
  9401  002716  0E08               	movlw	high _DataLen
  9402  002718  6EF7               	movwf	tblptrh,c
  9403  00271A                     	endif
  9404  00271A                     	if	0	;There are less than 3 active tblptr bytes
  9405  00271A                     	endif
  9406  00271A  0008               	tblrd		*
  9407  00271C  50F5               	movf	tablat,w,c
  9408  00271E  0100               	movlb	0	; () banked
  9409  002720  6FB0               	movwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),b
  9410  002722  6BB1               	clrf	(??_READxRECEIVEDxMESSAGE+3)& (0+255),b
  9411  002724  0100               	movlb	0	; () banked
  9412  002726  51AE               	movf	??_READxRECEIVEDxMESSAGE& (0+255),w,b
  9413  002728  0100               	movlb	0	; () banked
  9414  00272A  27B0               	addwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),f,b
  9415  00272C  0100               	movlb	0	; () banked
  9416  00272E  51AF               	movf	(??_READxRECEIVEDxMESSAGE+1)& (0+255),w,b
  9417  002730  0100               	movlb	0	; () banked
  9418  002732  23B1               	addwfc	(??_READxRECEIVEDxMESSAGE+3)& (0+255),f,b
  9419  002734  0E83               	movlw	low _Data
  9420  002736  0100               	movlb	0	; () banked
  9421  002738  25B0               	addwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),w,b
  9422  00273A  0100               	movlb	0	; () banked
  9423  00273C  6F74               	movwf	_pLen& (0+255),b
  9424  00273E  0E00               	movlw	high _Data
  9425  002740  0100               	movlb	0	; () banked
  9426  002742  21B1               	addwfc	(??_READxRECEIVEDxMESSAGE+3)& (0+255),w,b
  9427  002744  0100               	movlb	0	; () banked
  9428  002746  6F75               	movwf	(_pLen+1)& (0+255),b
  9429                           
  9430                           ; BSR set to: 0
  9431                           ;terminal.c: 43: if (Received_Data == 's' || Received_Data == 'g'){
  9432  002748  0E73               	movlw	115
  9433  00274A  0100               	movlb	0	; () banked
  9434  00274C  1977               	xorwf	_Received_Data& (0+255),w,b
  9435  00274E  B4D8               	btfsc	status,2,c
  9436  002750  D005               	goto	l8473
  9437                           
  9438                           ; BSR set to: 0
  9439  002752  0E67               	movlw	103
  9440  002754  0100               	movlb	0	; () banked
  9441  002756  1977               	xorwf	_Received_Data& (0+255),w,b
  9442  002758  A4D8               	btfss	status,2,c
  9443  00275A  D00B               	goto	l8479
  9444  00275C                     l8473:
  9445                           
  9446                           ; BSR set to: 0
  9447                           ;terminal.c: 44: *pData = Received_Data;
  9448  00275C  C072  FFD9         	movff	_pData,fsr2l
  9449  002760  C073  FFDA         	movff	_pData+1,fsr2h
  9450  002764  C077  FFDF         	movff	_Received_Data,indf2
  9451                           
  9452                           ; BSR set to: 0
  9453                           ;terminal.c: 45: *pData++;
  9454  002768  0100               	movlb	0	; () banked
  9455  00276A  4B72               	infsnz	_pData& (0+255),f,b
  9456  00276C  2B73               	incf	(_pData+1)& (0+255),f,b
  9457                           
  9458                           ; BSR set to: 0
  9459                           ;terminal.c: 46: RxSwitch = 1;
  9460  00276E  0E01               	movlw	1
  9461  002770  D00F               	goto	L91
  9462  002772                     l8479:
  9463                           
  9464                           ; BSR set to: 0
  9465                           ;terminal.c: 48: else{
  9466                           ;terminal.c: 49: RxSwitch = 0;
  9467  002772  0E00               	movlw	0
  9468  002774  D00D               	goto	L91
  9469  002776                     l8481:
  9470                           
  9471                           ; BSR set to: 0
  9472                           ;terminal.c: 54: if (Received_Data == 'x'){
  9473  002776  0E78               	movlw	120
  9474  002778  0100               	movlb	0	; () banked
  9475  00277A  1977               	xorwf	_Received_Data& (0+255),w,b
  9476  00277C  A4D8               	btfss	status,2,c
  9477  00277E  D7F9               	goto	l8479
  9478                           
  9479                           ; BSR set to: 0
  9480                           ;terminal.c: 55: *pData = Received_Data;
  9481  002780  C072  FFD9         	movff	_pData,fsr2l
  9482  002784  C073  FFDA         	movff	_pData+1,fsr2h
  9483  002788  C077  FFDF         	movff	_Received_Data,indf2
  9484  00278C  D03D               	goto	l8511
  9485  00278E                     l8487:
  9486                           
  9487                           ; BSR set to: 0
  9488                           ;terminal.c: 57: RxSwitch = 2;
  9489  00278E  0E02               	movlw	2
  9490  002790                     L91:
  9491  002790  0100               	movlb	0	; () banked
  9492  002792  6F78               	movwf	_RxSwitch& (0+255),b
  9493                           
  9494                           ; BSR set to: 0
  9495                           ;terminal.c: 61: }
  9496                           ;terminal.c: 62: break;
  9497  002794  D049               	goto	l8519
  9498  002796                     l8491:
  9499                           
  9500                           ; BSR set to: 0
  9501                           ;terminal.c: 65: if (Received_Data == 'G'){
  9502  002796  0E47               	movlw	71
  9503  002798  0100               	movlb	0	; () banked
  9504  00279A  1977               	xorwf	_Received_Data& (0+255),w,b
  9505  00279C  B4D8               	btfsc	status,2,c
  9506  00279E  D00A               	goto	l8499
  9507  0027A0  D01A               	goto	l8503
  9508  0027A2                     l8495:
  9509                           
  9510                           ; BSR set to: 0
  9511                           ;terminal.c: 69: *pData = '\0';
  9512  0027A2  C072  FFD9         	movff	_pData,fsr2l
  9513  0027A6  C073  FFDA         	movff	_pData+1,fsr2h
  9514  0027AA  0E00               	movlw	0
  9515  0027AC  6EDF               	movwf	indf2,c
  9516                           
  9517                           ; BSR set to: 0
  9518                           ;terminal.c: 70: pData++;
  9519  0027AE  0100               	movlb	0	; () banked
  9520  0027B0  4B72               	infsnz	_pData& (0+255),f,b
  9521  0027B2  2B73               	incf	(_pData+1)& (0+255),f,b
  9522  0027B4                     l8499:
  9523                           
  9524                           ; BSR set to: 0
  9525  0027B4  0100               	movlb	0	; () banked
  9526  0027B6  5174               	movf	_pLen& (0+255),w,b
  9527  0027B8  0100               	movlb	0	; () banked
  9528  0027BA  5D72               	subwf	_pData& (0+255),w,b
  9529  0027BC  0100               	movlb	0	; () banked
  9530  0027BE  5175               	movf	(_pLen+1)& (0+255),w,b
  9531  0027C0  0100               	movlb	0	; () banked
  9532  0027C2  5973               	subwfb	(_pData+1)& (0+255),w,b
  9533  0027C4  A0D8               	btfss	status,0,c
  9534  0027C6  D7ED               	goto	l8495
  9535                           
  9536                           ; BSR set to: 0
  9537                           ;terminal.c: 71: }
  9538                           ;terminal.c: 73: RxSwitch = 3;
  9539                           
  9540                           ; BSR set to: 0
  9541  0027C8  0E03               	movlw	3
  9542  0027CA  0100               	movlb	0	; () banked
  9543  0027CC  6F78               	movwf	_RxSwitch& (0+255),b
  9544                           
  9545                           ;terminal.c: 74: Message_To_Translate = 1;
  9546  0027CE  0E01               	movlw	1
  9547  0027D0  0100               	movlb	0	; () banked
  9548  0027D2  6F76               	movwf	_Message_To_Translate& (0+255),b
  9549                           
  9550                           ;terminal.c: 75: }
  9551  0027D4  D029               	goto	l8519
  9552  0027D6                     l8503:
  9553                           
  9554                           ; BSR set to: 0
  9555                           ;terminal.c: 76: else{
  9556                           ;terminal.c: 77: *pData = Received_Data;
  9557  0027D6  C072  FFD9         	movff	_pData,fsr2l
  9558  0027DA  C073  FFDA         	movff	_pData+1,fsr2h
  9559  0027DE  C077  FFDF         	movff	_Received_Data,indf2
  9560                           
  9561                           ; BSR set to: 0
  9562                           ;terminal.c: 78: if (pData > pLen){
  9563  0027E2  0100               	movlb	0	; () banked
  9564  0027E4  5172               	movf	_pData& (0+255),w,b
  9565  0027E6  0100               	movlb	0	; () banked
  9566  0027E8  5D74               	subwf	_pLen& (0+255),w,b
  9567  0027EA  0100               	movlb	0	; () banked
  9568  0027EC  5173               	movf	(_pData+1)& (0+255),w,b
  9569  0027EE  0100               	movlb	0	; () banked
  9570  0027F0  5975               	subwfb	(_pLen+1)& (0+255),w,b
  9571  0027F2  B0D8               	btfsc	status,0,c
  9572  0027F4  D009               	goto	l8511
  9573                           
  9574                           ; BSR set to: 0
  9575                           ;terminal.c: 79: printf("\r\nE#10\r\n");
  9576  0027F6  0E18               	movlw	low STR_1
  9577  0027F8  0100               	movlb	0	; () banked
  9578  0027FA  6F99               	movwf	printf@f& (0+255),b
  9579  0027FC  0E08               	movlw	high STR_1
  9580  0027FE  0100               	movlb	0	; () banked
  9581  002800  6F9A               	movwf	(printf@f+1)& (0+255),b
  9582  002802  EC21  F014         	call	_printf	;wreg free
  9583  002806  D7B5               	goto	l8479
  9584  002808                     l8511:
  9585                           
  9586                           ; BSR set to: 0
  9587                           ;terminal.c: 82: else{
  9588                           ;terminal.c: 83: pData++;
  9589  002808  0100               	movlb	0	; () banked
  9590  00280A  4B72               	infsnz	_pData& (0+255),f,b
  9591  00280C  2B73               	incf	(_pData+1)& (0+255),f,b
  9592  00280E  D7BF               	goto	l8487
  9593  002810                     l8517:
  9594                           
  9595                           ; BSR set to: 0
  9596  002810  0100               	movlb	0	; () banked
  9597  002812  5178               	movf	_RxSwitch& (0+255),w,b
  9598                           
  9599                           ; Switch size 1, requested type "space"
  9600                           ; Number of cases is 4, Range of values is 0 to 3
  9601                           ; switch strategies available:
  9602                           ; Name         Instructions Cycles
  9603                           ; simple_byte           13     7 (average)
  9604                           ;	Chosen strategy is simple_byte
  9605  002814  0A00               	xorlw	0	; case 0
  9606  002816  B4D8               	btfsc	status,2,c
  9607  002818  D770               	goto	l8465
  9608  00281A  0A01               	xorlw	1	; case 1
  9609  00281C  B4D8               	btfsc	status,2,c
  9610  00281E  D7AB               	goto	l8481
  9611  002820  0A03               	xorlw	3	; case 2
  9612  002822  B4D8               	btfsc	status,2,c
  9613  002824  D7B8               	goto	l8491
  9614  002826  0A01               	xorlw	1	; case 3
  9615  002828                     l8519:
  9616                           
  9617                           ;terminal.c: 95: }
  9618                           ;terminal.c: 97: if (Message_To_Translate == 1){
  9619  002828  0100               	movlb	0	; () banked
  9620  00282A  0576               	decf	_Message_To_Translate& (0+255),w,b
  9621  00282C  A4D8               	btfss	status,2,c
  9622  00282E  0012               	return	
  9623                           
  9624                           ; BSR set to: 0
  9625                           ;terminal.c: 98: TranslateMessage();
  9626  002830  ECBA  F012         	call	_TranslateMessage	;wreg free
  9627                           
  9628                           ;terminal.c: 99: Message_To_Translate = 0;
  9629  002834  0E00               	movlw	0
  9630  002836  0100               	movlb	0	; () banked
  9631  002838  6F76               	movwf	_Message_To_Translate& (0+255),b
  9632                           
  9633                           ; BSR set to: 0
  9634                           ;terminal.c: 100: RxSwitch = 0;
  9635  00283A  0E00               	movlw	0
  9636  00283C  0100               	movlb	0	; () banked
  9637  00283E  6F78               	movwf	_RxSwitch& (0+255),b
  9638  002840  0012               	return	
  9639  002842                     __end_of_READxRECEIVEDxMESSAGE:
  9640                           	opt stack 0
  9641                           tblptru	equ	0xFF8
  9642                           tblptrh	equ	0xFF7
  9643                           tblptrl	equ	0xFF6
  9644                           tablat	equ	0xFF5
  9645                           intcon	equ	0xFF2
  9646                           postinc0	equ	0xFEE
  9647                           wreg	equ	0xFE8
  9648                           postdec1	equ	0xFE5
  9649                           fsr1h	equ	0xFE2
  9650                           fsr1l	equ	0xFE1
  9651                           indf2	equ	0xFDF
  9652                           fsr2h	equ	0xFDA
  9653                           fsr2l	equ	0xFD9
  9654                           status	equ	0xFD8
  9655                           
  9656 ;; *************** function _TranslateMessage *****************
  9657 ;; Defined at:
  9658 ;;		line 118 in file "../terminal.c"
  9659 ;; Parameters:    Size  Location     Type
  9660 ;;		None
  9661 ;; Auto vars:     Size  Location     Type
  9662 ;;  Index           2   31[BANK0 ] unsigned int 
  9663 ;;  Value           2   29[BANK0 ] unsigned int 
  9664 ;; Return value:  Size  Location     Type
  9665 ;;                  1    wreg      void 
  9666 ;; Registers used:
  9667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9668 ;; Tracked objects:
  9669 ;;		On entry : 0/0
  9670 ;;		On exit  : 0/0
  9671 ;;		Unchanged: 0/0
  9672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9673 ;;      Params:         0       0       0       0       0       0       0       0       0
  9674 ;;      Locals:         0       4       0       0       0       0       0       0       0
  9675 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9676 ;;      Totals:         0       4       0       0       0       0       0       0       0
  9677 ;;Total ram usage:        4 bytes
  9678 ;; Hardware stack levels used:    1
  9679 ;; Hardware stack levels required when called:    6
  9680 ;; This function calls:
  9681 ;;		_GETxAPIxRW
  9682 ;;		_GETxAPIxVAL
  9683 ;;		_SENDxMESSAGE
  9684 ;;		_SETxAPIxVAL
  9685 ;;		_atoi
  9686 ;;		_printf
  9687 ;; This function is called by:
  9688 ;;		_READxRECEIVEDxMESSAGE
  9689 ;; This function uses a non-reentrant model
  9690 ;;
  9691                           
  9692                           	psect	text19
  9693  002574                     __ptext19:
  9694                           	opt stack 0
  9695  002574                     _TranslateMessage:
  9696                           	opt stack 23
  9697                           
  9698                           ;terminal.c: 120: unsigned int Value, Index;
  9699                           ;terminal.c: 122: if(Data[0] == 's'){
  9700                           
  9701                           ; BSR set to: 0
  9702                           ;incstack = 0
  9703  002574  0E73               	movlw	115
  9704  002576  0100               	movlb	0	; () banked
  9705  002578  1983               	xorwf	_Data& (0+255),w,b
  9706  00257A  A4D8               	btfss	status,2,c
  9707  00257C  D06E               	goto	l7861
  9708                           
  9709                           ; BSR set to: 0
  9710                           ;terminal.c: 124: pData = &Data[2];
  9711  00257E  0E85               	movlw	low (_Data+2)
  9712  002580  0100               	movlb	0	; () banked
  9713  002582  6F72               	movwf	_pData& (0+255),b
  9714  002584  0E00               	movlw	high (_Data+2)
  9715  002586  0100               	movlb	0	; () banked
  9716  002588  6F73               	movwf	(_pData+1)& (0+255),b
  9717                           
  9718                           ; BSR set to: 0
  9719                           ;terminal.c: 125: Index = atoi (pData);
  9720  00258A  C072  F093         	movff	_pData,atoi@s
  9721  00258E  C073  F094         	movff	_pData+1,atoi@s+1
  9722  002592  ECE1  F019         	call	_atoi	;wreg free
  9723  002596  C093  F0AC         	movff	?_atoi,TranslateMessage@Index
  9724  00259A  C094  F0AD         	movff	?_atoi+1,TranslateMessage@Index+1
  9725                           
  9726                           ;terminal.c: 126: pData = &Data[5];
  9727  00259E  0E88               	movlw	low (_Data+5)
  9728  0025A0  0100               	movlb	0	; () banked
  9729  0025A2  6F72               	movwf	_pData& (0+255),b
  9730  0025A4  0E00               	movlw	high (_Data+5)
  9731  0025A6  0100               	movlb	0	; () banked
  9732  0025A8  6F73               	movwf	(_pData+1)& (0+255),b
  9733                           
  9734                           ;terminal.c: 127: Value = atoi (pData);
  9735  0025AA  C072  F093         	movff	_pData,atoi@s
  9736  0025AE  C073  F094         	movff	_pData+1,atoi@s+1
  9737  0025B2  ECE1  F019         	call	_atoi	;wreg free
  9738  0025B6  C093  F0AA         	movff	?_atoi,TranslateMessage@Value
  9739  0025BA  C094  F0AB         	movff	?_atoi+1,TranslateMessage@Value+1
  9740                           
  9741                           ;terminal.c: 129: if (GETxAPIxRW(Index) == 0){
  9742  0025BE  0100               	movlb	0	; () banked
  9743  0025C0  51AC               	movf	TranslateMessage@Index& (0+255),w,b
  9744  0025C2  ECE2  F01D         	call	_GETxAPIxRW
  9745  0025C6  0100               	movlb	0	; () banked
  9746  0025C8  518D               	movf	?_GETxAPIxRW& (0+255),w,b
  9747  0025CA  0100               	movlb	0	; () banked
  9748  0025CC  118E               	iorwf	(?_GETxAPIxRW+1)& (0+255),w,b
  9749  0025CE  A4D8               	btfss	status,2,c
  9750  0025D0  D009               	goto	l7847
  9751                           
  9752                           ; BSR set to: 0
  9753                           ;terminal.c: 130: printf("\r\nE#11\r\n");
  9754  0025D2  0E21               	movlw	low STR_2
  9755  0025D4  0100               	movlb	0	; () banked
  9756  0025D6  6F99               	movwf	printf@f& (0+255),b
  9757  0025D8  0E08               	movlw	high STR_2
  9758  0025DA  0100               	movlb	0	; () banked
  9759  0025DC  6F9A               	movwf	(printf@f+1)& (0+255),b
  9760  0025DE  EC21  F014         	call	_printf	;wreg free
  9761                           
  9762                           ;terminal.c: 131: }
  9763  0025E2  0012               	return	
  9764  0025E4                     l7847:
  9765                           
  9766                           ;terminal.c: 132: else if (Index < 0xF){
  9767  0025E4  0100               	movlb	0	; () banked
  9768  0025E6  51AD               	movf	(TranslateMessage@Index+1)& (0+255),w,b
  9769  0025E8  E10E               	bnz	l7851
  9770  0025EA  0E0F               	movlw	15
  9771  0025EC  0100               	movlb	0	; () banked
  9772  0025EE  5DAC               	subwf	TranslateMessage@Index& (0+255),w,b
  9773  0025F0  B0D8               	btfsc	status,0,c
  9774  0025F2  D009               	goto	l7851
  9775                           
  9776                           ; BSR set to: 0
  9777                           ;terminal.c: 133: printf("\r\nE#12\r\n");
  9778  0025F4  0E2A               	movlw	low STR_3
  9779  0025F6  0100               	movlb	0	; () banked
  9780  0025F8  6F99               	movwf	printf@f& (0+255),b
  9781  0025FA  0E08               	movlw	high STR_3
  9782  0025FC  0100               	movlb	0	; () banked
  9783  0025FE  6F9A               	movwf	(printf@f+1)& (0+255),b
  9784  002600  EC21  F014         	call	_printf	;wreg free
  9785                           
  9786                           ;terminal.c: 134: }
  9787  002604  0012               	return	
  9788  002606                     l7851:
  9789                           
  9790                           ;terminal.c: 135: else if (Index > 0x90){
  9791  002606  0100               	movlb	0	; () banked
  9792  002608  51AD               	movf	(TranslateMessage@Index+1)& (0+255),w,b
  9793  00260A  E105               	bnz	u7950
  9794  00260C  0E91               	movlw	145
  9795  00260E  0100               	movlb	0	; () banked
  9796  002610  5DAC               	subwf	TranslateMessage@Index& (0+255),w,b
  9797  002612  A0D8               	btfss	status,0,c
  9798  002614  D009               	goto	l7855
  9799  002616                     u7950:
  9800                           
  9801                           ; BSR set to: 0
  9802                           ;terminal.c: 136: printf("\r\nE#13\r\n");
  9803  002616  0E33               	movlw	low STR_4
  9804  002618  0100               	movlb	0	; () banked
  9805  00261A  6F99               	movwf	printf@f& (0+255),b
  9806  00261C  0E08               	movlw	high STR_4
  9807  00261E  0100               	movlb	0	; () banked
  9808  002620  6F9A               	movwf	(printf@f+1)& (0+255),b
  9809  002622  EC21  F014         	call	_printf	;wreg free
  9810                           
  9811                           ;terminal.c: 137: }
  9812  002626  0012               	return	
  9813  002628                     l7855:
  9814                           
  9815                           ;terminal.c: 138: else if (Value > 0xFFFE){
  9816  002628  0100               	movlb	0	; () banked
  9817  00262A  29AA               	incf	TranslateMessage@Value& (0+255),w,b
  9818  00262C  E10D               	bnz	l7859
  9819  00262E  0100               	movlb	0	; () banked
  9820  002630  29AB               	incf	(TranslateMessage@Value+1)& (0+255),w,b
  9821  002632  A4D8               	btfss	status,2,c
  9822  002634  D009               	goto	l7859
  9823                           
  9824                           ; BSR set to: 0
  9825                           ;terminal.c: 139: printf("\r\nE#14\r\n");
  9826  002636  0E3C               	movlw	low STR_5
  9827  002638  0100               	movlb	0	; () banked
  9828  00263A  6F99               	movwf	printf@f& (0+255),b
  9829  00263C  0E08               	movlw	high STR_5
  9830  00263E  0100               	movlb	0	; () banked
  9831  002640  6F9A               	movwf	(printf@f+1)& (0+255),b
  9832  002642  EC21  F014         	call	_printf	;wreg free
  9833                           
  9834                           ;terminal.c: 140: }
  9835  002646  0012               	return	
  9836  002648                     l7859:
  9837                           
  9838                           ;terminal.c: 141: else{
  9839                           ;terminal.c: 142: SETxAPIxVAL(Index, Value);
  9840  002648  C0AA  F090         	movff	TranslateMessage@Value,SETxAPIxVAL@value
  9841  00264C  C0AB  F091         	movff	TranslateMessage@Value+1,SETxAPIxVAL@value+1
  9842  002650  0100               	movlb	0	; () banked
  9843  002652  51AC               	movf	TranslateMessage@Index& (0+255),w,b
  9844  002654  EC11  F01D         	call	_SETxAPIxVAL
  9845                           
  9846                           ;terminal.c: 143: }
  9847                           ;terminal.c: 144: }
  9848  002658  0012               	return	
  9849  00265A                     l7861:
  9850                           
  9851                           ;terminal.c: 146: else if (Data[0] == 'g'){
  9852  00265A  0E67               	movlw	103
  9853  00265C  0100               	movlb	0	; () banked
  9854  00265E  1983               	xorwf	_Data& (0+255),w,b
  9855  002660  A4D8               	btfss	status,2,c
  9856  002662  0012               	return	
  9857                           
  9858                           ; BSR set to: 0
  9859                           ;terminal.c: 148: pData = &Data[2];
  9860  002664  0E85               	movlw	low (_Data+2)
  9861  002666  0100               	movlb	0	; () banked
  9862  002668  6F72               	movwf	_pData& (0+255),b
  9863  00266A  0E00               	movlw	high (_Data+2)
  9864  00266C  0100               	movlb	0	; () banked
  9865  00266E  6F73               	movwf	(_pData+1)& (0+255),b
  9866                           
  9867                           ; BSR set to: 0
  9868                           ;terminal.c: 149: Index = atoi (pData);
  9869  002670  C072  F093         	movff	_pData,atoi@s
  9870  002674  C073  F094         	movff	_pData+1,atoi@s+1
  9871  002678  ECE1  F019         	call	_atoi	;wreg free
  9872  00267C  C093  F0AC         	movff	?_atoi,TranslateMessage@Index
  9873  002680  C094  F0AD         	movff	?_atoi+1,TranslateMessage@Index+1
  9874                           
  9875                           ;terminal.c: 151: if (Index < 0xF){
  9876  002684  0100               	movlb	0	; () banked
  9877  002686  51AD               	movf	(TranslateMessage@Index+1)& (0+255),w,b
  9878  002688  E10E               	bnz	l7871
  9879  00268A  0E0F               	movlw	15
  9880  00268C  0100               	movlb	0	; () banked
  9881  00268E  5DAC               	subwf	TranslateMessage@Index& (0+255),w,b
  9882  002690  B0D8               	btfsc	status,0,c
  9883  002692  D009               	goto	l7871
  9884                           
  9885                           ; BSR set to: 0
  9886                           ;terminal.c: 152: printf("\r\nE#12\r\n");
  9887  002694  0E2A               	movlw	low STR_3
  9888  002696  0100               	movlb	0	; () banked
  9889  002698  6F99               	movwf	printf@f& (0+255),b
  9890  00269A  0E08               	movlw	high STR_3
  9891  00269C  0100               	movlb	0	; () banked
  9892  00269E  6F9A               	movwf	(printf@f+1)& (0+255),b
  9893  0026A0  EC21  F014         	call	_printf	;wreg free
  9894                           
  9895                           ;terminal.c: 153: }
  9896  0026A4  0012               	return	
  9897  0026A6                     l7871:
  9898                           
  9899                           ;terminal.c: 154: else if (Index > 0x90){
  9900  0026A6  0100               	movlb	0	; () banked
  9901  0026A8  51AD               	movf	(TranslateMessage@Index+1)& (0+255),w,b
  9902  0026AA  E105               	bnz	u7990
  9903  0026AC  0E91               	movlw	145
  9904  0026AE  0100               	movlb	0	; () banked
  9905  0026B0  5DAC               	subwf	TranslateMessage@Index& (0+255),w,b
  9906  0026B2  A0D8               	btfss	status,0,c
  9907  0026B4  D009               	goto	l7875
  9908  0026B6                     u7990:
  9909                           
  9910                           ; BSR set to: 0
  9911                           ;terminal.c: 155: printf("\r\nE#13\r\n");
  9912  0026B6  0E33               	movlw	low STR_4
  9913  0026B8  0100               	movlb	0	; () banked
  9914  0026BA  6F99               	movwf	printf@f& (0+255),b
  9915  0026BC  0E08               	movlw	high STR_4
  9916  0026BE  0100               	movlb	0	; () banked
  9917  0026C0  6F9A               	movwf	(printf@f+1)& (0+255),b
  9918  0026C2  EC21  F014         	call	_printf	;wreg free
  9919                           
  9920                           ;terminal.c: 156: }
  9921  0026C6  0012               	return	
  9922  0026C8                     l7875:
  9923                           
  9924                           ;terminal.c: 157: else{
  9925                           ;terminal.c: 158: Value = GETxAPIxVAL(Index);
  9926  0026C8  0100               	movlb	0	; () banked
  9927  0026CA  51AC               	movf	TranslateMessage@Index& (0+255),w,b
  9928  0026CC  ECD2  F01D         	call	_GETxAPIxVAL
  9929  0026D0  C08D  F0AA         	movff	?_GETxAPIxVAL,TranslateMessage@Value
  9930  0026D4  C08E  F0AB         	movff	?_GETxAPIxVAL+1,TranslateMessage@Value+1
  9931                           
  9932                           ;terminal.c: 159: SENDxMESSAGE(Index, Value);
  9933  0026D8  C0AA  F0A7         	movff	TranslateMessage@Value,SENDxMESSAGE@value
  9934  0026DC  C0AB  F0A8         	movff	TranslateMessage@Value+1,SENDxMESSAGE@value+1
  9935  0026E0  0100               	movlb	0	; () banked
  9936  0026E2  51AC               	movf	TranslateMessage@Index& (0+255),w,b
  9937  0026E4  ECAD  F01D         	call	_SENDxMESSAGE
  9938  0026E8  0012               	return	
  9939  0026EA                     __end_of_TranslateMessage:
  9940                           	opt stack 0
  9941                           tblptru	equ	0xFF8
  9942                           tblptrh	equ	0xFF7
  9943                           tblptrl	equ	0xFF6
  9944                           tablat	equ	0xFF5
  9945                           intcon	equ	0xFF2
  9946                           postinc0	equ	0xFEE
  9947                           wreg	equ	0xFE8
  9948                           postdec1	equ	0xFE5
  9949                           fsr1h	equ	0xFE2
  9950                           fsr1l	equ	0xFE1
  9951                           indf2	equ	0xFDF
  9952                           fsr2h	equ	0xFDA
  9953                           fsr2l	equ	0xFD9
  9954                           status	equ	0xFD8
  9955                           
  9956 ;; *************** function _atoi *****************
  9957 ;; Defined at:
  9958 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\atoi.c"
  9959 ;; Parameters:    Size  Location     Type
  9960 ;;  s               2    6[BANK0 ] PTR const unsigned char 
  9961 ;;		 -> NULL(0), Data(10), 
  9962 ;; Auto vars:     Size  Location     Type
  9963 ;;  a               2   11[BANK0 ] int 
  9964 ;;  sign            1   10[BANK0 ] unsigned char 
  9965 ;; Return value:  Size  Location     Type
  9966 ;;                  2    6[BANK0 ] int 
  9967 ;; Registers used:
  9968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9969 ;; Tracked objects:
  9970 ;;		On entry : 0/0
  9971 ;;		On exit  : 0/0
  9972 ;;		Unchanged: 0/0
  9973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9974 ;;      Params:         0       2       0       0       0       0       0       0       0
  9975 ;;      Locals:         0       3       0       0       0       0       0       0       0
  9976 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9977 ;;      Totals:         0       7       0       0       0       0       0       0       0
  9978 ;;Total ram usage:        7 bytes
  9979 ;; Hardware stack levels used:    1
  9980 ;; Hardware stack levels required when called:    4
  9981 ;; This function calls:
  9982 ;;		___wmul
  9983 ;;		_isdigit
  9984 ;; This function is called by:
  9985 ;;		_TranslateMessage
  9986 ;; This function uses a non-reentrant model
  9987 ;;
  9988                           
  9989                           	psect	text20
  9990  0033C2                     __ptext20:
  9991                           	opt stack 0
  9992  0033C2                     _atoi:
  9993                           	opt stack 24
  9994                           
  9995                           ;incstack = 0
  9996  0033C2  D003               	goto	l7129
  9997  0033C4                     l7127:
  9998  0033C4  0100               	movlb	0	; () banked
  9999  0033C6  4B93               	infsnz	atoi@s& (0+255),f,b
 10000  0033C8  2B94               	incf	(atoi@s+1)& (0+255),f,b
 10001  0033CA                     l7129:
 10002  0033CA  C093  FFD9         	movff	atoi@s,fsr2l
 10003  0033CE  C094  FFDA         	movff	atoi@s+1,fsr2h
 10004  0033D2  0E20               	movlw	32
 10005  0033D4  18DE               	xorwf	postinc2,w,c
 10006  0033D6  B4D8               	btfsc	status,2,c
 10007  0033D8  D7F5               	goto	l7127
 10008  0033DA  C093  FFD9         	movff	atoi@s,fsr2l
 10009  0033DE  C094  FFDA         	movff	atoi@s+1,fsr2h
 10010  0033E2  0E09               	movlw	9
 10011  0033E4  18DE               	xorwf	postinc2,w,c
 10012  0033E6  B4D8               	btfsc	status,2,c
 10013  0033E8  D7ED               	goto	l7127
 10014  0033EA  0E00               	movlw	0
 10015  0033EC  0100               	movlb	0	; () banked
 10016  0033EE  6F99               	movwf	(atoi@a+1)& (0+255),b
 10017  0033F0  0E00               	movlw	0
 10018  0033F2  6F98               	movwf	atoi@a& (0+255),b
 10019  0033F4  0E00               	movlw	0
 10020  0033F6  0100               	movlb	0	; () banked
 10021  0033F8  6F97               	movwf	atoi@sign& (0+255),b
 10022                           
 10023                           ; BSR set to: 0
 10024  0033FA  C093  FFD9         	movff	atoi@s,fsr2l
 10025  0033FE  C094  FFDA         	movff	atoi@s+1,fsr2h
 10026  003402  0E2D               	movlw	45
 10027  003404  18DE               	xorwf	postinc2,w,c
 10028  003406  A4D8               	btfss	status,2,c
 10029  003408  D003               	goto	l7139
 10030                           
 10031                           ; BSR set to: 0
 10032  00340A  0100               	movlb	0	; () banked
 10033  00340C  2B97               	incf	atoi@sign& (0+255),f,b
 10034  00340E  D02E               	goto	l7145
 10035  003410                     l7139:
 10036                           
 10037                           ; BSR set to: 0
 10038  003410  C093  FFD9         	movff	atoi@s,fsr2l
 10039  003414  C094  FFDA         	movff	atoi@s+1,fsr2h
 10040  003418  0E2B               	movlw	43
 10041  00341A  18DE               	xorwf	postinc2,w,c
 10042  00341C  A4D8               	btfss	status,2,c
 10043  00341E  D029               	goto	l7147
 10044  003420  D025               	goto	l7145
 10045  003422                     l7143:
 10046  003422  C098  F08D         	movff	atoi@a,___wmul@multiplier
 10047  003426  C099  F08E         	movff	atoi@a+1,___wmul@multiplier+1
 10048  00342A  0E00               	movlw	0
 10049  00342C  0100               	movlb	0	; () banked
 10050  00342E  6F90               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10051  003430  0E0A               	movlw	10
 10052  003432  6F8F               	movwf	___wmul@multiplicand& (0+255),b
 10053  003434  EC50  F01D         	call	___wmul	;wreg free
 10054  003438  C093  FFD9         	movff	atoi@s,fsr2l
 10055  00343C  C094  FFDA         	movff	atoi@s+1,fsr2h
 10056  003440  50DF               	movf	indf2,w,c
 10057  003442  0100               	movlb	0	; () banked
 10058  003444  6F95               	movwf	??_atoi& (0+255),b
 10059  003446  6B96               	clrf	(??_atoi+1)& (0+255),b
 10060  003448  0100               	movlb	0	; () banked
 10061  00344A  518D               	movf	?___wmul& (0+255),w,b
 10062  00344C  0100               	movlb	0	; () banked
 10063  00344E  2795               	addwf	??_atoi& (0+255),f,b
 10064  003450  0100               	movlb	0	; () banked
 10065  003452  518E               	movf	(?___wmul+1)& (0+255),w,b
 10066  003454  0100               	movlb	0	; () banked
 10067  003456  2396               	addwfc	(??_atoi+1)& (0+255),f,b
 10068  003458  0ED0               	movlw	208
 10069  00345A  0100               	movlb	0	; () banked
 10070  00345C  2595               	addwf	??_atoi& (0+255),w,b
 10071  00345E  0100               	movlb	0	; () banked
 10072  003460  6F98               	movwf	atoi@a& (0+255),b
 10073  003462  0EFF               	movlw	255
 10074  003464  0100               	movlb	0	; () banked
 10075  003466  2196               	addwfc	(??_atoi+1)& (0+255),w,b
 10076  003468  0100               	movlb	0	; () banked
 10077  00346A  6F99               	movwf	(atoi@a+1)& (0+255),b
 10078  00346C                     l7145:
 10079                           
 10080                           ; BSR set to: 0
 10081  00346C  0100               	movlb	0	; () banked
 10082  00346E  4B93               	infsnz	atoi@s& (0+255),f,b
 10083  003470  2B94               	incf	(atoi@s+1)& (0+255),f,b
 10084  003472                     l7147:
 10085                           
 10086                           ; BSR set to: 0
 10087  003472  C093  FFD9         	movff	atoi@s,fsr2l
 10088  003476  C094  FFDA         	movff	atoi@s+1,fsr2h
 10089  00347A  50DF               	movf	indf2,w,c
 10090  00347C  EC98  F01D         	call	_isdigit
 10091  003480  B0D8               	btfsc	status,0,c
 10092  003482  D7CF               	goto	l7143
 10093  003484  0100               	movlb	0	; () banked
 10094  003486  5197               	movf	atoi@sign& (0+255),w,b
 10095  003488  0100               	movlb	0	; () banked
 10096  00348A  B4D8               	btfsc	status,2,c
 10097  00348C  D00E               	goto	l1358
 10098                           
 10099                           ; BSR set to: 0
 10100  00348E  C098  F095         	movff	atoi@a,??_atoi
 10101  003492  C099  F096         	movff	atoi@a+1,??_atoi+1
 10102  003496  0100               	movlb	0	; () banked
 10103  003498  1F95               	comf	??_atoi& (0+255),f,b
 10104  00349A  1F96               	comf	(??_atoi+1)& (0+255),f,b
 10105  00349C  4B95               	infsnz	??_atoi& (0+255),f,b
 10106  00349E  2B96               	incf	(??_atoi+1)& (0+255),f,b
 10107  0034A0  C095  F093         	movff	??_atoi,?_atoi
 10108  0034A4  C096  F094         	movff	??_atoi+1,?_atoi+1
 10109  0034A8  0012               	return	
 10110  0034AA                     l1358:
 10111                           
 10112                           ; BSR set to: 0
 10113  0034AA  C098  F093         	movff	atoi@a,?_atoi
 10114  0034AE  C099  F094         	movff	atoi@a+1,?_atoi+1
 10115                           
 10116                           ; BSR set to: 0
 10117  0034B2  0012               	return		;funcret
 10118  0034B4                     __end_of_atoi:
 10119                           	opt stack 0
 10120                           tblptru	equ	0xFF8
 10121                           tblptrh	equ	0xFF7
 10122                           tblptrl	equ	0xFF6
 10123                           tablat	equ	0xFF5
 10124                           intcon	equ	0xFF2
 10125                           postinc0	equ	0xFEE
 10126                           wreg	equ	0xFE8
 10127                           postdec1	equ	0xFE5
 10128                           fsr1h	equ	0xFE2
 10129                           fsr1l	equ	0xFE1
 10130                           indf2	equ	0xFDF
 10131                           postinc2	equ	0xFDE
 10132                           fsr2h	equ	0xFDA
 10133                           fsr2l	equ	0xFD9
 10134                           status	equ	0xFD8
 10135                           
 10136 ;; *************** function _isdigit *****************
 10137 ;; Defined at:
 10138 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\isdigit.c"
 10139 ;; Parameters:    Size  Location     Type
 10140 ;;  c               1    wreg     unsigned char 
 10141 ;; Auto vars:     Size  Location     Type
 10142 ;;  c               1    2[BANK0 ] unsigned char 
 10143 ;; Return value:  Size  Location     Type
 10144 ;;		None               void
 10145 ;; Registers used:
 10146 ;;		wreg, status,2, status,0
 10147 ;; Tracked objects:
 10148 ;;		On entry : 0/0
 10149 ;;		On exit  : 0/0
 10150 ;;		Unchanged: 0/0
 10151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10152 ;;      Params:         0       0       0       0       0       0       0       0       0
 10153 ;;      Locals:         0       2       0       0       0       0       0       0       0
 10154 ;;      Temps:          0       1       0       0       0       0       0       0       0
 10155 ;;      Totals:         0       3       0       0       0       0       0       0       0
 10156 ;;Total ram usage:        3 bytes
 10157 ;; Hardware stack levels used:    1
 10158 ;; Hardware stack levels required when called:    3
 10159 ;; This function calls:
 10160 ;;		Nothing
 10161 ;; This function is called by:
 10162 ;;		_atoi
 10163 ;; This function uses a non-reentrant model
 10164 ;;
 10165                           
 10166                           	psect	text21
 10167  003B30                     __ptext21:
 10168                           	opt stack 0
 10169  003B30                     _isdigit:
 10170                           	opt stack 24
 10171                           
 10172                           ; BSR set to: 0
 10173                           ;incstack = 0
 10174                           ;isdigit@c stored from wreg
 10175  003B30  0100               	movlb	0	; () banked
 10176  003B32  6F8F               	movwf	isdigit@c& (0+255),b
 10177  003B34  0E00               	movlw	0
 10178  003B36  0100               	movlb	0	; () banked
 10179  003B38  6F8E               	movwf	_isdigit$1858& (0+255),b
 10180                           
 10181                           ; BSR set to: 0
 10182  003B3A  0E3A               	movlw	58
 10183  003B3C  0100               	movlb	0	; () banked
 10184  003B3E  618F               	cpfslt	isdigit@c& (0+255),b
 10185  003B40  D007               	goto	l6645
 10186                           
 10187                           ; BSR set to: 0
 10188  003B42  0E2F               	movlw	47
 10189  003B44  0100               	movlb	0	; () banked
 10190  003B46  658F               	cpfsgt	isdigit@c& (0+255),b
 10191  003B48  D003               	goto	l6645
 10192                           
 10193                           ; BSR set to: 0
 10194  003B4A  0E01               	movlw	1
 10195  003B4C  0100               	movlb	0	; () banked
 10196  003B4E  6F8E               	movwf	_isdigit$1858& (0+255),b
 10197  003B50                     l6645:
 10198                           
 10199                           ; BSR set to: 0
 10200  003B50  C08E  F08D         	movff	_isdigit$1858,??_isdigit
 10201  003B54  0100               	movlb	0	; () banked
 10202  003B56  318D               	rrcf	??_isdigit& (0+255),w,b
 10203  003B58  0012               	return	
 10204  003B5A                     __end_of_isdigit:
 10205                           	opt stack 0
 10206                           tblptru	equ	0xFF8
 10207                           tblptrh	equ	0xFF7
 10208                           tblptrl	equ	0xFF6
 10209                           tablat	equ	0xFF5
 10210                           intcon	equ	0xFF2
 10211                           postinc0	equ	0xFEE
 10212                           wreg	equ	0xFE8
 10213                           postdec1	equ	0xFE5
 10214                           fsr1h	equ	0xFE2
 10215                           fsr1l	equ	0xFE1
 10216                           indf2	equ	0xFDF
 10217                           postinc2	equ	0xFDE
 10218                           fsr2h	equ	0xFDA
 10219                           fsr2l	equ	0xFD9
 10220                           status	equ	0xFD8
 10221                           
 10222 ;; *************** function ___wmul *****************
 10223 ;; Defined at:
 10224 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
 10225 ;; Parameters:    Size  Location     Type
 10226 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10227 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10228 ;; Auto vars:     Size  Location     Type
 10229 ;;  product         2    4[BANK0 ] unsigned int 
 10230 ;; Return value:  Size  Location     Type
 10231 ;;                  2    0[BANK0 ] unsigned int 
 10232 ;; Registers used:
 10233 ;;		wreg, status,2, status,0, prodl, prodh
 10234 ;; Tracked objects:
 10235 ;;		On entry : 0/0
 10236 ;;		On exit  : 0/0
 10237 ;;		Unchanged: 0/0
 10238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10239 ;;      Params:         0       4       0       0       0       0       0       0       0
 10240 ;;      Locals:         0       2       0       0       0       0       0       0       0
 10241 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10242 ;;      Totals:         0       6       0       0       0       0       0       0       0
 10243 ;;Total ram usage:        6 bytes
 10244 ;; Hardware stack levels used:    1
 10245 ;; Hardware stack levels required when called:    3
 10246 ;; This function calls:
 10247 ;;		Nothing
 10248 ;; This function is called by:
 10249 ;;		_atoi
 10250 ;; This function uses a non-reentrant model
 10251 ;;
 10252                           
 10253                           	psect	text22
 10254  003AA0                     __ptext22:
 10255                           	opt stack 0
 10256  003AA0                     ___wmul:
 10257                           	opt stack 24
 10258                           
 10259                           ; BSR set to: 0
 10260                           ;incstack = 0
 10261  003AA0  0100               	movlb	0	; () banked
 10262  003AA2  518D               	movf	___wmul@multiplier& (0+255),w,b
 10263  003AA4  0100               	movlb	0	; () banked
 10264  003AA6  038F               	mulwf	___wmul@multiplicand& (0+255),b
 10265  003AA8  CFF3 F091          	movff	prodl,___wmul@product
 10266  003AAC  CFF4 F092          	movff	prodh,___wmul@product+1
 10267  003AB0  0100               	movlb	0	; () banked
 10268  003AB2  518D               	movf	___wmul@multiplier& (0+255),w,b
 10269  003AB4  0100               	movlb	0	; () banked
 10270  003AB6  0390               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10271  003AB8  50F3               	movf	prodl,w,c
 10272  003ABA  0100               	movlb	0	; () banked
 10273  003ABC  2792               	addwf	(___wmul@product+1)& (0+255),f,b
 10274  003ABE  0100               	movlb	0	; () banked
 10275  003AC0  518E               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10276  003AC2  0100               	movlb	0	; () banked
 10277  003AC4  038F               	mulwf	___wmul@multiplicand& (0+255),b
 10278  003AC6  50F3               	movf	prodl,w,c
 10279  003AC8  0100               	movlb	0	; () banked
 10280  003ACA  2792               	addwf	(___wmul@product+1)& (0+255),f,b
 10281                           
 10282                           ; BSR set to: 0
 10283  003ACC  C091  F08D         	movff	___wmul@product,?___wmul
 10284  003AD0  C092  F08E         	movff	___wmul@product+1,?___wmul+1
 10285  003AD4  0012               	return	
 10286  003AD6                     __end_of___wmul:
 10287                           	opt stack 0
 10288                           tblptru	equ	0xFF8
 10289                           tblptrh	equ	0xFF7
 10290                           tblptrl	equ	0xFF6
 10291                           tablat	equ	0xFF5
 10292                           prodh	equ	0xFF4
 10293                           prodl	equ	0xFF3
 10294                           intcon	equ	0xFF2
 10295                           postinc0	equ	0xFEE
 10296                           wreg	equ	0xFE8
 10297                           postdec1	equ	0xFE5
 10298                           fsr1h	equ	0xFE2
 10299                           fsr1l	equ	0xFE1
 10300                           indf2	equ	0xFDF
 10301                           postinc2	equ	0xFDE
 10302                           fsr2h	equ	0xFDA
 10303                           fsr2l	equ	0xFD9
 10304                           status	equ	0xFD8
 10305                           
 10306 ;; *************** function _SENDxMESSAGE *****************
 10307 ;; Defined at:
 10308 ;;		line 178 in file "../terminal.c"
 10309 ;; Parameters:    Size  Location     Type
 10310 ;;  index           1    wreg     unsigned char 
 10311 ;;  value           2   26[BANK0 ] unsigned int 
 10312 ;; Auto vars:     Size  Location     Type
 10313 ;;  index           1   28[BANK0 ] unsigned char 
 10314 ;; Return value:  Size  Location     Type
 10315 ;;                  1    wreg      void 
 10316 ;; Registers used:
 10317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10318 ;; Tracked objects:
 10319 ;;		On entry : 0/0
 10320 ;;		On exit  : 0/0
 10321 ;;		Unchanged: 0/0
 10322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10323 ;;      Params:         0       2       0       0       0       0       0       0       0
 10324 ;;      Locals:         0       1       0       0       0       0       0       0       0
 10325 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10326 ;;      Totals:         0       3       0       0       0       0       0       0       0
 10327 ;;Total ram usage:        3 bytes
 10328 ;; Hardware stack levels used:    1
 10329 ;; Hardware stack levels required when called:    5
 10330 ;; This function calls:
 10331 ;;		_printf
 10332 ;; This function is called by:
 10333 ;;		_TranslateMessage
 10334 ;; This function uses a non-reentrant model
 10335 ;;
 10336                           
 10337                           	psect	text23
 10338  003B5A                     __ptext23:
 10339                           	opt stack 0
 10340  003B5A                     _SENDxMESSAGE:
 10341                           	opt stack 23
 10342                           
 10343                           ; BSR set to: 0
 10344                           ;incstack = 0
 10345                           ;SENDxMESSAGE@index stored from wreg
 10346  003B5A  0100               	movlb	0	; () banked
 10347  003B5C  6FA9               	movwf	SENDxMESSAGE@index& (0+255),b
 10348                           
 10349                           ;terminal.c: 184: printf("\r\nM#%d %d\r\n", index, value);
 10350  003B5E  0E0C               	movlw	low STR_8
 10351  003B60  0100               	movlb	0	; () banked
 10352  003B62  6F99               	movwf	printf@f& (0+255),b
 10353  003B64  0E08               	movlw	high STR_8
 10354  003B66  0100               	movlb	0	; () banked
 10355  003B68  6F9A               	movwf	(printf@f+1)& (0+255),b
 10356  003B6A  C0A9  F09B         	movff	SENDxMESSAGE@index,?_printf+2
 10357  003B6E  0100               	movlb	0	; () banked
 10358  003B70  6B9C               	clrf	(?_printf+3)& (0+255),b
 10359  003B72  C0A7  F09D         	movff	SENDxMESSAGE@value,?_printf+4
 10360  003B76  C0A8  F09E         	movff	SENDxMESSAGE@value+1,?_printf+5
 10361  003B7A  EC21  F014         	call	_printf	;wreg free
 10362  003B7E  0012               	return		;funcret
 10363  003B80                     __end_of_SENDxMESSAGE:
 10364                           	opt stack 0
 10365                           tblptru	equ	0xFF8
 10366                           tblptrh	equ	0xFF7
 10367                           tblptrl	equ	0xFF6
 10368                           tablat	equ	0xFF5
 10369                           prodh	equ	0xFF4
 10370                           prodl	equ	0xFF3
 10371                           intcon	equ	0xFF2
 10372                           postinc0	equ	0xFEE
 10373                           wreg	equ	0xFE8
 10374                           postdec1	equ	0xFE5
 10375                           fsr1h	equ	0xFE2
 10376                           fsr1l	equ	0xFE1
 10377                           indf2	equ	0xFDF
 10378                           postinc2	equ	0xFDE
 10379                           fsr2h	equ	0xFDA
 10380                           fsr2l	equ	0xFD9
 10381                           status	equ	0xFD8
 10382                           
 10383 ;; *************** function _printf *****************
 10384 ;; Defined at:
 10385 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\doprnt.c"
 10386 ;; Parameters:    Size  Location     Type
 10387 ;;  f               2   12[BANK0 ] PTR const unsigned char 
 10388 ;;		 -> STR_8(12), STR_7(9), STR_6(9), STR_5(9), 
 10389 ;;		 -> STR_4(9), STR_3(9), STR_2(9), STR_1(9), 
 10390 ;; Auto vars:     Size  Location     Type
 10391 ;;  tmpval          4    0        struct .
 10392 ;;  cp              3    0        PTR const unsigned char 
 10393 ;;  val             2   23[BANK0 ] unsigned int 
 10394 ;;  ap              2   19[BANK0 ] PTR void [1]
 10395 ;;		 -> ?_printf(2), 
 10396 ;;  len             2    0        unsigned int 
 10397 ;;  c               1   25[BANK0 ] char 
 10398 ;;  prec            1   22[BANK0 ] char 
 10399 ;;  flag            1   21[BANK0 ] unsigned char 
 10400 ;; Return value:  Size  Location     Type
 10401 ;;                  2   12[BANK0 ] int 
 10402 ;; Registers used:
 10403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10404 ;; Tracked objects:
 10405 ;;		On entry : 0/0
 10406 ;;		On exit  : 0/0
 10407 ;;		Unchanged: 0/0
 10408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10409 ;;      Params:         0       6       0       0       0       0       0       0       0
 10410 ;;      Locals:         0       7       0       0       0       0       0       0       0
 10411 ;;      Temps:          0       1       0       0       0       0       0       0       0
 10412 ;;      Totals:         0      14       0       0       0       0       0       0       0
 10413 ;;Total ram usage:       14 bytes
 10414 ;; Hardware stack levels used:    1
 10415 ;; Hardware stack levels required when called:    4
 10416 ;; This function calls:
 10417 ;;		___lwdiv
 10418 ;;		___lwmod
 10419 ;;		_putch
 10420 ;; This function is called by:
 10421 ;;		_READxRECEIVEDxMESSAGE
 10422 ;;		_TranslateMessage
 10423 ;;		_SENDxMESSAGE
 10424 ;; This function uses a non-reentrant model
 10425 ;;
 10426                           
 10427                           	psect	text24
 10428  002842                     __ptext24:
 10429                           	opt stack 0
 10430  002842                     _printf:
 10431                           	opt stack 25
 10432                           
 10433                           ;doprnt.c: 466: va_list ap;
 10434                           ;doprnt.c: 499: signed char c;
 10435                           ;doprnt.c: 506: signed char prec;
 10436                           ;doprnt.c: 508: unsigned char flag;
 10437                           ;doprnt.c: 523: union {
 10438                           ;doprnt.c: 524: unsigned long vd;
 10439                           ;doprnt.c: 525: double integ;
 10440                           ;doprnt.c: 526: } tmpval;
 10441                           ;doprnt.c: 528: unsigned int val;
 10442                           ;doprnt.c: 529: unsigned len;
 10443                           ;doprnt.c: 530: const char * cp;
 10444                           ;doprnt.c: 533: *ap = __va_start();
 10445                           
 10446                           ;incstack = 0
 10447  002842  0E9B               	movlw	low (?_printf+2)
 10448  002844  0100               	movlb	0	; () banked
 10449  002846  6FA0               	movwf	printf@ap& (0+255),b
 10450  002848  0E00               	movlw	high (?_printf+2)
 10451  00284A  0100               	movlb	0	; () banked
 10452  00284C  6FA1               	movwf	(printf@ap+1)& (0+255),b
 10453                           
 10454                           ;doprnt.c: 536: while(c = *f++) {
 10455  00284E  D094               	goto	l6617
 10456  002850                     l6571:
 10457                           
 10458                           ; BSR set to: 0
 10459                           ;doprnt.c: 538: if(c != '%')
 10460  002850  0E25               	movlw	37
 10461  002852  0100               	movlb	0	; () banked
 10462  002854  19A6               	xorwf	printf@c& (0+255),w,b
 10463  002856  B4D8               	btfsc	status,2,c
 10464  002858  D005               	goto	l6575
 10465                           
 10466                           ; BSR set to: 0
 10467                           ;doprnt.c: 540: {
 10468                           ;doprnt.c: 541: (putch(c) );
 10469  00285A  0100               	movlb	0	; () banked
 10470  00285C  51A6               	movf	printf@c& (0+255),w,b
 10471  00285E  ECFE  F01D         	call	_putch
 10472                           
 10473                           ;doprnt.c: 542: continue;
 10474  002862  D08A               	goto	l6617
 10475  002864                     l6575:
 10476                           
 10477                           ;doprnt.c: 543: }
 10478                           ;doprnt.c: 548: flag = 0;
 10479  002864  0E00               	movlw	0
 10480  002866  0100               	movlb	0	; () banked
 10481  002868  6FA2               	movwf	printf@flag& (0+255),b
 10482                           
 10483                           ; BSR set to: 0
 10484                           
 10485                           ; BSR set to: 0
 10486                           
 10487                           ; BSR set to: 0
 10488                           ;doprnt.c: 822: }
 10489                           
 10490                           ; BSR set to: 0
 10491                           ;doprnt.c: 813: continue;
 10492                           
 10493                           ;doprnt.c: 802: default:
 10494                           
 10495                           ; BSR set to: 0
 10496                           ;doprnt.c: 698: case 'i':
 10497                           ;doprnt.c: 699: break;
 10498                           
 10499                           ; BSR set to: 0
 10500                           
 10501                           ;doprnt.c: 697: case 'd':
 10502                           
 10503                           ; BSR set to: 0
 10504                           ;doprnt.c: 638: goto alldone;
 10505                           
 10506                           ;doprnt.c: 637: case 0:
 10507                           
 10508                           ;doprnt.c: 635: switch(c = *f++) {
 10509  00286A  C099  FFF6         	movff	printf@f,tblptrl
 10510  00286E  C09A  FFF7         	movff	printf@f+1,tblptrh
 10511  002872  0100               	movlb	0	; () banked
 10512  002874  4B99               	infsnz	printf@f& (0+255),f,b
 10513  002876  2B9A               	incf	(printf@f+1)& (0+255),f,b
 10514  002878                     	if	0	;tblptru may be non-zero
 10515  002878                     	endif
 10516  002878                     	if	0	;tblptru may be non-zero
 10517  002878                     	endif
 10518  002878  0008               	tblrd		*
 10519  00287A  CFF5 F0A6          	movff	tablat,printf@c
 10520  00287E  0100               	movlb	0	; () banked
 10521  002880  51A6               	movf	printf@c& (0+255),w,b
 10522                           
 10523                           ; Switch size 1, requested type "space"
 10524                           ; Number of cases is 3, Range of values is 0 to 105
 10525                           ; switch strategies available:
 10526                           ; Name         Instructions Cycles
 10527                           ; simple_byte           10     6 (average)
 10528                           ;	Chosen strategy is simple_byte
 10529  002882  0A00               	xorlw	0	; case 0
 10530  002884  B4D8               	btfsc	status,2,c
 10531  002886  0012               	return	
 10532  002888  0A64               	xorlw	100	; case 100
 10533  00288A  B4D8               	btfsc	status,2,c
 10534  00288C  D003               	goto	l6581
 10535  00288E  0A0D               	xorlw	13	; case 105
 10536  002890  A4D8               	btfss	status,2,c
 10537  002892  D072               	goto	l6617
 10538  002894                     l6581:
 10539                           
 10540                           ; BSR set to: 0
 10541                           ;doprnt.c: 1253: {
 10542                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10543  002894  C0A0  FFD9         	movff	printf@ap,fsr2l
 10544  002898  C0A1  FFDA         	movff	printf@ap+1,fsr2h
 10545  00289C  CFDE F0A4          	movff	postinc2,printf@val
 10546  0028A0  CFDD F0A5          	movff	postdec2,printf@val+1
 10547                           
 10548                           ; BSR set to: 0
 10549  0028A4  0E02               	movlw	2
 10550  0028A6  0100               	movlb	0	; () banked
 10551  0028A8  27A0               	addwf	printf@ap& (0+255),f,b
 10552  0028AA  0E00               	movlw	0
 10553  0028AC  23A1               	addwfc	(printf@ap+1)& (0+255),f,b
 10554                           
 10555                           ; BSR set to: 0
 10556                           ;doprnt.c: 1261: if((int)val < 0) {
 10557  0028AE  0100               	movlb	0	; () banked
 10558  0028B0  AFA5               	btfss	(printf@val+1)& (0+255),7,b
 10559  0028B2  D008               	goto	l6591
 10560                           
 10561                           ; BSR set to: 0
 10562                           ;doprnt.c: 1262: flag |= 0x03;
 10563  0028B4  0E03               	movlw	3
 10564  0028B6  0100               	movlb	0	; () banked
 10565  0028B8  13A2               	iorwf	printf@flag& (0+255),f,b
 10566                           
 10567                           ; BSR set to: 0
 10568                           ;doprnt.c: 1263: val = -val;
 10569  0028BA  0100               	movlb	0	; () banked
 10570  0028BC  6DA4               	negf	printf@val& (0+255),b
 10571  0028BE  1FA5               	comf	(printf@val+1)& (0+255),f,b
 10572  0028C0  B0D8               	btfsc	status,0,c
 10573  0028C2  2BA5               	incf	(printf@val+1)& (0+255),f,b
 10574  0028C4                     l6591:
 10575                           
 10576                           ; BSR set to: 0
 10577                           ;doprnt.c: 1264: }
 10578                           ;doprnt.c: 1266: }
 10579                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10580  0028C4  0E01               	movlw	1
 10581  0028C6  0100               	movlb	0	; () banked
 10582  0028C8  6FA6               	movwf	printf@c& (0+255),b
 10583  0028CA                     l6593:
 10584                           
 10585                           ; BSR set to: 0
 10586  0028CA  0E05               	movlw	5
 10587  0028CC  0100               	movlb	0	; () banked
 10588  0028CE  19A6               	xorwf	printf@c& (0+255),w,b
 10589  0028D0  B4D8               	btfsc	status,2,c
 10590  0028D2  D016               	goto	l6605
 10591                           
 10592                           ; BSR set to: 0
 10593                           ;doprnt.c: 1306: if(val < dpowers[c])
 10594                           
 10595                           ; BSR set to: 0
 10596                           
 10597                           ; BSR set to: 0
 10598  0028D4  0100               	movlb	0	; () banked
 10599  0028D6  51A6               	movf	printf@c& (0+255),w,b
 10600  0028D8  0D02               	mullw	2
 10601  0028DA  0E01               	movlw	low _dpowers
 10602  0028DC  24F3               	addwf	prodl,w,c
 10603  0028DE  6EF6               	movwf	tblptrl,c
 10604  0028E0  0E08               	movlw	high _dpowers
 10605  0028E2  20F4               	addwfc	prodh,w,c
 10606  0028E4  6EF7               	movwf	tblptrh,c
 10607  0028E6                     	if	0	;There are less than 3 active tblptr bytes
 10608  0028E6                     	endif
 10609  0028E6  0009               	tblrd		*+
 10610  0028E8  50F5               	movf	tablat,w,c
 10611  0028EA  0100               	movlb	0	; () banked
 10612  0028EC  5DA4               	subwf	printf@val& (0+255),w,b
 10613  0028EE  0009               	tblrd		*+
 10614  0028F0  50F5               	movf	tablat,w,c
 10615  0028F2  0100               	movlb	0	; () banked
 10616  0028F4  59A5               	subwfb	(printf@val+1)& (0+255),w,b
 10617  0028F6  A0D8               	btfss	status,0,c
 10618  0028F8  D003               	goto	l6605
 10619                           
 10620                           ; BSR set to: 0
 10621                           
 10622                           ; BSR set to: 0
 10623                           
 10624                           ; BSR set to: 0
 10625                           ;doprnt.c: 1307: break;
 10626  0028FA  0100               	movlb	0	; () banked
 10627  0028FC  2BA6               	incf	printf@c& (0+255),f,b
 10628  0028FE  D7E5               	goto	l6593
 10629  002900                     l6605:
 10630                           
 10631                           ; BSR set to: 0
 10632                           ;doprnt.c: 1422: {
 10633                           ;doprnt.c: 1438: if(flag & 0x03)
 10634  002900  C0A2  F09F         	movff	printf@flag,??_printf
 10635  002904  0E03               	movlw	3
 10636  002906  0100               	movlb	0	; () banked
 10637  002908  179F               	andwf	??_printf& (0+255),f,b
 10638  00290A  B4D8               	btfsc	status,2,c
 10639  00290C  D003               	goto	l6609
 10640                           
 10641                           ; BSR set to: 0
 10642                           ;doprnt.c: 1439: (putch('-') );
 10643  00290E  0E2D               	movlw	45
 10644  002910  ECFE  F01D         	call	_putch
 10645  002914                     l6609:
 10646                           
 10647                           ;doprnt.c: 1469: }
 10648                           ;doprnt.c: 1472: prec = c;
 10649  002914  C0A6  F0A3         	movff	printf@c,printf@prec
 10650                           
 10651                           ;doprnt.c: 1474: while(prec--) {
 10652  002918  D029               	goto	l6615
 10653  00291A                     l6611:
 10654                           
 10655                           ;doprnt.c: 1478: {
 10656                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10657  00291A  0100               	movlb	0	; () banked
 10658  00291C  51A3               	movf	printf@prec& (0+255),w,b
 10659  00291E  0D02               	mullw	2
 10660  002920  0E01               	movlw	low _dpowers
 10661  002922  24F3               	addwf	prodl,w,c
 10662  002924  6EF6               	movwf	tblptrl,c
 10663  002926  0E08               	movlw	high _dpowers
 10664  002928  20F4               	addwfc	prodh,w,c
 10665  00292A  6EF7               	movwf	tblptrh,c
 10666  00292C                     	if	0	;There are less than 3 active tblptr bytes
 10667  00292C                     	endif
 10668  00292C  0009               	tblrd		*+
 10669  00292E  CFF5 F08F          	movff	tablat,___lwdiv@divisor
 10670  002932  000A               	tblrd		*-
 10671  002934  CFF5 F090          	movff	tablat,___lwdiv@divisor+1
 10672  002938  C0A4  F08D         	movff	printf@val,___lwdiv@dividend
 10673  00293C  C0A5  F08E         	movff	printf@val+1,___lwdiv@dividend+1
 10674  002940  ECEF  F01B         	call	___lwdiv	;wreg free
 10675  002944  C08D  F094         	movff	?___lwdiv,___lwmod@dividend
 10676  002948  C08E  F095         	movff	?___lwdiv+1,___lwmod@dividend+1
 10677  00294C  0E00               	movlw	0
 10678  00294E  0100               	movlb	0	; () banked
 10679  002950  6F97               	movwf	(___lwmod@divisor+1)& (0+255),b
 10680  002952  0E0A               	movlw	10
 10681  002954  6F96               	movwf	___lwmod@divisor& (0+255),b
 10682  002956  EC98  F01C         	call	___lwmod	;wreg free
 10683  00295A  0100               	movlb	0	; () banked
 10684  00295C  5194               	movf	?___lwmod& (0+255),w,b
 10685  00295E  0F30               	addlw	48
 10686  002960  0100               	movlb	0	; () banked
 10687  002962  6FA6               	movwf	printf@c& (0+255),b
 10688                           
 10689                           ; BSR set to: 0
 10690                           ;doprnt.c: 1523: }
 10691                           ;doprnt.c: 1524: (putch(c) );
 10692  002964  0100               	movlb	0	; () banked
 10693  002966  51A6               	movf	printf@c& (0+255),w,b
 10694  002968  ECFE  F01D         	call	_putch
 10695  00296C                     l6615:
 10696  00296C  0100               	movlb	0	; () banked
 10697  00296E  07A3               	decf	printf@prec& (0+255),f,b
 10698  002970  0100               	movlb	0	; () banked
 10699  002972  29A3               	incf	printf@prec& (0+255),w,b
 10700  002974  A4D8               	btfss	status,2,c
 10701  002976  D7D1               	goto	l6611
 10702  002978                     l6617:
 10703  002978  C099  FFF6         	movff	printf@f,tblptrl
 10704  00297C  C09A  FFF7         	movff	printf@f+1,tblptrh
 10705  002980  0100               	movlb	0	; () banked
 10706  002982  4B99               	infsnz	printf@f& (0+255),f,b
 10707  002984  2B9A               	incf	(printf@f+1)& (0+255),f,b
 10708  002986                     	if	0	;tblptru may be non-zero
 10709  002986                     	endif
 10710  002986                     	if	0	;tblptru may be non-zero
 10711  002986                     	endif
 10712  002986  0008               	tblrd		*
 10713  002988  CFF5 F0A6          	movff	tablat,printf@c
 10714  00298C  0100               	movlb	0	; () banked
 10715  00298E  51A6               	movf	printf@c& (0+255),w,b
 10716  002990  B4D8               	btfsc	status,2,c
 10717  002992  0012               	return	
 10718  002994  D75D               	goto	l6571
 10719  002996                     __end_of_printf:
 10720                           	opt stack 0
 10721                           tblptru	equ	0xFF8
 10722                           tblptrh	equ	0xFF7
 10723                           tblptrl	equ	0xFF6
 10724                           tablat	equ	0xFF5
 10725                           prodh	equ	0xFF4
 10726                           prodl	equ	0xFF3
 10727                           intcon	equ	0xFF2
 10728                           postinc0	equ	0xFEE
 10729                           wreg	equ	0xFE8
 10730                           postdec1	equ	0xFE5
 10731                           fsr1h	equ	0xFE2
 10732                           fsr1l	equ	0xFE1
 10733                           indf2	equ	0xFDF
 10734                           postinc2	equ	0xFDE
 10735                           postdec2	equ	0xFDD
 10736                           fsr2h	equ	0xFDA
 10737                           fsr2l	equ	0xFD9
 10738                           status	equ	0xFD8
 10739                           
 10740 ;; *************** function _putch *****************
 10741 ;; Defined at:
 10742 ;;		line 177 in file "../eusart1.c"
 10743 ;; Parameters:    Size  Location     Type
 10744 ;;  data            1    wreg     unsigned char 
 10745 ;; Auto vars:     Size  Location     Type
 10746 ;;  data            1    0[BANK0 ] unsigned char 
 10747 ;; Return value:  Size  Location     Type
 10748 ;;                  1    wreg      void 
 10749 ;; Registers used:
 10750 ;;		wreg
 10751 ;; Tracked objects:
 10752 ;;		On entry : 0/0
 10753 ;;		On exit  : 0/0
 10754 ;;		Unchanged: 0/0
 10755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10756 ;;      Params:         0       0       0       0       0       0       0       0       0
 10757 ;;      Locals:         0       1       0       0       0       0       0       0       0
 10758 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10759 ;;      Totals:         0       1       0       0       0       0       0       0       0
 10760 ;;Total ram usage:        1 bytes
 10761 ;; Hardware stack levels used:    1
 10762 ;; Hardware stack levels required when called:    3
 10763 ;; This function calls:
 10764 ;;		Nothing
 10765 ;; This function is called by:
 10766 ;;		_printf
 10767 ;; This function uses a non-reentrant model
 10768 ;;
 10769                           
 10770                           	psect	text25
 10771  003BFC                     __ptext25:
 10772                           	opt stack 0
 10773  003BFC                     _putch:
 10774                           	opt stack 25
 10775                           
 10776                           ; BSR set to: 0
 10777                           ;incstack = 0
 10778                           ;putch@data stored from wreg
 10779  003BFC  0100               	movlb	0	; () banked
 10780  003BFE  6F8D               	movwf	putch@data& (0+255),b
 10781  003C00                     l514:
 10782  003C00  A89E               	btfss	3998,4,c	;volatile
 10783  003C02  D7FE               	goto	l514
 10784                           
 10785                           ;eusart1.c: 180: TXREG1 = data;
 10786  003C04  C08D  FFAD         	movff	putch@data,4013	;volatile
 10787  003C08  0012               	return		;funcret
 10788  003C0A                     __end_of_putch:
 10789                           	opt stack 0
 10790                           tblptru	equ	0xFF8
 10791                           tblptrh	equ	0xFF7
 10792                           tblptrl	equ	0xFF6
 10793                           tablat	equ	0xFF5
 10794                           prodh	equ	0xFF4
 10795                           prodl	equ	0xFF3
 10796                           intcon	equ	0xFF2
 10797                           postinc0	equ	0xFEE
 10798                           wreg	equ	0xFE8
 10799                           postdec1	equ	0xFE5
 10800                           fsr1h	equ	0xFE2
 10801                           fsr1l	equ	0xFE1
 10802                           indf2	equ	0xFDF
 10803                           postinc2	equ	0xFDE
 10804                           postdec2	equ	0xFDD
 10805                           fsr2h	equ	0xFDA
 10806                           fsr2l	equ	0xFD9
 10807                           status	equ	0xFD8
 10808                           
 10809 ;; *************** function ___lwmod *****************
 10810 ;; Defined at:
 10811 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwmod.c"
 10812 ;; Parameters:    Size  Location     Type
 10813 ;;  dividend        2    7[BANK0 ] unsigned int 
 10814 ;;  divisor         2    9[BANK0 ] unsigned int 
 10815 ;; Auto vars:     Size  Location     Type
 10816 ;;  counter         1   11[BANK0 ] unsigned char 
 10817 ;; Return value:  Size  Location     Type
 10818 ;;                  2    7[BANK0 ] unsigned int 
 10819 ;; Registers used:
 10820 ;;		wreg, status,2, status,0
 10821 ;; Tracked objects:
 10822 ;;		On entry : 0/0
 10823 ;;		On exit  : 0/0
 10824 ;;		Unchanged: 0/0
 10825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10826 ;;      Params:         0       4       0       0       0       0       0       0       0
 10827 ;;      Locals:         0       1       0       0       0       0       0       0       0
 10828 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10829 ;;      Totals:         0       5       0       0       0       0       0       0       0
 10830 ;;Total ram usage:        5 bytes
 10831 ;; Hardware stack levels used:    1
 10832 ;; Hardware stack levels required when called:    3
 10833 ;; This function calls:
 10834 ;;		Nothing
 10835 ;; This function is called by:
 10836 ;;		_printf
 10837 ;; This function uses a non-reentrant model
 10838 ;;
 10839                           
 10840                           	psect	text26
 10841  003930                     __ptext26:
 10842                           	opt stack 0
 10843  003930                     ___lwmod:
 10844                           	opt stack 25
 10845                           
 10846                           ;incstack = 0
 10847  003930  0100               	movlb	0	; () banked
 10848  003932  5196               	movf	___lwmod@divisor& (0+255),w,b
 10849  003934  0100               	movlb	0	; () banked
 10850  003936  1197               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 10851  003938  B4D8               	btfsc	status,2,c
 10852  00393A  D026               	goto	l1618
 10853                           
 10854                           ; BSR set to: 0
 10855  00393C  0E01               	movlw	1
 10856  00393E  0100               	movlb	0	; () banked
 10857  003940  6F98               	movwf	___lwmod@counter& (0+255),b
 10858  003942  D006               	goto	l6555
 10859  003944                     l6553:
 10860                           
 10861                           ; BSR set to: 0
 10862  003944  0100               	movlb	0	; () banked
 10863  003946  90D8               	bcf	status,0,c
 10864  003948  3796               	rlcf	___lwmod@divisor& (0+255),f,b
 10865  00394A  3797               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 10866  00394C  0100               	movlb	0	; () banked
 10867  00394E  2B98               	incf	___lwmod@counter& (0+255),f,b
 10868  003950                     l6555:
 10869                           
 10870                           ; BSR set to: 0
 10871  003950  0100               	movlb	0	; () banked
 10872  003952  AF97               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 10873  003954  D7F7               	goto	l6553
 10874  003956                     l6557:
 10875                           
 10876                           ; BSR set to: 0
 10877  003956  0100               	movlb	0	; () banked
 10878  003958  5196               	movf	___lwmod@divisor& (0+255),w,b
 10879  00395A  0100               	movlb	0	; () banked
 10880  00395C  5D94               	subwf	___lwmod@dividend& (0+255),w,b
 10881  00395E  0100               	movlb	0	; () banked
 10882  003960  5197               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10883  003962  0100               	movlb	0	; () banked
 10884  003964  5995               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 10885  003966  A0D8               	btfss	status,0,c
 10886  003968  D008               	goto	l6561
 10887                           
 10888                           ; BSR set to: 0
 10889  00396A  0100               	movlb	0	; () banked
 10890  00396C  5196               	movf	___lwmod@divisor& (0+255),w,b
 10891  00396E  0100               	movlb	0	; () banked
 10892  003970  5F94               	subwf	___lwmod@dividend& (0+255),f,b
 10893  003972  0100               	movlb	0	; () banked
 10894  003974  5197               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10895  003976  0100               	movlb	0	; () banked
 10896  003978  5B95               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 10897  00397A                     l6561:
 10898                           
 10899                           ; BSR set to: 0
 10900  00397A  0100               	movlb	0	; () banked
 10901  00397C  90D8               	bcf	status,0,c
 10902  00397E  3397               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 10903  003980  3396               	rrcf	___lwmod@divisor& (0+255),f,b
 10904                           
 10905                           ; BSR set to: 0
 10906  003982  0100               	movlb	0	; () banked
 10907  003984  2F98               	decfsz	___lwmod@counter& (0+255),f,b
 10908  003986  D7E7               	goto	l6557
 10909  003988                     l1618:
 10910                           
 10911                           ; BSR set to: 0
 10912  003988  C094  F094         	movff	___lwmod@dividend,?___lwmod
 10913  00398C  C095  F095         	movff	___lwmod@dividend+1,?___lwmod+1
 10914                           
 10915                           ; BSR set to: 0
 10916  003990  0012               	return		;funcret
 10917  003992                     __end_of___lwmod:
 10918                           	opt stack 0
 10919                           tblptru	equ	0xFF8
 10920                           tblptrh	equ	0xFF7
 10921                           tblptrl	equ	0xFF6
 10922                           tablat	equ	0xFF5
 10923                           prodh	equ	0xFF4
 10924                           prodl	equ	0xFF3
 10925                           intcon	equ	0xFF2
 10926                           postinc0	equ	0xFEE
 10927                           wreg	equ	0xFE8
 10928                           postdec1	equ	0xFE5
 10929                           fsr1h	equ	0xFE2
 10930                           fsr1l	equ	0xFE1
 10931                           indf2	equ	0xFDF
 10932                           postinc2	equ	0xFDE
 10933                           postdec2	equ	0xFDD
 10934                           fsr2h	equ	0xFDA
 10935                           fsr2l	equ	0xFD9
 10936                           status	equ	0xFD8
 10937                           
 10938 ;; *************** function ___lwdiv *****************
 10939 ;; Defined at:
 10940 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\lwdiv.c"
 10941 ;; Parameters:    Size  Location     Type
 10942 ;;  dividend        2    0[BANK0 ] unsigned int 
 10943 ;;  divisor         2    2[BANK0 ] unsigned int 
 10944 ;; Auto vars:     Size  Location     Type
 10945 ;;  quotient        2    5[BANK0 ] unsigned int 
 10946 ;;  counter         1    4[BANK0 ] unsigned char 
 10947 ;; Return value:  Size  Location     Type
 10948 ;;                  2    0[BANK0 ] unsigned int 
 10949 ;; Registers used:
 10950 ;;		wreg, status,2, status,0
 10951 ;; Tracked objects:
 10952 ;;		On entry : 0/0
 10953 ;;		On exit  : 0/0
 10954 ;;		Unchanged: 0/0
 10955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10956 ;;      Params:         0       4       0       0       0       0       0       0       0
 10957 ;;      Locals:         0       3       0       0       0       0       0       0       0
 10958 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10959 ;;      Totals:         0       7       0       0       0       0       0       0       0
 10960 ;;Total ram usage:        7 bytes
 10961 ;; Hardware stack levels used:    1
 10962 ;; Hardware stack levels required when called:    3
 10963 ;; This function calls:
 10964 ;;		Nothing
 10965 ;; This function is called by:
 10966 ;;		_printf
 10967 ;; This function uses a non-reentrant model
 10968 ;;
 10969                           
 10970                           	psect	text27
 10971  0037DE                     __ptext27:
 10972                           	opt stack 0
 10973  0037DE                     ___lwdiv:
 10974                           	opt stack 25
 10975                           
 10976                           ; BSR set to: 0
 10977                           ;incstack = 0
 10978  0037DE  0E00               	movlw	0
 10979  0037E0  0100               	movlb	0	; () banked
 10980  0037E2  6F93               	movwf	(___lwdiv@quotient+1)& (0+255),b
 10981  0037E4  0E00               	movlw	0
 10982  0037E6  6F92               	movwf	___lwdiv@quotient& (0+255),b
 10983                           
 10984                           ; BSR set to: 0
 10985  0037E8  0100               	movlb	0	; () banked
 10986  0037EA  518F               	movf	___lwdiv@divisor& (0+255),w,b
 10987  0037EC  0100               	movlb	0	; () banked
 10988  0037EE  1190               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 10989  0037F0  B4D8               	btfsc	status,2,c
 10990  0037F2  D02C               	goto	l1608
 10991                           
 10992                           ; BSR set to: 0
 10993  0037F4  0E01               	movlw	1
 10994  0037F6  0100               	movlb	0	; () banked
 10995  0037F8  6F91               	movwf	___lwdiv@counter& (0+255),b
 10996  0037FA  D006               	goto	l6535
 10997  0037FC                     l6533:
 10998                           
 10999                           ; BSR set to: 0
 11000  0037FC  0100               	movlb	0	; () banked
 11001  0037FE  90D8               	bcf	status,0,c
 11002  003800  378F               	rlcf	___lwdiv@divisor& (0+255),f,b
 11003  003802  3790               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 11004  003804  0100               	movlb	0	; () banked
 11005  003806  2B91               	incf	___lwdiv@counter& (0+255),f,b
 11006  003808                     l6535:
 11007                           
 11008                           ; BSR set to: 0
 11009  003808  0100               	movlb	0	; () banked
 11010  00380A  AF90               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 11011  00380C  D7F7               	goto	l6533
 11012  00380E                     l6537:
 11013                           
 11014                           ; BSR set to: 0
 11015  00380E  0100               	movlb	0	; () banked
 11016  003810  90D8               	bcf	status,0,c
 11017  003812  3792               	rlcf	___lwdiv@quotient& (0+255),f,b
 11018  003814  3793               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 11019                           
 11020                           ; BSR set to: 0
 11021  003816  0100               	movlb	0	; () banked
 11022  003818  518F               	movf	___lwdiv@divisor& (0+255),w,b
 11023  00381A  0100               	movlb	0	; () banked
 11024  00381C  5D8D               	subwf	___lwdiv@dividend& (0+255),w,b
 11025  00381E  0100               	movlb	0	; () banked
 11026  003820  5190               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 11027  003822  0100               	movlb	0	; () banked
 11028  003824  598E               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 11029  003826  A0D8               	btfss	status,0,c
 11030  003828  D00A               	goto	l6545
 11031                           
 11032                           ; BSR set to: 0
 11033  00382A  0100               	movlb	0	; () banked
 11034  00382C  518F               	movf	___lwdiv@divisor& (0+255),w,b
 11035  00382E  0100               	movlb	0	; () banked
 11036  003830  5F8D               	subwf	___lwdiv@dividend& (0+255),f,b
 11037  003832  0100               	movlb	0	; () banked
 11038  003834  5190               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 11039  003836  0100               	movlb	0	; () banked
 11040  003838  5B8E               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 11041                           
 11042                           ; BSR set to: 0
 11043  00383A  0100               	movlb	0	; () banked
 11044  00383C  8192               	bsf	___lwdiv@quotient& (0+255),0,b
 11045  00383E                     l6545:
 11046                           
 11047                           ; BSR set to: 0
 11048  00383E  0100               	movlb	0	; () banked
 11049  003840  90D8               	bcf	status,0,c
 11050  003842  3390               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 11051  003844  338F               	rrcf	___lwdiv@divisor& (0+255),f,b
 11052                           
 11053                           ; BSR set to: 0
 11054  003846  0100               	movlb	0	; () banked
 11055  003848  2F91               	decfsz	___lwdiv@counter& (0+255),f,b
 11056  00384A  D7E1               	goto	l6537
 11057  00384C                     l1608:
 11058                           
 11059                           ; BSR set to: 0
 11060  00384C  C092  F08D         	movff	___lwdiv@quotient,?___lwdiv
 11061  003850  C093  F08E         	movff	___lwdiv@quotient+1,?___lwdiv+1
 11062                           
 11063                           ; BSR set to: 0
 11064  003854  0012               	return		;funcret
 11065  003856                     __end_of___lwdiv:
 11066                           	opt stack 0
 11067                           tblptru	equ	0xFF8
 11068                           tblptrh	equ	0xFF7
 11069                           tblptrl	equ	0xFF6
 11070                           tablat	equ	0xFF5
 11071                           prodh	equ	0xFF4
 11072                           prodl	equ	0xFF3
 11073                           intcon	equ	0xFF2
 11074                           postinc0	equ	0xFEE
 11075                           wreg	equ	0xFE8
 11076                           postdec1	equ	0xFE5
 11077                           fsr1h	equ	0xFE2
 11078                           fsr1l	equ	0xFE1
 11079                           indf2	equ	0xFDF
 11080                           postinc2	equ	0xFDE
 11081                           postdec2	equ	0xFDD
 11082                           fsr2h	equ	0xFDA
 11083                           fsr2l	equ	0xFD9
 11084                           status	equ	0xFD8
 11085                           
 11086 ;; *************** function _GETxAPIxVAL *****************
 11087 ;; Defined at:
 11088 ;;		line 201 in file "../api.c"
 11089 ;; Parameters:    Size  Location     Type
 11090 ;;  index           1    wreg     unsigned char 
 11091 ;; Auto vars:     Size  Location     Type
 11092 ;;  index           1    2[BANK0 ] unsigned char 
 11093 ;; Return value:  Size  Location     Type
 11094 ;;                  2    0[BANK0 ] unsigned int 
 11095 ;; Registers used:
 11096 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11097 ;; Tracked objects:
 11098 ;;		On entry : 0/0
 11099 ;;		On exit  : 0/0
 11100 ;;		Unchanged: 0/0
 11101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11102 ;;      Params:         0       2       0       0       0       0       0       0       0
 11103 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11104 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11105 ;;      Totals:         0       3       0       0       0       0       0       0       0
 11106 ;;Total ram usage:        3 bytes
 11107 ;; Hardware stack levels used:    1
 11108 ;; Hardware stack levels required when called:    3
 11109 ;; This function calls:
 11110 ;;		Nothing
 11111 ;; This function is called by:
 11112 ;;		_Update_StateMchn
 11113 ;;		_Train_Path
 11114 ;;		_TranslateMessage
 11115 ;;		_Eeprom_Store
 11116 ;;		_Debounce_Inputs
 11117 ;;		_Junction
 11118 ;;		_Train_Move_Left_Start
 11119 ;;		_Right_Mountain_From_The_Right
 11120 ;;		_Left_Mountain_From_The_Right
 11121 ;;		_Train_Move_Left_Brake
 11122 ;;		_Train_Move_Right_Start
 11123 ;;		_Left_Mountain_From_The_Left
 11124 ;;		_Right_Mountain_From_The_Left
 11125 ;;		_Train_Move_Right_Brake
 11126 ;;		_INCRxAPIxVAL
 11127 ;;		_DECRxAPIxVAL
 11128 ;; This function uses a non-reentrant model
 11129 ;;
 11130                           
 11131                           	psect	text28
 11132  003BA4                     __ptext28:
 11133                           	opt stack 0
 11134  003BA4                     _GETxAPIxVAL:
 11135                           	opt stack 24
 11136                           
 11137                           ; BSR set to: 0
 11138                           ;incstack = 0
 11139                           ;GETxAPIxVAL@index stored from wreg
 11140  003BA4  0100               	movlb	0	; () banked
 11141  003BA6  6F8F               	movwf	GETxAPIxVAL@index& (0+255),b
 11142                           
 11143                           ;api.c: 202: return API[index];
 11144  003BA8  0100               	movlb	0	; () banked
 11145  003BAA  518F               	movf	GETxAPIxVAL@index& (0+255),w,b
 11146  003BAC  0D02               	mullw	2
 11147  003BAE  0EFC               	movlw	low _API
 11148  003BB0  24F3               	addwf	prodl,w,c
 11149  003BB2  6ED9               	movwf	fsr2l,c
 11150  003BB4  0E01               	movlw	high _API
 11151  003BB6  20F4               	addwfc	prodh,w,c
 11152  003BB8  6EDA               	movwf	fsr2h,c
 11153  003BBA  CFDE F08D          	movff	postinc2,?_GETxAPIxVAL
 11154  003BBE  CFDD F08E          	movff	postdec2,?_GETxAPIxVAL+1
 11155  003BC2  0012               	return	
 11156  003BC4                     __end_of_GETxAPIxVAL:
 11157                           	opt stack 0
 11158                           tblptru	equ	0xFF8
 11159                           tblptrh	equ	0xFF7
 11160                           tblptrl	equ	0xFF6
 11161                           tablat	equ	0xFF5
 11162                           prodh	equ	0xFF4
 11163                           prodl	equ	0xFF3
 11164                           intcon	equ	0xFF2
 11165                           postinc0	equ	0xFEE
 11166                           wreg	equ	0xFE8
 11167                           postdec1	equ	0xFE5
 11168                           fsr1h	equ	0xFE2
 11169                           fsr1l	equ	0xFE1
 11170                           indf2	equ	0xFDF
 11171                           postinc2	equ	0xFDE
 11172                           postdec2	equ	0xFDD
 11173                           fsr2h	equ	0xFDA
 11174                           fsr2l	equ	0xFD9
 11175                           status	equ	0xFD8
 11176                           
 11177 ;; *************** function _GETxAPIxRW *****************
 11178 ;; Defined at:
 11179 ;;		line 191 in file "../api.c"
 11180 ;; Parameters:    Size  Location     Type
 11181 ;;  index           1    wreg     unsigned char 
 11182 ;; Auto vars:     Size  Location     Type
 11183 ;;  index           1    2[BANK0 ] unsigned char 
 11184 ;; Return value:  Size  Location     Type
 11185 ;;                  2    0[BANK0 ] unsigned int 
 11186 ;; Registers used:
 11187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11188 ;; Tracked objects:
 11189 ;;		On entry : 0/0
 11190 ;;		On exit  : 0/0
 11191 ;;		Unchanged: 0/0
 11192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11193 ;;      Params:         0       2       0       0       0       0       0       0       0
 11194 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11195 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11196 ;;      Totals:         0       3       0       0       0       0       0       0       0
 11197 ;;Total ram usage:        3 bytes
 11198 ;; Hardware stack levels used:    1
 11199 ;; Hardware stack levels required when called:    3
 11200 ;; This function calls:
 11201 ;;		Nothing
 11202 ;; This function is called by:
 11203 ;;		_TranslateMessage
 11204 ;; This function uses a non-reentrant model
 11205 ;;
 11206                           
 11207                           	psect	text29
 11208  003BC4                     __ptext29:
 11209                           	opt stack 0
 11210  003BC4                     _GETxAPIxRW:
 11211                           	opt stack 25
 11212                           
 11213                           ; BSR set to: 0
 11214                           ;incstack = 0
 11215                           ;GETxAPIxRW@index stored from wreg
 11216  003BC4  0100               	movlb	0	; () banked
 11217  003BC6  6F8F               	movwf	GETxAPIxRW@index& (0+255),b
 11218                           
 11219                           ;api.c: 192: return API_RW[index];
 11220  003BC8  0100               	movlb	0	; () banked
 11221  003BCA  518F               	movf	GETxAPIxRW@index& (0+255),w,b
 11222  003BCC  0D02               	mullw	2
 11223  003BCE  0E1C               	movlw	low _API_RW
 11224  003BD0  24F3               	addwf	prodl,w,c
 11225  003BD2  6ED9               	movwf	fsr2l,c
 11226  003BD4  0E03               	movlw	high _API_RW
 11227  003BD6  20F4               	addwfc	prodh,w,c
 11228  003BD8  6EDA               	movwf	fsr2h,c
 11229  003BDA  CFDE F08D          	movff	postinc2,?_GETxAPIxRW
 11230  003BDE  CFDD F08E          	movff	postdec2,?_GETxAPIxRW+1
 11231  003BE2  0012               	return	
 11232  003BE4                     __end_of_GETxAPIxRW:
 11233                           	opt stack 0
 11234                           tblptru	equ	0xFF8
 11235                           tblptrh	equ	0xFF7
 11236                           tblptrl	equ	0xFF6
 11237                           tablat	equ	0xFF5
 11238                           prodh	equ	0xFF4
 11239                           prodl	equ	0xFF3
 11240                           intcon	equ	0xFF2
 11241                           postinc0	equ	0xFEE
 11242                           wreg	equ	0xFE8
 11243                           postdec1	equ	0xFE5
 11244                           fsr1h	equ	0xFE2
 11245                           fsr1l	equ	0xFE1
 11246                           indf2	equ	0xFDF
 11247                           postinc2	equ	0xFDE
 11248                           postdec2	equ	0xFDD
 11249                           fsr2h	equ	0xFDA
 11250                           fsr2l	equ	0xFD9
 11251                           status	equ	0xFD8
 11252                           
 11253 ;; *************** function _EUSART1_Read *****************
 11254 ;; Defined at:
 11255 ;;		line 142 in file "../eusart1.c"
 11256 ;; Parameters:    Size  Location     Type
 11257 ;;		None
 11258 ;; Auto vars:     Size  Location     Type
 11259 ;;  readValue       1    0[BANK0 ] unsigned char 
 11260 ;; Return value:  Size  Location     Type
 11261 ;;                  1    wreg      unsigned char 
 11262 ;; Registers used:
 11263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11264 ;; Tracked objects:
 11265 ;;		On entry : 0/0
 11266 ;;		On exit  : 0/0
 11267 ;;		Unchanged: 0/0
 11268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11269 ;;      Params:         0       0       0       0       0       0       0       0       0
 11270 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11271 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11272 ;;      Totals:         0       1       0       0       0       0       0       0       0
 11273 ;;Total ram usage:        1 bytes
 11274 ;; Hardware stack levels used:    1
 11275 ;; Hardware stack levels required when called:    3
 11276 ;; This function calls:
 11277 ;;		Nothing
 11278 ;; This function is called by:
 11279 ;;		_READxRECEIVEDxMESSAGE
 11280 ;; This function uses a non-reentrant model
 11281 ;;
 11282                           
 11283                           	psect	text30
 11284  003A66                     __ptext30:
 11285                           	opt stack 0
 11286  003A66                     _EUSART1_Read:
 11287                           	opt stack 26
 11288                           
 11289                           ;eusart1.c: 143: uint8_t readValue = 0;
 11290                           
 11291                           ; BSR set to: 0
 11292                           ;incstack = 0
 11293  003A66  0E00               	movlw	0
 11294  003A68  0100               	movlb	0	; () banked
 11295  003A6A  6F8D               	movwf	EUSART1_Read@readValue& (0+255),b
 11296  003A6C                     l7819:
 11297  003A6C  501D               	movf	_eusart1RxCount,w,c	;volatile
 11298  003A6E  B4D8               	btfsc	status,2,c
 11299  003A70  D7FD               	goto	l7819
 11300                           
 11301                           ;eusart1.c: 146: }
 11302                           ;eusart1.c: 148: PIE1bits.RC1IE = 0;
 11303  003A72  9A9D               	bcf	3997,5,c	;volatile
 11304                           
 11305                           ;eusart1.c: 150: readValue = eusart1RxBuffer[eusart1RxTail++];
 11306  003A74  501F               	movf	_eusart1RxTail,w,c
 11307  003A76  0D01               	mullw	1
 11308  003A78  0E00               	movlw	low _eusart1RxBuffer
 11309  003A7A  24F3               	addwf	prodl,w,c
 11310  003A7C  6ED9               	movwf	fsr2l,c
 11311  003A7E  0E01               	movlw	high _eusart1RxBuffer
 11312  003A80  20F4               	addwfc	prodh,w,c
 11313  003A82  6EDA               	movwf	fsr2h,c
 11314  003A84  50DF               	movf	indf2,w,c
 11315  003A86  0100               	movlb	0	; () banked
 11316  003A88  6F8D               	movwf	EUSART1_Read@readValue& (0+255),b
 11317                           
 11318                           ; BSR set to: 0
 11319  003A8A  2A1F               	incf	_eusart1RxTail,f,c
 11320                           
 11321                           ; BSR set to: 0
 11322                           ;eusart1.c: 151: if (sizeof (eusart1RxBuffer) <= eusart1RxTail) {
 11323  003A8C  0E7D               	movlw	125
 11324  003A8E  641F               	cpfsgt	_eusart1RxTail,c
 11325  003A90  D002               	goto	l7829
 11326                           
 11327                           ; BSR set to: 0
 11328                           ;eusart1.c: 152: eusart1RxTail = 0;
 11329  003A92  0E00               	movlw	0
 11330  003A94  6E1F               	movwf	_eusart1RxTail,c
 11331  003A96                     l7829:
 11332                           
 11333                           ; BSR set to: 0
 11334                           ;eusart1.c: 153: }
 11335                           ;eusart1.c: 154: eusart1RxCount--;
 11336  003A96  061D               	decf	_eusart1RxCount,f,c	;volatile
 11337                           
 11338                           ; BSR set to: 0
 11339                           ;eusart1.c: 155: PIE1bits.RC1IE = 1;
 11340  003A98  8A9D               	bsf	3997,5,c	;volatile
 11341                           
 11342                           ; BSR set to: 0
 11343                           ;eusart1.c: 157: return readValue;
 11344  003A9A  0100               	movlb	0	; () banked
 11345  003A9C  518D               	movf	EUSART1_Read@readValue& (0+255),w,b
 11346  003A9E  0012               	return	
 11347  003AA0                     __end_of_EUSART1_Read:
 11348                           	opt stack 0
 11349                           tblptru	equ	0xFF8
 11350                           tblptrh	equ	0xFF7
 11351                           tblptrl	equ	0xFF6
 11352                           tablat	equ	0xFF5
 11353                           prodh	equ	0xFF4
 11354                           prodl	equ	0xFF3
 11355                           intcon	equ	0xFF2
 11356                           postinc0	equ	0xFEE
 11357                           wreg	equ	0xFE8
 11358                           postdec1	equ	0xFE5
 11359                           fsr1h	equ	0xFE2
 11360                           fsr1l	equ	0xFE1
 11361                           indf2	equ	0xFDF
 11362                           postinc2	equ	0xFDE
 11363                           postdec2	equ	0xFDD
 11364                           fsr2h	equ	0xFDA
 11365                           fsr2l	equ	0xFD9
 11366                           status	equ	0xFD8
 11367                           
 11368 ;; *************** function _Init_Timers *****************
 11369 ;; Defined at:
 11370 ;;		line 181 in file "../Main.c"
 11371 ;; Parameters:    Size  Location     Type
 11372 ;;		None
 11373 ;; Auto vars:     Size  Location     Type
 11374 ;;		None
 11375 ;; Return value:  Size  Location     Type
 11376 ;;                  1    wreg      void 
 11377 ;; Registers used:
 11378 ;;		wreg, status,2
 11379 ;; Tracked objects:
 11380 ;;		On entry : 0/0
 11381 ;;		On exit  : 0/0
 11382 ;;		Unchanged: 0/0
 11383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11384 ;;      Params:         0       0       0       0       0       0       0       0       0
 11385 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11386 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11387 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11388 ;;Total ram usage:        0 bytes
 11389 ;; Hardware stack levels used:    1
 11390 ;; Hardware stack levels required when called:    3
 11391 ;; This function calls:
 11392 ;;		Nothing
 11393 ;; This function is called by:
 11394 ;;		_main
 11395 ;; This function uses a non-reentrant model
 11396 ;;
 11397                           
 11398                           	psect	text31
 11399  003BE4                     __ptext31:
 11400                           	opt stack 0
 11401  003BE4                     _Init_Timers:
 11402                           	opt stack 27
 11403                           
 11404                           ;Main.c: 183: RCONbits.IPEN = 1;
 11405                           
 11406                           ; BSR set to: 0
 11407                           ;incstack = 0
 11408  003BE4  8ED0               	bsf	4048,7,c	;volatile
 11409                           
 11410                           ;Main.c: 184: INTCON = 0xA0;
 11411  003BE6  0EA0               	movlw	160
 11412  003BE8  6EF2               	movwf	intcon,c	;volatile
 11413                           
 11414                           ;Main.c: 185: INTCON2 = 0x84;
 11415  003BEA  0E84               	movlw	132
 11416  003BEC  6EF1               	movwf	intcon2,c	;volatile
 11417                           
 11418                           ;Main.c: 186: TMR0H = 0x0;
 11419  003BEE  0E00               	movlw	0
 11420  003BF0  6ED7               	movwf	4055,c	;volatile
 11421                           
 11422                           ;Main.c: 187: TMR0L = 0x0;
 11423  003BF2  0E00               	movlw	0
 11424  003BF4  6ED6               	movwf	4054,c	;volatile
 11425                           
 11426                           ;Main.c: 188: T0CON = 0xC3;
 11427  003BF6  0EC3               	movlw	195
 11428  003BF8  6ED5               	movwf	4053,c	;volatile
 11429  003BFA  0012               	return		;funcret
 11430  003BFC                     __end_of_Init_Timers:
 11431                           	opt stack 0
 11432                           tblptru	equ	0xFF8
 11433                           tblptrh	equ	0xFF7
 11434                           tblptrl	equ	0xFF6
 11435                           tablat	equ	0xFF5
 11436                           prodh	equ	0xFF4
 11437                           prodl	equ	0xFF3
 11438                           intcon	equ	0xFF2
 11439                           intcon2	equ	0xFF1
 11440                           postinc0	equ	0xFEE
 11441                           wreg	equ	0xFE8
 11442                           postdec1	equ	0xFE5
 11443                           fsr1h	equ	0xFE2
 11444                           fsr1l	equ	0xFE1
 11445                           indf2	equ	0xFDF
 11446                           postinc2	equ	0xFDE
 11447                           postdec2	equ	0xFDD
 11448                           fsr2h	equ	0xFDA
 11449                           fsr2l	equ	0xFD9
 11450                           status	equ	0xFD8
 11451                           
 11452 ;; *************** function _Init_Pwm *****************
 11453 ;; Defined at:
 11454 ;;		line 194 in file "../Main.c"
 11455 ;; Parameters:    Size  Location     Type
 11456 ;;		None
 11457 ;; Auto vars:     Size  Location     Type
 11458 ;;		None
 11459 ;; Return value:  Size  Location     Type
 11460 ;;                  1    wreg      void 
 11461 ;; Registers used:
 11462 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11463 ;; Tracked objects:
 11464 ;;		On entry : 0/0
 11465 ;;		On exit  : 0/0
 11466 ;;		Unchanged: 0/0
 11467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11468 ;;      Params:         0       0       0       0       0       0       0       0       0
 11469 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11470 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11471 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11472 ;;Total ram usage:        0 bytes
 11473 ;; Hardware stack levels used:    1
 11474 ;; Hardware stack levels required when called:    4
 11475 ;; This function calls:
 11476 ;;		_SETxAPIxVAL
 11477 ;; This function is called by:
 11478 ;;		_main
 11479 ;; This function uses a non-reentrant model
 11480 ;;
 11481                           
 11482                           	psect	text32
 11483  003B80                     __ptext32:
 11484                           	opt stack 0
 11485  003B80                     _Init_Pwm:
 11486                           	opt stack 26
 11487                           
 11488                           ;Main.c: 197: SETxAPIxVAL(69, 1);
 11489                           
 11490                           ;incstack = 0
 11491  003B80  0E00               	movlw	0
 11492  003B82  0100               	movlb	0	; () banked
 11493  003B84  6F91               	movwf	(SETxAPIxVAL@value+1)& (0+255),b
 11494  003B86  0E01               	movlw	1
 11495  003B88  6F90               	movwf	SETxAPIxVAL@value& (0+255),b
 11496  003B8A  0E45               	movlw	69
 11497  003B8C  EC11  F01D         	call	_SETxAPIxVAL
 11498                           
 11499                           ;Main.c: 198: PR2=0xFF;
 11500  003B90  68CB               	setf	4043,c	;volatile
 11501                           
 11502                           ;Main.c: 199: CCPR1L = 0x7F;
 11503  003B92  0E7F               	movlw	127
 11504  003B94  6EBE               	movwf	4030,c	;volatile
 11505                           
 11506                           ;Main.c: 200: CCP1CON = 0x0F;
 11507  003B96  0E0F               	movlw	15
 11508  003B98  6EBD               	movwf	4029,c	;volatile
 11509                           
 11510                           ;Main.c: 201: T2CON = 0x04;
 11511  003B9A  0E04               	movlw	4
 11512  003B9C  6ECA               	movwf	4042,c	;volatile
 11513                           
 11514                           ;Main.c: 202: TRISCbits.TRISC2=0;TRISCbits.TRISC0=0;;
 11515  003B9E  9494               	bcf	3988,2,c	;volatile
 11516  003BA0  9094               	bcf	3988,0,c	;volatile
 11517  003BA2  0012               	return		;funcret
 11518  003BA4                     __end_of_Init_Pwm:
 11519                           	opt stack 0
 11520                           tblptru	equ	0xFF8
 11521                           tblptrh	equ	0xFF7
 11522                           tblptrl	equ	0xFF6
 11523                           tablat	equ	0xFF5
 11524                           prodh	equ	0xFF4
 11525                           prodl	equ	0xFF3
 11526                           intcon	equ	0xFF2
 11527                           intcon2	equ	0xFF1
 11528                           postinc0	equ	0xFEE
 11529                           wreg	equ	0xFE8
 11530                           postdec1	equ	0xFE5
 11531                           fsr1h	equ	0xFE2
 11532                           fsr1l	equ	0xFE1
 11533                           indf2	equ	0xFDF
 11534                           postinc2	equ	0xFDE
 11535                           postdec2	equ	0xFDD
 11536                           fsr2h	equ	0xFDA
 11537                           fsr2l	equ	0xFD9
 11538                           status	equ	0xFD8
 11539                           
 11540 ;; *************** function _SETxAPIxVAL *****************
 11541 ;; Defined at:
 11542 ;;		line 195 in file "../api.c"
 11543 ;; Parameters:    Size  Location     Type
 11544 ;;  index           1    wreg     unsigned char 
 11545 ;;  value           2    3[BANK0 ] unsigned int 
 11546 ;; Auto vars:     Size  Location     Type
 11547 ;;  index           1    7[BANK0 ] unsigned char 
 11548 ;; Return value:  Size  Location     Type
 11549 ;;                  1    wreg      void 
 11550 ;; Registers used:
 11551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11552 ;; Tracked objects:
 11553 ;;		On entry : 0/0
 11554 ;;		On exit  : 0/0
 11555 ;;		Unchanged: 0/0
 11556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11557 ;;      Params:         0       2       0       0       0       0       0       0       0
 11558 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11559 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11560 ;;      Totals:         0       5       0       0       0       0       0       0       0
 11561 ;;Total ram usage:        5 bytes
 11562 ;; Hardware stack levels used:    1
 11563 ;; Hardware stack levels required when called:    3
 11564 ;; This function calls:
 11565 ;;		Nothing
 11566 ;; This function is called by:
 11567 ;;		_Init_Pwm
 11568 ;;		_Update_StateMchn
 11569 ;;		_Train_Path
 11570 ;;		_TranslateMessage
 11571 ;;		_Debounce_Inputs
 11572 ;;		_Junction
 11573 ;;		_Train_Move_Left_Start
 11574 ;;		_Train_Move_Left_Brake
 11575 ;;		_Train_Move_Right_Start
 11576 ;;		_Train_Move_Right_Brake
 11577 ;;		_SETxPWM
 11578 ;;		_INCRxAPIxVAL
 11579 ;;		_DECRxAPIxVAL
 11580 ;; This function uses a non-reentrant model
 11581 ;;
 11582                           
 11583                           	psect	text33
 11584  003A22                     __ptext33:
 11585                           	opt stack 0
 11586  003A22                     _SETxAPIxVAL:
 11587                           	opt stack 23
 11588                           
 11589                           ;incstack = 0
 11590                           ;SETxAPIxVAL@index stored from wreg
 11591  003A22  0100               	movlb	0	; () banked
 11592  003A24  6F94               	movwf	SETxAPIxVAL@index& (0+255),b
 11593                           
 11594                           ;api.c: 196: if(API[index] != value){
 11595  003A26  0100               	movlb	0	; () banked
 11596  003A28  5194               	movf	SETxAPIxVAL@index& (0+255),w,b
 11597  003A2A  0D02               	mullw	2
 11598  003A2C  0EFC               	movlw	low _API
 11599  003A2E  24F3               	addwf	prodl,w,c
 11600  003A30  6ED9               	movwf	fsr2l,c
 11601  003A32  0E01               	movlw	high _API
 11602  003A34  20F4               	addwfc	prodh,w,c
 11603  003A36  6EDA               	movwf	fsr2h,c
 11604  003A38  0100               	movlb	0	; () banked
 11605  003A3A  5190               	movf	SETxAPIxVAL@value& (0+255),w,b
 11606  003A3C  18DE               	xorwf	postinc2,w,c
 11607  003A3E  E105               	bnz	u6050
 11608  003A40  0100               	movlb	0	; () banked
 11609  003A42  5191               	movf	(SETxAPIxVAL@value+1)& (0+255),w,b
 11610  003A44  18DE               	xorwf	postinc2,w,c
 11611  003A46  B4D8               	btfsc	status,2,c
 11612  003A48  0012               	return	
 11613  003A4A                     u6050:
 11614                           
 11615                           ; BSR set to: 0
 11616                           ;api.c: 197: API[index] = value;
 11617  003A4A  0100               	movlb	0	; () banked
 11618  003A4C  5194               	movf	SETxAPIxVAL@index& (0+255),w,b
 11619  003A4E  0D02               	mullw	2
 11620  003A50  0EFC               	movlw	low _API
 11621  003A52  24F3               	addwf	prodl,w,c
 11622  003A54  6ED9               	movwf	fsr2l,c
 11623  003A56  0E01               	movlw	high _API
 11624  003A58  20F4               	addwfc	prodh,w,c
 11625  003A5A  6EDA               	movwf	fsr2h,c
 11626  003A5C  C090  FFDE         	movff	SETxAPIxVAL@value,postinc2
 11627  003A60  C091  FFDD         	movff	SETxAPIxVAL@value+1,postdec2
 11628  003A64  0012               	return	
 11629  003A66                     __end_of_SETxAPIxVAL:
 11630                           	opt stack 0
 11631                           tblptru	equ	0xFF8
 11632                           tblptrh	equ	0xFF7
 11633                           tblptrl	equ	0xFF6
 11634                           tablat	equ	0xFF5
 11635                           prodh	equ	0xFF4
 11636                           prodl	equ	0xFF3
 11637                           intcon	equ	0xFF2
 11638                           intcon2	equ	0xFF1
 11639                           postinc0	equ	0xFEE
 11640                           wreg	equ	0xFE8
 11641                           postdec1	equ	0xFE5
 11642                           fsr1h	equ	0xFE2
 11643                           fsr1l	equ	0xFE1
 11644                           indf2	equ	0xFDF
 11645                           postinc2	equ	0xFDE
 11646                           postdec2	equ	0xFDD
 11647                           fsr2h	equ	0xFDA
 11648                           fsr2l	equ	0xFD9
 11649                           status	equ	0xFD8
 11650                           
 11651 ;; *************** function _EUSART1_Initialize *****************
 11652 ;; Defined at:
 11653 ;;		line 77 in file "../eusart1.c"
 11654 ;; Parameters:    Size  Location     Type
 11655 ;;		None
 11656 ;; Auto vars:     Size  Location     Type
 11657 ;;  baud_rate       2    0[BANK0 ] unsigned int 
 11658 ;; Return value:  Size  Location     Type
 11659 ;;                  1    wreg      void 
 11660 ;; Registers used:
 11661 ;;		wreg, status,2
 11662 ;; Tracked objects:
 11663 ;;		On entry : 0/0
 11664 ;;		On exit  : 0/0
 11665 ;;		Unchanged: 0/0
 11666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11667 ;;      Params:         0       0       0       0       0       0       0       0       0
 11668 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11669 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11670 ;;      Totals:         0       2       0       0       0       0       0       0       0
 11671 ;;Total ram usage:        2 bytes
 11672 ;; Hardware stack levels used:    1
 11673 ;; Hardware stack levels required when called:    3
 11674 ;; This function calls:
 11675 ;;		Nothing
 11676 ;; This function is called by:
 11677 ;;		_main
 11678 ;; This function uses a non-reentrant model
 11679 ;;
 11680                           
 11681                           	psect	text34
 11682  003992                     __ptext34:
 11683                           	opt stack 0
 11684  003992                     _EUSART1_Initialize:
 11685                           	opt stack 27
 11686                           
 11687                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
 11688                           
 11689                           ; BSR set to: 0
 11690                           ;incstack = 0
 11691  003992  9A9D               	bcf	3997,5,c	;volatile
 11692                           
 11693                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
 11694  003994  989D               	bcf	3997,4,c	;volatile
 11695                           
 11696                           ;eusart1.c: 84: BAUDCONbits.BRG16 = 1;
 11697  003996  86B8               	bsf	4024,3,c	;volatile
 11698                           
 11699                           ;eusart1.c: 86: RCSTAbits.SPEN = 1;
 11700  003998  8EAB               	bsf	4011,7,c	;volatile
 11701                           
 11702                           ;eusart1.c: 87: RCSTAbits.RX9 = 0;
 11703  00399A  9CAB               	bcf	4011,6,c	;volatile
 11704                           
 11705                           ;eusart1.c: 88: RCSTAbits.CREN = 1;
 11706  00399C  88AB               	bsf	4011,4,c	;volatile
 11707                           
 11708                           ;eusart1.c: 89: RCSTAbits.ADDEN = 0;
 11709  00399E  96AB               	bcf	4011,3,c	;volatile
 11710                           
 11711                           ;eusart1.c: 91: TXSTAbits.TX9 = 0;
 11712  0039A0  9CAC               	bcf	4012,6,c	;volatile
 11713                           
 11714                           ;eusart1.c: 92: TXSTAbits.TXEN = 1;
 11715  0039A2  8AAC               	bsf	4012,5,c	;volatile
 11716                           
 11717                           ;eusart1.c: 93: TXSTAbits.SYNC = 0;
 11718  0039A4  98AC               	bcf	4012,4,c	;volatile
 11719                           
 11720                           ;eusart1.c: 94: TXSTAbits.SENDB = 0;
 11721  0039A6  96AC               	bcf	4012,3,c	;volatile
 11722                           
 11723                           ;eusart1.c: 95: TXSTAbits.BRGH = 1;
 11724  0039A8  84AC               	bsf	4012,2,c	;volatile
 11725                           
 11726                           ;eusart1.c: 96: TXSTAbits.TRMT = 1;
 11727  0039AA  82AC               	bsf	4012,1,c	;volatile
 11728                           
 11729                           ;eusart1.c: 97: TXSTAbits.TX9D = 0;
 11730  0039AC  90AC               	bcf	4012,0,c	;volatile
 11731                           
 11732                           ;eusart1.c: 99: unsigned int baud_rate;
 11733                           ;eusart1.c: 101: baud_rate = 417;
 11734  0039AE  0E01               	movlw	1
 11735  0039B0  0100               	movlb	0	; () banked
 11736  0039B2  6F8E               	movwf	(EUSART1_Initialize@baud_rate+1)& (0+255),b
 11737  0039B4  0EA1               	movlw	161
 11738  0039B6  6F8D               	movwf	EUSART1_Initialize@baud_rate& (0+255),b
 11739                           
 11740                           ;eusart1.c: 103: SPBRGH = baud_rate >> 8;
 11741  0039B8  0100               	movlb	0	; () banked
 11742  0039BA  518E               	movf	(EUSART1_Initialize@baud_rate+1)& (0+255),w,b
 11743  0039BC  6EB0               	movwf	4016,c	;volatile
 11744                           
 11745                           ; BSR set to: 0
 11746                           ;eusart1.c: 104: SPBRG = baud_rate;
 11747  0039BE  C08D  FFAF         	movff	EUSART1_Initialize@baud_rate,4015	;volatile
 11748                           
 11749                           ;eusart1.c: 108: eusart1TxHead = 0;
 11750  0039C2  0E00               	movlw	0
 11751  0039C4  6E21               	movwf	_eusart1TxHead,c
 11752                           
 11753                           ;eusart1.c: 109: eusart1TxTail = 0;
 11754  0039C6  0E00               	movlw	0
 11755  0039C8  6E22               	movwf	_eusart1TxTail,c
 11756                           
 11757                           ;eusart1.c: 110: eusart1TxBufferRemaining = sizeof (eusart1TxBuffer);
 11758  0039CA  0E7E               	movlw	126
 11759  0039CC  6E20               	movwf	_eusart1TxBufferRemaining,c	;volatile
 11760                           
 11761                           ;eusart1.c: 112: eusart1RxHead = 0;
 11762  0039CE  0E00               	movlw	0
 11763  0039D0  6E1E               	movwf	_eusart1RxHead,c
 11764                           
 11765                           ;eusart1.c: 113: eusart1RxTail = 0;
 11766  0039D2  0E00               	movlw	0
 11767  0039D4  6E1F               	movwf	_eusart1RxTail,c
 11768                           
 11769                           ;eusart1.c: 114: eusart1RxCount = 0;
 11770  0039D6  0E00               	movlw	0
 11771  0039D8  6E1D               	movwf	_eusart1RxCount,c	;volatile
 11772                           
 11773                           ; BSR set to: 0
 11774                           ;eusart1.c: 117: PIE1bits.RC1IE = 1;
 11775  0039DA  8A9D               	bsf	3997,5,c	;volatile
 11776                           
 11777                           ; BSR set to: 0
 11778  0039DC  0012               	return		;funcret
 11779  0039DE                     __end_of_EUSART1_Initialize:
 11780                           	opt stack 0
 11781                           tblptru	equ	0xFF8
 11782                           tblptrh	equ	0xFF7
 11783                           tblptrl	equ	0xFF6
 11784                           tablat	equ	0xFF5
 11785                           prodh	equ	0xFF4
 11786                           prodl	equ	0xFF3
 11787                           intcon	equ	0xFF2
 11788                           intcon2	equ	0xFF1
 11789                           postinc0	equ	0xFEE
 11790                           wreg	equ	0xFE8
 11791                           postdec1	equ	0xFE5
 11792                           fsr1h	equ	0xFE2
 11793                           fsr1l	equ	0xFE1
 11794                           indf2	equ	0xFDF
 11795                           postinc2	equ	0xFDE
 11796                           postdec2	equ	0xFDD
 11797                           fsr2h	equ	0xFDA
 11798                           fsr2l	equ	0xFD9
 11799                           status	equ	0xFD8
 11800                           
 11801 ;; *************** function _APIxInitialize *****************
 11802 ;; Defined at:
 11803 ;;		line 32 in file "../api.c"
 11804 ;; Parameters:    Size  Location     Type
 11805 ;;		None
 11806 ;; Auto vars:     Size  Location     Type
 11807 ;;  i               2    0[BANK0 ] unsigned int 
 11808 ;; Return value:  Size  Location     Type
 11809 ;;                  1    wreg      void 
 11810 ;; Registers used:
 11811 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11812 ;; Tracked objects:
 11813 ;;		On entry : 0/0
 11814 ;;		On exit  : 0/0
 11815 ;;		Unchanged: 0/0
 11816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11817 ;;      Params:         0       0       0       0       0       0       0       0       0
 11818 ;;      Locals:         0       2       0       0       0       0       0       0       0
 11819 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11820 ;;      Totals:         0       2       0       0       0       0       0       0       0
 11821 ;;Total ram usage:        2 bytes
 11822 ;; Hardware stack levels used:    1
 11823 ;; Hardware stack levels required when called:    3
 11824 ;; This function calls:
 11825 ;;		Nothing
 11826 ;; This function is called by:
 11827 ;;		_main
 11828 ;; This function uses a non-reentrant model
 11829 ;;
 11830                           
 11831                           	psect	text35
 11832  001B50                     __ptext35:
 11833                           	opt stack 0
 11834  001B50                     _APIxInitialize:
 11835                           	opt stack 27
 11836                           
 11837                           ;api.c: 34: unsigned int i;
 11838                           ;api.c: 35: for(i = 0; i < (0x90 + 1); i++ )
 11839                           
 11840                           ; BSR set to: 0
 11841                           ;incstack = 0
 11842  001B50  0E00               	movlw	0
 11843  001B52  0100               	movlb	0	; () banked
 11844  001B54  6F8E               	movwf	(APIxInitialize@i+1)& (0+255),b
 11845  001B56  0E00               	movlw	0
 11846  001B58  6F8D               	movwf	APIxInitialize@i& (0+255),b
 11847                           
 11848                           ; BSR set to: 0
 11849  001B5A  0100               	movlb	0	; () banked
 11850  001B5C  518E               	movf	(APIxInitialize@i+1)& (0+255),w,b
 11851  001B5E  E12A               	bnz	l620
 11852  001B60  0E91               	movlw	145
 11853  001B62  0100               	movlb	0	; () banked
 11854  001B64  5D8D               	subwf	APIxInitialize@i& (0+255),w,b
 11855  001B66  B0D8               	btfsc	status,0,c
 11856  001B68  D025               	goto	l620
 11857                           
 11858                           ; BSR set to: 0
 11859                           ;api.c: 36: {
 11860                           ;api.c: 37: API_RW[i] = 0;
 11861                           
 11862                           ; BSR set to: 0
 11863                           
 11864                           ; BSR set to: 0
 11865  001B6A  90D8               	bcf	status,0,c
 11866  001B6C  0100               	movlb	0	; () banked
 11867  001B6E  358D               	rlcf	APIxInitialize@i& (0+255),w,b
 11868  001B70  6ED9               	movwf	fsr2l,c
 11869  001B72  0100               	movlb	0	; () banked
 11870  001B74  358E               	rlcf	(APIxInitialize@i+1)& (0+255),w,b
 11871  001B76  6EDA               	movwf	fsr2h,c
 11872  001B78  0E1C               	movlw	low _API_RW
 11873  001B7A  26D9               	addwf	fsr2l,f,c
 11874  001B7C  0E03               	movlw	high _API_RW
 11875  001B7E  22DA               	addwfc	fsr2h,f,c
 11876  001B80  0E00               	movlw	0
 11877  001B82  6EDE               	movwf	postinc2,c
 11878  001B84  0E00               	movlw	0
 11879  001B86  6EDD               	movwf	postdec2,c
 11880                           
 11881                           ;api.c: 38: API[i] = 0;
 11882  001B88  90D8               	bcf	status,0,c
 11883  001B8A  0100               	movlb	0	; () banked
 11884  001B8C  358D               	rlcf	APIxInitialize@i& (0+255),w,b
 11885  001B8E  6ED9               	movwf	fsr2l,c
 11886  001B90  0100               	movlb	0	; () banked
 11887  001B92  358E               	rlcf	(APIxInitialize@i+1)& (0+255),w,b
 11888  001B94  6EDA               	movwf	fsr2h,c
 11889  001B96  0EFC               	movlw	low _API
 11890  001B98  26D9               	addwf	fsr2l,f,c
 11891  001B9A  0E01               	movlw	high _API
 11892  001B9C  22DA               	addwfc	fsr2h,f,c
 11893  001B9E  0E00               	movlw	0
 11894  001BA0  6EDE               	movwf	postinc2,c
 11895  001BA2  0E00               	movlw	0
 11896  001BA4  6EDD               	movwf	postdec2,c
 11897                           
 11898                           ; BSR set to: 0
 11899  001BA6  0100               	movlb	0	; () banked
 11900  001BA8  4B8D               	infsnz	APIxInitialize@i& (0+255),f,b
 11901  001BAA  2B8E               	incf	(APIxInitialize@i+1)& (0+255),f,b
 11902                           
 11903                           ; BSR set to: 0
 11904  001BAC  0100               	movlb	0	; () banked
 11905  001BAE  518E               	movf	(APIxInitialize@i+1)& (0+255),w,b
 11906  001BB0  E101               	bnz	u8010
 11907  001BB2  D7D6               	goto	L92
 11908  001BB4                     u8010:
 11909  001BB4                     l620:
 11910                           
 11911                           ; BSR set to: 0
 11912                           ;api.c: 39: }
 11913                           ;api.c: 42: API_RW[16] = 0;
 11914  001BB4  0E00               	movlw	0
 11915  001BB6  CFE8 F33C          	movff	wreg,_API_RW+32
 11916  001BBA  0E00               	movlw	0
 11917  001BBC  CFE8 F33D          	movff	wreg,_API_RW+33
 11918                           
 11919                           ;api.c: 43: API_RW[18] = 1;
 11920  001BC0  0E01               	movlw	1
 11921  001BC2  CFE8 F340          	movff	wreg,_API_RW+36
 11922  001BC6  0E00               	movlw	0
 11923  001BC8  CFE8 F341          	movff	wreg,_API_RW+37
 11924                           
 11925                           ;api.c: 44: API_RW[19] = 1;
 11926  001BCC  0E01               	movlw	1
 11927  001BCE  CFE8 F342          	movff	wreg,_API_RW+38
 11928  001BD2  0E00               	movlw	0
 11929  001BD4  CFE8 F343          	movff	wreg,_API_RW+39
 11930                           
 11931                           ;api.c: 45: API_RW[20] = 1;
 11932  001BD8  0E01               	movlw	1
 11933  001BDA  CFE8 F344          	movff	wreg,_API_RW+40
 11934  001BDE  0E00               	movlw	0
 11935  001BE0  CFE8 F345          	movff	wreg,_API_RW+41
 11936                           
 11937                           ;api.c: 46: API_RW[21] = 1;
 11938  001BE4  0E01               	movlw	1
 11939  001BE6  CFE8 F346          	movff	wreg,_API_RW+42
 11940  001BEA  0E00               	movlw	0
 11941  001BEC  CFE8 F347          	movff	wreg,_API_RW+43
 11942                           
 11943                           ;api.c: 47: API_RW[22] = 1;
 11944  001BF0  0E01               	movlw	1
 11945  001BF2  CFE8 F348          	movff	wreg,_API_RW+44
 11946  001BF6  0E00               	movlw	0
 11947  001BF8  CFE8 F349          	movff	wreg,_API_RW+45
 11948                           
 11949                           ;api.c: 48: API_RW[23] = 1;
 11950  001BFC  0E01               	movlw	1
 11951  001BFE  CFE8 F34A          	movff	wreg,_API_RW+46
 11952  001C02  0E00               	movlw	0
 11953  001C04  CFE8 F34B          	movff	wreg,_API_RW+47
 11954                           
 11955                           ;api.c: 49: API_RW[24] = 1;
 11956  001C08  0E01               	movlw	1
 11957  001C0A  CFE8 F34C          	movff	wreg,_API_RW+48
 11958  001C0E  0E00               	movlw	0
 11959  001C10  CFE8 F34D          	movff	wreg,_API_RW+49
 11960                           
 11961                           ;api.c: 50: API_RW[25] = 1;
 11962  001C14  0E01               	movlw	1
 11963  001C16  CFE8 F34E          	movff	wreg,_API_RW+50
 11964  001C1A  0E00               	movlw	0
 11965  001C1C  CFE8 F34F          	movff	wreg,_API_RW+51
 11966                           
 11967                           ;api.c: 51: API_RW[26] = 1;
 11968  001C20  0E01               	movlw	1
 11969  001C22  CFE8 F350          	movff	wreg,_API_RW+52
 11970  001C26  0E00               	movlw	0
 11971  001C28  CFE8 F351          	movff	wreg,_API_RW+53
 11972                           
 11973                           ;api.c: 52: API_RW[27] = 1;
 11974  001C2C  0E01               	movlw	1
 11975  001C2E  CFE8 F352          	movff	wreg,_API_RW+54
 11976  001C32  0E00               	movlw	0
 11977  001C34  CFE8 F353          	movff	wreg,_API_RW+55
 11978                           
 11979                           ;api.c: 53: API_RW[28] = 0;
 11980  001C38  0E00               	movlw	0
 11981  001C3A  CFE8 F354          	movff	wreg,_API_RW+56
 11982  001C3E  0E00               	movlw	0
 11983  001C40  CFE8 F355          	movff	wreg,_API_RW+57
 11984                           
 11985                           ;api.c: 54: API_RW[29] = 0;
 11986  001C44  0E00               	movlw	0
 11987  001C46  CFE8 F356          	movff	wreg,_API_RW+58
 11988  001C4A  0E00               	movlw	0
 11989  001C4C  CFE8 F357          	movff	wreg,_API_RW+59
 11990                           
 11991                           ;api.c: 55: API_RW[30] = 0;
 11992  001C50  0E00               	movlw	0
 11993  001C52  CFE8 F358          	movff	wreg,_API_RW+60
 11994  001C56  0E00               	movlw	0
 11995  001C58  CFE8 F359          	movff	wreg,_API_RW+61
 11996                           
 11997                           ;api.c: 56: API_RW[31] = 0;
 11998  001C5C  0E00               	movlw	0
 11999  001C5E  CFE8 F35A          	movff	wreg,_API_RW+62
 12000  001C62  0E00               	movlw	0
 12001  001C64  CFE8 F35B          	movff	wreg,_API_RW+63
 12002                           
 12003                           ;api.c: 57: API_RW[32] = 0;
 12004  001C68  0E00               	movlw	0
 12005  001C6A  CFE8 F35C          	movff	wreg,_API_RW+64
 12006  001C6E  0E00               	movlw	0
 12007  001C70  CFE8 F35D          	movff	wreg,_API_RW+65
 12008                           
 12009                           ;api.c: 58: API_RW[33] = 0;
 12010  001C74  0E00               	movlw	0
 12011  001C76  CFE8 F35E          	movff	wreg,_API_RW+66
 12012  001C7A  0E00               	movlw	0
 12013  001C7C  CFE8 F35F          	movff	wreg,_API_RW+67
 12014                           
 12015                           ;api.c: 59: API_RW[34] = 0;
 12016  001C80  0E00               	movlw	0
 12017  001C82  CFE8 F360          	movff	wreg,_API_RW+68
 12018  001C86  0E00               	movlw	0
 12019  001C88  CFE8 F361          	movff	wreg,_API_RW+69
 12020                           
 12021                           ;api.c: 60: API_RW[35] = 0;
 12022  001C8C  0E00               	movlw	0
 12023  001C8E  CFE8 F362          	movff	wreg,_API_RW+70
 12024  001C92  0E00               	movlw	0
 12025  001C94  CFE8 F363          	movff	wreg,_API_RW+71
 12026                           
 12027                           ;api.c: 61: API_RW[36] = 0;
 12028  001C98  0E00               	movlw	0
 12029  001C9A  CFE8 F364          	movff	wreg,_API_RW+72
 12030  001C9E  0E00               	movlw	0
 12031  001CA0  CFE8 F365          	movff	wreg,_API_RW+73
 12032                           
 12033                           ;api.c: 62: API_RW[37] = 0;
 12034  001CA4  0E00               	movlw	0
 12035  001CA6  CFE8 F366          	movff	wreg,_API_RW+74
 12036  001CAA  0E00               	movlw	0
 12037  001CAC  CFE8 F367          	movff	wreg,_API_RW+75
 12038                           
 12039                           ;api.c: 63: API_RW[38] = 0;
 12040  001CB0  0E00               	movlw	0
 12041  001CB2  CFE8 F368          	movff	wreg,_API_RW+76
 12042  001CB6  0E00               	movlw	0
 12043  001CB8  CFE8 F369          	movff	wreg,_API_RW+77
 12044                           
 12045                           ;api.c: 64: API_RW[39] = 1;
 12046  001CBC  0E01               	movlw	1
 12047  001CBE  CFE8 F36A          	movff	wreg,_API_RW+78
 12048  001CC2  0E00               	movlw	0
 12049  001CC4  CFE8 F36B          	movff	wreg,_API_RW+79
 12050                           
 12051                           ;api.c: 65: API_RW[40] = 1;
 12052  001CC8  0E01               	movlw	1
 12053  001CCA  CFE8 F36C          	movff	wreg,_API_RW+80
 12054  001CCE  0E00               	movlw	0
 12055  001CD0  CFE8 F36D          	movff	wreg,_API_RW+81
 12056                           
 12057                           ;api.c: 66: API_RW[41] = 0;
 12058  001CD4  0E00               	movlw	0
 12059  001CD6  CFE8 F36E          	movff	wreg,_API_RW+82
 12060  001CDA  0E00               	movlw	0
 12061  001CDC  CFE8 F36F          	movff	wreg,_API_RW+83
 12062                           
 12063                           ;api.c: 67: API_RW[42] = 0;
 12064  001CE0  0E00               	movlw	0
 12065  001CE2  CFE8 F370          	movff	wreg,_API_RW+84
 12066  001CE6  0E00               	movlw	0
 12067  001CE8  CFE8 F371          	movff	wreg,_API_RW+85
 12068                           
 12069                           ;api.c: 68: API_RW[43] = 0;
 12070  001CEC  0E00               	movlw	0
 12071  001CEE  CFE8 F372          	movff	wreg,_API_RW+86
 12072  001CF2  0E00               	movlw	0
 12073  001CF4  CFE8 F373          	movff	wreg,_API_RW+87
 12074                           
 12075                           ;api.c: 69: API_RW[44] = 0;
 12076  001CF8  0E00               	movlw	0
 12077  001CFA  CFE8 F374          	movff	wreg,_API_RW+88
 12078  001CFE  0E00               	movlw	0
 12079  001D00  CFE8 F375          	movff	wreg,_API_RW+89
 12080                           
 12081                           ;api.c: 70: API_RW[45] = 1;
 12082  001D04  0E01               	movlw	1
 12083  001D06  CFE8 F376          	movff	wreg,_API_RW+90
 12084  001D0A  0E00               	movlw	0
 12085  001D0C  CFE8 F377          	movff	wreg,_API_RW+91
 12086                           
 12087                           ;api.c: 71: API_RW[46] = 1;
 12088  001D10  0E01               	movlw	1
 12089  001D12  CFE8 F378          	movff	wreg,_API_RW+92
 12090  001D16  0E00               	movlw	0
 12091  001D18  CFE8 F379          	movff	wreg,_API_RW+93
 12092                           
 12093                           ;api.c: 72: API_RW[47] = 1;
 12094  001D1C  0E01               	movlw	1
 12095  001D1E  CFE8 F37A          	movff	wreg,_API_RW+94
 12096  001D22  0E00               	movlw	0
 12097  001D24  CFE8 F37B          	movff	wreg,_API_RW+95
 12098                           
 12099                           ;api.c: 73: API_RW[48] = 1;
 12100  001D28  0E01               	movlw	1
 12101  001D2A  CFE8 F37C          	movff	wreg,_API_RW+96
 12102  001D2E  0E00               	movlw	0
 12103  001D30  CFE8 F37D          	movff	wreg,_API_RW+97
 12104                           
 12105                           ;api.c: 74: API_RW[49] = 1;
 12106  001D34  0E01               	movlw	1
 12107  001D36  CFE8 F37E          	movff	wreg,_API_RW+98
 12108  001D3A  0E00               	movlw	0
 12109  001D3C  CFE8 F37F          	movff	wreg,_API_RW+99
 12110                           
 12111                           ;api.c: 75: API_RW[50] = 1;
 12112  001D40  0E01               	movlw	1
 12113  001D42  CFE8 F380          	movff	wreg,_API_RW+100
 12114  001D46  0E00               	movlw	0
 12115  001D48  CFE8 F381          	movff	wreg,_API_RW+101
 12116                           
 12117                           ;api.c: 76: API_RW[51] = 1;
 12118  001D4C  0E01               	movlw	1
 12119  001D4E  CFE8 F382          	movff	wreg,_API_RW+102
 12120  001D52  0E00               	movlw	0
 12121  001D54  CFE8 F383          	movff	wreg,_API_RW+103
 12122                           
 12123                           ;api.c: 77: API_RW[52] = 1;
 12124  001D58  0E01               	movlw	1
 12125  001D5A  CFE8 F384          	movff	wreg,_API_RW+104
 12126  001D5E  0E00               	movlw	0
 12127  001D60  CFE8 F385          	movff	wreg,_API_RW+105
 12128                           
 12129                           ;api.c: 78: API_RW[53] = 1;
 12130  001D64  0E01               	movlw	1
 12131  001D66  CFE8 F386          	movff	wreg,_API_RW+106
 12132  001D6A  0E00               	movlw	0
 12133  001D6C  CFE8 F387          	movff	wreg,_API_RW+107
 12134                           
 12135                           ;api.c: 79: API_RW[54] = 1;
 12136  001D70  0E01               	movlw	1
 12137  001D72  CFE8 F388          	movff	wreg,_API_RW+108
 12138  001D76  0E00               	movlw	0
 12139  001D78  CFE8 F389          	movff	wreg,_API_RW+109
 12140                           
 12141                           ;api.c: 80: API_RW[55] = 1;
 12142  001D7C  0E01               	movlw	1
 12143  001D7E  CFE8 F38A          	movff	wreg,_API_RW+110
 12144  001D82  0E00               	movlw	0
 12145  001D84  CFE8 F38B          	movff	wreg,_API_RW+111
 12146                           
 12147                           ;api.c: 81: API_RW[56] = 1;
 12148  001D88  0E01               	movlw	1
 12149  001D8A  CFE8 F38C          	movff	wreg,_API_RW+112
 12150  001D8E  0E00               	movlw	0
 12151  001D90  CFE8 F38D          	movff	wreg,_API_RW+113
 12152                           
 12153                           ;api.c: 82: API_RW[57] = 1;
 12154  001D94  0E01               	movlw	1
 12155  001D96  CFE8 F38E          	movff	wreg,_API_RW+114
 12156  001D9A  0E00               	movlw	0
 12157  001D9C  CFE8 F38F          	movff	wreg,_API_RW+115
 12158                           
 12159                           ;api.c: 83: API_RW[58] = 1;
 12160  001DA0  0E01               	movlw	1
 12161  001DA2  CFE8 F390          	movff	wreg,_API_RW+116
 12162  001DA6  0E00               	movlw	0
 12163  001DA8  CFE8 F391          	movff	wreg,_API_RW+117
 12164                           
 12165                           ;api.c: 84: API_RW[59] = 1;
 12166  001DAC  0E01               	movlw	1
 12167  001DAE  CFE8 F392          	movff	wreg,_API_RW+118
 12168  001DB2  0E00               	movlw	0
 12169  001DB4  CFE8 F393          	movff	wreg,_API_RW+119
 12170                           
 12171                           ;api.c: 85: API_RW[60] = 1;
 12172  001DB8  0E01               	movlw	1
 12173  001DBA  CFE8 F394          	movff	wreg,_API_RW+120
 12174  001DBE  0E00               	movlw	0
 12175  001DC0  CFE8 F395          	movff	wreg,_API_RW+121
 12176                           
 12177                           ;api.c: 86: API_RW[61] = 0;
 12178  001DC4  0E00               	movlw	0
 12179  001DC6  CFE8 F396          	movff	wreg,_API_RW+122
 12180  001DCA  0E00               	movlw	0
 12181  001DCC  CFE8 F397          	movff	wreg,_API_RW+123
 12182                           
 12183                           ;api.c: 87: API_RW[62] = 0;
 12184  001DD0  0E00               	movlw	0
 12185  001DD2  CFE8 F398          	movff	wreg,_API_RW+124
 12186  001DD6  0E00               	movlw	0
 12187  001DD8  CFE8 F399          	movff	wreg,_API_RW+125
 12188                           
 12189                           ;api.c: 88: API_RW[63] = 0;
 12190  001DDC  0E00               	movlw	0
 12191  001DDE  CFE8 F39A          	movff	wreg,_API_RW+126
 12192  001DE2  0E00               	movlw	0
 12193  001DE4  CFE8 F39B          	movff	wreg,_API_RW+127
 12194                           
 12195                           ;api.c: 89: API_RW[64] = 0;
 12196  001DE8  0E00               	movlw	0
 12197  001DEA  CFE8 F39C          	movff	wreg,_API_RW+128
 12198  001DEE  0E00               	movlw	0
 12199  001DF0  CFE8 F39D          	movff	wreg,_API_RW+129
 12200                           
 12201                           ;api.c: 90: API_RW[65] = 0;
 12202  001DF4  0E00               	movlw	0
 12203  001DF6  CFE8 F39E          	movff	wreg,_API_RW+130
 12204  001DFA  0E00               	movlw	0
 12205  001DFC  CFE8 F39F          	movff	wreg,_API_RW+131
 12206                           
 12207                           ;api.c: 91: API_RW[66] = 0;
 12208  001E00  0E00               	movlw	0
 12209  001E02  CFE8 F3A0          	movff	wreg,_API_RW+132
 12210  001E06  0E00               	movlw	0
 12211  001E08  CFE8 F3A1          	movff	wreg,_API_RW+133
 12212                           
 12213                           ;api.c: 92: API_RW[67] = 0;
 12214  001E0C  0E00               	movlw	0
 12215  001E0E  CFE8 F3A2          	movff	wreg,_API_RW+134
 12216  001E12  0E00               	movlw	0
 12217  001E14  CFE8 F3A3          	movff	wreg,_API_RW+135
 12218                           
 12219                           ;api.c: 93: API_RW[68] = 0;
 12220  001E18  0E00               	movlw	0
 12221  001E1A  CFE8 F3A4          	movff	wreg,_API_RW+136
 12222  001E1E  0E00               	movlw	0
 12223  001E20  CFE8 F3A5          	movff	wreg,_API_RW+137
 12224                           
 12225                           ;api.c: 94: API_RW[69] = 0;
 12226  001E24  0E00               	movlw	0
 12227  001E26  CFE8 F3A6          	movff	wreg,_API_RW+138
 12228  001E2A  0E00               	movlw	0
 12229  001E2C  CFE8 F3A7          	movff	wreg,_API_RW+139
 12230                           
 12231                           ;api.c: 95: API_RW[70] = 1;
 12232  001E30  0E01               	movlw	1
 12233  001E32  CFE8 F3A8          	movff	wreg,_API_RW+140
 12234  001E36  0E00               	movlw	0
 12235  001E38  CFE8 F3A9          	movff	wreg,_API_RW+141
 12236                           
 12237                           ;api.c: 96: API_RW[71] = 1;
 12238  001E3C  0E01               	movlw	1
 12239  001E3E  CFE8 F3AA          	movff	wreg,_API_RW+142
 12240  001E42  0E00               	movlw	0
 12241  001E44  CFE8 F3AB          	movff	wreg,_API_RW+143
 12242                           
 12243                           ;api.c: 97: API_RW[72] = 1;
 12244  001E48  0E01               	movlw	1
 12245  001E4A  CFE8 F3AC          	movff	wreg,_API_RW+144
 12246  001E4E  0E00               	movlw	0
 12247  001E50  CFE8 F3AD          	movff	wreg,_API_RW+145
 12248                           
 12249                           ;api.c: 98: API_RW[73] = 1;
 12250  001E54  0E01               	movlw	1
 12251  001E56  CFE8 F3AE          	movff	wreg,_API_RW+146
 12252  001E5A  0E00               	movlw	0
 12253  001E5C  CFE8 F3AF          	movff	wreg,_API_RW+147
 12254                           
 12255                           ;api.c: 99: API_RW[74] = 1;
 12256  001E60  0E01               	movlw	1
 12257  001E62  CFE8 F3B0          	movff	wreg,_API_RW+148
 12258  001E66  0E00               	movlw	0
 12259  001E68  CFE8 F3B1          	movff	wreg,_API_RW+149
 12260                           
 12261                           ;api.c: 100: API_RW[75] = 1;
 12262  001E6C  0E01               	movlw	1
 12263  001E6E  CFE8 F3B2          	movff	wreg,_API_RW+150
 12264  001E72  0E00               	movlw	0
 12265  001E74  CFE8 F3B3          	movff	wreg,_API_RW+151
 12266                           
 12267                           ;api.c: 101: API_RW[76] = 1;
 12268  001E78  0E01               	movlw	1
 12269  001E7A  CFE8 F3B4          	movff	wreg,_API_RW+152
 12270  001E7E  0E00               	movlw	0
 12271  001E80  CFE8 F3B5          	movff	wreg,_API_RW+153
 12272                           
 12273                           ;api.c: 102: API_RW[77] = 1;
 12274  001E84  0E01               	movlw	1
 12275  001E86  CFE8 F3B6          	movff	wreg,_API_RW+154
 12276  001E8A  0E00               	movlw	0
 12277  001E8C  CFE8 F3B7          	movff	wreg,_API_RW+155
 12278                           
 12279                           ;api.c: 103: API_RW[78] = 1;
 12280  001E90  0E01               	movlw	1
 12281  001E92  CFE8 F3B8          	movff	wreg,_API_RW+156
 12282  001E96  0E00               	movlw	0
 12283  001E98  CFE8 F3B9          	movff	wreg,_API_RW+157
 12284                           
 12285                           ;api.c: 104: API_RW[79] = 1;
 12286  001E9C  0E01               	movlw	1
 12287  001E9E  CFE8 F3BA          	movff	wreg,_API_RW+158
 12288  001EA2  0E00               	movlw	0
 12289  001EA4  CFE8 F3BB          	movff	wreg,_API_RW+159
 12290                           
 12291                           ;api.c: 105: API_RW[80] = 0;
 12292  001EA8  0E00               	movlw	0
 12293  001EAA  CFE8 F3BC          	movff	wreg,_API_RW+160
 12294  001EAE  0E00               	movlw	0
 12295  001EB0  CFE8 F3BD          	movff	wreg,_API_RW+161
 12296                           
 12297                           ;api.c: 109: API[16] = 0x90;
 12298  001EB4  0E90               	movlw	144
 12299  001EB6  CFE8 F21C          	movff	wreg,_API+32
 12300  001EBA  0E00               	movlw	0
 12301  001EBC  CFE8 F21D          	movff	wreg,_API+33
 12302                           
 12303                           ;api.c: 110: API[18] = 10000;
 12304  001EC0  0E10               	movlw	16
 12305  001EC2  CFE8 F220          	movff	wreg,_API+36
 12306  001EC6  0E27               	movlw	39
 12307  001EC8  CFE8 F221          	movff	wreg,_API+37
 12308                           
 12309                           ;api.c: 111: API[19] = 800;
 12310  001ECC  0E20               	movlw	32
 12311  001ECE  CFE8 F222          	movff	wreg,_API+38
 12312  001ED2  0E03               	movlw	3
 12313  001ED4  CFE8 F223          	movff	wreg,_API+39
 12314                           
 12315                           ;api.c: 112: API[20] = 5000;
 12316  001ED8  0E88               	movlw	136
 12317  001EDA  CFE8 F224          	movff	wreg,_API+40
 12318  001EDE  0E13               	movlw	19
 12319  001EE0  CFE8 F225          	movff	wreg,_API+41
 12320                           
 12321                           ;api.c: 113: API[21] = 20;
 12322  001EE4  0E14               	movlw	20
 12323  001EE6  CFE8 F226          	movff	wreg,_API+42
 12324  001EEA  0E00               	movlw	0
 12325  001EEC  CFE8 F227          	movff	wreg,_API+43
 12326                           
 12327                           ;api.c: 114: API[22] = 20;
 12328  001EF0  0E14               	movlw	20
 12329  001EF2  CFE8 F228          	movff	wreg,_API+44
 12330  001EF6  0E00               	movlw	0
 12331  001EF8  CFE8 F229          	movff	wreg,_API+45
 12332                           
 12333                           ;api.c: 115: API[23] = 107;
 12334  001EFC  0E6B               	movlw	107
 12335  001EFE  CFE8 F22A          	movff	wreg,_API+46
 12336  001F02  0E00               	movlw	0
 12337  001F04  CFE8 F22B          	movff	wreg,_API+47
 12338                           
 12339                           ;api.c: 116: API[24] = 107;
 12340  001F08  0E6B               	movlw	107
 12341  001F0A  CFE8 F22C          	movff	wreg,_API+48
 12342  001F0E  0E00               	movlw	0
 12343  001F10  CFE8 F22D          	movff	wreg,_API+49
 12344                           
 12345                           ;api.c: 117: API[25] = 80;
 12346  001F14  0E50               	movlw	80
 12347  001F16  CFE8 F22E          	movff	wreg,_API+50
 12348  001F1A  0E00               	movlw	0
 12349  001F1C  CFE8 F22F          	movff	wreg,_API+51
 12350                           
 12351                           ;api.c: 118: API[26] = 45;
 12352  001F20  0E2D               	movlw	45
 12353  001F22  CFE8 F230          	movff	wreg,_API+52
 12354  001F26  0E00               	movlw	0
 12355  001F28  CFE8 F231          	movff	wreg,_API+53
 12356                           
 12357                           ;api.c: 119: API[27] = 20;
 12358  001F2C  0E14               	movlw	20
 12359  001F2E  CFE8 F232          	movff	wreg,_API+54
 12360  001F32  0E00               	movlw	0
 12361  001F34  CFE8 F233          	movff	wreg,_API+55
 12362                           
 12363                           ;api.c: 120: API[28] = 0;
 12364  001F38  0E00               	movlw	0
 12365  001F3A  CFE8 F234          	movff	wreg,_API+56
 12366  001F3E  0E00               	movlw	0
 12367  001F40  CFE8 F235          	movff	wreg,_API+57
 12368                           
 12369                           ;api.c: 121: API[29] = 0;
 12370  001F44  0E00               	movlw	0
 12371  001F46  CFE8 F236          	movff	wreg,_API+58
 12372  001F4A  0E00               	movlw	0
 12373  001F4C  CFE8 F237          	movff	wreg,_API+59
 12374                           
 12375                           ;api.c: 122: API[30] = 0;
 12376  001F50  0E00               	movlw	0
 12377  001F52  CFE8 F238          	movff	wreg,_API+60
 12378  001F56  0E00               	movlw	0
 12379  001F58  CFE8 F239          	movff	wreg,_API+61
 12380                           
 12381                           ;api.c: 123: API[31] = 0;
 12382  001F5C  0E00               	movlw	0
 12383  001F5E  CFE8 F23A          	movff	wreg,_API+62
 12384  001F62  0E00               	movlw	0
 12385  001F64  CFE8 F23B          	movff	wreg,_API+63
 12386                           
 12387                           ;api.c: 124: API[32] = 0;
 12388  001F68  0E00               	movlw	0
 12389  001F6A  CFE8 F23C          	movff	wreg,_API+64
 12390  001F6E  0E00               	movlw	0
 12391  001F70  CFE8 F23D          	movff	wreg,_API+65
 12392                           
 12393                           ;api.c: 125: API[33] = 0;
 12394  001F74  0E00               	movlw	0
 12395  001F76  CFE8 F23E          	movff	wreg,_API+66
 12396  001F7A  0E00               	movlw	0
 12397  001F7C  CFE8 F23F          	movff	wreg,_API+67
 12398                           
 12399                           ;api.c: 126: API[34] = 0;
 12400  001F80  0E00               	movlw	0
 12401  001F82  CFE8 F240          	movff	wreg,_API+68
 12402  001F86  0E00               	movlw	0
 12403  001F88  CFE8 F241          	movff	wreg,_API+69
 12404                           
 12405                           ;api.c: 127: API[35] = 0;
 12406  001F8C  0E00               	movlw	0
 12407  001F8E  CFE8 F242          	movff	wreg,_API+70
 12408  001F92  0E00               	movlw	0
 12409  001F94  CFE8 F243          	movff	wreg,_API+71
 12410                           
 12411                           ;api.c: 128: API[36] = 0;
 12412  001F98  0E00               	movlw	0
 12413  001F9A  CFE8 F244          	movff	wreg,_API+72
 12414  001F9E  0E00               	movlw	0
 12415  001FA0  CFE8 F245          	movff	wreg,_API+73
 12416                           
 12417                           ;api.c: 129: API[37] = 0;
 12418  001FA4  0E00               	movlw	0
 12419  001FA6  CFE8 F246          	movff	wreg,_API+74
 12420  001FAA  0E00               	movlw	0
 12421  001FAC  CFE8 F247          	movff	wreg,_API+75
 12422                           
 12423                           ;api.c: 130: API[38] = 0;
 12424  001FB0  0E00               	movlw	0
 12425  001FB2  CFE8 F248          	movff	wreg,_API+76
 12426  001FB6  0E00               	movlw	0
 12427  001FB8  CFE8 F249          	movff	wreg,_API+77
 12428                           
 12429                           ;api.c: 131: API[39] = 0;
 12430  001FBC  0E00               	movlw	0
 12431  001FBE  CFE8 F24A          	movff	wreg,_API+78
 12432  001FC2  0E00               	movlw	0
 12433  001FC4  CFE8 F24B          	movff	wreg,_API+79
 12434                           
 12435                           ;api.c: 132: API[40] = 0;
 12436  001FC8  0E00               	movlw	0
 12437  001FCA  CFE8 F24C          	movff	wreg,_API+80
 12438  001FCE  0E00               	movlw	0
 12439  001FD0  CFE8 F24D          	movff	wreg,_API+81
 12440                           
 12441                           ;api.c: 133: API[41] = 0;
 12442  001FD4  0E00               	movlw	0
 12443  001FD6  CFE8 F24E          	movff	wreg,_API+82
 12444  001FDA  0E00               	movlw	0
 12445  001FDC  CFE8 F24F          	movff	wreg,_API+83
 12446                           
 12447                           ;api.c: 134: API[42] = 0;
 12448  001FE0  0E00               	movlw	0
 12449  001FE2  CFE8 F250          	movff	wreg,_API+84
 12450  001FE6  0E00               	movlw	0
 12451  001FE8  CFE8 F251          	movff	wreg,_API+85
 12452                           
 12453                           ;api.c: 135: API[43] = 0;
 12454  001FEC  0E00               	movlw	0
 12455  001FEE  CFE8 F252          	movff	wreg,_API+86
 12456  001FF2  0E00               	movlw	0
 12457  001FF4  CFE8 F253          	movff	wreg,_API+87
 12458                           
 12459                           ;api.c: 136: API[44] = 0;
 12460  001FF8  0E00               	movlw	0
 12461  001FFA  CFE8 F254          	movff	wreg,_API+88
 12462  001FFE  0E00               	movlw	0
 12463  002000  CFE8 F255          	movff	wreg,_API+89
 12464                           
 12465                           ;api.c: 137: API[45] = 0;
 12466  002004  0E00               	movlw	0
 12467  002006  CFE8 F256          	movff	wreg,_API+90
 12468  00200A  0E00               	movlw	0
 12469  00200C  CFE8 F257          	movff	wreg,_API+91
 12470                           
 12471                           ;api.c: 138: API[46] = 80;
 12472  002010  0E50               	movlw	80
 12473  002012  CFE8 F258          	movff	wreg,_API+92
 12474  002016  0E00               	movlw	0
 12475  002018  CFE8 F259          	movff	wreg,_API+93
 12476                           
 12477                           ;api.c: 139: API[47] = 120;
 12478  00201C  0E78               	movlw	120
 12479  00201E  CFE8 F25A          	movff	wreg,_API+94
 12480  002022  0E00               	movlw	0
 12481  002024  CFE8 F25B          	movff	wreg,_API+95
 12482                           
 12483                           ;api.c: 140: API[48] = 0;
 12484  002028  0E00               	movlw	0
 12485  00202A  CFE8 F25C          	movff	wreg,_API+96
 12486  00202E  0E00               	movlw	0
 12487  002030  CFE8 F25D          	movff	wreg,_API+97
 12488                           
 12489                           ;api.c: 141: API[49] = 80;
 12490  002034  0E50               	movlw	80
 12491  002036  CFE8 F25E          	movff	wreg,_API+98
 12492  00203A  0E00               	movlw	0
 12493  00203C  CFE8 F25F          	movff	wreg,_API+99
 12494                           
 12495                           ;api.c: 142: API[50] = 0;
 12496  002040  0E00               	movlw	0
 12497  002042  CFE8 F260          	movff	wreg,_API+100
 12498  002046  0E00               	movlw	0
 12499  002048  CFE8 F261          	movff	wreg,_API+101
 12500                           
 12501                           ;api.c: 143: API[51] = 0;
 12502  00204C  0E00               	movlw	0
 12503  00204E  CFE8 F262          	movff	wreg,_API+102
 12504  002052  0E00               	movlw	0
 12505  002054  CFE8 F263          	movff	wreg,_API+103
 12506                           
 12507                           ;api.c: 144: API[52] = 120;
 12508  002058  0E78               	movlw	120
 12509  00205A  CFE8 F264          	movff	wreg,_API+104
 12510  00205E  0E00               	movlw	0
 12511  002060  CFE8 F265          	movff	wreg,_API+105
 12512                           
 12513                           ;api.c: 145: API[53] = 100;
 12514  002064  0E64               	movlw	100
 12515  002066  CFE8 F266          	movff	wreg,_API+106
 12516  00206A  0E00               	movlw	0
 12517  00206C  CFE8 F267          	movff	wreg,_API+107
 12518                           
 12519                           ;api.c: 146: API[54] = 100;
 12520  002070  0E64               	movlw	100
 12521  002072  CFE8 F268          	movff	wreg,_API+108
 12522  002076  0E00               	movlw	0
 12523  002078  CFE8 F269          	movff	wreg,_API+109
 12524                           
 12525                           ;api.c: 147: API[55] = 100;
 12526  00207C  0E64               	movlw	100
 12527  00207E  CFE8 F26A          	movff	wreg,_API+110
 12528  002082  0E00               	movlw	0
 12529  002084  CFE8 F26B          	movff	wreg,_API+111
 12530                           
 12531                           ;api.c: 148: API[56] = 100;
 12532  002088  0E64               	movlw	100
 12533  00208A  CFE8 F26C          	movff	wreg,_API+112
 12534  00208E  0E00               	movlw	0
 12535  002090  CFE8 F26D          	movff	wreg,_API+113
 12536                           
 12537                           ;api.c: 149: API[57] = 100;
 12538  002094  0E64               	movlw	100
 12539  002096  CFE8 F26E          	movff	wreg,_API+114
 12540  00209A  0E00               	movlw	0
 12541  00209C  CFE8 F26F          	movff	wreg,_API+115
 12542                           
 12543                           ;api.c: 150: API[58] = 100;
 12544  0020A0  0E64               	movlw	100
 12545  0020A2  CFE8 F270          	movff	wreg,_API+116
 12546  0020A6  0E00               	movlw	0
 12547  0020A8  CFE8 F271          	movff	wreg,_API+117
 12548                           
 12549                           ;api.c: 151: API[59] = 100;
 12550  0020AC  0E64               	movlw	100
 12551  0020AE  CFE8 F272          	movff	wreg,_API+118
 12552  0020B2  0E00               	movlw	0
 12553  0020B4  CFE8 F273          	movff	wreg,_API+119
 12554                           
 12555                           ;api.c: 152: API[60] = 100;
 12556  0020B8  0E64               	movlw	100
 12557  0020BA  CFE8 F274          	movff	wreg,_API+120
 12558  0020BE  0E00               	movlw	0
 12559  0020C0  CFE8 F275          	movff	wreg,_API+121
 12560                           
 12561                           ;api.c: 153: API[61] = 0;
 12562  0020C4  0E00               	movlw	0
 12563  0020C6  CFE8 F276          	movff	wreg,_API+122
 12564  0020CA  0E00               	movlw	0
 12565  0020CC  CFE8 F277          	movff	wreg,_API+123
 12566                           
 12567                           ;api.c: 154: API[62] = 0;
 12568  0020D0  0E00               	movlw	0
 12569  0020D2  CFE8 F278          	movff	wreg,_API+124
 12570  0020D6  0E00               	movlw	0
 12571  0020D8  CFE8 F279          	movff	wreg,_API+125
 12572                           
 12573                           ;api.c: 155: API[63] = 0;
 12574  0020DC  0E00               	movlw	0
 12575  0020DE  CFE8 F27A          	movff	wreg,_API+126
 12576  0020E2  0E00               	movlw	0
 12577  0020E4  CFE8 F27B          	movff	wreg,_API+127
 12578                           
 12579                           ;api.c: 156: API[64] = 0;
 12580  0020E8  0E00               	movlw	0
 12581  0020EA  CFE8 F27C          	movff	wreg,_API+128
 12582  0020EE  0E00               	movlw	0
 12583  0020F0  CFE8 F27D          	movff	wreg,_API+129
 12584                           
 12585                           ;api.c: 157: API[65] = 0;
 12586  0020F4  0E00               	movlw	0
 12587  0020F6  CFE8 F27E          	movff	wreg,_API+130
 12588  0020FA  0E00               	movlw	0
 12589  0020FC  CFE8 F27F          	movff	wreg,_API+131
 12590                           
 12591                           ;api.c: 158: API[66] = 0;
 12592  002100  0E00               	movlw	0
 12593  002102  CFE8 F280          	movff	wreg,_API+132
 12594  002106  0E00               	movlw	0
 12595  002108  CFE8 F281          	movff	wreg,_API+133
 12596                           
 12597                           ;api.c: 159: API[67] = 0;
 12598  00210C  0E00               	movlw	0
 12599  00210E  CFE8 F282          	movff	wreg,_API+134
 12600  002112  0E00               	movlw	0
 12601  002114  CFE8 F283          	movff	wreg,_API+135
 12602                           
 12603                           ;api.c: 160: API[68] = 511;
 12604  002118  0EFF               	movlw	255
 12605  00211A  CFE8 F284          	movff	wreg,_API+136
 12606  00211E  0E01               	movlw	1
 12607  002120  CFE8 F285          	movff	wreg,_API+137
 12608                           
 12609                           ;api.c: 161: API[69] = 1;
 12610  002124  0E01               	movlw	1
 12611  002126  CFE8 F286          	movff	wreg,_API+138
 12612  00212A  0E00               	movlw	0
 12613  00212C  CFE8 F287          	movff	wreg,_API+139
 12614                           
 12615                           ;api.c: 162: API[70] = 0;
 12616  002130  0E00               	movlw	0
 12617  002132  CFE8 F288          	movff	wreg,_API+140
 12618  002136  0E00               	movlw	0
 12619  002138  CFE8 F289          	movff	wreg,_API+141
 12620                           
 12621                           ;api.c: 163: API[71] = 0;
 12622  00213C  0E00               	movlw	0
 12623  00213E  CFE8 F28A          	movff	wreg,_API+142
 12624  002142  0E00               	movlw	0
 12625  002144  CFE8 F28B          	movff	wreg,_API+143
 12626                           
 12627                           ;api.c: 164: API[72] = 0;
 12628  002148  0E00               	movlw	0
 12629  00214A  CFE8 F28C          	movff	wreg,_API+144
 12630  00214E  0E00               	movlw	0
 12631  002150  CFE8 F28D          	movff	wreg,_API+145
 12632                           
 12633                           ;api.c: 165: API[73] = 0;
 12634  002154  0E00               	movlw	0
 12635  002156  CFE8 F28E          	movff	wreg,_API+146
 12636  00215A  0E00               	movlw	0
 12637  00215C  CFE8 F28F          	movff	wreg,_API+147
 12638                           
 12639                           ;api.c: 166: API[74] = 0;
 12640  002160  0E00               	movlw	0
 12641  002162  CFE8 F290          	movff	wreg,_API+148
 12642  002166  0E00               	movlw	0
 12643  002168  CFE8 F291          	movff	wreg,_API+149
 12644                           
 12645                           ;api.c: 167: API[75] = 0;
 12646  00216C  0E00               	movlw	0
 12647  00216E  CFE8 F292          	movff	wreg,_API+150
 12648  002172  0E00               	movlw	0
 12649  002174  CFE8 F293          	movff	wreg,_API+151
 12650                           
 12651                           ;api.c: 168: API[76] = 0;
 12652  002178  0E00               	movlw	0
 12653  00217A  CFE8 F294          	movff	wreg,_API+152
 12654  00217E  0E00               	movlw	0
 12655  002180  CFE8 F295          	movff	wreg,_API+153
 12656                           
 12657                           ;api.c: 169: API[77] = 0;
 12658  002184  0E00               	movlw	0
 12659  002186  CFE8 F296          	movff	wreg,_API+154
 12660  00218A  0E00               	movlw	0
 12661  00218C  CFE8 F297          	movff	wreg,_API+155
 12662                           
 12663                           ;api.c: 170: API[78] = 0;
 12664  002190  0E00               	movlw	0
 12665  002192  CFE8 F298          	movff	wreg,_API+156
 12666  002196  0E00               	movlw	0
 12667  002198  CFE8 F299          	movff	wreg,_API+157
 12668                           
 12669                           ;api.c: 171: API[79] = 511;
 12670  00219C  0EFF               	movlw	255
 12671  00219E  CFE8 F29A          	movff	wreg,_API+158
 12672  0021A2  0E01               	movlw	1
 12673  0021A4  CFE8 F29B          	movff	wreg,_API+159
 12674                           
 12675                           ;api.c: 172: API[80] = 0;
 12676  0021A8  0E00               	movlw	0
 12677  0021AA  CFE8 F29C          	movff	wreg,_API+160
 12678  0021AE  0E00               	movlw	0
 12679  0021B0  CFE8 F29D          	movff	wreg,_API+161
 12680                           
 12681                           ; BSR set to: 0
 12682  0021B4  0012               	return		;funcret
 12683  0021B6                     __end_of_APIxInitialize:
 12684                           	opt stack 0
 12685                           tblptru	equ	0xFF8
 12686                           tblptrh	equ	0xFF7
 12687                           tblptrl	equ	0xFF6
 12688                           tablat	equ	0xFF5
 12689                           prodh	equ	0xFF4
 12690                           prodl	equ	0xFF3
 12691                           intcon	equ	0xFF2
 12692                           intcon2	equ	0xFF1
 12693                           postinc0	equ	0xFEE
 12694                           wreg	equ	0xFE8
 12695                           postdec1	equ	0xFE5
 12696                           fsr1h	equ	0xFE2
 12697                           fsr1l	equ	0xFE1
 12698                           indf2	equ	0xFDF
 12699                           postinc2	equ	0xFDE
 12700                           postdec2	equ	0xFDD
 12701                           fsr2h	equ	0xFDA
 12702                           fsr2l	equ	0xFD9
 12703                           status	equ	0xFD8
 12704                           
 12705 ;; *************** function _tc_low *****************
 12706 ;; Defined at:
 12707 ;;		line 146 in file "../Main.c"
 12708 ;; Parameters:    Size  Location     Type
 12709 ;;		None
 12710 ;; Auto vars:     Size  Location     Type
 12711 ;;		None
 12712 ;; Return value:  Size  Location     Type
 12713 ;;                  1    wreg      void 
 12714 ;; Registers used:
 12715 ;;		None
 12716 ;; Tracked objects:
 12717 ;;		On entry : 0/0
 12718 ;;		On exit  : 0/0
 12719 ;;		Unchanged: 0/0
 12720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12721 ;;      Params:         0       0       0       0       0       0       0       0       0
 12722 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12723 ;;      Temps:         17       0       0       0       0       0       0       0       0
 12724 ;;      Totals:        17       0       0       0       0       0       0       0       0
 12725 ;;Total ram usage:       17 bytes
 12726 ;; Hardware stack levels used:    1
 12727 ;; Hardware stack levels required when called:    2
 12728 ;; This function calls:
 12729 ;;		Nothing
 12730 ;; This function is called by:
 12731 ;;		Interrupt level 1
 12732 ;; This function uses a non-reentrant model
 12733 ;;
 12734                           
 12735                           	psect	intcodelo
 12736  000018                     __pintcodelo:
 12737                           	opt stack 0
 12738  000018                     _tc_low:
 12739                           	opt stack 23
 12740                           
 12741                           ; BSR set to: 0
 12742                           ;incstack = 0
 12743  000018  8042               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 12744  00001A  CFD8 F031          	movff	status,??_tc_low
 12745  00001E  CFE8 F032          	movff	wreg,??_tc_low+1
 12746  000022  CFE0 F033          	movff	bsr,??_tc_low+2
 12747  000026  CFFA F034          	movff	pclath,??_tc_low+3
 12748  00002A  CFFB F035          	movff	pclatu,??_tc_low+4
 12749  00002E  CFE9 F036          	movff	fsr0l,??_tc_low+5
 12750  000032  CFEA F037          	movff	fsr0h,??_tc_low+6
 12751  000036  CFE1 F038          	movff	fsr1l,??_tc_low+7
 12752  00003A  CFE2 F039          	movff	fsr1h,??_tc_low+8
 12753  00003E  CFD9 F03A          	movff	fsr2l,??_tc_low+9
 12754  000042  CFDA F03B          	movff	fsr2h,??_tc_low+10
 12755  000046  CFF3 F03C          	movff	prodl,??_tc_low+11
 12756  00004A  CFF4 F03D          	movff	prodh,??_tc_low+12
 12757  00004E  CFF6 F03E          	movff	tblptrl,??_tc_low+13
 12758  000052  CFF7 F03F          	movff	tblptrh,??_tc_low+14
 12759  000056  CFF8 F040          	movff	tblptru,??_tc_low+15
 12760  00005A  CFF5 F041          	movff	tablat,??_tc_low+16
 12761  00005E  C041  FFF5         	movff	??_tc_low+16,tablat
 12762  000062  C040  FFF8         	movff	??_tc_low+15,tblptru
 12763  000066  C03F  FFF7         	movff	??_tc_low+14,tblptrh
 12764  00006A  C03E  FFF6         	movff	??_tc_low+13,tblptrl
 12765  00006E  C03D  FFF4         	movff	??_tc_low+12,prodh
 12766  000072  C03C  FFF3         	movff	??_tc_low+11,prodl
 12767  000076  C03B  FFDA         	movff	??_tc_low+10,fsr2h
 12768  00007A  C03A  FFD9         	movff	??_tc_low+9,fsr2l
 12769  00007E  C039  FFE2         	movff	??_tc_low+8,fsr1h
 12770  000082  C038  FFE1         	movff	??_tc_low+7,fsr1l
 12771  000086  C037  FFEA         	movff	??_tc_low+6,fsr0h
 12772  00008A  C036  FFE9         	movff	??_tc_low+5,fsr0l
 12773  00008E  C035  FFFB         	movff	??_tc_low+4,pclatu
 12774  000092  C034  FFFA         	movff	??_tc_low+3,pclath
 12775  000096  C033  FFE0         	movff	??_tc_low+2,bsr
 12776  00009A  C032  FFE8         	movff	??_tc_low+1,wreg
 12777  00009E  C031  FFD8         	movff	??_tc_low,status
 12778  0000A2  9042               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 12779  0000A4  0010               	retfie	
 12780  0000A6                     __end_of_tc_low:
 12781                           	opt stack 0
 12782                           pclatu	equ	0xFFB
 12783                           pclath	equ	0xFFA
 12784                           tblptru	equ	0xFF8
 12785                           tblptrh	equ	0xFF7
 12786                           tblptrl	equ	0xFF6
 12787                           tablat	equ	0xFF5
 12788                           prodh	equ	0xFF4
 12789                           prodl	equ	0xFF3
 12790                           intcon	equ	0xFF2
 12791                           intcon2	equ	0xFF1
 12792                           postinc0	equ	0xFEE
 12793                           fsr0h	equ	0xFEA
 12794                           fsr0l	equ	0xFE9
 12795                           wreg	equ	0xFE8
 12796                           postdec1	equ	0xFE5
 12797                           fsr1h	equ	0xFE2
 12798                           fsr1l	equ	0xFE1
 12799                           bsr	equ	0xFE0
 12800                           indf2	equ	0xFDF
 12801                           postinc2	equ	0xFDE
 12802                           postdec2	equ	0xFDD
 12803                           fsr2h	equ	0xFDA
 12804                           fsr2l	equ	0xFD9
 12805                           status	equ	0xFD8
 12806                           
 12807 ;; *************** function _tc_high *****************
 12808 ;; Defined at:
 12809 ;;		line 150 in file "../Main.c"
 12810 ;; Parameters:    Size  Location     Type
 12811 ;;		None
 12812 ;; Auto vars:     Size  Location     Type
 12813 ;;		None
 12814 ;; Return value:  Size  Location     Type
 12815 ;;                  1    wreg      void 
 12816 ;; Registers used:
 12817 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12818 ;; Tracked objects:
 12819 ;;		On entry : 0/0
 12820 ;;		On exit  : 0/0
 12821 ;;		Unchanged: 0/0
 12822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12823 ;;      Params:         0       0       0       0       0       0       0       0       0
 12824 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12825 ;;      Temps:         14       0       0       0       0       0       0       0       0
 12826 ;;      Totals:        14       0       0       0       0       0       0       0       0
 12827 ;;Total ram usage:       14 bytes
 12828 ;; Hardware stack levels used:    1
 12829 ;; Hardware stack levels required when called:    1
 12830 ;; This function calls:
 12831 ;;		_EUSART1_Receive_ISR
 12832 ;;		_EUSART1_Transmit_ISR
 12833 ;; This function is called by:
 12834 ;;		Interrupt level 2
 12835 ;; This function uses a non-reentrant model
 12836 ;;
 12837                           
 12838                           	psect	intcode
 12839  000008                     __pintcode:
 12840                           	opt stack 0
 12841  000008                     _tc_high:
 12842                           	opt stack 23
 12843                           
 12844                           ;incstack = 0
 12845  000008  8242               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12846  00000A  CFFA F023          	movff	pclath,??_tc_high
 12847  00000E  CFFB F024          	movff	pclatu,??_tc_high+1
 12848  000012  EDC3  F01A         	call	int_func,f	;refresh shadow registers
 12849                           pclatu	equ	0xFFB
 12850                           pclath	equ	0xFFA
 12851                           tblptru	equ	0xFF8
 12852                           tblptrh	equ	0xFF7
 12853                           tblptrl	equ	0xFF6
 12854                           tablat	equ	0xFF5
 12855                           prodh	equ	0xFF4
 12856                           prodl	equ	0xFF3
 12857                           intcon	equ	0xFF2
 12858                           intcon2	equ	0xFF1
 12859                           postinc0	equ	0xFEE
 12860                           fsr0h	equ	0xFEA
 12861                           fsr0l	equ	0xFE9
 12862                           wreg	equ	0xFE8
 12863                           postdec1	equ	0xFE5
 12864                           fsr1h	equ	0xFE2
 12865                           fsr1l	equ	0xFE1
 12866                           bsr	equ	0xFE0
 12867                           indf2	equ	0xFDF
 12868                           postinc2	equ	0xFDE
 12869                           postdec2	equ	0xFDD
 12870                           fsr2h	equ	0xFDA
 12871                           fsr2l	equ	0xFD9
 12872                           status	equ	0xFD8
 12873                           
 12874                           	psect	intcode_body
 12875  003586                     __pintcode_body:
 12876                           	opt stack 23
 12877  003586                     int_func:
 12878                           	opt stack 23
 12879  003586  0006               	pop		; remove dummy address from shadow register refresh
 12880  003588  CFE9 F025          	movff	fsr0l,??_tc_high+2
 12881  00358C  CFEA F026          	movff	fsr0h,??_tc_high+3
 12882  003590  CFE1 F027          	movff	fsr1l,??_tc_high+4
 12883  003594  CFE2 F028          	movff	fsr1h,??_tc_high+5
 12884  003598  CFD9 F029          	movff	fsr2l,??_tc_high+6
 12885  00359C  CFDA F02A          	movff	fsr2h,??_tc_high+7
 12886  0035A0  CFF3 F02B          	movff	prodl,??_tc_high+8
 12887  0035A4  CFF4 F02C          	movff	prodh,??_tc_high+9
 12888  0035A8  CFF6 F02D          	movff	tblptrl,??_tc_high+10
 12889  0035AC  CFF7 F02E          	movff	tblptrh,??_tc_high+11
 12890  0035B0  CFF8 F02F          	movff	tblptru,??_tc_high+12
 12891  0035B4  CFF5 F030          	movff	tablat,??_tc_high+13
 12892                           
 12893                           ;Main.c: 152: if (INTCONbits.TMR0IF)
 12894  0035B8  A4F2               	btfss	intcon,2,c	;volatile
 12895  0035BA  D01F               	goto	i2l6177
 12896                           
 12897                           ;Main.c: 153: {
 12898                           ;Main.c: 154: if(Led1_Counter <= 100)
 12899  0035BC  0100               	movlb	0	; () banked
 12900  0035BE  516F               	movf	(_Led1_Counter+1)& (0+255),w,b
 12901  0035C0  E107               	bnz	i2l92
 12902  0035C2  0E65               	movlw	101
 12903  0035C4  0100               	movlb	0	; () banked
 12904  0035C6  5D6E               	subwf	_Led1_Counter& (0+255),w,b
 12905  0035C8  B0D8               	btfsc	status,0,c
 12906  0035CA  D002               	goto	i2l92
 12907                           
 12908                           ; BSR set to: 0
 12909                           ;Main.c: 155: {
 12910                           ;Main.c: 156: PORTAbits.RA4 = 1;
 12911  0035CC  8880               	bsf	3968,4,c	;volatile
 12912                           
 12913                           ;Main.c: 157: }
 12914  0035CE  D001               	goto	i2l6167
 12915  0035D0                     i2l92:
 12916                           
 12917                           ; BSR set to: 0
 12918                           ;Main.c: 158: else
 12919                           ;Main.c: 159: {
 12920                           ;Main.c: 160: PORTAbits.RA4 = 0;
 12921  0035D0  9880               	bcf	3968,4,c	;volatile
 12922  0035D2                     i2l6167:
 12923                           
 12924                           ; BSR set to: 0
 12925                           ;Main.c: 161: }
 12926                           ;Main.c: 162: if(Led1_Counter >= 700)
 12927  0035D2  0EBC               	movlw	188
 12928  0035D4  0100               	movlb	0	; () banked
 12929  0035D6  5D6E               	subwf	_Led1_Counter& (0+255),w,b
 12930  0035D8  0E02               	movlw	2
 12931  0035DA  0100               	movlb	0	; () banked
 12932  0035DC  596F               	subwfb	(_Led1_Counter+1)& (0+255),w,b
 12933  0035DE  A0D8               	btfss	status,0,c
 12934  0035E0  D005               	goto	i2l6171
 12935                           
 12936                           ; BSR set to: 0
 12937                           ;Main.c: 163: {
 12938                           ;Main.c: 164: Led1_Counter = 0;
 12939  0035E2  0E00               	movlw	0
 12940  0035E4  0100               	movlb	0	; () banked
 12941  0035E6  6F6F               	movwf	(_Led1_Counter+1)& (0+255),b
 12942  0035E8  0E00               	movlw	0
 12943  0035EA  6F6E               	movwf	_Led1_Counter& (0+255),b
 12944  0035EC                     i2l6171:
 12945                           
 12946                           ; BSR set to: 0
 12947                           ;Main.c: 165: }
 12948                           ;Main.c: 166: Led1_Counter++;
 12949  0035EC  0100               	movlb	0	; () banked
 12950  0035EE  4B6E               	infsnz	_Led1_Counter& (0+255),f,b
 12951  0035F0  2B6F               	incf	(_Led1_Counter+1)& (0+255),f,b
 12952                           
 12953                           ; BSR set to: 0
 12954                           ;Main.c: 167: Update_State_Machine = 1;
 12955  0035F2  0E01               	movlw	1
 12956  0035F4  0100               	movlb	0	; () banked
 12957  0035F6  6F82               	movwf	_Update_State_Machine& (0+255),b
 12958                           
 12959                           ; BSR set to: 0
 12960                           ;Main.c: 168: INTCONbits.TMR0IF = 0;
 12961  0035F8  94F2               	bcf	intcon,2,c	;volatile
 12962  0035FA                     i2l6177:
 12963                           
 12964                           ;Main.c: 169: }
 12965                           ;Main.c: 171: if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
 12966  0035FA  BA9D               	btfsc	3997,5,c	;volatile
 12967  0035FC  AA9E               	btfss	3998,5,c	;volatile
 12968  0035FE  D002               	goto	i2l6183
 12969                           
 12970                           ;Main.c: 172: EUSART1_Receive_ISR();
 12971  003600  EC82  F01D         	call	_EUSART1_Receive_ISR	;wreg free
 12972  003604                     i2l6183:
 12973                           
 12974                           ;Main.c: 173: }
 12975                           ;Main.c: 174: if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
 12976  003604  B89D               	btfsc	3997,4,c	;volatile
 12977  003606  A89E               	btfss	3998,4,c	;volatile
 12978  003608  D002               	goto	i2l97
 12979                           
 12980                           ;Main.c: 175: EUSART1_Transmit_ISR();
 12981  00360A  EC6B  F01D         	call	_EUSART1_Transmit_ISR	;wreg free
 12982  00360E                     i2l97:
 12983  00360E  C030  FFF5         	movff	??_tc_high+13,tablat
 12984  003612  C02F  FFF8         	movff	??_tc_high+12,tblptru
 12985  003616  C02E  FFF7         	movff	??_tc_high+11,tblptrh
 12986  00361A  C02D  FFF6         	movff	??_tc_high+10,tblptrl
 12987  00361E  C02C  FFF4         	movff	??_tc_high+9,prodh
 12988  003622  C02B  FFF3         	movff	??_tc_high+8,prodl
 12989  003626  C02A  FFDA         	movff	??_tc_high+7,fsr2h
 12990  00362A  C029  FFD9         	movff	??_tc_high+6,fsr2l
 12991  00362E  C028  FFE2         	movff	??_tc_high+5,fsr1h
 12992  003632  C027  FFE1         	movff	??_tc_high+4,fsr1l
 12993  003636  C026  FFEA         	movff	??_tc_high+3,fsr0h
 12994  00363A  C025  FFE9         	movff	??_tc_high+2,fsr0l
 12995  00363E  C024  FFFB         	movff	??_tc_high+1,pclatu
 12996  003642  C023  FFFA         	movff	??_tc_high,pclath
 12997  003646  9242               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12998  003648  0011               	retfie		f
 12999  00364A                     __end_of_tc_high:
 13000                           	opt stack 0
 13001                           pclatu	equ	0xFFB
 13002                           pclath	equ	0xFFA
 13003                           tblptru	equ	0xFF8
 13004                           tblptrh	equ	0xFF7
 13005                           tblptrl	equ	0xFF6
 13006                           tablat	equ	0xFF5
 13007                           prodh	equ	0xFF4
 13008                           prodl	equ	0xFF3
 13009                           intcon	equ	0xFF2
 13010                           intcon2	equ	0xFF1
 13011                           postinc0	equ	0xFEE
 13012                           fsr0h	equ	0xFEA
 13013                           fsr0l	equ	0xFE9
 13014                           wreg	equ	0xFE8
 13015                           postdec1	equ	0xFE5
 13016                           fsr1h	equ	0xFE2
 13017                           fsr1l	equ	0xFE1
 13018                           bsr	equ	0xFE0
 13019                           indf2	equ	0xFDF
 13020                           postinc2	equ	0xFDE
 13021                           postdec2	equ	0xFDD
 13022                           fsr2h	equ	0xFDA
 13023                           fsr2l	equ	0xFD9
 13024                           status	equ	0xFD8
 13025                           
 13026 ;; *************** function _EUSART1_Transmit_ISR *****************
 13027 ;; Defined at:
 13028 ;;		line 183 in file "../eusart1.c"
 13029 ;; Parameters:    Size  Location     Type
 13030 ;;		None
 13031 ;; Auto vars:     Size  Location     Type
 13032 ;;		None
 13033 ;; Return value:  Size  Location     Type
 13034 ;;                  1    wreg      void 
 13035 ;; Registers used:
 13036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13037 ;; Tracked objects:
 13038 ;;		On entry : 0/0
 13039 ;;		On exit  : 0/0
 13040 ;;		Unchanged: 0/0
 13041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13042 ;;      Params:         0       0       0       0       0       0       0       0       0
 13043 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13044 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13045 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13046 ;;Total ram usage:        0 bytes
 13047 ;; Hardware stack levels used:    1
 13048 ;; This function calls:
 13049 ;;		Nothing
 13050 ;; This function is called by:
 13051 ;;		_tc_high
 13052 ;; This function uses a non-reentrant model
 13053 ;;
 13054                           
 13055                           	psect	text38
 13056  003AD6                     __ptext38:
 13057                           	opt stack 0
 13058  003AD6                     _EUSART1_Transmit_ISR:
 13059                           	opt stack 23
 13060                           
 13061                           ;eusart1.c: 186: if (sizeof (eusart1TxBuffer) > eusart1TxBufferRemaining) {
 13062                           
 13063                           ;incstack = 0
 13064  003AD6  0E7E               	movlw	126
 13065  003AD8  6020               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
 13066  003ADA  D012               	goto	i2l520
 13067                           
 13068                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 13069  003ADC  5022               	movf	_eusart1TxTail,w,c
 13070  003ADE  0D01               	mullw	1
 13071  003AE0  0E7E               	movlw	low _eusart1TxBuffer
 13072  003AE2  24F3               	addwf	prodl,w,c
 13073  003AE4  6ED9               	movwf	fsr2l,c
 13074  003AE6  0E01               	movlw	high _eusart1TxBuffer
 13075  003AE8  20F4               	addwfc	prodh,w,c
 13076  003AEA  6EDA               	movwf	fsr2h,c
 13077  003AEC  50DF               	movf	indf2,w,c
 13078  003AEE  6EAD               	movwf	4013,c	;volatile
 13079  003AF0  2A22               	incf	_eusart1TxTail,f,c
 13080                           
 13081                           ;eusart1.c: 188: if (sizeof (eusart1TxBuffer) <= eusart1TxTail) {
 13082  003AF2  0E7D               	movlw	125
 13083  003AF4  6422               	cpfsgt	_eusart1TxTail,c
 13084  003AF6  D002               	goto	i2l6081
 13085                           
 13086                           ;eusart1.c: 189: eusart1TxTail = 0;
 13087  003AF8  0E00               	movlw	0
 13088  003AFA  6E22               	movwf	_eusart1TxTail,c
 13089  003AFC                     i2l6081:
 13090                           
 13091                           ;eusart1.c: 190: }
 13092                           ;eusart1.c: 191: eusart1TxBufferRemaining++;
 13093  003AFC  2A20               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 13094                           
 13095                           ;eusart1.c: 192: } else {
 13096  003AFE  0012               	return	
 13097  003B00                     i2l520:
 13098                           
 13099                           ;eusart1.c: 193: PIE1bits.TX1IE = 0;
 13100  003B00  989D               	bcf	3997,4,c	;volatile
 13101  003B02  0012               	return	
 13102  003B04                     __end_of_EUSART1_Transmit_ISR:
 13103                           	opt stack 0
 13104                           pclatu	equ	0xFFB
 13105                           pclath	equ	0xFFA
 13106                           tblptru	equ	0xFF8
 13107                           tblptrh	equ	0xFF7
 13108                           tblptrl	equ	0xFF6
 13109                           tablat	equ	0xFF5
 13110                           prodh	equ	0xFF4
 13111                           prodl	equ	0xFF3
 13112                           intcon	equ	0xFF2
 13113                           intcon2	equ	0xFF1
 13114                           postinc0	equ	0xFEE
 13115                           fsr0h	equ	0xFEA
 13116                           fsr0l	equ	0xFE9
 13117                           wreg	equ	0xFE8
 13118                           postdec1	equ	0xFE5
 13119                           fsr1h	equ	0xFE2
 13120                           fsr1l	equ	0xFE1
 13121                           bsr	equ	0xFE0
 13122                           indf2	equ	0xFDF
 13123                           postinc2	equ	0xFDE
 13124                           postdec2	equ	0xFDD
 13125                           fsr2h	equ	0xFDA
 13126                           fsr2l	equ	0xFD9
 13127                           status	equ	0xFD8
 13128                           
 13129 ;; *************** function _EUSART1_Receive_ISR *****************
 13130 ;; Defined at:
 13131 ;;		line 197 in file "../eusart1.c"
 13132 ;; Parameters:    Size  Location     Type
 13133 ;;		None
 13134 ;; Auto vars:     Size  Location     Type
 13135 ;;		None
 13136 ;; Return value:  Size  Location     Type
 13137 ;;                  1    wreg      void 
 13138 ;; Registers used:
 13139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13140 ;; Tracked objects:
 13141 ;;		On entry : 0/0
 13142 ;;		On exit  : 0/0
 13143 ;;		Unchanged: 0/0
 13144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13145 ;;      Params:         0       0       0       0       0       0       0       0       0
 13146 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13147 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13148 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13149 ;;Total ram usage:        0 bytes
 13150 ;; Hardware stack levels used:    1
 13151 ;; This function calls:
 13152 ;;		Nothing
 13153 ;; This function is called by:
 13154 ;;		_tc_high
 13155 ;; This function uses a non-reentrant model
 13156 ;;
 13157                           
 13158                           	psect	text39
 13159  003B04                     __ptext39:
 13160                           	opt stack 0
 13161  003B04                     _EUSART1_Receive_ISR:
 13162                           	opt stack 23
 13163                           
 13164                           ;eusart1.c: 198: if (1 == RCSTA1bits.OERR) {
 13165                           
 13166                           ;incstack = 0
 13167  003B04  A2AB               	btfss	4011,1,c	;volatile
 13168  003B06  D002               	goto	i2l6061
 13169                           
 13170                           ;eusart1.c: 201: RCSTA1bits.CREN = 0;
 13171  003B08  98AB               	bcf	4011,4,c	;volatile
 13172                           
 13173                           ;eusart1.c: 202: RCSTA1bits.CREN = 1;
 13174  003B0A  88AB               	bsf	4011,4,c	;volatile
 13175  003B0C                     i2l6061:
 13176                           
 13177                           ;eusart1.c: 203: }
 13178                           ;eusart1.c: 206: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 13179  003B0C  501E               	movf	_eusart1RxHead,w,c
 13180  003B0E  0D01               	mullw	1
 13181  003B10  0E00               	movlw	low _eusart1RxBuffer
 13182  003B12  24F3               	addwf	prodl,w,c
 13183  003B14  6ED9               	movwf	fsr2l,c
 13184  003B16  0E01               	movlw	high _eusart1RxBuffer
 13185  003B18  20F4               	addwfc	prodh,w,c
 13186  003B1A  6EDA               	movwf	fsr2h,c
 13187  003B1C  CFAE FFDF          	movff	4014,indf2	;volatile
 13188  003B20  2A1E               	incf	_eusart1RxHead,f,c
 13189                           
 13190                           ;eusart1.c: 207: if (sizeof (eusart1RxBuffer) <= eusart1RxHead) {
 13191  003B22  0E7D               	movlw	125
 13192  003B24  641E               	cpfsgt	_eusart1RxHead,c
 13193  003B26  D002               	goto	i2l6069
 13194                           
 13195                           ;eusart1.c: 208: eusart1RxHead = 0;
 13196  003B28  0E00               	movlw	0
 13197  003B2A  6E1E               	movwf	_eusart1RxHead,c
 13198  003B2C                     i2l6069:
 13199                           
 13200                           ;eusart1.c: 209: }
 13201                           ;eusart1.c: 210: eusart1RxCount++;
 13202  003B2C  2A1D               	incf	_eusart1RxCount,f,c	;volatile
 13203  003B2E  0012               	return		;funcret
 13204  003B30                     __end_of_EUSART1_Receive_ISR:
 13205                           	opt stack 0
 13206                           pclatu	equ	0xFFB
 13207                           pclath	equ	0xFFA
 13208                           tblptru	equ	0xFF8
 13209                           tblptrh	equ	0xFF7
 13210                           tblptrl	equ	0xFF6
 13211                           tablat	equ	0xFF5
 13212                           prodh	equ	0xFF4
 13213                           prodl	equ	0xFF3
 13214                           intcon	equ	0xFF2
 13215                           intcon2	equ	0xFF1
 13216                           postinc0	equ	0xFEE
 13217                           fsr0h	equ	0xFEA
 13218                           fsr0l	equ	0xFE9
 13219                           wreg	equ	0xFE8
 13220                           postdec1	equ	0xFE5
 13221                           fsr1h	equ	0xFE2
 13222                           fsr1l	equ	0xFE1
 13223                           bsr	equ	0xFE0
 13224                           indf2	equ	0xFDF
 13225                           postinc2	equ	0xFDE
 13226                           postdec2	equ	0xFDD
 13227                           fsr2h	equ	0xFDA
 13228                           fsr2l	equ	0xFD9
 13229                           status	equ	0xFD8
 13230                           pclatu	equ	0xFFB
 13231                           pclath	equ	0xFFA
 13232                           tblptru	equ	0xFF8
 13233                           tblptrh	equ	0xFF7
 13234                           tblptrl	equ	0xFF6
 13235                           tablat	equ	0xFF5
 13236                           prodh	equ	0xFF4
 13237                           prodl	equ	0xFF3
 13238                           intcon	equ	0xFF2
 13239                           intcon2	equ	0xFF1
 13240                           postinc0	equ	0xFEE
 13241                           fsr0h	equ	0xFEA
 13242                           fsr0l	equ	0xFE9
 13243                           wreg	equ	0xFE8
 13244                           postdec1	equ	0xFE5
 13245                           fsr1h	equ	0xFE2
 13246                           fsr1l	equ	0xFE1
 13247                           bsr	equ	0xFE0
 13248                           indf2	equ	0xFDF
 13249                           postinc2	equ	0xFDE
 13250                           postdec2	equ	0xFDD
 13251                           fsr2h	equ	0xFDA
 13252                           fsr2l	equ	0xFD9
 13253                           status	equ	0xFD8
 13254                           
 13255                           	psect	rparam
 13256  0000                     pclatu	equ	0xFFB
 13257                           pclath	equ	0xFFA
 13258                           tblptru	equ	0xFF8
 13259                           tblptrh	equ	0xFF7
 13260                           tblptrl	equ	0xFF6
 13261                           tablat	equ	0xFF5
 13262                           prodh	equ	0xFF4
 13263                           prodl	equ	0xFF3
 13264                           intcon	equ	0xFF2
 13265                           intcon2	equ	0xFF1
 13266                           postinc0	equ	0xFEE
 13267                           fsr0h	equ	0xFEA
 13268                           fsr0l	equ	0xFE9
 13269                           wreg	equ	0xFE8
 13270                           postdec1	equ	0xFE5
 13271                           fsr1h	equ	0xFE2
 13272                           fsr1l	equ	0xFE1
 13273                           bsr	equ	0xFE0
 13274                           indf2	equ	0xFDF
 13275                           postinc2	equ	0xFDE
 13276                           postdec2	equ	0xFDD
 13277                           fsr2h	equ	0xFDA
 13278                           fsr2l	equ	0xFD9
 13279                           status	equ	0xFD8
 13280                           
 13281                           	psect	temp
 13282  000042                     btemp:
 13283                           	opt stack 0
 13284  000042                     	ds	1
 13285  0000                     int$flags	set	btemp
 13286                           pclatu	equ	0xFFB
 13287                           pclath	equ	0xFFA
 13288                           tblptru	equ	0xFF8
 13289                           tblptrh	equ	0xFF7
 13290                           tblptrl	equ	0xFF6
 13291                           tablat	equ	0xFF5
 13292                           prodh	equ	0xFF4
 13293                           prodl	equ	0xFF3
 13294                           intcon	equ	0xFF2
 13295                           intcon2	equ	0xFF1
 13296                           postinc0	equ	0xFEE
 13297                           fsr0h	equ	0xFEA
 13298                           fsr0l	equ	0xFE9
 13299                           wreg	equ	0xFE8
 13300                           postdec1	equ	0xFE5
 13301                           fsr1h	equ	0xFE2
 13302                           fsr1l	equ	0xFE1
 13303                           bsr	equ	0xFE0
 13304                           indf2	equ	0xFDF
 13305                           postinc2	equ	0xFDE
 13306                           postdec2	equ	0xFDD
 13307                           fsr2h	equ	0xFDA
 13308                           fsr2l	equ	0xFD9
 13309                           status	equ	0xFD8


Data Sizes:
    Strings     57
    Constant    11
    Data        10
    BSS         907
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     31      65
    BANK0           160     37      92
    BANK1           256      0     252
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_8(CODE[12]), STR_7(CODE[9]), STR_6(CODE[9]), STR_5(CODE[9]), 
		 -> STR_4(CODE[9]), STR_3(CODE[9]), STR_2(CODE[9]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    pLen	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 

    pData	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _tc_low in COMRAM

    None.

Critical Paths under _tc_high in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_READxRECEIVEDxMESSAGE
    _Update_StateMchn->_Train_Path
    _Train_Path->_Left_Mountain_From_The_Left
    _Train_Path->_Left_Mountain_From_The_Right
    _Train_Path->_Right_Mountain_From_The_Left
    _Train_Path->_Right_Mountain_From_The_Right
    _Train_Move_Right_Start->_SETxPWM
    _Train_Move_Right_Brake->_SETxPWM
    _Train_Move_Left_Start->_SETxPWM
    _Train_Move_Left_Brake->_SETxPWM
    _Right_Mountain_From_The_Right->_SETxPWM
    _Right_Mountain_From_The_Left->_SETxPWM
    _Left_Mountain_From_The_Right->_SETxPWM
    _Left_Mountain_From_The_Left->_SETxPWM
    _SETxPWM->_SETxAPIxVAL
    _Junction->_SETxAPIxVAL
    _Eeprom_Store->_GETxAPIxVAL
    _Debounce_Inputs->_SetDCPWM1
    _SetDCPWM1->_GETxAPIxVAL
    _READxRECEIVEDxMESSAGE->_TranslateMessage
    _TranslateMessage->_SENDxMESSAGE
    _atoi->___wmul
    _SENDxMESSAGE->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv
    _Init_Pwm->_SETxAPIxVAL
    _SETxAPIxVAL->_GETxAPIxVAL

Critical Paths under _tc_low in BANK0

    None.

Critical Paths under _tc_high in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tc_low in BANK1

    None.

Critical Paths under _tc_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_low in BANK2

    None.

Critical Paths under _tc_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_low in BANK3

    None.

Critical Paths under _tc_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _tc_low in BANK4

    None.

Critical Paths under _tc_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _tc_low in BANK5

    None.

Critical Paths under _tc_high in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _tc_low in BANK6

    None.

Critical Paths under _tc_high in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _tc_low in BANK7

    None.

Critical Paths under _tc_high in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  149770
                     _APIxInitialize
                 _EUSART1_Initialize
                           _Init_Pwm
                        _Init_Timers
              _READxRECEIVEDxMESSAGE
                   _Update_StateMchn
 ---------------------------------------------------------------------------------
 (1) _Update_StateMchn                                     2     2      0  129701
                                             18 BANK0      2     2      0
                    _Debounce_Inputs
                       _Eeprom_Store
                        _GETxAPIxVAL
                          _Green_Led
                           _Junction
                            _Red_Led
                        _SETxAPIxVAL
                         _Train_Path
 ---------------------------------------------------------------------------------
 (2) _Train_Path                                           2     1      1  109932
                                             16 BANK0      2     1      1
                        _GETxAPIxVAL
                           _Junction
        _Left_Mountain_From_The_Left
       _Left_Mountain_From_The_Right
       _Right_Mountain_From_The_Left
      _Right_Mountain_From_The_Right
                        _SETxAPIxVAL
              _Train_Move_Left_Brake
              _Train_Move_Left_Start
             _Train_Move_Right_Brake
             _Train_Move_Right_Start
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Start                               0     0      0   14950
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Brake                               0     0      0   14950
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Start                                0     0      0   14950
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Brake                                0     0      0   14950
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Right                        1     1      0    8913
                                             15 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Left                         1     1      0    8913
                                             15 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Right                         1     1      0    8913
                                             15 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Left                          1     1      0    8913
                                             15 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (4) _SETxPWM                                              7     4      3    8789
                                              8 BANK0      7     4      3
                        _GETxAPIxVAL (ARG)
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (3) _Junction                                             2     1      1    7178
                                              8 BANK0      2     1      1
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Red_Led                                              1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Green_Led                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Store                                         0     0      0      31
                        _GETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Debounce_Inputs                                      2     2      0    6337
                                              9 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                          _SetDCPWM1
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM1                                            6     4      2     176
                                              3 BANK0      6     4      2
                        _GETxAPIxVAL (ARG)
 ---------------------------------------------------------------------------------
 (1) _READxRECEIVEDxMESSAGE                                4     4      0   13744
                                             33 BANK0      4     4      0
                       _EUSART1_Read
                   _TranslateMessage
                             _printf
 ---------------------------------------------------------------------------------
 (2) _TranslateMessage                                     4     4      0   11716
                                             29 BANK0      4     4      0
                         _GETxAPIxRW
                        _GETxAPIxVAL
                       _SENDxMESSAGE
                        _SETxAPIxVAL
                               _atoi
                             _printf
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    1050
                                              6 BANK0      7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     386
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _SENDxMESSAGE                                         3     1      2    2130
                                             26 BANK0      3     1      2
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              23    17      6    1991
                                             12 BANK0     14     8      6
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     395
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _GETxAPIxVAL                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GETxAPIxRW                                           3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_Timers                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Pwm                                             0     0      0    6130
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (5) _SETxAPIxVAL                                          5     3      2    6130
                                              3 BANK0      5     3      2
                        _GETxAPIxVAL (ARG)
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Initialize                                   2     2      0      65
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _APIxInitialize                                       2     2      0     130
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _tc_low                                              17    17      0       0
                                             14 COMRAM    17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _tc_high                                             14    14      0       0
                                              0 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APIxInitialize
   _EUSART1_Initialize
   _Init_Pwm
     _SETxAPIxVAL
       _GETxAPIxVAL (ARG)
   _Init_Timers
   _READxRECEIVEDxMESSAGE
     _EUSART1_Read
     _TranslateMessage
       _GETxAPIxRW
       _GETxAPIxVAL
       _SENDxMESSAGE
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
       _SETxAPIxVAL
         _GETxAPIxVAL (ARG)
       _atoi
         ___wmul
         _isdigit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
   _Update_StateMchn
     _Debounce_Inputs
       _GETxAPIxVAL
       _SETxAPIxVAL
         _GETxAPIxVAL (ARG)
       _SetDCPWM1
         _GETxAPIxVAL (ARG)
     _Eeprom_Store
       _GETxAPIxVAL
     _GETxAPIxVAL
     _Green_Led
     _Junction
       _GETxAPIxVAL
       _SETxAPIxVAL
         _GETxAPIxVAL (ARG)
     _Red_Led
     _SETxAPIxVAL
       _GETxAPIxVAL (ARG)
     _Train_Path
       _GETxAPIxVAL
       _Junction
         _GETxAPIxVAL
         _SETxAPIxVAL
           _GETxAPIxVAL (ARG)
       _Left_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _GETxAPIxVAL (ARG)
       _Left_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _GETxAPIxVAL (ARG)
       _Right_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _GETxAPIxVAL (ARG)
       _Right_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _GETxAPIxVAL (ARG)
       _SETxAPIxVAL
         _GETxAPIxVAL (ARG)
       _Train_Move_Left_Brake
         _GETxAPIxVAL
         _SETxAPIxVAL
           _GETxAPIxVAL (ARG)
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _GETxAPIxVAL (ARG)
       _Train_Move_Left_Start
         _GETxAPIxVAL
         _SETxAPIxVAL
           _GETxAPIxVAL (ARG)
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _GETxAPIxVAL (ARG)
       _Train_Move_Right_Brake
         _GETxAPIxVAL
         _SETxAPIxVAL
           _GETxAPIxVAL (ARG)
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _GETxAPIxVAL (ARG)
       _Train_Move_Right_Start
         _GETxAPIxVAL
         _SETxAPIxVAL
           _GETxAPIxVAL (ARG)
         _SETxPWM
           _GETxAPIxVAL (ARG)
           _SETxAPIxVAL (ARG)
             _GETxAPIxVAL (ARG)

 _tc_low (ROOT)

 _tc_high (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     240      21       28.1%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      FC       7       98.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     25      5C       5       57.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1F      41       1       69.1%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     199      20        0.0%
DATA                 0      0     3D9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Tue Nov 21 21:51:24 2017

                  _eusart1TxBufferRemaining 0020                                          bsr 000FE0  
                       ___wmul@multiplicand 008F                                 __CFG_BORV$3 000000  
                               ?_GETxAPIxRW 008D                                __CFG_CP0$OFF 000000  
                              __CFG_CP1$OFF 000000                                __CFG_CP2$OFF 000000  
                              __CFG_CP3$OFF 000000                                         l164 086A  
                                       l318 12C4                                         l514 3C00  
                                       l338 13A4                                         l620 1BB4  
                                       l349 21EA                                         l732 3790  
                                       l662 3528                                         l727 3760  
                                       l743 36DC                                         l656 34D6  
                                       l736 37BC                                         l752 3738  
                                       l665 3556                                         l729 3764  
                                       l745 36E0                                         l659 3504  
                                       l668 357A                                         l748 370C  
                                       _API 01FC                                __CFG_CPB$OFF 000000  
                              _Stop_Program 0018                                         _PR2 000FCB  
                              __CFG_CPD$OFF 000000                                __CFG_BOR$OFF 000000  
                                       prod 000FF3                                         wreg 000FE8  
                    ?_READxRECEIVEDxMESSAGE 0023            Train_Move_Right_Start@Return_Val 00BA  
                              ?_GETxAPIxVAL 008D                             APIxInitialize@i 008D  
                              __CFG_LVP$OFF 000000         __end_of_Left_Mountain_From_The_Left 32B2  
               _Left_Mountain_From_The_Left 31A0                                __CFG_WDT$OFF 000000  
     __end_of_Right_Mountain_From_The_Right 308C      __size_of_Right_Mountain_From_The_Right 0114  
             _Right_Mountain_From_The_Right 2F78                                        l1358 34AA  
                                      l1608 384C                                        l1618 3988  
                                      l7001 3180                                        l7003 3184  
                                      l7021 2FA2                                        l7111 3398  
                                      l7103 3370                                        l7007 318C  
                                      l7023 2FB2                                        l7015 2F7E  
                                      l7113 33A2                                        l7121 33BC  
                                      l7009 319A                                        l8001 0B0A  
                                      l7211 1552                                        l7203 1530  
                                      l7107 337C                                        l7115 33A6  
                                      l7051 3048                                        l7043 300A  
                                      l7027 2FBA                                        l7213 1564  
                                      l7205 1548                                        l8101 0DC6  
                                      l7143 3422                                        l7127 33C4  
                                      l7311 17C6                                        l7303 1774  
                                      l7231 15BE                                        l7223 159C  
                                      l7071 32B8                                        l7119 33AE  
                                      l7055 3062                                        l7047 303C  
                                      l7063 3078                                        l8031 0BD4  
                                      l8015 0B7C                                        l7145 346C  
                                      l7129 33CA                                        l7313 17D8  
                                      l7305 17A0                                        l7233 15D0  
                                      l7225 15B4                                        l7057 306C  
                                      l7065 3086                                        l8121 0E34  
                                      l8113 0E16                                        l8105 0DEA  
                                      l8025 0BB0                                        l6611 291A  
                                      l7147 3472                                        l7139 3410  
                                      l7411 1A32                                        l7403 19F4  
                                      l7331 1846                                        l7323 17F4  
                                      l7251 1646                                        l7219 158A  
                                      l7243 1608                                        l7171 147A  
                                      l7083 32F2                                        l7059 3070  
                                      l8211 0FDC                                        l8123 0E38  
                                      l8131 0E52                                        l8043 0C1C  
                                      l8019 0B8C                                        l6533 37FC  
                                      l6605 2900                                        l7413 1A44  
                                      l7405 1A0C                                        l7333 1858  
                                      l7325 1820                                        l7253 1658  
                                      l7245 1620                                        l7173 148C  
                                      l7165 1470                                        l7501 3780  
                                      l7077 32DA                                        l8301 11C2  
                                      l8213 0FE4                                        l8221 0FF6  
                                      l8205 0FAA                                        l8141 0E9E  
                                      l8125 0E44                                        l8117 0E2C  
                                      l8133 0E80                                        l8109 0E08  
                                      l8061 0C8C                                        l8037 0BF8  
                                      l6535 3808                                        l6615 296C  
                                      l7431 1A9E                                        l7423 1A60  
                                      l7351 18C6                                        l7319 17E2  
                                      l7343 1874                                        l7271 16C6  
                                      l7239 15F6                                        l7263 1674  
                                      l7191 14E6                                        l7183 14C4  
                                      l7511 37AC                                        l7079 32EA  
                                      l6703 2D52                                        l8311 11DE  
                                      l8231 1060                                        l8223 1024  
                                      l8215 0FE8                                        l8143 0EA2  
                                      l8151 0EBC                                        l8119 0E30  
                                      l8055 0C64                                        l6545 383E  
                                      l6537 380E                                        l6561 397A  
                                      l6553 3944                                        l6609 2914  
                                      l6617 2978                                        l7433 1AB0  
                                      l7425 1A78                                        l7353 18D8  
                                      l7345 18A0                                        l7273 16D8  
                                      l7265 16A0                                        l7193 14F8  
                                      l7185 14DC                                        l7505 3794  
                                      l7521 36E4                                        l6625 369A  
                                      l6801 2C08                                        l8321 11FA  
                                      l8233 1064                                        l8209 0FD8  
                                      l8161 0F14                                        l8145 0EAE  
                                      l8137 0E96                                        l8153 0EEA  
                                      l8065 0C96                                        l8049 0C40  
                                      l6555 3950                                        l6571 2850  
                                      l7451 1B0A                                        l7419 1A4E  
                                      l7443 1ACC                                        l7371 1946  
                                      l7339 1862                                        l7363 18F4  
                                      l7291 1746                                        l7259 1662  
                                      l7283 16F4                                        l7179 14B2  
                                      l7531 3710                                        l6651 299C  
                                      l7099 3340                                        l6811 2C5A  
                                      l6723 2DD2                                        l6715 2D9C  
                                      l8411 1360                                        l8331 1216  
                                      l8243 10A4                                        l8163 0F18  
                                      l8139 0E9A                                        l8091 0D90  
                                      l8059 0C88                                        l6557 3956  
                                      l6581 2894                                        l6645 3B50  
                                      l7453 1B1C                                        l7445 1AE4  
                                      l7373 1958                                        l7365 1920  
                                      l7293 1758                                        l7285 1720  
                                      l7517 37C0                                        l6661 29DA  
                                      l6653 29A4                                        l6805 2C34  
                                      l6725 2DD8                                        l6709 2D5E  
                                      l6741 2E50                                        l7605 22CC  
                                      l8341 1232                                        l8253 10C4  
                                      l8245 10B8                                        l8261 10DA  
                                      l8237 1088                                        l8165 0F1C  
                                      l8173 0F2E                                        l8229 1032  
                                      l8085 0D58                                        l6591 28C4  
                                      l6575 2864                                        l8511 2808  
                                      l8503 27D6                                        l7439 1ABA  
                                      l7463 1B38                                        l7391 19C6  
                                      l7359 18E2                                        l7383 1974  
                                      l7279 16E2                                        l7199 151E  
                                      l7527 36FC                                        l7543 373C  
                                      l6663 29EC                                        l6655 29B6  
                                      l6671 2A10                                        l6911 31DA  
                                      l6903 31A6                                        l6751 2E76  
                                      l6831 2CD4                                        l6815 2C60  
                                      l6735 2E2A                                        l6719 2DC6  
                                      l7703 2492                                        l7623 233E  
                                      l7615 2312                                        l7607 22EA  
                                      l7551 21F2                                        l8415 1384  
                                      l8271 1164                                        l8263 1108  
                                      l8255 10CC                                        l8247 10BC  
                                      l8239 1096                                        l8183 0F60  
                                      l8167 0F20                                        l8095 0DAA  
                                      l6593 28CA                                        l7393 19D8  
                                      l7385 19A0                                        l7537 3728  
                                      l6673 2A20                                        l6825 2C9C  
                                      l6729 2E08                                        l7561 2220  
                                      l8409 1346                                        l8281 118A  
                                      l8353 124E                                        l8249 10C0  
                                      l8089 0D88                                        l8425 13AC  
                                      l7459 1B26                                        l7379 1962  
                                      l7299 1762                                        l6683 2A6A  
                                      l6675 2A28                                        l6667 29FE  
                                      l6659 29C8                                        l6691 2AB8  
                                      l6931 3230                                        l6915 31E2  
                                      l6851 2AD6                                        l6763 2EC4  
                                      l6755 2E80                                        l6747 2E58  
                                      l6835 2D00                                        l6819 2C8A  
                                      l6843 2D12                                        l6739 2E36  
                                      l7731 24E2                                        l7723 24D2  
                                      l7627 2354                                        l7619 2328  
                                      l7571 225C                                        l7555 2200  
                                      l7547 21D8                                        l8419 1398  
                                      l8363 12B8                                        l8291 11A6  
                                      l8355 1280                                        l8179 0F5C  
                                      l8099 0DC2                                        l8427 13C2  
                                      l8603 38C4                                        l8517 2810  
                                      l6693 2ACE                                        l6909 31CA  
                                      l6773 2EF8                                        l6757 2E88  
                                      l6837 2D06                                        l6845 2D2C  
                                      l7709 2498                                        l7717 24AC  
                                      l7565 2224                                        l8373 12E6  
                                      l8277 117E                                        l8189 0F6E  
                                      l8269 1116                                        l8519 2828  
                                      l7399 19E2                                        l7495 3768  
                                      l6679 2A56                                        l6943 3288  
                                      l6935 3262                                        l6951 329E  
                                      l6871 2B5E                                        l6783 2F2E  
                                      l6767 2EEE                                        l6839 2D0A  
                                      l7751 2512                                        l7743 24FA  
                                      l7735 24EA                                        l7727 24DA  
                                      l7719 24CA                                        l7671 2410  
                                      l7647 23AA                                        l7591 22B2  
                                      l7575 226A                                        l7567 2242  
                                      l7559 220E                                        l8367 12CC  
                                      l8359 12A4                                        l8199 0F9C  
                                      l8481 2776                                        l8473 275C  
                                      l8465 26FA                                        l6945 3292  
                                      l6953 32AC                                        l6865 2B2E  
                                      l6769 2EF4                                        l6793 2F58  
                                      l7681 244E                                        l7673 2422  
                                      l7585 228E                                        l8377 12F2  
                                      l7921 0872                                        l7819 3A6C  
                                      l7851 2606                                        l8491 2796  
                                      l6939 326E                                        l6947 3296  
                                      l6971 30CE                                        l6891 2BDE  
                                      l6883 2BA8                                        l6867 2B34  
                                      l6859 2B08                                        l6795 2F72  
                                      l6699 2D34                                        l7747 2502  
                                      l7739 24F2                                        l7691 2486  
                                      l7683 2452                                        l7675 2426  
                                      l7667 23FA                                        l7595 22B8  
                                      l7587 22AC                                        l7579 2278  
                                      l7755 251A                                        l8387 130E  
                                      l7829 3A96                                        l7861 265A  
                                      l6965 30B6                                        l6877 2B70  
                                      l6789 2F52                                        l7677 2438  
                                      l7669 240C                                        l7757 256E  
                                      l8397 132A                                        l7933 08E6  
                                      l7871 26A6                                        l7855 2628  
                                      l7847 25E4                                        l8495 27A2  
                                      l8487 278E                                        l8479 2772  
                                      l6991 314E                                        l6967 30C6  
                                      l6959 3092                                        l6887 2BD4  
                                      l6895 2BE6                                        l7679 243C  
                                      l7599 22BE                                        l7927 08AC  
                                      l6897 2C00                                        l7697 248C  
                                      l7689 2468                                        l7961 0A18  
                                      l7953 09C6                                        l7945 095A  
                                      l7875 26C8                                        l7859 2648  
                                      l8499 27B4                                        l6995 315A  
                                      l6987 311C                                        l7939 0920  
                                      l7973 0A68                                        l7957 0A08  
                                      l7949 0990                                        l8597 38B2  
                                      l6999 3176                                        l7991 0AD6  
                                      l7967 0A44                                        l7985 0AB0  
                                      l7979 0A8C                                        l7997 0AFA  
                                      l7989 0AD2                                        STR_1 0818  
                                      STR_2 0821                                        STR_3 082A  
                                      STR_4 0833                                        STR_5 083C  
                                      STR_6 082A                                        STR_7 0833  
                                      STR_8 080C              Right_Mountain_From_The_Left@rc 009C  
                                      u7000 16FE                                        u6050 3A4A  
                                      u7110 187C                                        u7030 177C  
                                      u7200 197E                                        u7120 187E  
                                      u7040 177E                                        u8010 1BB4  
                                      u7230 19FC                                        u7150 18FC  
                                      u7070 17FC                                        u7320 1B40  
                                      u7160 18FE                                        u7080 17FE  
                                      u8130 09F0                                        u7260 1A68  
                                      u7236 19FE                                        u7326 1B42  
                                      u7190 197C                                        u7290 1AD4  
                                      u7266 1A6A                                        i2l92 35D0  
                                      u8420 0D82                                        u6805 39E8  
                                      u6830 14CC                                        u7296 1AD6  
                                      u6920 1610                                        i2l97 360E  
                                      u6860 1538                                        u6836 14CE  
                                      u6950 167C                                        u6926 1612  
                                      u6960 167E                                        u6890 15A4  
                                      u6866 153A                                        u7950 2616  
                                      u6990 16FC                                        u6896 15A6  
                                      u7990 26B6                                __CFG_WDTPS$1 000000  
                                      _TXIF 007CF4                                        _Data 0083  
                              __CFG_PWRT$ON 000000                      __end_of_APIxInitialize 21B6  
            __size_of_Train_Move_Left_Brake 0132               __end_of_Train_Move_Left_Brake 2C06  
                                      _pLen 0074                                        _atoi 33C2  
                                      _main 3856                               ?_EUSART1_Read 0023  
            __size_of_Train_Move_Left_Start 0122                             __end_of_SETxPWM 36D6  
                                      fsr0h 000FEA                                        fsr1h 000FE2  
                                      fsr0l 000FE9                                        fsr2h 000FDA  
                                      fsr1l 000FE1                                        indf2 000FDF  
                                      fsr2l 000FD9                                        btemp 0042  
             __end_of_Train_Move_Left_Start 2F78                                        pclat 000FFA  
                                      prodh 000FF4                                        prodl 000FF3  
                                      start 00A6                             __end_of_DataLen 080C  
                             __CFG_IESO$OFF 000000                 EUSART1_Initialize@baud_rate 008D  
                        Green_Led@Operation 008D                               __CFG_MCLRE$ON 000000  
                              ___param_bank 000010                               ??_Init_Timers 008D  
                           __end_of_Red_Led 375A                               __CFG_PLLDIV$5 000000  
                            __CFG_CCP2MX$ON 000000                                       ?_atoi 0093  
                                     ?_main 0023                                       _EEADR 000FA9  
                                     _CMCON 000FB4                            Red_Led@Operation 008D  
                                     _T0CON 000FD5                                       _T2CON 000FCA  
                           __end_of___lwdiv 3856                                SETxPWM@speed 0095  
                           __end_of___lwmod 3992                                       i2l520 3B00  
                                     _TMR0H 000FD7                                       _TMR0L 000FD6  
                                     _SPBRG 000FAF                               __CFG_USBDIV$2 000000  
                                     _TRISA 000F92                                       _TRISB 000F93  
                                     _TRISC 000F94                                       _TRISD 000F95  
                                     _TRISE 000F96                               __CFG_WRT0$OFF 000000  
                             __CFG_WRT1$OFF 000000                               __CFG_WRT2$OFF 000000  
                             __CFG_WRT3$OFF 000000                        _EUSART1_Transmit_ISR 3AD6  
                            __CFG_EBTR0$OFF 000000                              __CFG_FCMEN$OFF 000000  
                            __CFG_EBTR1$OFF 000000                              __CFG_EBTR2$OFF 000000  
                            __CFG_EBTR3$OFF 000000                               __CFG_WRTB$OFF 000000  
                             __CFG_WRTC$OFF 000000                               __CFG_WRTD$OFF 000000  
                                     _pData 0072                              __CFG_EBTRB$OFF 000000  
                           __end_of_dpowers 080B                             __end_of_isdigit 3B5A  
                           __end_of_tc_high 364A                                       atoi@a 0098  
                                     atoi@s 0093                                       _putch 3BFC  
                                     tablat 000FF5                             ?_APIxInitialize 0023  
                            ??_EUSART1_Read 008D                                       status 000FD8  
 Train_Move_Left_Brake@Train_Move_Wait_Time 0062                   __size_of_TranslateMessage 0176  
                       __size_of_GETxAPIxRW 0020                              __CFG_ICPRT$OFF 000000  
                      __end_of_Eeprom_Store 3586                             __initialization 38CA  
                              __end_of_atoi 34B4                  __end_of_EUSART1_Initialize 39DE  
                              __end_of_main 38CA                            __end_of_Init_Pwm 3BA4  
                                    ??_atoi 0095                                      ??_main 00B2  
                       __end_of_Init_Timers 3BFC                               __activetblptr 000002  
                          __end_of_Junction 2AD4                                _Led1_Counter 006E  
                         _Green_Led_Counter 0001                       ?_EUSART1_Transmit_ISR 0023  
                         ?_Update_StateMchn 0023                          ??_Update_StateMchn 009F  
                                    _ADCON1 000FC1                                      _EEDATA 000FA8  
                                    _CCPR1L 000FBE                                   ??_SETxPWM 0098  
                                    _EECON2 000FA7                                      ?_putch 0023  
                                    _API_RW 031C                          __size_of_Green_Led 0084  
                                    i2l6061 3B0C                                      i2l6081 3AFC  
                                    i2l6171 35EC                                      i2l6069 3B2C  
                                    i2l6183 3604                                      i2l6167 35D2  
                                    _INTCON 000FF2                                      i2l6177 35FA  
                   ?_Train_Move_Right_Brake 0023                                      _RCREG1 000FAE  
                                    _SPBRGH 000FB0                          __size_of_SetDCPWM1 0044  
                   ?_Train_Move_Right_Start 0023                                      _TXREG1 000FAD  
            ?_Right_Mountain_From_The_Right 0023                                   ??_Red_Led 008D  
                            __CFG_XINST$OFF 000000             Train_Move_Left_Brake@Return_Val 00B7  
                                    ___wmul 3AA0                              __CFG_STVREN$ON 000000  
                                 ??___lwdiv 0091                                   ??___lwmod 0098  
                                    clear_0 38D2                                      clear_1 38E4  
                                    clear_2 38F0                                      clear_3 38FC  
                                    _tc_low 0018                                      _printf 2842  
                            _Switch_Moutain 001A                                  _Train_Path 21B6  
   Right_Mountain_From_The_Right@Return_Val 00B6      Left_Mountain_From_The_Right@Return_Val 00B4  
                            _Switch_Program 001B                                   ??_isdigit 008D  
                                 ??_tc_high 0023                   _Activate_Controls_Counter 006A  
                              __mediumconst 0000                                      tblptrh 000FF7  
                                    tblptrl 000FF6                                      tblptru 000FF8  
                              ?_SETxAPIxVAL 0090                   _Button_Contact_Counter_LB 0009  
                 _Button_Contact_Counter_LF 000A                   _Button_Contact_Counter_RB 000C  
                 _Button_Contact_Counter_RF 000D              __end_of_Train_Move_Right_Brake 2D32  
                           _eusart1RxBuffer 0100                        __size_of_GETxAPIxVAL 0020  
                           _eusart1TxBuffer 017E              __end_of_Train_Move_Right_Start 2E56  
                      _Train_Move_Pwm_Count 0005                                  __accesstop 0060  
                   __end_of__initialization 3922                             __CFG_PBADEN$OFF 000000  
                             ___rparam_used 000001                               _Received_Data 0077  
                            __pcstackCOMRAM 0023                                __pidataBANK0 3C0A  
                               _Init_Timers 3BE4                               __end_of_putch 3C0A  
                         __end_of_Green_Led 37DE                                ??_GETxAPIxRW 008F  
                   ??_READxRECEIVEDxMESSAGE 00AE                        __end_of_EUSART1_Read 3AA0  
                         __end_of_SetDCPWM1 3A22                             _Red_Led_Counter 0003  
                    ??_EUSART1_Transmit_ISR 0023  Train_Move_Right_Start@Train_Move_Wait_Time 0068  
                  __size_of_Debounce_Inputs 0770                 __end_of_EUSART1_Receive_ISR 3B30  
          Train_Move_Right_Brake@Return_Val 00B9                               ?_SENDxMESSAGE 00A7  
                                   ??_putch 008D                               _eusart1RxHead 001E  
                             _eusart1TxHead 0021                       __size_of_Eeprom_Store 00D2  
               Junction@Junction_Left_Right 0096                               _eusart1RxTail 001F  
                                __pbssBANK0 0060                                  __pbssBANK1 0100  
                             _eusart1TxTail 0022                                   ?_Init_Pwm 0023  
                          _TranslateMessage 2574                          __end_of_GETxAPIxRW 3BE4  
                          GETxAPIxVAL@index 008F                            SETxAPIxVAL@index 0094  
                                 ?_Junction 0095                            SETxAPIxVAL@value 0090  
      __size_of_Left_Mountain_From_The_Left 0112                                     ?___wmul 008D  
                                   _CCP1CON 000FBD                                     ?_tc_low 0023  
                                   ?_printf 0099                                 ?_Train_Path 009D  
                              _Eeprom_Store 34B4                                     _INTCON2 000FF1  
 Train_Move_Left_Start@Train_Move_Wait_Time 0064                              ??_SENDxMESSAGE 00A9  
                          ??_APIxInitialize 008D                                     _SETxPWM 364A  
                          SETxPWM@direction 0097                                     _DataLen 080B  
                           __CFG_VREGEN$OFF 000000                                  ??_Init_Pwm 0095  
                                   _Red_Led 36D6                       _Train_Move_Left_Brake 2AD4  
                                ??_Junction 0096                                     __Hparam 0000  
                     _Train_Move_Left_Start 2E56                                     __Lparam 0000  
                      _Message_To_Translate 0076                             __size_of___wmul 0036  
                                   ___lwdiv 37DE                                     ___lwmod 3930  
                              __psmallconst 0800                                     __pcinit 38CA  
                                   __ramtop 0800                             __size_of_tc_low 008E  
                                   __ptext0 3856                                     __ptext1 0846  
                                   __ptext2 21B6                                     __ptext3 2D32  
                                   __ptext4 2C06                                     __ptext5 2E56  
                                   __ptext6 2AD4                                     __ptext7 2F78  
                                   __ptext8 308C                                     __ptext9 32B2  
                      Train_Path@Return_Val 00BB                             __size_of_printf 0154  
                                   _dpowers 0801                                     _isdigit 3B30  
                                   _tc_high 0008                          _EUSART1_Initialize 3992  
                 _Train_Move_Pwm_Fast_Count 0007                              __pintcode_body 3586  
                      end_of_initialization 3922                             _Switch_Junction 007F  
                         ??_Debounce_Inputs 0096                         ?_EUSART1_Initialize 0023  
                      __size_of_SETxAPIxVAL 0044                               __Lmediumconst 0000  
                                   int_func 3586                            SETxPWM@pwm_speed 009A  
                 __size_of_Update_StateMchn 0B9A                         __size_of_Train_Path 03BE  
                                 _RCSTAbits 000FAB                                     printf@c 00A6  
                                   printf@f 0099                                     postdec1 000FE5  
                                   postdec2 000FDD                                     postinc0 000FEE  
                                   postinc2 000FDE                       __size_of_EUSART1_Read 003A  
            Left_Mountain_From_The_Right@rc 009C                        ??_EUSART1_Initialize 008D  
                                 _PORTAbits 000F80                                   _PORTBbits 000F81  
                                 _PORTCbits 000F82                                   _PORTDbits 000F83  
                                 _PORTEbits 000F84                                   _TRISAbits 000F92  
                                 _TRISBbits 000F93                                   _TRISCbits 000F94  
                                 _TRISDbits 000F95                                   _TRISEbits 000F96  
              Junction@Junction_Switch_Time 0060                      ?_Train_Move_Left_Brake 0023  
                              _EUSART1_Read 3A66                                   _TXSTAbits 000FAC  
                    ?_Train_Move_Left_Start 0023                                 _Switch_Main 0019  
                               _Switch_Init 007E                        __end_of_SENDxMESSAGE 3B80  
                              ?_Init_Timers 0023                          Junction@Return_Val 00B2  
                            __end_of___wmul 3AD6                                 _BAUDCONbits 000FB8  
                      _Update_State_Machine 0082                              __end_of_tc_low 00A6  
                  __end_of_TranslateMessage 26EA                 _Button_Contact_Counter_Stop 000F  
                            __end_of_printf 2996              __size_of_READxRECEIVEDxMESSAGE 0158  
                                 _Green_Led 375A               __end_of_READxRECEIVEDxMESSAGE 2842  
                       start_initialization 38CA                               ??_GETxAPIxVAL 008F  
                                 _SetDCPWM1 39DE                             SetDCPWM1@DCycle 0094  
                    _Mountain_Delay_Counter 0070                ?_Left_Mountain_From_The_Left 0023  
                         __size_of_Init_Pwm 0024                           __size_of_Junction 013E  
                                  ??___wmul 0091                                 __pdataBANK0 00B2  
                          __CFG_LPT1OSC$OFF 000000                                    ??_tc_low 0031  
                                  ??_printf 009F                              _eusart1RxCount 001D  
                              ??_Train_Path 009E                                  ?_Green_Led 0023  
                               __pbssBIGRAM 01FC                                 __pbssCOMRAM 0001  
             __size_of_EUSART1_Transmit_ISR 002E                               __pcstackBANK0 008D  
                                ?_SetDCPWM1 0090  Train_Move_Right_Brake@Train_Move_Wait_Time 0066  
                              _isdigit$1858 008E                                    ?_SETxPWM 0095  
              __size_of_EUSART1_Receive_ISR 002C                         __end_of_GETxAPIxVAL 3BC4  
             ??_Left_Mountain_From_The_Left 009C                                    ?_Red_Led 0023  
                          _Update_StateMchn 0846                            ___lwdiv@dividend 008D  
    Right_Mountain_From_The_Left@Return_Val 00B5       Left_Mountain_From_The_Left@Return_Val 00B3  
                        __end_of_Train_Path 2574                                   __pintcode 0008  
                                  ?___lwdiv 008D        __end_of_Left_Mountain_From_The_Right 33C2  
     __size_of_Left_Mountain_From_The_Right 0110                _Left_Mountain_From_The_Right 32B2  
                                  ?___lwmod 0094                                 __pintcodelo 0018  
                           GETxAPIxRW@index 008F                             _Debounce_Inputs 13E0  
                               __smallconst 0800                    ??_Train_Move_Right_Brake 009C  
                                  ?_isdigit 0023                                    ?_tc_high 0023  
           Right_Mountain_From_The_Right@rc 009C                    ??_Train_Move_Right_Start 009C  
                     TranslateMessage@Index 00AC                       Junction@Straight_Bend 0095  
                     TranslateMessage@Value 00AA                _Button_Contact_Counter_Start 000E  
                  _Reed_Contact_LMD_Counter 0012                            ___lwdiv@quotient 0092  
                            __size_of_putch 000E                              ___wmul@product 0091  
                     __size_of_SENDxMESSAGE 0026        __end_of_Right_Mountain_From_The_Left 31A0  
     __size_of_Right_Mountain_From_The_Left 0114                _Right_Mountain_From_The_Left 308C  
                                  _PIE1bits 000F9D                              _Adjust_Counter 006C  
             Left_Mountain_From_The_Left@rc 009C                                    _PIR1bits 000F9E  
                                  _PIR2bits 000FA1                                    _RCONbits 000FD0  
                            Train_Path@From 009E                        __size_of_Init_Timers 0018  
             ?_Left_Mountain_From_The_Right 0023                           ___wmul@multiplier 008D  
                         SENDxMESSAGE@index 00A9                           SENDxMESSAGE@value 00A7  
                                printf@flag 00A2                                 ??_Green_Led 008D  
                                printf@prec 00A3                                 ??_SetDCPWM1 0092  
                               _GETxAPIxVAL 3BA4                               ??_SETxAPIxVAL 0092  
                              _SENDxMESSAGE 3B5A                                   copy_data0 3916  
                   ??_Train_Move_Left_Brake 009C                    _Reed_Contact_LMU_Counter 0013  
                          __size_of_SETxPWM 008C                     ??_Train_Move_Left_Start 009C  
                        SetDCPWM1@dutycycle 0090                                    _Init_Pwm 3B80  
                     EUSART1_Read@readValue 008D                                  _EECON1bits 000FA6  
                   __size_of_APIxInitialize 0666                                    __Hrparam 0000  
                                  _Junction 2996                            __size_of_Red_Led 0084  
             ?_Right_Mountain_From_The_Left 0023                                    __Lrparam 0000  
                                  _TrSwitch 0081                                    _RxSwitch 0078  
                  _Reed_Contact_RMD_Counter 0016                     __end_of_Debounce_Inputs 1B50  
               __size_of_EUSART1_Initialize 004C                            __size_of___lwdiv 0078  
                          __size_of___lwmod 0062                           _Switch_Train_Path 0080  
                         _Switch_Train_Move 001C                            _Switch_Adjust_LB 007A  
                          _Switch_Adjust_LF 007B                            _Switch_Adjust_RB 007C  
                          _Switch_Adjust_RF 007D                           ?_TranslateMessage 0023  
           __size_of_Train_Move_Right_Brake 012C                            __size_of_isdigit 002A  
                          __size_of_tc_high 3642                          ??_TranslateMessage 00AA  
                           ___lwdiv@divisor 008F             __size_of_Train_Move_Right_Start 0124  
                           ___lwdiv@counter 0091                                    __ptext10 31A0  
                                  __ptext11 364A                                    __ptext20 33C2  
                                  __ptext12 2996                                    __ptext21 3B30  
                                  __ptext13 36D6                                    __ptext30 3A66  
                                  __ptext22 3AA0                                    __ptext14 375A  
                                  __ptext31 3BE4                                    __ptext23 3B5A  
                                  __ptext15 34B4                                    __ptext32 3B80  
                                  __ptext24 2842                                    __ptext16 13E0  
                                  __ptext33 3A22                                    __ptext25 3BFC  
                                  __ptext17 39DE                                    __ptext34 3992  
                                  __ptext26 3930                                    __ptext18 26EA  
                                  __ptext35 1B50                                    __ptext27 37DE  
                                  __ptext19 2574                                    __ptext28 3BA4  
                                  __ptext29 3BC4                                    __ptext38 3AD6  
                                  __ptext39 3B04                               __size_of_atoi 00F2  
                             __size_of_main 0074                         __end_of_SETxAPIxVAL 3A66  
                   _Reed_Contact_LB_Counter 0010                                    int$flags 0042  
                   _Reed_Contact_LF_Counter 0011                                    atoi@sign 0097  
                  _Reed_Contact_RMU_Counter 0017                                   printf@val 00A4  
                       _EUSART1_Receive_ISR 3B04                                  _GETxAPIxRW 3BC4  
                     __CFG_CPUDIV$OSC2_PLL3 000000                                   putch@data 008D  
                             ?_Eeprom_Store 0023                    __end_of_Update_StateMchn 13E0  
                                _INTCONbits 000FF2             ??_Right_Mountain_From_The_Right 009C  
            ??_Left_Mountain_From_The_Right 009C                       _READxRECEIVEDxMESSAGE 26EA  
                                  isdigit@c 008F                     _Reed_Contact_RB_Counter 0014  
                                  intlevel1 0000                                    intlevel2 0000  
                      ?_EUSART1_Receive_ISR 0023                            ___lwmod@dividend 0094  
                                _RCSTA1bits 000FAB                     _Reed_Contact_RF_Counter 0015  
                    _Train_Move_Right_Brake 2C06                __end_of_EUSART1_Transmit_ISR 3B04  
                    _Train_Move_Right_Start 2D32             Train_Move_Left_Start@Return_Val 00B8  
                              Train_Path@To 009D                                    printf@ap 00A0  
                          ?_Debounce_Inputs 0023                    _Switch_Activate_Controls 0079  
            ??_Right_Mountain_From_The_Left 009C                              ??_Eeprom_Store 0090  
                           ___lwmod@divisor 0096                             ___lwmod@counter 0098  
                               _SETxAPIxVAL 3A22                          __CFG_FOSC$HSPLL_HS 000000  
                     ??_EUSART1_Receive_ISR 0023                              _APIxInitialize 1B50  
             _Button_Contact_Counter_Middle 000B  
