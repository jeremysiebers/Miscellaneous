

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Oct 07 23:48:12 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           	psect	idataCOMRAM
    54  002600                     __pidataCOMRAM:
    55                           	opt stack 0
    56                           
    57                           ;initializer for _Train_Move_Pwm_Count
    58  002600  01FF               	dw	511
    59                           
    60                           ;initializer for Left_Mountain_From_The_Right@Return_Val
    61  002602  FF                 	db	255
    62                           
    63                           ;initializer for Right_Mountain_From_The_Right@Return_Val
    64  002603  FF                 	db	255
    65                           
    66                           ;initializer for Train_Move_Left_Start@Return_Val
    67  002604  FF                 	db	255
    68                           
    69                           ;initializer for Train_Path@Return_Val
    70  002605  FF                 	db	255
    71                           
    72                           	psect	idataBANK0
    73  002606                     __pidataBANK0:
    74                           	opt stack 0
    75                           
    76                           ;initializer for Junction@Return_Val
    77  002606  FF                 	db	255
    78                           
    79                           ;initializer for Left_Mountain_From_The_Left@Return_Val
    80  002607  FF                 	db	255
    81                           
    82                           ;initializer for Right_Mountain_From_The_Left@Return_Val
    83  002608  FF                 	db	255
    84                           
    85                           ;initializer for Train_Move_Left_Brake@Return_Val
    86  002609  FF                 	db	255
    87                           
    88                           ;initializer for Train_Move_Right_Brake@Return_Val
    89  00260A  FF                 	db	255
    90                           
    91                           ;initializer for Train_Move_Right_Start@Return_Val
    92  00260B  FF                 	db	255
    93  0000                     _ADCON1	set	4033
    94  0000                     _BAUDCONbits	set	4024
    95  0000                     _CCP1CON	set	4029
    96  0000                     _CCPR1L	set	4030
    97  0000                     _CMCON	set	4020
    98  0000                     _EEADR	set	4009
    99  0000                     _EECON1bits	set	4006
   100  0000                     _EECON2	set	4007
   101  0000                     _EEDATA	set	4008
   102  0000                     _INTCON	set	4082
   103  0000                     _INTCON2	set	4081
   104  0000                     _INTCONbits	set	4082
   105  0000                     _PIE1bits	set	3997
   106  0000                     _PIR1bits	set	3998
   107  0000                     _PIR2bits	set	4001
   108  0000                     _PORTAbits	set	3968
   109  0000                     _PORTBbits	set	3969
   110  0000                     _PORTCbits	set	3970
   111  0000                     _PORTDbits	set	3971
   112  0000                     _PR2	set	4043
   113  0000                     _RCONbits	set	4048
   114  0000                     _RCREG1	set	4014
   115  0000                     _RCSTA1bits	set	4011
   116  0000                     _RCSTAbits	set	4011
   117  0000                     _SPBRG	set	4015
   118  0000                     _SPBRGH	set	4016
   119  0000                     _T0CON	set	4053
   120  0000                     _T2CON	set	4042
   121  0000                     _TMR0H	set	4055
   122  0000                     _TMR0L	set	4054
   123  0000                     _TRISA	set	3986
   124  0000                     _TRISAbits	set	3986
   125  0000                     _TRISB	set	3987
   126  0000                     _TRISBbits	set	3987
   127  0000                     _TRISC	set	3988
   128  0000                     _TRISCbits	set	3988
   129  0000                     _TRISD	set	3989
   130  0000                     _TRISDbits	set	3989
   131  0000                     _TRISE	set	3990
   132  0000                     _TXREG1	set	4013
   133  0000                     _TXSTAbits	set	4012
   134                           
   135                           ; #config settings
   136  0000                     
   137                           	psect	cinit
   138  002324                     __pcinit:
   139                           	opt stack 0
   140  002324                     start_initialization:
   141                           	opt stack 0
   142  002324                     __initialization:
   143                           	opt stack 0
   144                           
   145                           ; Clear objects allocated to BANK2 (126 bytes)
   146  002324  EE02  F000         	lfsr	0,__pbssBANK2
   147  002328  0E7E               	movlw	126
   148  00232A                     clear_0:
   149  00232A  6AEE               	clrf	postinc0,c
   150  00232C  06E8               	decf	wreg,f,c
   151  00232E  E1FD               	bnz	clear_0
   152                           
   153                           ; Clear objects allocated to BANK1 (252 bytes)
   154  002330  EE01  F000         	lfsr	0,__pbssBANK1
   155  002334  0EFC               	movlw	252
   156  002336                     clear_1:
   157  002336  6AEE               	clrf	postinc0,c
   158  002338  06E8               	decf	wreg,f,c
   159  00233A  E1FD               	bnz	clear_1
   160                           
   161                           ; Clear objects allocated to BANK0 (142 bytes)
   162  00233C  EE00  F060         	lfsr	0,__pbssBANK0
   163  002340  0E8E               	movlw	142
   164  002342                     clear_2:
   165  002342  6AEE               	clrf	postinc0,c
   166  002344  06E8               	decf	wreg,f,c
   167  002346  E1FD               	bnz	clear_2
   168                           
   169                           ; Clear objects allocated to COMRAM (42 bytes)
   170  002348  EE00  F001         	lfsr	0,__pbssCOMRAM
   171  00234C  0E2A               	movlw	42
   172  00234E                     clear_3:
   173  00234E  6AEE               	clrf	postinc0,c
   174  002350  06E8               	decf	wreg,f,c
   175  002352  E1FD               	bnz	clear_3
   176                           
   177                           ; Initialize objects allocated to BANK0 (6 bytes)
   178                           ; load TBLPTR registers with __pidataBANK0
   179  002354  0E06               	movlw	low __pidataBANK0
   180  002356  6EF6               	movwf	tblptrl,c
   181  002358  0E26               	movlw	high __pidataBANK0
   182  00235A  6EF7               	movwf	tblptrh,c
   183  00235C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   184  00235E  6EF8               	movwf	tblptru,c
   185  002360  EE00  F0EE         	lfsr	0,__pdataBANK0
   186  002364  EE10 F006          	lfsr	1,6
   187  002368                     copy_data0:
   188  002368  0009               	tblrd		*+
   189  00236A  CFF5 FFEE          	movff	tablat,postinc0
   190  00236E  50E5               	movf	postdec1,w,c
   191  002370  50E1               	movf	fsr1l,w,c
   192  002372  E1FA               	bnz	copy_data0
   193                           
   194                           ; Initialize objects allocated to COMRAM (6 bytes)
   195                           ; load TBLPTR registers with __pidataCOMRAM
   196  002374  0E00               	movlw	low __pidataCOMRAM
   197  002376  6EF6               	movwf	tblptrl,c
   198  002378  0E26               	movlw	high __pidataCOMRAM
   199  00237A  6EF7               	movwf	tblptrh,c
   200  00237C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   201  00237E  6EF8               	movwf	tblptru,c
   202  002380  EE00  F048         	lfsr	0,__pdataCOMRAM
   203  002384  EE10 F006          	lfsr	1,6
   204  002388                     copy_data1:
   205  002388  0009               	tblrd		*+
   206  00238A  CFF5 FFEE          	movff	tablat,postinc0
   207  00238E  50E5               	movf	postdec1,w,c
   208  002390  50E1               	movf	fsr1l,w,c
   209  002392  E1FA               	bnz	copy_data1
   210  002394                     end_of_initialization:
   211                           	opt stack 0
   212  002394                     __end_of__initialization:
   213                           	opt stack 0
   214  002394  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   215  002396  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   216  002398  0E00               	movlw	low (__Lmediumconst shr (0+16))
   217  00239A  6EF8               	movwf	tblptru,c
   218  00239C  0100               	movlb	0
   219  00239E  EFD1  F011         	goto	_main	;jump to C main() function
   220                           tblptru	equ	0xFF8
   221                           tblptrh	equ	0xFF7
   222                           tblptrl	equ	0xFF6
   223                           tablat	equ	0xFF5
   224                           postinc0	equ	0xFEE
   225                           wreg	equ	0xFE8
   226                           postdec1	equ	0xFE5
   227                           fsr1l	equ	0xFE1
   228                           
   229                           	psect	bssCOMRAM
   230  000001                     __pbssCOMRAM:
   231                           	opt stack 0
   232  000001                     _Adjust_Counter:
   233                           	opt stack 0
   234  000001                     	ds	2
   235  000003                     _Green_Led_Counter:
   236                           	opt stack 0
   237  000003                     	ds	2
   238  000005                     _Red_Led_Counter:
   239                           	opt stack 0
   240  000005                     	ds	2
   241  000007                     _Train_Move_Pwm_Fast_Count:
   242                           	opt stack 0
   243  000007                     	ds	2
   244  000009                     _Button_Contact_Counter_LB:
   245                           	opt stack 0
   246  000009                     	ds	1
   247  00000A                     _Button_Contact_Counter_LF:
   248                           	opt stack 0
   249  00000A                     	ds	1
   250  00000B                     _Button_Contact_Counter_Middle:
   251                           	opt stack 0
   252  00000B                     	ds	1
   253  00000C                     _Button_Contact_Counter_RB:
   254                           	opt stack 0
   255  00000C                     	ds	1
   256  00000D                     _Button_Contact_Counter_RF:
   257                           	opt stack 0
   258  00000D                     	ds	1
   259  00000E                     _Button_Contact_Counter_Start:
   260                           	opt stack 0
   261  00000E                     	ds	1
   262  00000F                     _Button_Contact_Counter_Stop:
   263                           	opt stack 0
   264  00000F                     	ds	1
   265  000010                     _Reed_Contact_LB_Counter:
   266                           	opt stack 0
   267  000010                     	ds	1
   268  000011                     _Reed_Contact_LF_Counter:
   269                           	opt stack 0
   270  000011                     	ds	1
   271  000012                     _Reed_Contact_LMD_Counter:
   272                           	opt stack 0
   273  000012                     	ds	1
   274  000013                     _Reed_Contact_LMU_Counter:
   275                           	opt stack 0
   276  000013                     	ds	1
   277  000014                     _Reed_Contact_RB_Counter:
   278                           	opt stack 0
   279  000014                     	ds	1
   280  000015                     _Reed_Contact_RF_Counter:
   281                           	opt stack 0
   282  000015                     	ds	1
   283  000016                     _Reed_Contact_RMD_Counter:
   284                           	opt stack 0
   285  000016                     	ds	1
   286  000017                     _Reed_Contact_RMU_Counter:
   287                           	opt stack 0
   288  000017                     	ds	1
   289  000018                     _Stop_Program:
   290                           	opt stack 0
   291  000018                     	ds	1
   292  000019                     _Switch_Activate_Controls:
   293                           	opt stack 0
   294  000019                     	ds	1
   295  00001A                     _Switch_Adjust_LB:
   296                           	opt stack 0
   297  00001A                     	ds	1
   298  00001B                     _Switch_Adjust_LF:
   299                           	opt stack 0
   300  00001B                     	ds	1
   301  00001C                     _Switch_Adjust_RB:
   302                           	opt stack 0
   303  00001C                     	ds	1
   304  00001D                     _Switch_Adjust_RF:
   305                           	opt stack 0
   306  00001D                     	ds	1
   307  00001E                     _Switch_Init:
   308                           	opt stack 0
   309  00001E                     	ds	1
   310  00001F                     _Switch_Junction:
   311                           	opt stack 0
   312  00001F                     	ds	1
   313  000020                     _Switch_Main:
   314                           	opt stack 0
   315  000020                     	ds	1
   316  000021                     _Switch_Program:
   317                           	opt stack 0
   318  000021                     	ds	1
   319  000022                     _Switch_Train_Move:
   320                           	opt stack 0
   321  000022                     	ds	1
   322  000023                     _Switch_Train_Path:
   323                           	opt stack 0
   324  000023                     	ds	1
   325  000024                     _Update_State_Machine:
   326                           	opt stack 0
   327  000024                     	ds	1
   328  000025                     _eusart1RxCount:
   329                           	opt stack 0
   330  000025                     	ds	1
   331  000026                     _eusart1RxHead:
   332                           	opt stack 0
   333  000026                     	ds	1
   334  000027                     _eusart1RxTail:
   335                           	opt stack 0
   336  000027                     	ds	1
   337  000028                     _eusart1TxBufferRemaining:
   338                           	opt stack 0
   339  000028                     	ds	1
   340  000029                     _eusart1TxHead:
   341                           	opt stack 0
   342  000029                     	ds	1
   343  00002A                     _eusart1TxTail:
   344                           	opt stack 0
   345  00002A                     	ds	1
   346                           tblptru	equ	0xFF8
   347                           tblptrh	equ	0xFF7
   348                           tblptrl	equ	0xFF6
   349                           tablat	equ	0xFF5
   350                           postinc0	equ	0xFEE
   351                           wreg	equ	0xFE8
   352                           postdec1	equ	0xFE5
   353                           fsr1l	equ	0xFE1
   354                           
   355                           	psect	dataCOMRAM
   356  000048                     __pdataCOMRAM:
   357                           	opt stack 0
   358  000048                     _Train_Move_Pwm_Count:
   359                           	opt stack 0
   360  000048                     	ds	2
   361  00004A                     Left_Mountain_From_The_Right@Return_Val:
   362                           	opt stack 0
   363  00004A                     	ds	1
   364  00004B                     Right_Mountain_From_The_Right@Return_Val:
   365                           	opt stack 0
   366  00004B                     	ds	1
   367  00004C                     Train_Move_Left_Start@Return_Val:
   368                           	opt stack 0
   369  00004C                     	ds	1
   370  00004D                     Train_Path@Return_Val:
   371                           	opt stack 0
   372  00004D                     	ds	1
   373                           tblptru	equ	0xFF8
   374                           tblptrh	equ	0xFF7
   375                           tblptrl	equ	0xFF6
   376                           tablat	equ	0xFF5
   377                           postinc0	equ	0xFEE
   378                           wreg	equ	0xFE8
   379                           postdec1	equ	0xFE5
   380                           fsr1l	equ	0xFE1
   381                           
   382                           	psect	bssBANK0
   383  000060                     __pbssBANK0:
   384                           	opt stack 0
   385  000060                     _API:
   386                           	opt stack 0
   387  000060                     	ds	126
   388  0000DE                     Junction@Junction_Switch_Time:
   389                           	opt stack 0
   390  0000DE                     	ds	2
   391  0000E0                     Train_Move_Left_Brake@Train_Move_Wait_Time:
   392                           	opt stack 0
   393  0000E0                     	ds	2
   394  0000E2                     Train_Move_Left_Start@Train_Move_Wait_Time:
   395                           	opt stack 0
   396  0000E2                     	ds	2
   397  0000E4                     Train_Move_Right_Brake@Train_Move_Wait_Time:
   398                           	opt stack 0
   399  0000E4                     	ds	2
   400  0000E6                     Train_Move_Right_Start@Train_Move_Wait_Time:
   401                           	opt stack 0
   402  0000E6                     	ds	2
   403  0000E8                     _Activate_Controls_Counter:
   404                           	opt stack 0
   405  0000E8                     	ds	2
   406  0000EA                     _Led1_Counter:
   407                           	opt stack 0
   408  0000EA                     	ds	2
   409  0000EC                     _Switch_Main_Old:
   410                           	opt stack 0
   411  0000EC                     	ds	1
   412  0000ED                     _Switch_Program_Old:
   413                           	opt stack 0
   414  0000ED                     	ds	1
   415                           tblptru	equ	0xFF8
   416                           tblptrh	equ	0xFF7
   417                           tblptrl	equ	0xFF6
   418                           tablat	equ	0xFF5
   419                           postinc0	equ	0xFEE
   420                           wreg	equ	0xFE8
   421                           postdec1	equ	0xFE5
   422                           fsr1l	equ	0xFE1
   423                           
   424                           	psect	dataBANK0
   425  0000EE                     __pdataBANK0:
   426                           	opt stack 0
   427  0000EE                     Junction@Return_Val:
   428                           	opt stack 0
   429  0000EE                     	ds	1
   430  0000EF                     Left_Mountain_From_The_Left@Return_Val:
   431                           	opt stack 0
   432  0000EF                     	ds	1
   433  0000F0                     Right_Mountain_From_The_Left@Return_Val:
   434                           	opt stack 0
   435  0000F0                     	ds	1
   436  0000F1                     Train_Move_Left_Brake@Return_Val:
   437                           	opt stack 0
   438  0000F1                     	ds	1
   439  0000F2                     Train_Move_Right_Brake@Return_Val:
   440                           	opt stack 0
   441  0000F2                     	ds	1
   442  0000F3                     Train_Move_Right_Start@Return_Val:
   443                           	opt stack 0
   444  0000F3                     	ds	1
   445                           tblptru	equ	0xFF8
   446                           tblptrh	equ	0xFF7
   447                           tblptrl	equ	0xFF6
   448                           tablat	equ	0xFF5
   449                           postinc0	equ	0xFEE
   450                           wreg	equ	0xFE8
   451                           postdec1	equ	0xFE5
   452                           fsr1l	equ	0xFE1
   453                           
   454                           	psect	bssBANK1
   455  000100                     __pbssBANK1:
   456                           	opt stack 0
   457  000100                     _API_RW:
   458                           	opt stack 0
   459  000100                     	ds	126
   460  00017E                     _eusart1TxBuffer:
   461                           	opt stack 0
   462  00017E                     	ds	126
   463                           tblptru	equ	0xFF8
   464                           tblptrh	equ	0xFF7
   465                           tblptrl	equ	0xFF6
   466                           tablat	equ	0xFF5
   467                           postinc0	equ	0xFEE
   468                           wreg	equ	0xFE8
   469                           postdec1	equ	0xFE5
   470                           fsr1l	equ	0xFE1
   471                           
   472                           	psect	bssBANK2
   473  000200                     __pbssBANK2:
   474                           	opt stack 0
   475  000200                     _eusart1RxBuffer:
   476                           	opt stack 0
   477  000200                     	ds	126
   478                           tblptru	equ	0xFF8
   479                           tblptrh	equ	0xFF7
   480                           tblptrl	equ	0xFF6
   481                           tablat	equ	0xFF5
   482                           postinc0	equ	0xFEE
   483                           wreg	equ	0xFE8
   484                           postdec1	equ	0xFE5
   485                           fsr1l	equ	0xFE1
   486                           
   487                           	psect	cstackBANK2
   488  00027E                     __pcstackBANK2:
   489                           	opt stack 0
   490  00027E                     ??_tc_low:
   491                           
   492                           ; 1 bytes @ 0x0
   493  00027E                     	ds	17
   494                           tblptru	equ	0xFF8
   495                           tblptrh	equ	0xFF7
   496                           tblptrl	equ	0xFF6
   497                           tablat	equ	0xFF5
   498                           postinc0	equ	0xFEE
   499                           wreg	equ	0xFE8
   500                           postdec1	equ	0xFE5
   501                           fsr1l	equ	0xFE1
   502                           
   503                           	psect	cstackCOMRAM
   504  00002B                     __pcstackCOMRAM:
   505                           	opt stack 0
   506  00002B                     EUSART1_Write@txData:
   507                           	opt stack 0
   508                           
   509                           ; 1 bytes @ 0x0
   510  00002B                     	ds	1
   511  00002C                     ??_tc_high:
   512                           
   513                           ; 1 bytes @ 0x1
   514  00002C                     	ds	14
   515  00003A                     ?_GETxAPIxVAL:
   516                           	opt stack 0
   517  00003A                     Green_Led@Operation:
   518                           	opt stack 0
   519  00003A                     Red_Led@Operation:
   520                           	opt stack 0
   521  00003A                     EUSART1_Initialize@baud_rate:
   522                           	opt stack 0
   523  00003A                     INIT_TERMINAL@i:
   524                           	opt stack 0
   525  00003A                     APIxInitialize@i:
   526                           	opt stack 0
   527  00003A                     SETxAPIxVAL@value:
   528                           	opt stack 0
   529                           
   530                           ; 2 bytes @ 0xF
   531  00003A                     	ds	2
   532  00003C                     SETxAPIxVAL@index:
   533                           	opt stack 0
   534  00003C                     GETxAPIxVAL@index:
   535                           	opt stack 0
   536                           
   537                           ; 1 bytes @ 0x11
   538  00003C                     	ds	1
   539  00003D                     ??_Debounce_Inputs:
   540  00003D                     Junction@Straight_Bend:
   541                           	opt stack 0
   542  00003D                     INCRxAPIxVAL@value:
   543                           	opt stack 0
   544  00003D                     DECRxAPIxVAL@value:
   545                           	opt stack 0
   546  00003D                     SetDCPWM1@dutycycle:
   547                           	opt stack 0
   548                           
   549                           ; 2 bytes @ 0x12
   550  00003D                     	ds	1
   551  00003E                     Junction@Junction_Left_Right:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x13
   555  00003E                     	ds	1
   556  00003F                     ??_SetDCPWM1:
   557  00003F                     INCRxAPIxVAL@index:
   558                           	opt stack 0
   559  00003F                     DECRxAPIxVAL@index:
   560                           	opt stack 0
   561                           
   562                           ; 1 bytes @ 0x14
   563  00003F                     	ds	2
   564  000041                     SetDCPWM1@DCycle:
   565                           	opt stack 0
   566                           
   567                           ; 2 bytes @ 0x16
   568  000041                     	ds	2
   569  000043                     Right_Mountain_From_The_Right@rc:
   570                           	opt stack 0
   571                           
   572                           ; 1 bytes @ 0x18
   573  000043                     	ds	1
   574  000044                     Train_Path@To:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0x19
   578  000044                     	ds	1
   579  000045                     Train_Path@From:
   580                           	opt stack 0
   581                           
   582                           ; 1 bytes @ 0x1A
   583  000045                     	ds	1
   584  000046                     ??_Update_StateMchn:
   585                           
   586                           ; 1 bytes @ 0x1B
   587  000046                     	ds	2
   588  000048                     tblptru	equ	0xFF8
   589                           tblptrh	equ	0xFF7
   590                           tblptrl	equ	0xFF6
   591                           tablat	equ	0xFF5
   592                           postinc0	equ	0xFEE
   593                           wreg	equ	0xFE8
   594                           postdec1	equ	0xFE5
   595                           fsr1l	equ	0xFE1
   596                           
   597                           ; 1 bytes @ 0x1D
   598 ;;
   599 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   600 ;;
   601 ;; *************** function _main *****************
   602 ;; Defined at:
   603 ;;		line 104 in file "../Main.c"
   604 ;; Parameters:    Size  Location     Type
   605 ;;		None
   606 ;; Auto vars:     Size  Location     Type
   607 ;;		None
   608 ;; Return value:  Size  Location     Type
   609 ;;                  1    wreg      void 
   610 ;; Registers used:
   611 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   612 ;; Tracked objects:
   613 ;;		On entry : 0/0
   614 ;;		On exit  : 0/0
   615 ;;		Unchanged: 0/0
   616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   617 ;;      Params:         0       0       0       0       0       0       0       0       0
   618 ;;      Locals:         0       0       0       0       0       0       0       0       0
   619 ;;      Temps:          0       0       0       0       0       0       0       0       0
   620 ;;      Totals:         0       0       0       0       0       0       0       0       0
   621 ;;Total ram usage:        0 bytes
   622 ;; Hardware stack levels required when called:    8
   623 ;; This function calls:
   624 ;;		_APIxInitialize
   625 ;;		_EUSART1_Initialize
   626 ;;		_INIT_TERMINAL
   627 ;;		_Init_Pwm
   628 ;;		_Init_Timers
   629 ;;		_Update_StateMchn
   630 ;; This function is called by:
   631 ;;		Startup code after reset
   632 ;; This function uses a non-reentrant model
   633 ;;
   634                           
   635                           	psect	text0
   636  0023A2                     __ptext0:
   637                           	opt stack 0
   638  0023A2                     _main:
   639                           	opt stack 23
   640                           
   641                           ;Main.c: 106: TRISA = 0xFF;TRISB = 0xFF;TRISC = 0xFF;TRISD = 0xFF;TRISE = 0xFF;
   642                           
   643                           ;incstack = 0
   644  0023A2  6892               	setf	3986,c	;volatile
   645  0023A4  6893               	setf	3987,c	;volatile
   646  0023A6  6894               	setf	3988,c	;volatile
   647  0023A8  6895               	setf	3989,c	;volatile
   648  0023AA  6896               	setf	3990,c	;volatile
   649                           
   650                           ;Main.c: 107: ADCON1=0x0F;
   651  0023AC  0E0F               	movlw	15
   652  0023AE  6EC1               	movwf	4033,c	;volatile
   653                           
   654                           ;Main.c: 108: CMCON=0x07;
   655  0023B0  0E07               	movlw	7
   656  0023B2  6EB4               	movwf	4020,c	;volatile
   657                           
   658                           ;Main.c: 109: TRISAbits.TRISA4=0;TRISDbits.TRISD5=0;TRISDbits.TRISD6=0;;
   659  0023B4  9892               	bcf	3986,4,c	;volatile
   660  0023B6  9A95               	bcf	3989,5,c	;volatile
   661  0023B8  9C95               	bcf	3989,6,c	;volatile
   662                           
   663                           ;Main.c: 110: PORTAbits.RA4 = 0;
   664  0023BA  9880               	bcf	3968,4,c	;volatile
   665                           
   666                           ;Main.c: 111: PORTDbits.RD6 = 0;
   667  0023BC  9C83               	bcf	3971,6,c	;volatile
   668                           
   669                           ;Main.c: 112: PORTDbits.RD5 = 0;
   670  0023BE  9A83               	bcf	3971,5,c	;volatile
   671                           
   672                           ;Main.c: 114: TRISAbits.TRISA0=0;TRISAbits.TRISA1=0;TRISAbits.TRISA2=0;TRISAbits.TRISA3=
      +                          0;;
   673  0023C0  9092               	bcf	3986,0,c	;volatile
   674  0023C2  9292               	bcf	3986,1,c	;volatile
   675  0023C4  9492               	bcf	3986,2,c	;volatile
   676  0023C6  9692               	bcf	3986,3,c	;volatile
   677                           
   678                           ;Main.c: 115: PORTAbits.RA3 = 0;
   679  0023C8  9680               	bcf	3968,3,c	;volatile
   680                           
   681                           ;Main.c: 116: PORTAbits.RA2 = 0;
   682  0023CA  9480               	bcf	3968,2,c	;volatile
   683                           
   684                           ;Main.c: 117: PORTAbits.RA1 = 0;
   685  0023CC  9280               	bcf	3968,1,c	;volatile
   686                           
   687                           ;Main.c: 118: PORTAbits.RA0 = 0;
   688  0023CE  9080               	bcf	3968,0,c	;volatile
   689                           
   690                           ;Main.c: 120: TRISDbits.TRISD2=1;TRISDbits.TRISD3=1;TRISDbits.TRISD0=1;TRISDbits.TRISD1=
      +                          1;
   691  0023D0  8495               	bsf	3989,2,c	;volatile
   692  0023D2  8695               	bsf	3989,3,c	;volatile
   693  0023D4  8095               	bsf	3989,0,c	;volatile
   694  0023D6  8295               	bsf	3989,1,c	;volatile
   695                           
   696                           ;Main.c: 121: TRISBbits.TRISB0=1;TRISBbits.TRISB1=1;TRISBbits.TRISB2=1;TRISBbits.TRISB3=
      +                          1;TRISBbits.TRISB4=1;TRISBbits.TRISB5=1;TRISDbits.TRISD7=1;;
   697  0023D8  8093               	bsf	3987,0,c	;volatile
   698  0023DA  8293               	bsf	3987,1,c	;volatile
   699  0023DC  8493               	bsf	3987,2,c	;volatile
   700  0023DE  8693               	bsf	3987,3,c	;volatile
   701  0023E0  8893               	bsf	3987,4,c	;volatile
   702  0023E2  8A93               	bsf	3987,5,c	;volatile
   703  0023E4  8E95               	bsf	3989,7,c	;volatile
   704                           
   705                           ;Main.c: 122: APIxInitialize();
   706  0023E6  EC1D  F00C         	call	_APIxInitialize	;wreg free
   707                           
   708                           ;Main.c: 123: Init_Pwm();
   709  0023EA  ECF1  F012         	call	_Init_Pwm	;wreg free
   710                           
   711                           ;Main.c: 124: Init_Timers();
   712  0023EE  ECE5  F012         	call	_Init_Timers	;wreg free
   713                           
   714                           ;Main.c: 125: EUSART1_Initialize();
   715  0023F2  EC05  F012         	call	_EUSART1_Initialize	;wreg free
   716                           
   717                           ;Main.c: 126: INIT_TERMINAL();
   718  0023F6  EC90  F012         	call	_INIT_TERMINAL	;wreg free
   719  0023FA                     l6042:
   720                           
   721                           ;Main.c: 129: {
   722                           ;Main.c: 130: if (1 == Update_State_Machine)
   723  0023FA  0424               	decf	_Update_State_Machine,w,c
   724  0023FC  A4D8               	btfss	status,2,c
   725  0023FE  D7FD               	goto	l6042
   726                           
   727                           ;Main.c: 131: {
   728                           ;Main.c: 132: Update_State_Machine = 0;
   729  002400  0E00               	movlw	0
   730  002402  6E24               	movwf	_Update_State_Machine,c
   731                           
   732                           ;Main.c: 133: Update_StateMchn();
   733  002404  EC55  F000         	call	_Update_StateMchn	;wreg free
   734  002408  D7F8               	goto	l6042
   735  00240A                     __end_of_main:
   736                           	opt stack 0
   737                           tblptru	equ	0xFF8
   738                           tblptrh	equ	0xFF7
   739                           tblptrl	equ	0xFF6
   740                           tablat	equ	0xFF5
   741                           postinc0	equ	0xFEE
   742                           wreg	equ	0xFE8
   743                           postdec1	equ	0xFE5
   744                           fsr1l	equ	0xFE1
   745                           status	equ	0xFD8
   746                           
   747 ;; *************** function _Update_StateMchn *****************
   748 ;; Defined at:
   749 ;;		line 120 in file "../State_Mchn.c"
   750 ;; Parameters:    Size  Location     Type
   751 ;;		None
   752 ;; Auto vars:     Size  Location     Type
   753 ;;		None
   754 ;; Return value:  Size  Location     Type
   755 ;;                  1    wreg      void 
   756 ;; Registers used:
   757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   758 ;; Tracked objects:
   759 ;;		On entry : 0/0
   760 ;;		On exit  : 0/0
   761 ;;		Unchanged: 0/0
   762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   763 ;;      Params:         0       0       0       0       0       0       0       0       0
   764 ;;      Locals:         0       0       0       0       0       0       0       0       0
   765 ;;      Temps:          2       0       0       0       0       0       0       0       0
   766 ;;      Totals:         2       0       0       0       0       0       0       0       0
   767 ;;Total ram usage:        2 bytes
   768 ;; Hardware stack levels used:    1
   769 ;; Hardware stack levels required when called:    7
   770 ;; This function calls:
   771 ;;		_DECRxAPIxVAL
   772 ;;		_Debounce_Inputs
   773 ;;		_Eeprom_Store
   774 ;;		_GETxAPIxVAL
   775 ;;		_Green_Led
   776 ;;		_INCRxAPIxVAL
   777 ;;		_Red_Led
   778 ;;		_SETxAPIxVAL
   779 ;;		_Train_Path
   780 ;; This function is called by:
   781 ;;		_main
   782 ;; This function uses a non-reentrant model
   783 ;;
   784                           
   785                           	psect	text1
   786  0000AA                     __ptext1:
   787                           	opt stack 0
   788  0000AA                     _Update_StateMchn:
   789                           	opt stack 23
   790                           
   791                           ;State_Mchn.c: 122: Debounce_Inputs();
   792                           
   793                           ;incstack = 0
   794  0000AA  EC86  F007         	call	_Debounce_Inputs	;wreg free
   795                           
   796                           ;State_Mchn.c: 124: switch (Switch_Main)
   797  0000AE  EF79  F007         	goto	l5884
   798  0000B2                     l5128:
   799  0000B2  0E00               	movlw	0
   800  0000B4  EC52  F011         	call	_Green_Led
   801                           
   802                           ;State_Mchn.c: 129: Red_Led(0);
   803  0000B8  0E00               	movlw	0
   804  0000BA  EC12  F011         	call	_Red_Led
   805                           
   806                           ;State_Mchn.c: 130: Switch_Init = 1;
   807  0000BE  0E01               	movlw	1
   808  0000C0  6E1E               	movwf	_Switch_Init,c
   809                           
   810                           ;State_Mchn.c: 131: break;
   811  0000C2  0012               	return	
   812  0000C4                     l5132:
   813  0000C4  0E13               	movlw	19
   814  0000C6  ECD7  F012         	call	_GETxAPIxVAL
   815  0000CA  503A               	movf	?_GETxAPIxVAL,w,c
   816  0000CC  103B               	iorwf	?_GETxAPIxVAL+1,w,c
   817  0000CE  B4D8               	btfsc	status,2,c
   818  0000D0  D00A               	goto	l5138
   819                           
   820                           ;State_Mchn.c: 134: {
   821                           ;State_Mchn.c: 135: SETxAPIxVAL(23, 0);
   822  0000D2  0E00               	movlw	0
   823  0000D4  6E3B               	movwf	SETxAPIxVAL@value+1,c
   824  0000D6  0E00               	movlw	0
   825  0000D8  6E3A               	movwf	SETxAPIxVAL@value,c
   826  0000DA  0E17               	movlw	23
   827  0000DC  ECC9  F012         	call	_SETxAPIxVAL
   828                           
   829                           ;State_Mchn.c: 136: Switch_Init = 2;
   830  0000E0  0E02               	movlw	2
   831  0000E2  6E1E               	movwf	_Switch_Init,c
   832                           
   833                           ;State_Mchn.c: 137: break;
   834  0000E4  0012               	return	
   835  0000E6                     l5138:
   836                           
   837                           ;State_Mchn.c: 138: }
   838                           ;State_Mchn.c: 139: if(GETxAPIxVAL(20))
   839  0000E6  0E14               	movlw	20
   840  0000E8  ECD7  F012         	call	_GETxAPIxVAL
   841  0000EC  503A               	movf	?_GETxAPIxVAL,w,c
   842  0000EE  103B               	iorwf	?_GETxAPIxVAL+1,w,c
   843  0000F0  B4D8               	btfsc	status,2,c
   844  0000F2  D00A               	goto	l5144
   845                           
   846                           ;State_Mchn.c: 140: {
   847                           ;State_Mchn.c: 141: SETxAPIxVAL(23, 1);
   848  0000F4  0E00               	movlw	0
   849  0000F6  6E3B               	movwf	SETxAPIxVAL@value+1,c
   850  0000F8  0E01               	movlw	1
   851  0000FA  6E3A               	movwf	SETxAPIxVAL@value,c
   852  0000FC  0E17               	movlw	23
   853  0000FE  ECC9  F012         	call	_SETxAPIxVAL
   854                           
   855                           ;State_Mchn.c: 142: Switch_Init = 2;
   856  000102  0E02               	movlw	2
   857  000104  6E1E               	movwf	_Switch_Init,c
   858                           
   859                           ;State_Mchn.c: 143: break;
   860  000106  0012               	return	
   861  000108                     l5144:
   862                           
   863                           ;State_Mchn.c: 144: }
   864                           ;State_Mchn.c: 145: if(GETxAPIxVAL(21))
   865  000108  0E15               	movlw	21
   866  00010A  ECD7  F012         	call	_GETxAPIxVAL
   867  00010E  503A               	movf	?_GETxAPIxVAL,w,c
   868  000110  103B               	iorwf	?_GETxAPIxVAL+1,w,c
   869  000112  B4D8               	btfsc	status,2,c
   870  000114  D00A               	goto	l5150
   871                           
   872                           ;State_Mchn.c: 146: {
   873                           ;State_Mchn.c: 147: SETxAPIxVAL(23, 2);
   874  000116  0E00               	movlw	0
   875  000118  6E3B               	movwf	SETxAPIxVAL@value+1,c
   876  00011A  0E02               	movlw	2
   877  00011C  6E3A               	movwf	SETxAPIxVAL@value,c
   878  00011E  0E17               	movlw	23
   879  000120  ECC9  F012         	call	_SETxAPIxVAL
   880                           
   881                           ;State_Mchn.c: 148: Switch_Init = 2;
   882  000124  0E02               	movlw	2
   883  000126  6E1E               	movwf	_Switch_Init,c
   884                           
   885                           ;State_Mchn.c: 149: break;
   886  000128  0012               	return	
   887  00012A                     l5150:
   888                           
   889                           ;State_Mchn.c: 150: }
   890                           ;State_Mchn.c: 151: if(GETxAPIxVAL(22))
   891  00012A  0E16               	movlw	22
   892  00012C  ECD7  F012         	call	_GETxAPIxVAL
   893  000130  503A               	movf	?_GETxAPIxVAL,w,c
   894  000132  103B               	iorwf	?_GETxAPIxVAL+1,w,c
   895  000134  B4D8               	btfsc	status,2,c
   896  000136  D00A               	goto	l5156
   897                           
   898                           ;State_Mchn.c: 152: {
   899                           ;State_Mchn.c: 153: SETxAPIxVAL(23, 3);
   900  000138  0E00               	movlw	0
   901  00013A  6E3B               	movwf	SETxAPIxVAL@value+1,c
   902  00013C  0E03               	movlw	3
   903  00013E  6E3A               	movwf	SETxAPIxVAL@value,c
   904  000140  0E17               	movlw	23
   905  000142  ECC9  F012         	call	_SETxAPIxVAL
   906                           
   907                           ;State_Mchn.c: 154: Switch_Init = 2;
   908  000146  0E02               	movlw	2
   909  000148  6E1E               	movwf	_Switch_Init,c
   910                           
   911                           ;State_Mchn.c: 155: break;
   912  00014A  0012               	return	
   913  00014C                     l5156:
   914                           
   915                           ;State_Mchn.c: 156: }
   916                           ;State_Mchn.c: 157: if(GETxAPIxVAL(18))
   917  00014C  0E12               	movlw	18
   918  00014E  ECD7  F012         	call	_GETxAPIxVAL
   919  000152  503A               	movf	?_GETxAPIxVAL,w,c
   920  000154  103B               	iorwf	?_GETxAPIxVAL+1,w,c
   921  000156  B4D8               	btfsc	status,2,c
   922  000158  D00A               	goto	l5162
   923                           
   924                           ;State_Mchn.c: 158: {
   925                           ;State_Mchn.c: 159: SETxAPIxVAL(23, 4);
   926  00015A  0E00               	movlw	0
   927  00015C  6E3B               	movwf	SETxAPIxVAL@value+1,c
   928  00015E  0E04               	movlw	4
   929  000160  6E3A               	movwf	SETxAPIxVAL@value,c
   930  000162  0E17               	movlw	23
   931  000164  ECC9  F012         	call	_SETxAPIxVAL
   932                           
   933                           ;State_Mchn.c: 160: Switch_Init = 2;
   934  000168  0E02               	movlw	2
   935  00016A  6E1E               	movwf	_Switch_Init,c
   936                           
   937                           ;State_Mchn.c: 161: break;
   938  00016C  0012               	return	
   939  00016E                     l5162:
   940                           
   941                           ;State_Mchn.c: 162: }
   942                           ;State_Mchn.c: 163: Switch_Init = 1;
   943  00016E  0E01               	movlw	1
   944  000170  6E1E               	movwf	_Switch_Init,c
   945                           
   946                           ;State_Mchn.c: 164: Green_Led(2);
   947  000172  0E02               	movlw	2
   948  000174  EC52  F011         	call	_Green_Led
   949                           
   950                           ;State_Mchn.c: 165: break;
   951  000178  0012               	return	
   952  00017A                     l5166:
   953  00017A  0E13               	movlw	19
   954  00017C  ECD7  F012         	call	_GETxAPIxVAL
   955  000180  503A               	movf	?_GETxAPIxVAL,w,c
   956  000182  103B               	iorwf	?_GETxAPIxVAL+1,w,c
   957  000184  A4D8               	btfss	status,2,c
   958  000186  D025               	goto	l5180
   959  000188  0E14               	movlw	20
   960  00018A  ECD7  F012         	call	_GETxAPIxVAL
   961  00018E  503A               	movf	?_GETxAPIxVAL,w,c
   962  000190  103B               	iorwf	?_GETxAPIxVAL+1,w,c
   963  000192  A4D8               	btfss	status,2,c
   964  000194  D01E               	goto	l5180
   965  000196  0E15               	movlw	21
   966  000198  ECD7  F012         	call	_GETxAPIxVAL
   967  00019C  503A               	movf	?_GETxAPIxVAL,w,c
   968  00019E  103B               	iorwf	?_GETxAPIxVAL+1,w,c
   969  0001A0  A4D8               	btfss	status,2,c
   970  0001A2  D017               	goto	l5180
   971  0001A4  0E16               	movlw	22
   972  0001A6  ECD7  F012         	call	_GETxAPIxVAL
   973  0001AA  503A               	movf	?_GETxAPIxVAL,w,c
   974  0001AC  103B               	iorwf	?_GETxAPIxVAL+1,w,c
   975  0001AE  A4D8               	btfss	status,2,c
   976  0001B0  D010               	goto	l5180
   977  0001B2  0E12               	movlw	18
   978  0001B4  ECD7  F012         	call	_GETxAPIxVAL
   979  0001B8  503A               	movf	?_GETxAPIxVAL,w,c
   980  0001BA  103B               	iorwf	?_GETxAPIxVAL+1,w,c
   981  0001BC  A4D8               	btfss	status,2,c
   982  0001BE  D009               	goto	l5180
   983  0001C0  0E10               	movlw	16
   984  0001C2  ECD7  F012         	call	_GETxAPIxVAL
   985  0001C6  503A               	movf	?_GETxAPIxVAL,w,c
   986  0001C8  103B               	iorwf	?_GETxAPIxVAL+1,w,c
   987  0001CA  A4D8               	btfss	status,2,c
   988  0001CC  D002               	goto	l5180
   989                           
   990                           ;State_Mchn.c: 168: {
   991                           ;State_Mchn.c: 169: Switch_Init = 3;
   992  0001CE  0E03               	movlw	3
   993  0001D0  6E1E               	movwf	_Switch_Init,c
   994  0001D2                     l5180:
   995                           
   996                           ;State_Mchn.c: 170: }
   997                           ;State_Mchn.c: 171: Red_Led(0);
   998  0001D2  0E00               	movlw	0
   999  0001D4  EC12  F011         	call	_Red_Led
  1000                           
  1001                           ;State_Mchn.c: 172: Green_Led(2);
  1002  0001D8  0E02               	movlw	2
  1003  0001DA  EC52  F011         	call	_Green_Led
  1004                           
  1005                           ;State_Mchn.c: 173: break;
  1006  0001DE  0012               	return	
  1007  0001E0                     l5184:
  1008  0001E0  0E13               	movlw	19
  1009  0001E2  ECD7  F012         	call	_GETxAPIxVAL
  1010  0001E6  503A               	movf	?_GETxAPIxVAL,w,c
  1011  0001E8  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  1012  0001EA  B4D8               	btfsc	status,2,c
  1013  0001EC  D00A               	goto	l5190
  1014                           
  1015                           ;State_Mchn.c: 176: {
  1016                           ;State_Mchn.c: 177: SETxAPIxVAL(24, 0);
  1017  0001EE  0E00               	movlw	0
  1018  0001F0  6E3B               	movwf	SETxAPIxVAL@value+1,c
  1019  0001F2  0E00               	movlw	0
  1020  0001F4  6E3A               	movwf	SETxAPIxVAL@value,c
  1021  0001F6  0E18               	movlw	24
  1022  0001F8  ECC9  F012         	call	_SETxAPIxVAL
  1023                           
  1024                           ;State_Mchn.c: 178: Switch_Init = 4;
  1025  0001FC  0E04               	movlw	4
  1026  0001FE  6E1E               	movwf	_Switch_Init,c
  1027                           
  1028                           ;State_Mchn.c: 179: break;
  1029  000200  0012               	return	
  1030  000202                     l5190:
  1031                           
  1032                           ;State_Mchn.c: 180: }
  1033                           ;State_Mchn.c: 181: if(GETxAPIxVAL(20))
  1034  000202  0E14               	movlw	20
  1035  000204  ECD7  F012         	call	_GETxAPIxVAL
  1036  000208  503A               	movf	?_GETxAPIxVAL,w,c
  1037  00020A  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  1038  00020C  B4D8               	btfsc	status,2,c
  1039  00020E  D00A               	goto	l5196
  1040                           
  1041                           ;State_Mchn.c: 182: {
  1042                           ;State_Mchn.c: 183: SETxAPIxVAL(24, 1);
  1043  000210  0E00               	movlw	0
  1044  000212  6E3B               	movwf	SETxAPIxVAL@value+1,c
  1045  000214  0E01               	movlw	1
  1046  000216  6E3A               	movwf	SETxAPIxVAL@value,c
  1047  000218  0E18               	movlw	24
  1048  00021A  ECC9  F012         	call	_SETxAPIxVAL
  1049                           
  1050                           ;State_Mchn.c: 184: Switch_Init = 4;
  1051  00021E  0E04               	movlw	4
  1052  000220  6E1E               	movwf	_Switch_Init,c
  1053                           
  1054                           ;State_Mchn.c: 185: break;
  1055  000222  0012               	return	
  1056  000224                     l5196:
  1057                           
  1058                           ;State_Mchn.c: 186: }
  1059                           ;State_Mchn.c: 187: if(GETxAPIxVAL(21))
  1060  000224  0E15               	movlw	21
  1061  000226  ECD7  F012         	call	_GETxAPIxVAL
  1062  00022A  503A               	movf	?_GETxAPIxVAL,w,c
  1063  00022C  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  1064  00022E  B4D8               	btfsc	status,2,c
  1065  000230  D00A               	goto	l5202
  1066                           
  1067                           ;State_Mchn.c: 188: {
  1068                           ;State_Mchn.c: 189: SETxAPIxVAL(24, 2);
  1069  000232  0E00               	movlw	0
  1070  000234  6E3B               	movwf	SETxAPIxVAL@value+1,c
  1071  000236  0E02               	movlw	2
  1072  000238  6E3A               	movwf	SETxAPIxVAL@value,c
  1073  00023A  0E18               	movlw	24
  1074  00023C  ECC9  F012         	call	_SETxAPIxVAL
  1075                           
  1076                           ;State_Mchn.c: 190: Switch_Init = 4;
  1077  000240  0E04               	movlw	4
  1078  000242  6E1E               	movwf	_Switch_Init,c
  1079                           
  1080                           ;State_Mchn.c: 191: break;
  1081  000244  0012               	return	
  1082  000246                     l5202:
  1083                           
  1084                           ;State_Mchn.c: 192: }
  1085                           ;State_Mchn.c: 193: if(GETxAPIxVAL(22))
  1086  000246  0E16               	movlw	22
  1087  000248  ECD7  F012         	call	_GETxAPIxVAL
  1088  00024C  503A               	movf	?_GETxAPIxVAL,w,c
  1089  00024E  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  1090  000250  B4D8               	btfsc	status,2,c
  1091  000252  D00A               	goto	l5208
  1092                           
  1093                           ;State_Mchn.c: 194: {
  1094                           ;State_Mchn.c: 195: SETxAPIxVAL(24, 3);
  1095  000254  0E00               	movlw	0
  1096  000256  6E3B               	movwf	SETxAPIxVAL@value+1,c
  1097  000258  0E03               	movlw	3
  1098  00025A  6E3A               	movwf	SETxAPIxVAL@value,c
  1099  00025C  0E18               	movlw	24
  1100  00025E  ECC9  F012         	call	_SETxAPIxVAL
  1101                           
  1102                           ;State_Mchn.c: 196: Switch_Init = 4;
  1103  000262  0E04               	movlw	4
  1104  000264  6E1E               	movwf	_Switch_Init,c
  1105                           
  1106                           ;State_Mchn.c: 197: break;
  1107  000266  0012               	return	
  1108  000268                     l5208:
  1109                           
  1110                           ;State_Mchn.c: 198: }
  1111                           ;State_Mchn.c: 199: if(GETxAPIxVAL(18))
  1112  000268  0E12               	movlw	18
  1113  00026A  ECD7  F012         	call	_GETxAPIxVAL
  1114  00026E  503A               	movf	?_GETxAPIxVAL,w,c
  1115  000270  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  1116  000272  B4D8               	btfsc	status,2,c
  1117  000274  D00A               	goto	l5214
  1118                           
  1119                           ;State_Mchn.c: 200: {
  1120                           ;State_Mchn.c: 201: SETxAPIxVAL(24, 4);
  1121  000276  0E00               	movlw	0
  1122  000278  6E3B               	movwf	SETxAPIxVAL@value+1,c
  1123  00027A  0E04               	movlw	4
  1124  00027C  6E3A               	movwf	SETxAPIxVAL@value,c
  1125  00027E  0E18               	movlw	24
  1126  000280  ECC9  F012         	call	_SETxAPIxVAL
  1127                           
  1128                           ;State_Mchn.c: 202: Switch_Init = 4;
  1129  000284  0E04               	movlw	4
  1130  000286  6E1E               	movwf	_Switch_Init,c
  1131                           
  1132                           ;State_Mchn.c: 203: break;
  1133  000288  0012               	return	
  1134  00028A                     l5214:
  1135                           
  1136                           ;State_Mchn.c: 204: }
  1137                           ;State_Mchn.c: 205: if(GETxAPIxVAL(16))
  1138  00028A  0E10               	movlw	16
  1139  00028C  ECD7  F012         	call	_GETxAPIxVAL
  1140  000290  503A               	movf	?_GETxAPIxVAL,w,c
  1141  000292  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  1142  000294  B4D8               	btfsc	status,2,c
  1143  000296  D00A               	goto	l5220
  1144                           
  1145                           ;State_Mchn.c: 206: {
  1146                           ;State_Mchn.c: 207: SETxAPIxVAL(24, 9);
  1147  000298  0E00               	movlw	0
  1148  00029A  6E3B               	movwf	SETxAPIxVAL@value+1,c
  1149  00029C  0E09               	movlw	9
  1150  00029E  6E3A               	movwf	SETxAPIxVAL@value,c
  1151  0002A0  0E18               	movlw	24
  1152  0002A2  ECC9  F012         	call	_SETxAPIxVAL
  1153                           
  1154                           ;State_Mchn.c: 208: Switch_Init = 4;
  1155  0002A6  0E04               	movlw	4
  1156  0002A8  6E1E               	movwf	_Switch_Init,c
  1157                           
  1158                           ;State_Mchn.c: 209: break;
  1159  0002AA  0012               	return	
  1160  0002AC                     l5220:
  1161                           
  1162                           ;State_Mchn.c: 210: }
  1163                           ;State_Mchn.c: 211: Green_Led(2);
  1164  0002AC  0E02               	movlw	2
  1165  0002AE  EC52  F011         	call	_Green_Led
  1166                           
  1167                           ;State_Mchn.c: 212: Switch_Init = 3;
  1168  0002B2  0E03               	movlw	3
  1169  0002B4  6E1E               	movwf	_Switch_Init,c
  1170                           
  1171                           ;State_Mchn.c: 213: break;
  1172  0002B6  0012               	return	
  1173  0002B8                     l5224:
  1174  0002B8  0E13               	movlw	19
  1175  0002BA  ECD7  F012         	call	_GETxAPIxVAL
  1176  0002BE  503A               	movf	?_GETxAPIxVAL,w,c
  1177  0002C0  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  1178  0002C2  A4D8               	btfss	status,2,c
  1179  0002C4  D04C               	goto	l5246
  1180  0002C6  0E14               	movlw	20
  1181  0002C8  ECD7  F012         	call	_GETxAPIxVAL
  1182  0002CC  503A               	movf	?_GETxAPIxVAL,w,c
  1183  0002CE  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  1184  0002D0  A4D8               	btfss	status,2,c
  1185  0002D2  D045               	goto	l5246
  1186  0002D4  0E15               	movlw	21
  1187  0002D6  ECD7  F012         	call	_GETxAPIxVAL
  1188  0002DA  503A               	movf	?_GETxAPIxVAL,w,c
  1189  0002DC  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  1190  0002DE  A4D8               	btfss	status,2,c
  1191  0002E0  D03E               	goto	l5246
  1192  0002E2  0E16               	movlw	22
  1193  0002E4  ECD7  F012         	call	_GETxAPIxVAL
  1194  0002E8  503A               	movf	?_GETxAPIxVAL,w,c
  1195  0002EA  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  1196  0002EC  A4D8               	btfss	status,2,c
  1197  0002EE  D037               	goto	l5246
  1198  0002F0  0E12               	movlw	18
  1199  0002F2  ECD7  F012         	call	_GETxAPIxVAL
  1200  0002F6  503A               	movf	?_GETxAPIxVAL,w,c
  1201  0002F8  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  1202  0002FA  A4D8               	btfss	status,2,c
  1203  0002FC  D030               	goto	l5246
  1204  0002FE  0E10               	movlw	16
  1205  000300  ECD7  F012         	call	_GETxAPIxVAL
  1206  000304  503A               	movf	?_GETxAPIxVAL,w,c
  1207  000306  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  1208  000308  A4D8               	btfss	status,2,c
  1209  00030A  D029               	goto	l5246
  1210                           
  1211                           ;State_Mchn.c: 216: {
  1212                           ;State_Mchn.c: 217: if(GETxAPIxVAL(23) == GETxAPIxVAL(24))
  1213  00030C  0E17               	movlw	23
  1214  00030E  ECD7  F012         	call	_GETxAPIxVAL
  1215  000312  C03A  F046         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1216  000316  C03B  F047         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1217  00031A  0E18               	movlw	24
  1218  00031C  ECD7  F012         	call	_GETxAPIxVAL
  1219  000320  503A               	movf	?_GETxAPIxVAL,w,c
  1220  000322  1846               	xorwf	??_Update_StateMchn,w,c
  1221  000324  E109               	bnz	l5242
  1222  000326  503B               	movf	?_GETxAPIxVAL+1,w,c
  1223  000328  1847               	xorwf	??_Update_StateMchn+1,w,c
  1224  00032A  A4D8               	btfss	status,2,c
  1225  00032C  D005               	goto	l5242
  1226                           
  1227                           ;State_Mchn.c: 218: {
  1228                           ;State_Mchn.c: 219: Red_Led(1);
  1229  00032E  0E01               	movlw	1
  1230  000330  EC12  F011         	call	_Red_Led
  1231                           
  1232                           ;State_Mchn.c: 220: Switch_Init = 1;
  1233  000334  0E01               	movlw	1
  1234  000336  6E1E               	movwf	_Switch_Init,c
  1235  000338                     l5242:
  1236                           
  1237                           ;State_Mchn.c: 221: }
  1238                           ;State_Mchn.c: 222: if(GETxAPIxVAL(23) != GETxAPIxVAL(24))
  1239  000338  0E17               	movlw	23
  1240  00033A  ECD7  F012         	call	_GETxAPIxVAL
  1241  00033E  C03A  F046         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1242  000342  C03B  F047         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1243  000346  0E18               	movlw	24
  1244  000348  ECD7  F012         	call	_GETxAPIxVAL
  1245  00034C  503A               	movf	?_GETxAPIxVAL,w,c
  1246  00034E  1846               	xorwf	??_Update_StateMchn,w,c
  1247  000350  E104               	bnz	u3850
  1248  000352  503B               	movf	?_GETxAPIxVAL+1,w,c
  1249  000354  1847               	xorwf	??_Update_StateMchn+1,w,c
  1250  000356  B4D8               	btfsc	status,2,c
  1251  000358  D002               	goto	l5246
  1252  00035A                     u3850:
  1253                           
  1254                           ;State_Mchn.c: 223: {
  1255                           ;State_Mchn.c: 224: Switch_Init = 5;
  1256  00035A  0E05               	movlw	5
  1257  00035C  6E1E               	movwf	_Switch_Init,c
  1258  00035E                     l5246:
  1259                           
  1260                           ;State_Mchn.c: 225: }
  1261                           ;State_Mchn.c: 226: }
  1262                           ;State_Mchn.c: 227: Green_Led(2);
  1263  00035E  0E02               	movlw	2
  1264  000360  EC52  F011         	call	_Green_Led
  1265                           
  1266                           ;State_Mchn.c: 228: break;
  1267  000364  0012               	return	
  1268  000366                     l5248:
  1269  000366  0E18               	movlw	24
  1270  000368  ECD7  F012         	call	_GETxAPIxVAL
  1271  00036C  0E09               	movlw	9
  1272  00036E  183A               	xorwf	?_GETxAPIxVAL,w,c
  1273  000370  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  1274  000372  B4D8               	btfsc	status,2,c
  1275  000374  D002               	goto	l5252
  1276                           
  1277                           ;State_Mchn.c: 231: {
  1278                           ;State_Mchn.c: 232: Switch_Init = 6;
  1279  000376  0E06               	movlw	6
  1280  000378  6E1E               	movwf	_Switch_Init,c
  1281  00037A                     l5252:
  1282                           
  1283                           ;State_Mchn.c: 233: }
  1284                           ;State_Mchn.c: 234: if(GETxAPIxVAL(24) == 9)
  1285  00037A  0E18               	movlw	24
  1286  00037C  ECD7  F012         	call	_GETxAPIxVAL
  1287  000380  0E09               	movlw	9
  1288  000382  183A               	xorwf	?_GETxAPIxVAL,w,c
  1289  000384  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  1290  000386  A4D8               	btfss	status,2,c
  1291  000388  0012               	return	
  1292                           
  1293                           ;State_Mchn.c: 235: {
  1294                           ;State_Mchn.c: 236: Switch_Init = 9;
  1295  00038A  0E09               	movlw	9
  1296  00038C  6E1E               	movwf	_Switch_Init,c
  1297                           
  1298                           ;State_Mchn.c: 237: }
  1299                           ;State_Mchn.c: 238: break;
  1300  00038E  0012               	return	
  1301  000390                     l5256:
  1302  000390  0E08               	movlw	8
  1303  000392  6E1E               	movwf	_Switch_Init,c
  1304                           
  1305                           ;State_Mchn.c: 241: break;
  1306  000394  0012               	return	
  1307  000396                     l5258:
  1308  000396  0E10               	movlw	16
  1309  000398  ECD7  F012         	call	_GETxAPIxVAL
  1310  00039C  503A               	movf	?_GETxAPIxVAL,w,c
  1311  00039E  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  1312  0003A0  B4D8               	btfsc	status,2,c
  1313  0003A2  D006               	goto	l5262
  1314                           
  1315                           ;State_Mchn.c: 244: {
  1316                           ;State_Mchn.c: 245: Switch_Main = 1;
  1317  0003A4  0E01               	movlw	1
  1318  0003A6  6E20               	movwf	_Switch_Main,c
  1319                           
  1320                           ;State_Mchn.c: 246: Switch_Init = 0;
  1321  0003A8  0E00               	movlw	0
  1322  0003AA  6E1E               	movwf	_Switch_Init,c
  1323                           
  1324                           ;State_Mchn.c: 247: Stop_Program = 0;
  1325  0003AC  0E00               	movlw	0
  1326  0003AE  6E18               	movwf	_Stop_Program,c
  1327  0003B0                     l5262:
  1328                           
  1329                           ;State_Mchn.c: 248: }
  1330                           ;State_Mchn.c: 249: Green_Led(3);
  1331  0003B0  0E03               	movlw	3
  1332  0003B2  EC52  F011         	call	_Green_Led
  1333                           
  1334                           ;State_Mchn.c: 250: Red_Led(0);
  1335  0003B6  0E00               	movlw	0
  1336  0003B8  EC12  F011         	call	_Red_Led
  1337                           
  1338                           ;State_Mchn.c: 251: break;
  1339  0003BC  0012               	return	
  1340  0003BE                     l5266:
  1341  0003BE  0E17               	movlw	23
  1342  0003C0  ECD7  F012         	call	_GETxAPIxVAL
  1343  0003C4  0E04               	movlw	4
  1344  0003C6  183A               	xorwf	?_GETxAPIxVAL,w,c
  1345  0003C8  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  1346  0003CA  B4D8               	btfsc	status,2,c
  1347  0003CC  D012               	goto	l5284
  1348  0003CE  D026               	goto	l5286
  1349  0003D0                     l5270:
  1350  0003D0  0E01               	movlw	1
  1351  0003D2  D005               	goto	L3
  1352  0003D4                     l5272:
  1353  0003D4  0E05               	movlw	5
  1354  0003D6  D003               	goto	L3
  1355  0003D8                     l5274:
  1356  0003D8  0E02               	movlw	2
  1357  0003DA  D001               	goto	L3
  1358  0003DC                     l5276:
  1359  0003DC  0E03               	movlw	3
  1360  0003DE                     L3:
  1361  0003DE  6E21               	movwf	_Switch_Program,c
  1362                           
  1363                           ;State_Mchn.c: 267: Switch_Init = 7;
  1364  0003E0  0E07               	movlw	7
  1365  0003E2  6E1E               	movwf	_Switch_Init,c
  1366                           
  1367                           ;State_Mchn.c: 268: break;
  1368  0003E4  D01B               	goto	l5286
  1369  0003E6                     l5278:
  1370  0003E6  0E08               	movlw	8
  1371  0003E8  6E1E               	movwf	_Switch_Init,c
  1372                           
  1373                           ;State_Mchn.c: 270: Red_Led(1);
  1374  0003EA  0E01               	movlw	1
  1375  0003EC  EC12  F011         	call	_Red_Led
  1376                           
  1377                           ;State_Mchn.c: 272: }
  1378                           
  1379                           ;State_Mchn.c: 271: break;
  1380  0003F0  D015               	goto	l5286
  1381  0003F2                     l5284:
  1382  0003F2  0E18               	movlw	24
  1383  0003F4  ECD7  F012         	call	_GETxAPIxVAL
  1384                           
  1385                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1386                           ; Switch size 1, requested type "space"
  1387                           ; Number of cases is 1, Range of values is 0 to 0
  1388                           ; switch strategies available:
  1389                           ; Name         Instructions Cycles
  1390                           ; simple_byte            4     3 (average)
  1391                           ;	Chosen strategy is simple_byte
  1392  0003F8  503B               	movf	?_GETxAPIxVAL+1,w,c
  1393  0003FA  0A00               	xorlw	0	; case 0
  1394  0003FC  A4D8               	btfss	status,2,c
  1395  0003FE  D7F3               	goto	l5278
  1396                           
  1397                           ; Switch size 1, requested type "space"
  1398                           ; Number of cases is 4, Range of values is 0 to 3
  1399                           ; switch strategies available:
  1400                           ; Name         Instructions Cycles
  1401                           ; simple_byte           13     7 (average)
  1402                           ;	Chosen strategy is simple_byte
  1403  000400  503A               	movf	?_GETxAPIxVAL,w,c
  1404  000402  0A00               	xorlw	0	; case 0
  1405  000404  B4D8               	btfsc	status,2,c
  1406  000406  D7E4               	goto	l5270
  1407  000408  0A01               	xorlw	1	; case 1
  1408  00040A  B4D8               	btfsc	status,2,c
  1409  00040C  D7E3               	goto	l5272
  1410  00040E  0A03               	xorlw	3	; case 2
  1411  000410  B4D8               	btfsc	status,2,c
  1412  000412  D7E2               	goto	l5274
  1413  000414  0A01               	xorlw	1	; case 3
  1414  000416  B4D8               	btfsc	status,2,c
  1415  000418  D7E1               	goto	l5276
  1416  00041A  D7E5               	goto	l5278
  1417  00041C                     l5286:
  1418                           
  1419                           ;State_Mchn.c: 273: }
  1420                           ;State_Mchn.c: 274: if(GETxAPIxVAL(24) == 4)
  1421  00041C  0E18               	movlw	24
  1422  00041E  ECD7  F012         	call	_GETxAPIxVAL
  1423  000422  0E04               	movlw	4
  1424  000424  183A               	xorwf	?_GETxAPIxVAL,w,c
  1425  000426  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  1426  000428  B4D8               	btfsc	status,2,c
  1427  00042A  D012               	goto	l5304
  1428  00042C  D026               	goto	l5306
  1429  00042E                     l5290:
  1430  00042E  0E01               	movlw	1
  1431  000430  D005               	goto	L6
  1432  000432                     l5292:
  1433  000432  0E05               	movlw	5
  1434  000434  D003               	goto	L6
  1435  000436                     l5294:
  1436  000436  0E02               	movlw	2
  1437  000438  D001               	goto	L6
  1438  00043A                     l5296:
  1439  00043A  0E03               	movlw	3
  1440  00043C                     L6:
  1441  00043C  6E21               	movwf	_Switch_Program,c
  1442                           
  1443                           ;State_Mchn.c: 288: Switch_Init = 7;
  1444  00043E  0E07               	movlw	7
  1445  000440  6E1E               	movwf	_Switch_Init,c
  1446                           
  1447                           ;State_Mchn.c: 289: break;
  1448  000442  D01B               	goto	l5306
  1449  000444                     l5298:
  1450  000444  0E08               	movlw	8
  1451  000446  6E1E               	movwf	_Switch_Init,c
  1452                           
  1453                           ;State_Mchn.c: 291: Red_Led(1);
  1454  000448  0E01               	movlw	1
  1455  00044A  EC12  F011         	call	_Red_Led
  1456                           
  1457                           ;State_Mchn.c: 293: }
  1458                           
  1459                           ;State_Mchn.c: 292: break;
  1460  00044E  D015               	goto	l5306
  1461  000450                     l5304:
  1462  000450  0E17               	movlw	23
  1463  000452  ECD7  F012         	call	_GETxAPIxVAL
  1464                           
  1465                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1466                           ; Switch size 1, requested type "space"
  1467                           ; Number of cases is 1, Range of values is 0 to 0
  1468                           ; switch strategies available:
  1469                           ; Name         Instructions Cycles
  1470                           ; simple_byte            4     3 (average)
  1471                           ;	Chosen strategy is simple_byte
  1472  000456  503B               	movf	?_GETxAPIxVAL+1,w,c
  1473  000458  0A00               	xorlw	0	; case 0
  1474  00045A  A4D8               	btfss	status,2,c
  1475  00045C  D7F3               	goto	l5298
  1476                           
  1477                           ; Switch size 1, requested type "space"
  1478                           ; Number of cases is 4, Range of values is 0 to 3
  1479                           ; switch strategies available:
  1480                           ; Name         Instructions Cycles
  1481                           ; simple_byte           13     7 (average)
  1482                           ;	Chosen strategy is simple_byte
  1483  00045E  503A               	movf	?_GETxAPIxVAL,w,c
  1484  000460  0A00               	xorlw	0	; case 0
  1485  000462  B4D8               	btfsc	status,2,c
  1486  000464  D7E4               	goto	l5290
  1487  000466  0A01               	xorlw	1	; case 1
  1488  000468  B4D8               	btfsc	status,2,c
  1489  00046A  D7E3               	goto	l5292
  1490  00046C  0A03               	xorlw	3	; case 2
  1491  00046E  B4D8               	btfsc	status,2,c
  1492  000470  D7E2               	goto	l5294
  1493  000472  0A01               	xorlw	1	; case 3
  1494  000474  B4D8               	btfsc	status,2,c
  1495  000476  D7E1               	goto	l5296
  1496  000478  D7E5               	goto	l5298
  1497  00047A                     l5306:
  1498                           
  1499                           ;State_Mchn.c: 294: }
  1500                           ;State_Mchn.c: 295: if((GETxAPIxVAL(23) != 4) && (GETxAPIxVAL(24) != 4))
  1501  00047A  0E17               	movlw	23
  1502  00047C  ECD7  F012         	call	_GETxAPIxVAL
  1503  000480  0E04               	movlw	4
  1504  000482  183A               	xorwf	?_GETxAPIxVAL,w,c
  1505  000484  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  1506  000486  B4D8               	btfsc	status,2,c
  1507  000488  0012               	return	
  1508  00048A  0E18               	movlw	24
  1509  00048C  ECD7  F012         	call	_GETxAPIxVAL
  1510  000490  0E04               	movlw	4
  1511  000492  183A               	xorwf	?_GETxAPIxVAL,w,c
  1512  000494  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  1513  000496  B4D8               	btfsc	status,2,c
  1514  000498  0012               	return	
  1515  00049A  D0BA               	goto	l5382
  1516  00049C                     l5312:
  1517  00049C  0E00               	movlw	0
  1518  00049E  6E1E               	movwf	_Switch_Init,c
  1519                           
  1520                           ;State_Mchn.c: 302: break;
  1521  0004A0  0012               	return	
  1522  0004A2                     l5314:
  1523  0004A2  0E01               	movlw	1
  1524  0004A4  6E21               	movwf	_Switch_Program,c
  1525                           
  1526                           ;State_Mchn.c: 304: Switch_Init = 7;
  1527  0004A6  0E07               	movlw	7
  1528  0004A8  6E1E               	movwf	_Switch_Init,c
  1529                           
  1530                           ;State_Mchn.c: 305: break;
  1531  0004AA  0012               	return	
  1532  0004AC                     l5316:
  1533  0004AC  0E02               	movlw	2
  1534  0004AE  6E21               	movwf	_Switch_Program,c
  1535                           
  1536                           ;State_Mchn.c: 307: Switch_Init = 7;
  1537  0004B0  0E07               	movlw	7
  1538  0004B2  6E1E               	movwf	_Switch_Init,c
  1539                           
  1540                           ;State_Mchn.c: 308: break;
  1541  0004B4  0012               	return	
  1542  0004B6                     l5318:
  1543  0004B6  0E04               	movlw	4
  1544  0004B8  6E21               	movwf	_Switch_Program,c
  1545                           
  1546                           ;State_Mchn.c: 310: Switch_Init = 7;
  1547  0004BA  0E07               	movlw	7
  1548  0004BC  6E1E               	movwf	_Switch_Init,c
  1549                           
  1550                           ;State_Mchn.c: 311: break;
  1551  0004BE  0012               	return	
  1552  0004C0                     l5320:
  1553  0004C0  0E08               	movlw	8
  1554  0004C2  6E1E               	movwf	_Switch_Init,c
  1555                           
  1556                           ;State_Mchn.c: 313: Red_Led(1);
  1557  0004C4  0E01               	movlw	1
  1558  0004C6  EC12  F011         	call	_Red_Led
  1559                           
  1560                           ;State_Mchn.c: 315: }
  1561                           
  1562                           ;State_Mchn.c: 314: break;
  1563  0004CA  0012               	return	
  1564  0004CC                     l5326:
  1565  0004CC  0E18               	movlw	24
  1566  0004CE  ECD7  F012         	call	_GETxAPIxVAL
  1567                           
  1568                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1569                           ; Switch size 1, requested type "space"
  1570                           ; Number of cases is 1, Range of values is 0 to 0
  1571                           ; switch strategies available:
  1572                           ; Name         Instructions Cycles
  1573                           ; simple_byte            4     3 (average)
  1574                           ;	Chosen strategy is simple_byte
  1575  0004D2  503B               	movf	?_GETxAPIxVAL+1,w,c
  1576  0004D4  0A00               	xorlw	0	; case 0
  1577  0004D6  A4D8               	btfss	status,2,c
  1578  0004D8  D7F3               	goto	l5320
  1579                           
  1580                           ; Switch size 1, requested type "space"
  1581                           ; Number of cases is 4, Range of values is 0 to 3
  1582                           ; switch strategies available:
  1583                           ; Name         Instructions Cycles
  1584                           ; simple_byte           13     7 (average)
  1585                           ;	Chosen strategy is simple_byte
  1586  0004DA  503A               	movf	?_GETxAPIxVAL,w,c
  1587  0004DC  0A00               	xorlw	0	; case 0
  1588  0004DE  B4D8               	btfsc	status,2,c
  1589  0004E0  D7DD               	goto	l5312
  1590  0004E2  0A01               	xorlw	1	; case 1
  1591  0004E4  B4D8               	btfsc	status,2,c
  1592  0004E6  D7DD               	goto	l5314
  1593  0004E8  0A03               	xorlw	3	; case 2
  1594  0004EA  B4D8               	btfsc	status,2,c
  1595  0004EC  D7DF               	goto	l5316
  1596  0004EE  0A01               	xorlw	1	; case 3
  1597  0004F0  B4D8               	btfsc	status,2,c
  1598  0004F2  D7E1               	goto	l5318
  1599  0004F4  D7E5               	goto	l5320
  1600  0004F6                     l5328:
  1601  0004F6  0E01               	movlw	1
  1602  0004F8  6E21               	movwf	_Switch_Program,c
  1603                           
  1604                           ;State_Mchn.c: 320: Switch_Init = 7;
  1605  0004FA  0E07               	movlw	7
  1606  0004FC  6E1E               	movwf	_Switch_Init,c
  1607                           
  1608                           ;State_Mchn.c: 321: break;
  1609  0004FE  0012               	return	
  1610  000500                     l5330:
  1611  000500  0E00               	movlw	0
  1612  000502  6E1E               	movwf	_Switch_Init,c
  1613                           
  1614                           ;State_Mchn.c: 323: break;
  1615  000504  0012               	return	
  1616  000506                     l5332:
  1617  000506  0E00               	movlw	0
  1618  000508  6E21               	movwf	_Switch_Program,c
  1619                           
  1620                           ;State_Mchn.c: 325: Switch_Init = 7;
  1621  00050A  0E07               	movlw	7
  1622  00050C  6E1E               	movwf	_Switch_Init,c
  1623                           
  1624                           ;State_Mchn.c: 326: break;
  1625  00050E  0012               	return	
  1626  000510                     l5334:
  1627  000510  0E06               	movlw	6
  1628  000512  6E21               	movwf	_Switch_Program,c
  1629                           
  1630                           ;State_Mchn.c: 328: Switch_Init = 7;
  1631  000514  0E07               	movlw	7
  1632  000516  6E1E               	movwf	_Switch_Init,c
  1633                           
  1634                           ;State_Mchn.c: 329: break;
  1635  000518  0012               	return	
  1636  00051A                     l5336:
  1637  00051A  0E08               	movlw	8
  1638  00051C  6E1E               	movwf	_Switch_Init,c
  1639                           
  1640                           ;State_Mchn.c: 331: Red_Led(1);
  1641  00051E  0E01               	movlw	1
  1642  000520  EC12  F011         	call	_Red_Led
  1643                           
  1644                           ;State_Mchn.c: 333: }
  1645                           
  1646                           ;State_Mchn.c: 332: break;
  1647  000524  0012               	return	
  1648  000526                     l5342:
  1649  000526  0E18               	movlw	24
  1650  000528  ECD7  F012         	call	_GETxAPIxVAL
  1651                           
  1652                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1653                           ; Switch size 1, requested type "space"
  1654                           ; Number of cases is 1, Range of values is 0 to 0
  1655                           ; switch strategies available:
  1656                           ; Name         Instructions Cycles
  1657                           ; simple_byte            4     3 (average)
  1658                           ;	Chosen strategy is simple_byte
  1659  00052C  503B               	movf	?_GETxAPIxVAL+1,w,c
  1660  00052E  0A00               	xorlw	0	; case 0
  1661  000530  A4D8               	btfss	status,2,c
  1662  000532  D7F3               	goto	l5336
  1663                           
  1664                           ; Switch size 1, requested type "space"
  1665                           ; Number of cases is 4, Range of values is 0 to 3
  1666                           ; switch strategies available:
  1667                           ; Name         Instructions Cycles
  1668                           ; simple_byte           13     7 (average)
  1669                           ;	Chosen strategy is simple_byte
  1670  000534  503A               	movf	?_GETxAPIxVAL,w,c
  1671  000536  0A00               	xorlw	0	; case 0
  1672  000538  B4D8               	btfsc	status,2,c
  1673  00053A  D7DD               	goto	l5328
  1674  00053C  0A01               	xorlw	1	; case 1
  1675  00053E  B4D8               	btfsc	status,2,c
  1676  000540  D7DF               	goto	l5330
  1677  000542  0A03               	xorlw	3	; case 2
  1678  000544  B4D8               	btfsc	status,2,c
  1679  000546  D7DF               	goto	l5332
  1680  000548  0A01               	xorlw	1	; case 3
  1681  00054A  B4D8               	btfsc	status,2,c
  1682  00054C  D7E1               	goto	l5334
  1683  00054E  D7E5               	goto	l5336
  1684  000550                     l5344:
  1685  000550  0E02               	movlw	2
  1686  000552  6E21               	movwf	_Switch_Program,c
  1687                           
  1688                           ;State_Mchn.c: 338: Switch_Init = 7;
  1689  000554  0E07               	movlw	7
  1690  000556  6E1E               	movwf	_Switch_Init,c
  1691                           
  1692                           ;State_Mchn.c: 339: break;
  1693  000558  0012               	return	
  1694  00055A                     l5346:
  1695  00055A  0E00               	movlw	0
  1696  00055C  6E21               	movwf	_Switch_Program,c
  1697                           
  1698                           ;State_Mchn.c: 341: Switch_Init = 7;
  1699  00055E  0E07               	movlw	7
  1700  000560  6E1E               	movwf	_Switch_Init,c
  1701                           
  1702                           ;State_Mchn.c: 342: break;
  1703  000562  0012               	return	
  1704  000564                     l5348:
  1705  000564  0E00               	movlw	0
  1706  000566  6E1E               	movwf	_Switch_Init,c
  1707                           
  1708                           ;State_Mchn.c: 344: break;
  1709  000568  0012               	return	
  1710  00056A                     l5350:
  1711  00056A  0E03               	movlw	3
  1712  00056C  6E21               	movwf	_Switch_Program,c
  1713                           
  1714                           ;State_Mchn.c: 346: Switch_Init = 7;
  1715  00056E  0E07               	movlw	7
  1716  000570  6E1E               	movwf	_Switch_Init,c
  1717                           
  1718                           ;State_Mchn.c: 347: break;
  1719  000572  0012               	return	
  1720  000574                     l5352:
  1721  000574  0E08               	movlw	8
  1722  000576  6E1E               	movwf	_Switch_Init,c
  1723                           
  1724                           ;State_Mchn.c: 349: Red_Led(1);
  1725  000578  0E01               	movlw	1
  1726  00057A  EC12  F011         	call	_Red_Led
  1727                           
  1728                           ;State_Mchn.c: 351: }
  1729                           
  1730                           ;State_Mchn.c: 350: break;
  1731  00057E  0012               	return	
  1732  000580                     l5358:
  1733  000580  0E18               	movlw	24
  1734  000582  ECD7  F012         	call	_GETxAPIxVAL
  1735                           
  1736                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1737                           ; Switch size 1, requested type "space"
  1738                           ; Number of cases is 1, Range of values is 0 to 0
  1739                           ; switch strategies available:
  1740                           ; Name         Instructions Cycles
  1741                           ; simple_byte            4     3 (average)
  1742                           ;	Chosen strategy is simple_byte
  1743  000586  503B               	movf	?_GETxAPIxVAL+1,w,c
  1744  000588  0A00               	xorlw	0	; case 0
  1745  00058A  A4D8               	btfss	status,2,c
  1746  00058C  D7F3               	goto	l5352
  1747                           
  1748                           ; Switch size 1, requested type "space"
  1749                           ; Number of cases is 4, Range of values is 0 to 3
  1750                           ; switch strategies available:
  1751                           ; Name         Instructions Cycles
  1752                           ; simple_byte           13     7 (average)
  1753                           ;	Chosen strategy is simple_byte
  1754  00058E  503A               	movf	?_GETxAPIxVAL,w,c
  1755  000590  0A00               	xorlw	0	; case 0
  1756  000592  B4D8               	btfsc	status,2,c
  1757  000594  D7DD               	goto	l5344
  1758  000596  0A01               	xorlw	1	; case 1
  1759  000598  B4D8               	btfsc	status,2,c
  1760  00059A  D7DF               	goto	l5346
  1761  00059C  0A03               	xorlw	3	; case 2
  1762  00059E  B4D8               	btfsc	status,2,c
  1763  0005A0  D7E1               	goto	l5348
  1764  0005A2  0A01               	xorlw	1	; case 3
  1765  0005A4  B4D8               	btfsc	status,2,c
  1766  0005A6  D7E1               	goto	l5350
  1767  0005A8  D7E5               	goto	l5352
  1768  0005AA                     l5360:
  1769  0005AA  0E04               	movlw	4
  1770  0005AC  6E21               	movwf	_Switch_Program,c
  1771                           
  1772                           ;State_Mchn.c: 356: Switch_Init = 7;
  1773  0005AE  0E07               	movlw	7
  1774  0005B0  6E1E               	movwf	_Switch_Init,c
  1775                           
  1776                           ;State_Mchn.c: 357: break;
  1777  0005B2  0012               	return	
  1778  0005B4                     l5362:
  1779  0005B4  0E06               	movlw	6
  1780  0005B6  6E21               	movwf	_Switch_Program,c
  1781                           
  1782                           ;State_Mchn.c: 359: Switch_Init = 7;
  1783  0005B8  0E07               	movlw	7
  1784  0005BA  6E1E               	movwf	_Switch_Init,c
  1785                           
  1786                           ;State_Mchn.c: 360: break;
  1787  0005BC  0012               	return	
  1788  0005BE                     l5364:
  1789  0005BE  0E03               	movlw	3
  1790  0005C0  6E21               	movwf	_Switch_Program,c
  1791                           
  1792                           ;State_Mchn.c: 362: Switch_Init = 7;
  1793  0005C2  0E07               	movlw	7
  1794  0005C4  6E1E               	movwf	_Switch_Init,c
  1795                           
  1796                           ;State_Mchn.c: 363: break;
  1797  0005C6  0012               	return	
  1798  0005C8                     l5366:
  1799  0005C8  0E00               	movlw	0
  1800  0005CA  6E1E               	movwf	_Switch_Init,c
  1801                           
  1802                           ;State_Mchn.c: 365: break;
  1803  0005CC  0012               	return	
  1804  0005CE                     l5368:
  1805  0005CE  0E08               	movlw	8
  1806  0005D0  6E1E               	movwf	_Switch_Init,c
  1807                           
  1808                           ;State_Mchn.c: 367: Red_Led(1);
  1809  0005D2  0E01               	movlw	1
  1810  0005D4  EC12  F011         	call	_Red_Led
  1811                           
  1812                           ;State_Mchn.c: 369: }
  1813                           
  1814                           ;State_Mchn.c: 368: break;
  1815  0005D8  0012               	return	
  1816  0005DA                     l5374:
  1817  0005DA  0E18               	movlw	24
  1818  0005DC  ECD7  F012         	call	_GETxAPIxVAL
  1819                           
  1820                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1821                           ; Switch size 1, requested type "space"
  1822                           ; Number of cases is 1, Range of values is 0 to 0
  1823                           ; switch strategies available:
  1824                           ; Name         Instructions Cycles
  1825                           ; simple_byte            4     3 (average)
  1826                           ;	Chosen strategy is simple_byte
  1827  0005E0  503B               	movf	?_GETxAPIxVAL+1,w,c
  1828  0005E2  0A00               	xorlw	0	; case 0
  1829  0005E4  A4D8               	btfss	status,2,c
  1830  0005E6  D7F3               	goto	l5368
  1831                           
  1832                           ; Switch size 1, requested type "space"
  1833                           ; Number of cases is 4, Range of values is 0 to 3
  1834                           ; switch strategies available:
  1835                           ; Name         Instructions Cycles
  1836                           ; simple_byte           13     7 (average)
  1837                           ;	Chosen strategy is simple_byte
  1838  0005E8  503A               	movf	?_GETxAPIxVAL,w,c
  1839  0005EA  0A00               	xorlw	0	; case 0
  1840  0005EC  B4D8               	btfsc	status,2,c
  1841  0005EE  D7DD               	goto	l5360
  1842  0005F0  0A01               	xorlw	1	; case 1
  1843  0005F2  B4D8               	btfsc	status,2,c
  1844  0005F4  D7DF               	goto	l5362
  1845  0005F6  0A03               	xorlw	3	; case 2
  1846  0005F8  B4D8               	btfsc	status,2,c
  1847  0005FA  D7E1               	goto	l5364
  1848  0005FC  0A01               	xorlw	1	; case 3
  1849  0005FE  B4D8               	btfsc	status,2,c
  1850  000600  D7E3               	goto	l5366
  1851  000602  D7E5               	goto	l5368
  1852  000604                     l5376:
  1853  000604  0E08               	movlw	8
  1854  000606  6E1E               	movwf	_Switch_Init,c
  1855                           
  1856                           ;State_Mchn.c: 372: Red_Led(1);
  1857  000608  0E01               	movlw	1
  1858  00060A  EC12  F011         	call	_Red_Led
  1859                           
  1860                           ;State_Mchn.c: 374: }
  1861                           
  1862                           ;State_Mchn.c: 373: break;
  1863  00060E  0012               	return	
  1864  000610                     l5382:
  1865  000610  0E17               	movlw	23
  1866  000612  ECD7  F012         	call	_GETxAPIxVAL
  1867                           
  1868                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1869                           ; Switch size 1, requested type "space"
  1870                           ; Number of cases is 1, Range of values is 0 to 0
  1871                           ; switch strategies available:
  1872                           ; Name         Instructions Cycles
  1873                           ; simple_byte            4     3 (average)
  1874                           ;	Chosen strategy is simple_byte
  1875  000616  503B               	movf	?_GETxAPIxVAL+1,w,c
  1876  000618  0A00               	xorlw	0	; case 0
  1877  00061A  A4D8               	btfss	status,2,c
  1878  00061C  D7F3               	goto	l5376
  1879                           
  1880                           ; Switch size 1, requested type "space"
  1881                           ; Number of cases is 4, Range of values is 0 to 3
  1882                           ; switch strategies available:
  1883                           ; Name         Instructions Cycles
  1884                           ; simple_byte           13     7 (average)
  1885                           ;	Chosen strategy is simple_byte
  1886  00061E  503A               	movf	?_GETxAPIxVAL,w,c
  1887  000620  0A00               	xorlw	0	; case 0
  1888  000622  B4D8               	btfsc	status,2,c
  1889  000624  D753               	goto	l5326
  1890  000626  0A01               	xorlw	1	; case 1
  1891  000628  B4D8               	btfsc	status,2,c
  1892  00062A  D77D               	goto	l5342
  1893  00062C  0A03               	xorlw	3	; case 2
  1894  00062E  B4D8               	btfsc	status,2,c
  1895  000630  D7A7               	goto	l5358
  1896  000632  0A01               	xorlw	1	; case 3
  1897  000634  B4D8               	btfsc	status,2,c
  1898  000636  D7D1               	goto	l5374
  1899  000638  D7E5               	goto	l5376
  1900  00063A                     l5384:
  1901  00063A  0E0B               	movlw	11
  1902  00063C  6E1E               	movwf	_Switch_Init,c
  1903                           
  1904                           ;State_Mchn.c: 379: break;
  1905  00063E  0012               	return	
  1906  000640                     l5386:
  1907  000640  0E10               	movlw	16
  1908  000642  ECD7  F012         	call	_GETxAPIxVAL
  1909  000646  503A               	movf	?_GETxAPIxVAL,w,c
  1910  000648  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  1911  00064A  B4D8               	btfsc	status,2,c
  1912  00064C  D006               	goto	l5390
  1913                           
  1914                           ;State_Mchn.c: 382: {
  1915                           ;State_Mchn.c: 383: Switch_Main = 2;
  1916  00064E  0E02               	movlw	2
  1917  000650  6E20               	movwf	_Switch_Main,c
  1918                           
  1919                           ;State_Mchn.c: 384: Switch_Init = 0;
  1920  000652  0E00               	movlw	0
  1921  000654  6E1E               	movwf	_Switch_Init,c
  1922                           
  1923                           ;State_Mchn.c: 385: Stop_Program = 0;
  1924  000656  0E00               	movlw	0
  1925  000658  6E18               	movwf	_Stop_Program,c
  1926  00065A                     l5390:
  1927                           
  1928                           ;State_Mchn.c: 386: }
  1929                           ;State_Mchn.c: 387: Green_Led(3);
  1930  00065A  0E03               	movlw	3
  1931  00065C  EC52  F011         	call	_Green_Led
  1932                           
  1933                           ;State_Mchn.c: 388: Red_Led(0);
  1934  000660  0E00               	movlw	0
  1935  000662  EC12  F011         	call	_Red_Led
  1936                           
  1937                           ;State_Mchn.c: 389: break;
  1938  000666  0012               	return	
  1939  000668                     l5394:
  1940  000668  0E17               	movlw	23
  1941  00066A  ECD7  F012         	call	_GETxAPIxVAL
  1942  00066E  0E04               	movlw	4
  1943  000670  183A               	xorwf	?_GETxAPIxVAL,w,c
  1944  000672  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  1945  000674  A4D8               	btfss	status,2,c
  1946  000676  D01F               	goto	l5412
  1947                           
  1948                           ;State_Mchn.c: 392: {
  1949                           ;State_Mchn.c: 393: Switch_Program = 0;
  1950  000678  0E00               	movlw	0
  1951  00067A  6E21               	movwf	_Switch_Program,c
  1952                           
  1953                           ;State_Mchn.c: 394: Switch_Init = 10;
  1954  00067C  0E0A               	movlw	10
  1955  00067E  6E1E               	movwf	_Switch_Init,c
  1956                           
  1957                           ;State_Mchn.c: 395: }
  1958  000680  0012               	return	
  1959  000682                     l5398:
  1960  000682  0E01               	movlw	1
  1961  000684  6E21               	movwf	_Switch_Program,c
  1962  000686  0E0A               	movlw	10
  1963  000688  6E1E               	movwf	_Switch_Init,c
  1964  00068A  0012               	return	
  1965  00068C                     l5400:
  1966  00068C  0E03               	movlw	3
  1967  00068E  6E21               	movwf	_Switch_Program,c
  1968  000690  0E0A               	movlw	10
  1969  000692  6E1E               	movwf	_Switch_Init,c
  1970  000694  0012               	return	
  1971  000696                     l5402:
  1972  000696  0E00               	movlw	0
  1973  000698  6E21               	movwf	_Switch_Program,c
  1974  00069A  0E0A               	movlw	10
  1975  00069C  6E1E               	movwf	_Switch_Init,c
  1976  00069E  0012               	return	
  1977  0006A0                     l5404:
  1978  0006A0  0E02               	movlw	2
  1979  0006A2  6E21               	movwf	_Switch_Program,c
  1980  0006A4  0E0A               	movlw	10
  1981  0006A6  6E1E               	movwf	_Switch_Init,c
  1982  0006A8  0012               	return	
  1983  0006AA                     l5406:
  1984  0006AA  0E0B               	movlw	11
  1985  0006AC  6E1E               	movwf	_Switch_Init,c
  1986                           
  1987                           ;State_Mchn.c: 403: Red_Led(1);
  1988  0006AE  0E01               	movlw	1
  1989  0006B0  EC12  F011         	call	_Red_Led
  1990                           
  1991                           ;State_Mchn.c: 405: }
  1992                           
  1993                           ;State_Mchn.c: 404: break;
  1994  0006B4  0012               	return	
  1995  0006B6                     l5412:
  1996  0006B6  0E17               	movlw	23
  1997  0006B8  ECD7  F012         	call	_GETxAPIxVAL
  1998                           
  1999                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2000                           ; Switch size 1, requested type "space"
  2001                           ; Number of cases is 1, Range of values is 0 to 0
  2002                           ; switch strategies available:
  2003                           ; Name         Instructions Cycles
  2004                           ; simple_byte            4     3 (average)
  2005                           ;	Chosen strategy is simple_byte
  2006  0006BC  503B               	movf	?_GETxAPIxVAL+1,w,c
  2007  0006BE  0A00               	xorlw	0	; case 0
  2008  0006C0  A4D8               	btfss	status,2,c
  2009  0006C2  D7F3               	goto	l5406
  2010                           
  2011                           ; Switch size 1, requested type "space"
  2012                           ; Number of cases is 4, Range of values is 0 to 3
  2013                           ; switch strategies available:
  2014                           ; Name         Instructions Cycles
  2015                           ; simple_byte           13     7 (average)
  2016                           ;	Chosen strategy is simple_byte
  2017  0006C4  503A               	movf	?_GETxAPIxVAL,w,c
  2018  0006C6  0A00               	xorlw	0	; case 0
  2019  0006C8  B4D8               	btfsc	status,2,c
  2020  0006CA  D7DB               	goto	l5398
  2021  0006CC  0A01               	xorlw	1	; case 1
  2022  0006CE  B4D8               	btfsc	status,2,c
  2023  0006D0  D7DD               	goto	l5400
  2024  0006D2  0A03               	xorlw	3	; case 2
  2025  0006D4  B4D8               	btfsc	status,2,c
  2026  0006D6  D7DF               	goto	l5402
  2027  0006D8  0A01               	xorlw	1	; case 3
  2028  0006DA  B4D8               	btfsc	status,2,c
  2029  0006DC  D7E1               	goto	l5404
  2030  0006DE  D7E5               	goto	l5406
  2031  0006E0                     l5414:
  2032  0006E0  0E00               	movlw	0
  2033  0006E2  6E1E               	movwf	_Switch_Init,c
  2034                           
  2035                           ;State_Mchn.c: 409: Red_Led(1);
  2036  0006E4  0E01               	movlw	1
  2037  0006E6  EC12  F011         	call	_Red_Led
  2038                           
  2039                           ;State_Mchn.c: 411: }
  2040                           
  2041                           ;State_Mchn.c: 410: break;
  2042  0006EA  0012               	return	
  2043  0006EC                     l5420:
  2044  0006EC  501E               	movf	_Switch_Init,w,c
  2045                           
  2046                           ; Switch size 1, requested type "space"
  2047                           ; Number of cases is 12, Range of values is 0 to 11
  2048                           ; switch strategies available:
  2049                           ; Name         Instructions Cycles
  2050                           ; simple_byte           37    19 (average)
  2051                           ;	Chosen strategy is simple_byte
  2052  0006EE  0A00               	xorlw	0	; case 0
  2053  0006F0  B4D8               	btfsc	status,2,c
  2054  0006F2  D4DF               	goto	l5128
  2055  0006F4  0A01               	xorlw	1	; case 1
  2056  0006F6  B4D8               	btfsc	status,2,c
  2057  0006F8  D4E5               	goto	l5132
  2058  0006FA  0A03               	xorlw	3	; case 2
  2059  0006FC  B4D8               	btfsc	status,2,c
  2060  0006FE  D53D               	goto	l5166
  2061  000700  0A01               	xorlw	1	; case 3
  2062  000702  B4D8               	btfsc	status,2,c
  2063  000704  D56D               	goto	l5184
  2064  000706  0A07               	xorlw	7	; case 4
  2065  000708  B4D8               	btfsc	status,2,c
  2066  00070A  D5D6               	goto	l5224
  2067  00070C  0A01               	xorlw	1	; case 5
  2068  00070E  B4D8               	btfsc	status,2,c
  2069  000710  D62A               	goto	l5248
  2070  000712  0A03               	xorlw	3	; case 6
  2071  000714  B4D8               	btfsc	status,2,c
  2072  000716  D63C               	goto	l5256
  2073  000718  0A01               	xorlw	1	; case 7
  2074  00071A  B4D8               	btfsc	status,2,c
  2075  00071C  D63C               	goto	l5258
  2076  00071E  0A0F               	xorlw	15	; case 8
  2077  000720  B4D8               	btfsc	status,2,c
  2078  000722  D64D               	goto	l5266
  2079  000724  0A01               	xorlw	1	; case 9
  2080  000726  B4D8               	btfsc	status,2,c
  2081  000728  D788               	goto	l5384
  2082  00072A  0A03               	xorlw	3	; case 10
  2083  00072C  B4D8               	btfsc	status,2,c
  2084  00072E  D788               	goto	l5386
  2085  000730  0A01               	xorlw	1	; case 11
  2086  000732  B4D8               	btfsc	status,2,c
  2087  000734  D799               	goto	l5394
  2088  000736  D7D4               	goto	l5414
  2089  000738                     l5422:
  2090  000738  0E00               	movlw	0
  2091  00073A  6E44               	movwf	Train_Path@To,c
  2092  00073C  0E02               	movlw	2
  2093  00073E  EC4C  F00A         	call	_Train_Path
  2094  000742  0900               	iorlw	0
  2095  000744  A4D8               	btfss	status,2,c
  2096  000746  D1F2               	goto	l5666
  2097                           
  2098                           ;State_Mchn.c: 417: {
  2099                           ;State_Mchn.c: 418: Switch_Program = 1;
  2100  000748  0E01               	movlw	1
  2101  00074A  6E21               	movwf	_Switch_Program,c
  2102                           
  2103                           ;State_Mchn.c: 419: Eeprom_Store();
  2104  00074C  EC07  F010         	call	_Eeprom_Store	;wreg free
  2105  000750                     l5428:
  2106                           
  2107                           ;State_Mchn.c: 420: if(Stop_Program == 1)
  2108  000750  0418               	decf	_Stop_Program,w,c
  2109  000752  A4D8               	btfss	status,2,c
  2110  000754  D1EB               	goto	l5666
  2111                           
  2112                           ;State_Mchn.c: 421: {
  2113                           ;State_Mchn.c: 422: Switch_Main = 0;
  2114  000756  0E00               	movlw	0
  2115  000758  6E20               	movwf	_Switch_Main,c
  2116                           
  2117                           ;State_Mchn.c: 424: }
  2118                           ;State_Mchn.c: 425: }
  2119                           ;State_Mchn.c: 426: break;
  2120  00075A  D1E8               	goto	l5666
  2121  00075C                     l5432:
  2122  00075C  0E02               	movlw	2
  2123  00075E  6E44               	movwf	Train_Path@To,c
  2124  000760  0E01               	movlw	1
  2125  000762  EC4C  F00A         	call	_Train_Path
  2126  000766  0900               	iorlw	0
  2127  000768  A4D8               	btfss	status,2,c
  2128  00076A  D1E0               	goto	l5666
  2129                           
  2130                           ;State_Mchn.c: 429: {
  2131                           ;State_Mchn.c: 430: Switch_Program = 2;
  2132  00076C  0E02               	movlw	2
  2133  00076E  6E21               	movwf	_Switch_Program,c
  2134                           
  2135                           ;State_Mchn.c: 431: Eeprom_Store();
  2136  000770  EC07  F010         	call	_Eeprom_Store	;wreg free
  2137  000774  D7ED               	goto	l5428
  2138  000776                     l5442:
  2139  000776  0E03               	movlw	3
  2140  000778  6E44               	movwf	Train_Path@To,c
  2141  00077A  0E00               	movlw	0
  2142  00077C  EC4C  F00A         	call	_Train_Path
  2143  000780  0900               	iorlw	0
  2144  000782  A4D8               	btfss	status,2,c
  2145  000784  D1D3               	goto	l5666
  2146                           
  2147                           ;State_Mchn.c: 441: {
  2148                           ;State_Mchn.c: 442: Switch_Program = 3;
  2149  000786  0E03               	movlw	3
  2150  000788  6E21               	movwf	_Switch_Program,c
  2151                           
  2152                           ;State_Mchn.c: 443: Eeprom_Store();
  2153  00078A  EC07  F010         	call	_Eeprom_Store	;wreg free
  2154  00078E  D7E0               	goto	l5428
  2155  000790                     l5452:
  2156  000790  0E00               	movlw	0
  2157  000792  6E44               	movwf	Train_Path@To,c
  2158  000794  0E02               	movlw	2
  2159  000796  EC4C  F00A         	call	_Train_Path
  2160  00079A  0900               	iorlw	0
  2161  00079C  A4D8               	btfss	status,2,c
  2162  00079E  D1C6               	goto	l5666
  2163                           
  2164                           ;State_Mchn.c: 453: {
  2165                           ;State_Mchn.c: 454: Switch_Program = 4;
  2166  0007A0  0E04               	movlw	4
  2167  0007A2  6E21               	movwf	_Switch_Program,c
  2168                           
  2169                           ;State_Mchn.c: 455: Eeprom_Store();
  2170  0007A4  EC07  F010         	call	_Eeprom_Store	;wreg free
  2171  0007A8  D7D3               	goto	l5428
  2172  0007AA                     l5462:
  2173  0007AA  0E01               	movlw	1
  2174  0007AC  6E44               	movwf	Train_Path@To,c
  2175  0007AE  0E03               	movlw	3
  2176  0007B0  EC4C  F00A         	call	_Train_Path
  2177  0007B4  0900               	iorlw	0
  2178  0007B6  A4D8               	btfss	status,2,c
  2179  0007B8  D1B9               	goto	l5666
  2180                           
  2181                           ;State_Mchn.c: 465: {
  2182                           ;State_Mchn.c: 466: Switch_Program = 5;
  2183  0007BA  0E05               	movlw	5
  2184  0007BC  6E21               	movwf	_Switch_Program,c
  2185                           
  2186                           ;State_Mchn.c: 467: Eeprom_Store();
  2187  0007BE  EC07  F010         	call	_Eeprom_Store	;wreg free
  2188  0007C2  D7C6               	goto	l5428
  2189  0007C4                     l5472:
  2190  0007C4  0E03               	movlw	3
  2191  0007C6  6E44               	movwf	Train_Path@To,c
  2192  0007C8  0E00               	movlw	0
  2193  0007CA  EC4C  F00A         	call	_Train_Path
  2194  0007CE  0900               	iorlw	0
  2195  0007D0  A4D8               	btfss	status,2,c
  2196  0007D2  D1AC               	goto	l5666
  2197                           
  2198                           ;State_Mchn.c: 477: {
  2199                           ;State_Mchn.c: 478: Switch_Program = 6;
  2200  0007D4  0E06               	movlw	6
  2201  0007D6  6E21               	movwf	_Switch_Program,c
  2202                           
  2203                           ;State_Mchn.c: 479: Eeprom_Store();
  2204  0007D8  EC07  F010         	call	_Eeprom_Store	;wreg free
  2205  0007DC  D7B9               	goto	l5428
  2206  0007DE                     l5482:
  2207  0007DE  0E02               	movlw	2
  2208  0007E0  6E44               	movwf	Train_Path@To,c
  2209  0007E2  0E01               	movlw	1
  2210  0007E4  EC4C  F00A         	call	_Train_Path
  2211  0007E8  0900               	iorlw	0
  2212  0007EA  A4D8               	btfss	status,2,c
  2213  0007EC  D19F               	goto	l5666
  2214                           
  2215                           ;State_Mchn.c: 489: {
  2216                           ;State_Mchn.c: 490: Switch_Program = 7;
  2217  0007EE  0E07               	movlw	7
  2218  0007F0  6E21               	movwf	_Switch_Program,c
  2219                           
  2220                           ;State_Mchn.c: 491: Eeprom_Store();
  2221  0007F2  EC07  F010         	call	_Eeprom_Store	;wreg free
  2222  0007F6  D7AC               	goto	l5428
  2223  0007F8                     l5492:
  2224  0007F8  0E01               	movlw	1
  2225  0007FA  6E44               	movwf	Train_Path@To,c
  2226  0007FC  0E03               	movlw	3
  2227  0007FE  EC4C  F00A         	call	_Train_Path
  2228  000802  0900               	iorlw	0
  2229  000804  A4D8               	btfss	status,2,c
  2230  000806  D192               	goto	l5666
  2231                           
  2232                           ;State_Mchn.c: 501: {
  2233                           ;State_Mchn.c: 502: Switch_Program = 0;
  2234  000808  0E00               	movlw	0
  2235  00080A  6E21               	movwf	_Switch_Program,c
  2236                           
  2237                           ;State_Mchn.c: 503: Eeprom_Store();
  2238  00080C  EC07  F010         	call	_Eeprom_Store	;wreg free
  2239  000810  D79F               	goto	l5428
  2240  000812                     l5504:
  2241  000812  5021               	movf	_Switch_Program,w,c
  2242                           
  2243                           ; Switch size 1, requested type "space"
  2244                           ; Number of cases is 8, Range of values is 0 to 7
  2245                           ; switch strategies available:
  2246                           ; Name         Instructions Cycles
  2247                           ; simple_byte           25    13 (average)
  2248                           ;	Chosen strategy is simple_byte
  2249  000814  0A00               	xorlw	0	; case 0
  2250  000816  B4D8               	btfsc	status,2,c
  2251  000818  D78F               	goto	l5422
  2252  00081A  0A01               	xorlw	1	; case 1
  2253  00081C  B4D8               	btfsc	status,2,c
  2254  00081E  D79E               	goto	l5432
  2255  000820  0A03               	xorlw	3	; case 2
  2256  000822  B4D8               	btfsc	status,2,c
  2257  000824  D7A8               	goto	l5442
  2258  000826  0A01               	xorlw	1	; case 3
  2259  000828  B4D8               	btfsc	status,2,c
  2260  00082A  D7B2               	goto	l5452
  2261  00082C  0A07               	xorlw	7	; case 4
  2262  00082E  B4D8               	btfsc	status,2,c
  2263  000830  D7BC               	goto	l5462
  2264  000832  0A01               	xorlw	1	; case 5
  2265  000834  B4D8               	btfsc	status,2,c
  2266  000836  D7C6               	goto	l5472
  2267  000838  0A03               	xorlw	3	; case 6
  2268  00083A  B4D8               	btfsc	status,2,c
  2269  00083C  D7D0               	goto	l5482
  2270  00083E  0A01               	xorlw	1	; case 7
  2271  000840  B4D8               	btfsc	status,2,c
  2272  000842  D7DA               	goto	l5492
  2273                           
  2274                           ;State_Mchn.c: 517: switch(Switch_Activate_Controls)
  2275  000844  D173               	goto	l5666
  2276  000846                     l5506:
  2277  000846  0E14               	movlw	20
  2278  000848  ECD7  F012         	call	_GETxAPIxVAL
  2279  00084C  503A               	movf	?_GETxAPIxVAL,w,c
  2280  00084E  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  2281  000850  B4D8               	btfsc	status,2,c
  2282  000852  D00D               	goto	l5514
  2283  000854  0E16               	movlw	22
  2284  000856  ECD7  F012         	call	_GETxAPIxVAL
  2285  00085A  503A               	movf	?_GETxAPIxVAL,w,c
  2286  00085C  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  2287  00085E  B4D8               	btfsc	status,2,c
  2288  000860  D006               	goto	l5514
  2289                           
  2290                           ;State_Mchn.c: 520: {
  2291                           ;State_Mchn.c: 521: Switch_Activate_Controls = 1;
  2292  000862  0E01               	movlw	1
  2293  000864  6E19               	movwf	_Switch_Activate_Controls,c
  2294                           
  2295                           ;State_Mchn.c: 522: Red_Led(3);
  2296  000866  0E03               	movlw	3
  2297  000868  EC12  F011         	call	_Red_Led
  2298                           
  2299                           ;State_Mchn.c: 523: }
  2300  00086C  D16A               	goto	l5668
  2301  00086E                     l5514:
  2302                           
  2303                           ;State_Mchn.c: 524: else
  2304                           ;State_Mchn.c: 525: {
  2305                           ;State_Mchn.c: 526: Switch_Activate_Controls = 0;
  2306  00086E  0E00               	movlw	0
  2307  000870  6E19               	movwf	_Switch_Activate_Controls,c
  2308                           
  2309                           ;State_Mchn.c: 527: Red_Led(0);
  2310  000872  0E00               	movlw	0
  2311  000874  EC12  F011         	call	_Red_Led
  2312                           
  2313                           ;State_Mchn.c: 528: }
  2314                           ;State_Mchn.c: 529: break;
  2315  000878  D164               	goto	l5668
  2316  00087A                     l5518:
  2317  00087A  0E14               	movlw	20
  2318  00087C  ECD7  F012         	call	_GETxAPIxVAL
  2319  000880  503A               	movf	?_GETxAPIxVAL,w,c
  2320  000882  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  2321  000884  A4D8               	btfss	status,2,c
  2322  000886  D00D               	goto	l5526
  2323  000888  0E16               	movlw	22
  2324  00088A  ECD7  F012         	call	_GETxAPIxVAL
  2325  00088E  503A               	movf	?_GETxAPIxVAL,w,c
  2326  000890  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  2327  000892  A4D8               	btfss	status,2,c
  2328  000894  D006               	goto	l5526
  2329                           
  2330                           ;State_Mchn.c: 532: {
  2331                           ;State_Mchn.c: 533: Switch_Activate_Controls = 2;
  2332  000896  0E02               	movlw	2
  2333  000898  6E19               	movwf	_Switch_Activate_Controls,c
  2334                           
  2335                           ;State_Mchn.c: 534: Red_Led(3);
  2336  00089A  0E03               	movlw	3
  2337  00089C  EC12  F011         	call	_Red_Led
  2338                           
  2339                           ;State_Mchn.c: 535: }
  2340  0008A0  D005               	goto	l5530
  2341  0008A2                     l5526:
  2342                           
  2343                           ;State_Mchn.c: 536: else
  2344                           ;State_Mchn.c: 537: {
  2345                           ;State_Mchn.c: 538: Switch_Activate_Controls = 1;
  2346  0008A2  0E01               	movlw	1
  2347  0008A4  6E19               	movwf	_Switch_Activate_Controls,c
  2348                           
  2349                           ;State_Mchn.c: 539: Red_Led(3);
  2350  0008A6  0E03               	movlw	3
  2351  0008A8  EC12  F011         	call	_Red_Led
  2352  0008AC                     l5530:
  2353                           
  2354                           ;State_Mchn.c: 540: }
  2355                           ;State_Mchn.c: 541: Activate_Controls_Counter = 10000;
  2356  0008AC  0E27               	movlw	39
  2357  0008AE  0100               	movlb	0	; () banked
  2358  0008B0  6FE9               	movwf	(_Activate_Controls_Counter+1)& (0+255),b
  2359  0008B2  0E10               	movlw	16
  2360  0008B4  6FE8               	movwf	_Activate_Controls_Counter& (0+255),b
  2361                           
  2362                           ;State_Mchn.c: 542: break;
  2363  0008B6  D145               	goto	l5668
  2364  0008B8                     l5532:
  2365  0008B8  0E14               	movlw	20
  2366  0008BA  ECD7  F012         	call	_GETxAPIxVAL
  2367  0008BE  503A               	movf	?_GETxAPIxVAL,w,c
  2368  0008C0  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  2369  0008C2  A4D8               	btfss	status,2,c
  2370  0008C4  D01A               	goto	l5542
  2371  0008C6  0E16               	movlw	22
  2372  0008C8  ECD7  F012         	call	_GETxAPIxVAL
  2373  0008CC  503A               	movf	?_GETxAPIxVAL,w,c
  2374  0008CE  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  2375  0008D0  A4D8               	btfss	status,2,c
  2376  0008D2  D013               	goto	l5542
  2377  0008D4  0E15               	movlw	21
  2378  0008D6  ECD7  F012         	call	_GETxAPIxVAL
  2379  0008DA  503A               	movf	?_GETxAPIxVAL,w,c
  2380  0008DC  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  2381  0008DE  A4D8               	btfss	status,2,c
  2382  0008E0  D00C               	goto	l5542
  2383  0008E2  0E13               	movlw	19
  2384  0008E4  ECD7  F012         	call	_GETxAPIxVAL
  2385  0008E8  503A               	movf	?_GETxAPIxVAL,w,c
  2386  0008EA  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  2387  0008EC  A4D8               	btfss	status,2,c
  2388  0008EE  D005               	goto	l5542
  2389                           
  2390                           ;State_Mchn.c: 545: {
  2391                           ;State_Mchn.c: 546: Activate_Controls_Counter--;
  2392  0008F0  0100               	movlb	0	; () banked
  2393  0008F2  07E8               	decf	_Activate_Controls_Counter& (0+255),f,b
  2394  0008F4  A0D8               	btfss	status,0,c
  2395  0008F6  07E9               	decf	(_Activate_Controls_Counter+1)& (0+255),f,b
  2396                           
  2397                           ;State_Mchn.c: 547: }
  2398  0008F8  D005               	goto	l5544
  2399  0008FA                     l5542:
  2400                           
  2401                           ;State_Mchn.c: 548: else
  2402                           ;State_Mchn.c: 549: {
  2403                           ;State_Mchn.c: 550: Activate_Controls_Counter = 10000;
  2404  0008FA  0E27               	movlw	39
  2405  0008FC  0100               	movlb	0	; () banked
  2406  0008FE  6FE9               	movwf	(_Activate_Controls_Counter+1)& (0+255),b
  2407  000900  0E10               	movlw	16
  2408  000902  6FE8               	movwf	_Activate_Controls_Counter& (0+255),b
  2409  000904                     l5544:
  2410                           
  2411                           ; BSR set to: 0
  2412                           ;State_Mchn.c: 551: }
  2413                           ;State_Mchn.c: 553: Red_Led(3);
  2414  000904  0E03               	movlw	3
  2415  000906  EC12  F011         	call	_Red_Led
  2416                           
  2417                           ;State_Mchn.c: 555: switch(GETxAPIxVAL(19))
  2418  00090A  D042               	goto	l5572
  2419  00090C                     l5546:
  2420  00090C  0E00               	movlw	0
  2421  00090E  D033               	goto	L8
  2422  000910                     l5548:
  2423  000910  0E07               	movlw	7
  2424  000912  ECD7  F012         	call	_GETxAPIxVAL
  2425  000916  C03A  F046         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  2426  00091A  C03B  F047         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  2427  00091E  0E06               	movlw	6
  2428  000920  ECD7  F012         	call	_GETxAPIxVAL
  2429  000924  503A               	movf	?_GETxAPIxVAL,w,c
  2430  000926  5C46               	subwf	??_Update_StateMchn,w,c
  2431  000928  503B               	movf	?_GETxAPIxVAL+1,w,c
  2432  00092A  5847               	subwfb	??_Update_StateMchn+1,w,c
  2433  00092C  A0D8               	btfss	status,0,c
  2434  00092E  D003               	goto	l375
  2435                           
  2436                           ;State_Mchn.c: 563: {
  2437                           ;State_Mchn.c: 564: DECRxAPIxVAL(7);
  2438  000930  0E07               	movlw	7
  2439  000932  ECA4  F012         	call	_DECRxAPIxVAL
  2440  000936                     l375:
  2441                           
  2442                           ;State_Mchn.c: 565: }
  2443                           ;State_Mchn.c: 566: if(GETxAPIxVAL(8) <= GETxAPIxVAL(5))
  2444  000936  0E05               	movlw	5
  2445  000938  ECD7  F012         	call	_GETxAPIxVAL
  2446  00093C  C03A  F046         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  2447  000940  C03B  F047         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  2448  000944  0E08               	movlw	8
  2449  000946  ECD7  F012         	call	_GETxAPIxVAL
  2450  00094A  503A               	movf	?_GETxAPIxVAL,w,c
  2451  00094C  5C46               	subwf	??_Update_StateMchn,w,c
  2452  00094E  503B               	movf	?_GETxAPIxVAL+1,w,c
  2453  000950  5847               	subwfb	??_Update_StateMchn+1,w,c
  2454  000952  A0D8               	btfss	status,0,c
  2455  000954  D003               	goto	l5554
  2456                           
  2457                           ;State_Mchn.c: 567: {
  2458                           ;State_Mchn.c: 568: INCRxAPIxVAL(8);
  2459  000956  0E08               	movlw	8
  2460  000958  ECB7  F012         	call	_INCRxAPIxVAL
  2461  00095C                     l5554:
  2462                           
  2463                           ;State_Mchn.c: 569: }
  2464                           ;State_Mchn.c: 570: Switch_Adjust_LB = 1;
  2465  00095C  0E01               	movlw	1
  2466  00095E  D00B               	goto	L8
  2467  000960                     l5556:
  2468  000960  5002               	movf	_Adjust_Counter+1,w,c
  2469  000962  E104               	bnz	u4210
  2470  000964  0E14               	movlw	20
  2471  000966  5C01               	subwf	_Adjust_Counter,w,c
  2472  000968  A0D8               	btfss	status,0,c
  2473  00096A  D007               	goto	l5562
  2474  00096C                     u4210:
  2475                           
  2476                           ;State_Mchn.c: 574: {
  2477                           ;State_Mchn.c: 575: Adjust_Counter = 0;
  2478  00096C  0E00               	movlw	0
  2479  00096E  6E02               	movwf	_Adjust_Counter+1,c
  2480  000970  0E00               	movlw	0
  2481  000972  6E01               	movwf	_Adjust_Counter,c
  2482  000974  D7CB               	goto	l5546
  2483  000976                     L8:
  2484  000976  6E1A               	movwf	_Switch_Adjust_LB,c
  2485                           
  2486                           ;State_Mchn.c: 578: }
  2487                           
  2488                           ;State_Mchn.c: 577: break;
  2489  000978  D04B               	goto	l5600
  2490  00097A                     l5562:
  2491                           
  2492                           ;State_Mchn.c: 579: else {Adjust_Counter++;}
  2493  00097A  4A01               	infsnz	_Adjust_Counter,f,c
  2494  00097C  2A02               	incf	_Adjust_Counter+1,f,c
  2495                           
  2496                           ;State_Mchn.c: 580: break;
  2497  00097E  D048               	goto	l5600
  2498  000980                     l5568:
  2499  000980  501A               	movf	_Switch_Adjust_LB,w,c
  2500                           
  2501                           ; Switch size 1, requested type "space"
  2502                           ; Number of cases is 2, Range of values is 0 to 1
  2503                           ; switch strategies available:
  2504                           ; Name         Instructions Cycles
  2505                           ; simple_byte            7     4 (average)
  2506                           ;	Chosen strategy is simple_byte
  2507  000982  0A00               	xorlw	0	; case 0
  2508  000984  B4D8               	btfsc	status,2,c
  2509  000986  D7C4               	goto	l5548
  2510  000988  0A01               	xorlw	1	; case 1
  2511  00098A  B4D8               	btfsc	status,2,c
  2512  00098C  D7E9               	goto	l5556
  2513  00098E  D7BE               	goto	l5546
  2514  000990                     l5572:
  2515  000990  0E13               	movlw	19
  2516  000992  ECD7  F012         	call	_GETxAPIxVAL
  2517                           
  2518                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2519                           ; Switch size 1, requested type "space"
  2520                           ; Number of cases is 1, Range of values is 0 to 0
  2521                           ; switch strategies available:
  2522                           ; Name         Instructions Cycles
  2523                           ; simple_byte            4     3 (average)
  2524                           ;	Chosen strategy is simple_byte
  2525  000996  503B               	movf	?_GETxAPIxVAL+1,w,c
  2526  000998  0A00               	xorlw	0	; case 0
  2527  00099A  A4D8               	btfss	status,2,c
  2528  00099C  D039               	goto	l5600
  2529                           
  2530                           ; Switch size 1, requested type "space"
  2531                           ; Number of cases is 2, Range of values is 0 to 1
  2532                           ; switch strategies available:
  2533                           ; Name         Instructions Cycles
  2534                           ; simple_byte            7     4 (average)
  2535                           ;	Chosen strategy is simple_byte
  2536  00099E  503A               	movf	?_GETxAPIxVAL,w,c
  2537  0009A0  0A00               	xorlw	0	; case 0
  2538  0009A2  B4D8               	btfsc	status,2,c
  2539  0009A4  D7B3               	goto	l5546
  2540  0009A6  0A01               	xorlw	1	; case 1
  2541  0009A8  B4D8               	btfsc	status,2,c
  2542  0009AA  D7EA               	goto	l5568
  2543                           
  2544                           ;State_Mchn.c: 591: switch(GETxAPIxVAL(20))
  2545  0009AC  D031               	goto	l5600
  2546  0009AE                     l5574:
  2547  0009AE  0E00               	movlw	0
  2548  0009B0  D022               	goto	L10
  2549  0009B2                     l5576:
  2550  0009B2  0E07               	movlw	7
  2551  0009B4  ECD7  F012         	call	_GETxAPIxVAL
  2552  0009B8  283A               	incf	?_GETxAPIxVAL,w,c
  2553  0009BA  0E03               	movlw	3
  2554  0009BC  583B               	subwfb	?_GETxAPIxVAL+1,w,c
  2555  0009BE  B0D8               	btfsc	status,0,c
  2556  0009C0  D003               	goto	l389
  2557                           
  2558                           ;State_Mchn.c: 599: {
  2559                           ;State_Mchn.c: 600: INCRxAPIxVAL(7);
  2560  0009C2  0E07               	movlw	7
  2561  0009C4  ECB7  F012         	call	_INCRxAPIxVAL
  2562  0009C8                     l389:
  2563                           
  2564                           ;State_Mchn.c: 601: }
  2565                           ;State_Mchn.c: 602: if(GETxAPIxVAL(8) >= 1)
  2566  0009C8  0E08               	movlw	8
  2567  0009CA  ECD7  F012         	call	_GETxAPIxVAL
  2568  0009CE  503A               	movf	?_GETxAPIxVAL,w,c
  2569  0009D0  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  2570  0009D2  B4D8               	btfsc	status,2,c
  2571  0009D4  D003               	goto	l5582
  2572                           
  2573                           ;State_Mchn.c: 603: {
  2574                           ;State_Mchn.c: 604: DECRxAPIxVAL(8);
  2575  0009D6  0E08               	movlw	8
  2576  0009D8  ECA4  F012         	call	_DECRxAPIxVAL
  2577  0009DC                     l5582:
  2578                           
  2579                           ;State_Mchn.c: 605: }
  2580                           ;State_Mchn.c: 606: Switch_Adjust_LF = 1;
  2581  0009DC  0E01               	movlw	1
  2582  0009DE  D00B               	goto	L10
  2583  0009E0                     l5584:
  2584  0009E0  5002               	movf	_Adjust_Counter+1,w,c
  2585  0009E2  E104               	bnz	u4240
  2586  0009E4  0E14               	movlw	20
  2587  0009E6  5C01               	subwf	_Adjust_Counter,w,c
  2588  0009E8  A0D8               	btfss	status,0,c
  2589  0009EA  D007               	goto	l5590
  2590  0009EC                     u4240:
  2591                           
  2592                           ;State_Mchn.c: 610: {
  2593                           ;State_Mchn.c: 611: Adjust_Counter = 0;
  2594  0009EC  0E00               	movlw	0
  2595  0009EE  6E02               	movwf	_Adjust_Counter+1,c
  2596  0009F0  0E00               	movlw	0
  2597  0009F2  6E01               	movwf	_Adjust_Counter,c
  2598  0009F4  D7DC               	goto	l5574
  2599  0009F6                     L10:
  2600  0009F6  6E1B               	movwf	_Switch_Adjust_LF,c
  2601                           
  2602                           ;State_Mchn.c: 614: }
  2603                           
  2604                           ;State_Mchn.c: 613: break;
  2605  0009F8  D042               	goto	l5626
  2606  0009FA                     l5590:
  2607                           
  2608                           ;State_Mchn.c: 615: else {Adjust_Counter++;}
  2609  0009FA  4A01               	infsnz	_Adjust_Counter,f,c
  2610  0009FC  2A02               	incf	_Adjust_Counter+1,f,c
  2611                           
  2612                           ;State_Mchn.c: 616: break;
  2613  0009FE  D03F               	goto	l5626
  2614  000A00                     l5596:
  2615  000A00  501B               	movf	_Switch_Adjust_LF,w,c
  2616                           
  2617                           ; Switch size 1, requested type "space"
  2618                           ; Number of cases is 2, Range of values is 0 to 1
  2619                           ; switch strategies available:
  2620                           ; Name         Instructions Cycles
  2621                           ; simple_byte            7     4 (average)
  2622                           ;	Chosen strategy is simple_byte
  2623  000A02  0A00               	xorlw	0	; case 0
  2624  000A04  B4D8               	btfsc	status,2,c
  2625  000A06  D7D5               	goto	l5576
  2626  000A08  0A01               	xorlw	1	; case 1
  2627  000A0A  B4D8               	btfsc	status,2,c
  2628  000A0C  D7E9               	goto	l5584
  2629  000A0E  D7CF               	goto	l5574
  2630  000A10                     l5600:
  2631  000A10  0E14               	movlw	20
  2632  000A12  ECD7  F012         	call	_GETxAPIxVAL
  2633                           
  2634                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2635                           ; Switch size 1, requested type "space"
  2636                           ; Number of cases is 1, Range of values is 0 to 0
  2637                           ; switch strategies available:
  2638                           ; Name         Instructions Cycles
  2639                           ; simple_byte            4     3 (average)
  2640                           ;	Chosen strategy is simple_byte
  2641  000A16  503B               	movf	?_GETxAPIxVAL+1,w,c
  2642  000A18  0A00               	xorlw	0	; case 0
  2643  000A1A  A4D8               	btfss	status,2,c
  2644  000A1C  D030               	goto	l5626
  2645                           
  2646                           ; Switch size 1, requested type "space"
  2647                           ; Number of cases is 2, Range of values is 0 to 1
  2648                           ; switch strategies available:
  2649                           ; Name         Instructions Cycles
  2650                           ; simple_byte            7     4 (average)
  2651                           ;	Chosen strategy is simple_byte
  2652  000A1E  503A               	movf	?_GETxAPIxVAL,w,c
  2653  000A20  0A00               	xorlw	0	; case 0
  2654  000A22  B4D8               	btfsc	status,2,c
  2655  000A24  D7C4               	goto	l5574
  2656  000A26  0A01               	xorlw	1	; case 1
  2657  000A28  B4D8               	btfsc	status,2,c
  2658  000A2A  D7EA               	goto	l5596
  2659                           
  2660                           ;State_Mchn.c: 626: switch(GETxAPIxVAL(21))
  2661  000A2C  D028               	goto	l5626
  2662  000A2E                     l5602:
  2663  000A2E  0E00               	movlw	0
  2664  000A30  D019               	goto	L12
  2665  000A32                     l5604:
  2666  000A32  0E09               	movlw	9
  2667  000A34  ECD7  F012         	call	_GETxAPIxVAL
  2668  000A38  503B               	movf	?_GETxAPIxVAL+1,w,c
  2669  000A3A  E107               	bnz	l5608
  2670  000A3C  0EFB               	movlw	251
  2671  000A3E  5C3A               	subwf	?_GETxAPIxVAL,w,c
  2672  000A40  B0D8               	btfsc	status,0,c
  2673  000A42  D003               	goto	l5608
  2674                           
  2675                           ;State_Mchn.c: 634: {
  2676                           ;State_Mchn.c: 635: INCRxAPIxVAL(9);
  2677  000A44  0E09               	movlw	9
  2678  000A46  ECB7  F012         	call	_INCRxAPIxVAL
  2679  000A4A                     l5608:
  2680                           
  2681                           ;State_Mchn.c: 636: }
  2682                           ;State_Mchn.c: 637: Switch_Adjust_RB = 1;
  2683  000A4A  0E01               	movlw	1
  2684  000A4C  D00B               	goto	L12
  2685  000A4E                     l5610:
  2686  000A4E  5002               	movf	_Adjust_Counter+1,w,c
  2687  000A50  E104               	bnz	u4260
  2688  000A52  0E14               	movlw	20
  2689  000A54  5C01               	subwf	_Adjust_Counter,w,c
  2690  000A56  A0D8               	btfss	status,0,c
  2691  000A58  D007               	goto	l5616
  2692  000A5A                     u4260:
  2693                           
  2694                           ;State_Mchn.c: 641: {
  2695                           ;State_Mchn.c: 642: Adjust_Counter = 0;
  2696  000A5A  0E00               	movlw	0
  2697  000A5C  6E02               	movwf	_Adjust_Counter+1,c
  2698  000A5E  0E00               	movlw	0
  2699  000A60  6E01               	movwf	_Adjust_Counter,c
  2700  000A62  D7E5               	goto	l5602
  2701  000A64                     L12:
  2702  000A64  6E1C               	movwf	_Switch_Adjust_RB,c
  2703                           
  2704                           ;State_Mchn.c: 645: }
  2705                           
  2706                           ;State_Mchn.c: 644: break;
  2707  000A66  D040               	goto	l5652
  2708  000A68                     l5616:
  2709                           
  2710                           ;State_Mchn.c: 646: else {Adjust_Counter++;}
  2711  000A68  4A01               	infsnz	_Adjust_Counter,f,c
  2712  000A6A  2A02               	incf	_Adjust_Counter+1,f,c
  2713                           
  2714                           ;State_Mchn.c: 647: break;
  2715  000A6C  D03D               	goto	l5652
  2716  000A6E                     l5622:
  2717  000A6E  501C               	movf	_Switch_Adjust_RB,w,c
  2718                           
  2719                           ; Switch size 1, requested type "space"
  2720                           ; Number of cases is 2, Range of values is 0 to 1
  2721                           ; switch strategies available:
  2722                           ; Name         Instructions Cycles
  2723                           ; simple_byte            7     4 (average)
  2724                           ;	Chosen strategy is simple_byte
  2725  000A70  0A00               	xorlw	0	; case 0
  2726  000A72  B4D8               	btfsc	status,2,c
  2727  000A74  D7DE               	goto	l5604
  2728  000A76  0A01               	xorlw	1	; case 1
  2729  000A78  B4D8               	btfsc	status,2,c
  2730  000A7A  D7E9               	goto	l5610
  2731  000A7C  D7D8               	goto	l5602
  2732  000A7E                     l5626:
  2733  000A7E  0E15               	movlw	21
  2734  000A80  ECD7  F012         	call	_GETxAPIxVAL
  2735                           
  2736                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2737                           ; Switch size 1, requested type "space"
  2738                           ; Number of cases is 1, Range of values is 0 to 0
  2739                           ; switch strategies available:
  2740                           ; Name         Instructions Cycles
  2741                           ; simple_byte            4     3 (average)
  2742                           ;	Chosen strategy is simple_byte
  2743  000A84  503B               	movf	?_GETxAPIxVAL+1,w,c
  2744  000A86  0A00               	xorlw	0	; case 0
  2745  000A88  A4D8               	btfss	status,2,c
  2746  000A8A  D02E               	goto	l5652
  2747                           
  2748                           ; Switch size 1, requested type "space"
  2749                           ; Number of cases is 2, Range of values is 0 to 1
  2750                           ; switch strategies available:
  2751                           ; Name         Instructions Cycles
  2752                           ; simple_byte            7     4 (average)
  2753                           ;	Chosen strategy is simple_byte
  2754  000A8C  503A               	movf	?_GETxAPIxVAL,w,c
  2755  000A8E  0A00               	xorlw	0	; case 0
  2756  000A90  B4D8               	btfsc	status,2,c
  2757  000A92  D7CD               	goto	l5602
  2758  000A94  0A01               	xorlw	1	; case 1
  2759  000A96  B4D8               	btfsc	status,2,c
  2760  000A98  D7EA               	goto	l5622
  2761                           
  2762                           ;State_Mchn.c: 658: switch(GETxAPIxVAL(22))
  2763  000A9A  D026               	goto	l5652
  2764  000A9C                     l5628:
  2765  000A9C  0E00               	movlw	0
  2766  000A9E  D017               	goto	L14
  2767  000AA0                     l5630:
  2768  000AA0  0E09               	movlw	9
  2769  000AA2  ECD7  F012         	call	_GETxAPIxVAL
  2770  000AA6  503A               	movf	?_GETxAPIxVAL,w,c
  2771  000AA8  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  2772  000AAA  B4D8               	btfsc	status,2,c
  2773  000AAC  D003               	goto	l5634
  2774                           
  2775                           ;State_Mchn.c: 666: {
  2776                           ;State_Mchn.c: 667: DECRxAPIxVAL(9);
  2777  000AAE  0E09               	movlw	9
  2778  000AB0  ECA4  F012         	call	_DECRxAPIxVAL
  2779  000AB4                     l5634:
  2780                           
  2781                           ;State_Mchn.c: 668: } Switch_Adjust_RF = 1;
  2782  000AB4  0E01               	movlw	1
  2783  000AB6  D00B               	goto	L14
  2784  000AB8                     l5636:
  2785  000AB8  5002               	movf	_Adjust_Counter+1,w,c
  2786  000ABA  E104               	bnz	u4280
  2787  000ABC  0E14               	movlw	20
  2788  000ABE  5C01               	subwf	_Adjust_Counter,w,c
  2789  000AC0  A0D8               	btfss	status,0,c
  2790  000AC2  D007               	goto	l5642
  2791  000AC4                     u4280:
  2792                           
  2793                           ;State_Mchn.c: 672: {
  2794                           ;State_Mchn.c: 673: Adjust_Counter = 0;
  2795  000AC4  0E00               	movlw	0
  2796  000AC6  6E02               	movwf	_Adjust_Counter+1,c
  2797  000AC8  0E00               	movlw	0
  2798  000ACA  6E01               	movwf	_Adjust_Counter,c
  2799  000ACC  D7E7               	goto	l5628
  2800  000ACE                     L14:
  2801  000ACE  6E1D               	movwf	_Switch_Adjust_RF,c
  2802                           
  2803                           ;State_Mchn.c: 676: }
  2804                           
  2805                           ;State_Mchn.c: 675: break;
  2806  000AD0  D019               	goto	l5654
  2807  000AD2                     l5642:
  2808                           
  2809                           ;State_Mchn.c: 677: else {Adjust_Counter++;}
  2810  000AD2  4A01               	infsnz	_Adjust_Counter,f,c
  2811  000AD4  2A02               	incf	_Adjust_Counter+1,f,c
  2812                           
  2813                           ;State_Mchn.c: 678: break;
  2814  000AD6  D016               	goto	l5654
  2815  000AD8                     l5648:
  2816  000AD8  501D               	movf	_Switch_Adjust_RF,w,c
  2817                           
  2818                           ; Switch size 1, requested type "space"
  2819                           ; Number of cases is 2, Range of values is 0 to 1
  2820                           ; switch strategies available:
  2821                           ; Name         Instructions Cycles
  2822                           ; simple_byte            7     4 (average)
  2823                           ;	Chosen strategy is simple_byte
  2824  000ADA  0A00               	xorlw	0	; case 0
  2825  000ADC  B4D8               	btfsc	status,2,c
  2826  000ADE  D7E0               	goto	l5630
  2827  000AE0  0A01               	xorlw	1	; case 1
  2828  000AE2  B4D8               	btfsc	status,2,c
  2829  000AE4  D7E9               	goto	l5636
  2830  000AE6  D7DA               	goto	l5628
  2831  000AE8                     l5652:
  2832  000AE8  0E16               	movlw	22
  2833  000AEA  ECD7  F012         	call	_GETxAPIxVAL
  2834                           
  2835                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2836                           ; Switch size 1, requested type "space"
  2837                           ; Number of cases is 1, Range of values is 0 to 0
  2838                           ; switch strategies available:
  2839                           ; Name         Instructions Cycles
  2840                           ; simple_byte            4     3 (average)
  2841                           ;	Chosen strategy is simple_byte
  2842  000AEE  503B               	movf	?_GETxAPIxVAL+1,w,c
  2843  000AF0  0A00               	xorlw	0	; case 0
  2844  000AF2  A4D8               	btfss	status,2,c
  2845  000AF4  D007               	goto	l5654
  2846                           
  2847                           ; Switch size 1, requested type "space"
  2848                           ; Number of cases is 2, Range of values is 0 to 1
  2849                           ; switch strategies available:
  2850                           ; Name         Instructions Cycles
  2851                           ; simple_byte            7     4 (average)
  2852                           ;	Chosen strategy is simple_byte
  2853  000AF6  503A               	movf	?_GETxAPIxVAL,w,c
  2854  000AF8  0A00               	xorlw	0	; case 0
  2855  000AFA  B4D8               	btfsc	status,2,c
  2856  000AFC  D7CF               	goto	l5628
  2857  000AFE  0A01               	xorlw	1	; case 1
  2858  000B00  B4D8               	btfsc	status,2,c
  2859  000B02  D7EA               	goto	l5648
  2860  000B04                     l5654:
  2861                           
  2862                           ;State_Mchn.c: 687: if(Activate_Controls_Counter <= 1)
  2863  000B04  0100               	movlb	0	; () banked
  2864  000B06  51E9               	movf	(_Activate_Controls_Counter+1)& (0+255),w,b
  2865  000B08  E11C               	bnz	l5668
  2866  000B0A  0E02               	movlw	2
  2867  000B0C  0100               	movlb	0	; () banked
  2868  000B0E  5DE8               	subwf	_Activate_Controls_Counter& (0+255),w,b
  2869  000B10  B0D8               	btfsc	status,0,c
  2870  000B12  D017               	goto	l5668
  2871                           
  2872                           ; BSR set to: 0
  2873                           ;State_Mchn.c: 688: {
  2874                           ;State_Mchn.c: 689: Switch_Activate_Controls = 0;
  2875  000B14  0E00               	movlw	0
  2876  000B16  6E19               	movwf	_Switch_Activate_Controls,c
  2877                           
  2878                           ; BSR set to: 0
  2879                           ;State_Mchn.c: 690: Red_Led(0);
  2880  000B18  0E00               	movlw	0
  2881  000B1A  EC12  F011         	call	_Red_Led
  2882                           
  2883                           ;State_Mchn.c: 691: }
  2884                           ;State_Mchn.c: 692: break;
  2885  000B1E  D011               	goto	l5668
  2886  000B20                     l5660:
  2887  000B20  0E00               	movlw	0
  2888  000B22  6E19               	movwf	_Switch_Activate_Controls,c
  2889                           
  2890                           ;State_Mchn.c: 695: Red_Led(0);
  2891  000B24  0E00               	movlw	0
  2892  000B26  EC12  F011         	call	_Red_Led
  2893                           
  2894                           ;State_Mchn.c: 697: }
  2895                           
  2896                           ;State_Mchn.c: 696: break;
  2897  000B2A  D00B               	goto	l5668
  2898  000B2C                     l5666:
  2899  000B2C  5019               	movf	_Switch_Activate_Controls,w,c
  2900                           
  2901                           ; Switch size 1, requested type "space"
  2902                           ; Number of cases is 3, Range of values is 0 to 2
  2903                           ; switch strategies available:
  2904                           ; Name         Instructions Cycles
  2905                           ; simple_byte           10     6 (average)
  2906                           ;	Chosen strategy is simple_byte
  2907  000B2E  0A00               	xorlw	0	; case 0
  2908  000B30  B4D8               	btfsc	status,2,c
  2909  000B32  D689               	goto	l5506
  2910  000B34  0A01               	xorlw	1	; case 1
  2911  000B36  B4D8               	btfsc	status,2,c
  2912  000B38  D6A0               	goto	l5518
  2913  000B3A  0A03               	xorlw	3	; case 2
  2914  000B3C  B4D8               	btfsc	status,2,c
  2915  000B3E  D6BC               	goto	l5532
  2916  000B40  D7EF               	goto	l5660
  2917  000B42                     l5668:
  2918                           
  2919                           ;State_Mchn.c: 699: if(GETxAPIxVAL(17))
  2920  000B42  0E11               	movlw	17
  2921  000B44  ECD7  F012         	call	_GETxAPIxVAL
  2922  000B48  503A               	movf	?_GETxAPIxVAL,w,c
  2923  000B4A  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  2924  000B4C  B4D8               	btfsc	status,2,c
  2925  000B4E  D002               	goto	l5672
  2926                           
  2927                           ;State_Mchn.c: 700: {
  2928                           ;State_Mchn.c: 701: Stop_Program = 1;
  2929  000B50  0E01               	movlw	1
  2930  000B52  6E18               	movwf	_Stop_Program,c
  2931  000B54                     l5672:
  2932                           
  2933                           ;State_Mchn.c: 702: }
  2934                           ;State_Mchn.c: 704: if(Stop_Program == 1)
  2935  000B54  0418               	decf	_Stop_Program,w,c
  2936  000B56  A4D8               	btfss	status,2,c
  2937  000B58  D003               	goto	l426
  2938                           
  2939                           ;State_Mchn.c: 705: {
  2940                           ;State_Mchn.c: 706: Red_Led(2);
  2941  000B5A  0E02               	movlw	2
  2942  000B5C  EC12  F011         	call	_Red_Led
  2943  000B60                     l426:
  2944                           
  2945                           ;State_Mchn.c: 707: }
  2946                           ;State_Mchn.c: 709: Green_Led(1);
  2947  000B60  0E01               	movlw	1
  2948  000B62  EC52  F011         	call	_Green_Led
  2949                           
  2950                           ;State_Mchn.c: 711: break;
  2951  000B66  0012               	return	
  2952  000B68                     l5676:
  2953  000B68  0E00               	movlw	0
  2954  000B6A  6E44               	movwf	Train_Path@To,c
  2955  000B6C  0E02               	movlw	2
  2956  000B6E  EC4C  F00A         	call	_Train_Path
  2957  000B72  0900               	iorlw	0
  2958  000B74  A4D8               	btfss	status,2,c
  2959  000B76  D1B2               	goto	l5880
  2960                           
  2961                           ;State_Mchn.c: 717: {
  2962                           ;State_Mchn.c: 718: Switch_Program = 1;
  2963  000B78  0E01               	movlw	1
  2964  000B7A  6E21               	movwf	_Switch_Program,c
  2965                           
  2966                           ;State_Mchn.c: 719: Eeprom_Store();
  2967  000B7C  EC07  F010         	call	_Eeprom_Store	;wreg free
  2968  000B80                     l5682:
  2969                           
  2970                           ;State_Mchn.c: 720: if(Stop_Program == 1)
  2971  000B80  0418               	decf	_Stop_Program,w,c
  2972  000B82  A4D8               	btfss	status,2,c
  2973  000B84  D1AB               	goto	l5880
  2974                           
  2975                           ;State_Mchn.c: 721: {
  2976                           ;State_Mchn.c: 722: Switch_Main = 0;
  2977  000B86  0E00               	movlw	0
  2978  000B88  6E20               	movwf	_Switch_Main,c
  2979                           
  2980                           ;State_Mchn.c: 724: }
  2981                           ;State_Mchn.c: 725: }
  2982                           ;State_Mchn.c: 726: break;
  2983  000B8A  D1A8               	goto	l5880
  2984  000B8C                     l5686:
  2985  000B8C  0E03               	movlw	3
  2986  000B8E  6E44               	movwf	Train_Path@To,c
  2987  000B90  0E00               	movlw	0
  2988  000B92  EC4C  F00A         	call	_Train_Path
  2989  000B96  0900               	iorlw	0
  2990  000B98  A4D8               	btfss	status,2,c
  2991  000B9A  D1A0               	goto	l5880
  2992                           
  2993                           ;State_Mchn.c: 729: {
  2994                           ;State_Mchn.c: 730: Switch_Program = 2;
  2995  000B9C  0E02               	movlw	2
  2996  000B9E  6E21               	movwf	_Switch_Program,c
  2997                           
  2998                           ;State_Mchn.c: 731: Eeprom_Store();
  2999  000BA0  EC07  F010         	call	_Eeprom_Store	;wreg free
  3000  000BA4  D7ED               	goto	l5682
  3001  000BA6                     l5696:
  3002  000BA6  0E01               	movlw	1
  3003  000BA8  6E44               	movwf	Train_Path@To,c
  3004  000BAA  0E03               	movlw	3
  3005  000BAC  EC4C  F00A         	call	_Train_Path
  3006  000BB0  0900               	iorlw	0
  3007  000BB2  A4D8               	btfss	status,2,c
  3008  000BB4  D193               	goto	l5880
  3009                           
  3010                           ;State_Mchn.c: 741: {
  3011                           ;State_Mchn.c: 742: Switch_Program = 3;
  3012  000BB6  0E03               	movlw	3
  3013  000BB8  6E21               	movwf	_Switch_Program,c
  3014                           
  3015                           ;State_Mchn.c: 743: Eeprom_Store();
  3016  000BBA  EC07  F010         	call	_Eeprom_Store	;wreg free
  3017  000BBE  D7E0               	goto	l5682
  3018  000BC0                     l5706:
  3019  000BC0  0E02               	movlw	2
  3020  000BC2  6E44               	movwf	Train_Path@To,c
  3021  000BC4  0E01               	movlw	1
  3022  000BC6  EC4C  F00A         	call	_Train_Path
  3023  000BCA  0900               	iorlw	0
  3024  000BCC  A4D8               	btfss	status,2,c
  3025  000BCE  D186               	goto	l5880
  3026                           
  3027                           ;State_Mchn.c: 753: {
  3028                           ;State_Mchn.c: 754: Switch_Program = 0;
  3029  000BD0  0E00               	movlw	0
  3030  000BD2  6E21               	movwf	_Switch_Program,c
  3031                           
  3032                           ;State_Mchn.c: 755: Eeprom_Store();
  3033  000BD4  EC07  F010         	call	_Eeprom_Store	;wreg free
  3034  000BD8  D7D3               	goto	l5682
  3035  000BDA                     l5718:
  3036  000BDA  5021               	movf	_Switch_Program,w,c
  3037                           
  3038                           ; Switch size 1, requested type "space"
  3039                           ; Number of cases is 4, Range of values is 0 to 3
  3040                           ; switch strategies available:
  3041                           ; Name         Instructions Cycles
  3042                           ; simple_byte           13     7 (average)
  3043                           ;	Chosen strategy is simple_byte
  3044  000BDC  0A00               	xorlw	0	; case 0
  3045  000BDE  B4D8               	btfsc	status,2,c
  3046  000BE0  D7C3               	goto	l5676
  3047  000BE2  0A01               	xorlw	1	; case 1
  3048  000BE4  B4D8               	btfsc	status,2,c
  3049  000BE6  D7D2               	goto	l5686
  3050  000BE8  0A03               	xorlw	3	; case 2
  3051  000BEA  B4D8               	btfsc	status,2,c
  3052  000BEC  D7DC               	goto	l5696
  3053  000BEE  0A01               	xorlw	1	; case 3
  3054  000BF0  B4D8               	btfsc	status,2,c
  3055  000BF2  D7E6               	goto	l5706
  3056                           
  3057                           ;State_Mchn.c: 767: switch(Switch_Activate_Controls)
  3058  000BF4  D173               	goto	l5880
  3059  000BF6                     l5720:
  3060  000BF6  0E14               	movlw	20
  3061  000BF8  ECD7  F012         	call	_GETxAPIxVAL
  3062  000BFC  503A               	movf	?_GETxAPIxVAL,w,c
  3063  000BFE  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  3064  000C00  B4D8               	btfsc	status,2,c
  3065  000C02  D00D               	goto	l5728
  3066  000C04  0E16               	movlw	22
  3067  000C06  ECD7  F012         	call	_GETxAPIxVAL
  3068  000C0A  503A               	movf	?_GETxAPIxVAL,w,c
  3069  000C0C  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  3070  000C0E  B4D8               	btfsc	status,2,c
  3071  000C10  D006               	goto	l5728
  3072                           
  3073                           ;State_Mchn.c: 770: {
  3074                           ;State_Mchn.c: 771: Switch_Activate_Controls = 1;
  3075  000C12  0E01               	movlw	1
  3076  000C14  6E19               	movwf	_Switch_Activate_Controls,c
  3077                           
  3078                           ;State_Mchn.c: 772: Red_Led(3);
  3079  000C16  0E03               	movlw	3
  3080  000C18  EC12  F011         	call	_Red_Led
  3081                           
  3082                           ;State_Mchn.c: 773: }
  3083  000C1C  0012               	return	
  3084  000C1E                     l5728:
  3085                           
  3086                           ;State_Mchn.c: 774: else
  3087                           ;State_Mchn.c: 775: {
  3088                           ;State_Mchn.c: 776: Switch_Activate_Controls = 0;
  3089  000C1E  0E00               	movlw	0
  3090  000C20  6E19               	movwf	_Switch_Activate_Controls,c
  3091                           
  3092                           ;State_Mchn.c: 777: Red_Led(0);
  3093  000C22  0E00               	movlw	0
  3094  000C24  EC12  F011         	call	_Red_Led
  3095                           
  3096                           ;State_Mchn.c: 778: }
  3097                           ;State_Mchn.c: 779: break;
  3098  000C28  0012               	return	
  3099  000C2A                     l5732:
  3100  000C2A  0E14               	movlw	20
  3101  000C2C  ECD7  F012         	call	_GETxAPIxVAL
  3102  000C30  503A               	movf	?_GETxAPIxVAL,w,c
  3103  000C32  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  3104  000C34  A4D8               	btfss	status,2,c
  3105  000C36  D00D               	goto	l5740
  3106  000C38  0E16               	movlw	22
  3107  000C3A  ECD7  F012         	call	_GETxAPIxVAL
  3108  000C3E  503A               	movf	?_GETxAPIxVAL,w,c
  3109  000C40  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  3110  000C42  A4D8               	btfss	status,2,c
  3111  000C44  D006               	goto	l5740
  3112                           
  3113                           ;State_Mchn.c: 782: {
  3114                           ;State_Mchn.c: 783: Switch_Activate_Controls = 2;
  3115  000C46  0E02               	movlw	2
  3116  000C48  6E19               	movwf	_Switch_Activate_Controls,c
  3117                           
  3118                           ;State_Mchn.c: 784: Red_Led(3);
  3119  000C4A  0E03               	movlw	3
  3120  000C4C  EC12  F011         	call	_Red_Led
  3121                           
  3122                           ;State_Mchn.c: 785: }
  3123  000C50  D005               	goto	l5744
  3124  000C52                     l5740:
  3125                           
  3126                           ;State_Mchn.c: 786: else
  3127                           ;State_Mchn.c: 787: {
  3128                           ;State_Mchn.c: 788: Switch_Activate_Controls = 1;
  3129  000C52  0E01               	movlw	1
  3130  000C54  6E19               	movwf	_Switch_Activate_Controls,c
  3131                           
  3132                           ;State_Mchn.c: 789: Red_Led(3);
  3133  000C56  0E03               	movlw	3
  3134  000C58  EC12  F011         	call	_Red_Led
  3135  000C5C                     l5744:
  3136                           
  3137                           ;State_Mchn.c: 790: }
  3138                           ;State_Mchn.c: 791: Activate_Controls_Counter = 10000;
  3139  000C5C  0E27               	movlw	39
  3140  000C5E  0100               	movlb	0	; () banked
  3141  000C60  6FE9               	movwf	(_Activate_Controls_Counter+1)& (0+255),b
  3142  000C62  0E10               	movlw	16
  3143  000C64  6FE8               	movwf	_Activate_Controls_Counter& (0+255),b
  3144                           
  3145                           ;State_Mchn.c: 792: break;
  3146  000C66  0012               	return	
  3147  000C68                     l5746:
  3148  000C68  0E14               	movlw	20
  3149  000C6A  ECD7  F012         	call	_GETxAPIxVAL
  3150  000C6E  503A               	movf	?_GETxAPIxVAL,w,c
  3151  000C70  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  3152  000C72  A4D8               	btfss	status,2,c
  3153  000C74  D01A               	goto	l5756
  3154  000C76  0E16               	movlw	22
  3155  000C78  ECD7  F012         	call	_GETxAPIxVAL
  3156  000C7C  503A               	movf	?_GETxAPIxVAL,w,c
  3157  000C7E  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  3158  000C80  A4D8               	btfss	status,2,c
  3159  000C82  D013               	goto	l5756
  3160  000C84  0E15               	movlw	21
  3161  000C86  ECD7  F012         	call	_GETxAPIxVAL
  3162  000C8A  503A               	movf	?_GETxAPIxVAL,w,c
  3163  000C8C  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  3164  000C8E  A4D8               	btfss	status,2,c
  3165  000C90  D00C               	goto	l5756
  3166  000C92  0E13               	movlw	19
  3167  000C94  ECD7  F012         	call	_GETxAPIxVAL
  3168  000C98  503A               	movf	?_GETxAPIxVAL,w,c
  3169  000C9A  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  3170  000C9C  A4D8               	btfss	status,2,c
  3171  000C9E  D005               	goto	l5756
  3172                           
  3173                           ;State_Mchn.c: 795: {
  3174                           ;State_Mchn.c: 796: Activate_Controls_Counter--;
  3175  000CA0  0100               	movlb	0	; () banked
  3176  000CA2  07E8               	decf	_Activate_Controls_Counter& (0+255),f,b
  3177  000CA4  A0D8               	btfss	status,0,c
  3178  000CA6  07E9               	decf	(_Activate_Controls_Counter+1)& (0+255),f,b
  3179                           
  3180                           ;State_Mchn.c: 797: }
  3181  000CA8  D005               	goto	l5758
  3182  000CAA                     l5756:
  3183                           
  3184                           ;State_Mchn.c: 798: else
  3185                           ;State_Mchn.c: 799: {
  3186                           ;State_Mchn.c: 800: Activate_Controls_Counter = 10000;
  3187  000CAA  0E27               	movlw	39
  3188  000CAC  0100               	movlb	0	; () banked
  3189  000CAE  6FE9               	movwf	(_Activate_Controls_Counter+1)& (0+255),b
  3190  000CB0  0E10               	movlw	16
  3191  000CB2  6FE8               	movwf	_Activate_Controls_Counter& (0+255),b
  3192  000CB4                     l5758:
  3193                           
  3194                           ; BSR set to: 0
  3195                           ;State_Mchn.c: 801: }
  3196                           ;State_Mchn.c: 803: Red_Led(3);
  3197  000CB4  0E03               	movlw	3
  3198  000CB6  EC12  F011         	call	_Red_Led
  3199                           
  3200                           ;State_Mchn.c: 805: switch(GETxAPIxVAL(19))
  3201  000CBA  D042               	goto	l5786
  3202  000CBC                     l5760:
  3203  000CBC  0E00               	movlw	0
  3204  000CBE  D033               	goto	L16
  3205  000CC0                     l5762:
  3206  000CC0  0E07               	movlw	7
  3207  000CC2  ECD7  F012         	call	_GETxAPIxVAL
  3208  000CC6  C03A  F046         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  3209  000CCA  C03B  F047         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  3210  000CCE  0E06               	movlw	6
  3211  000CD0  ECD7  F012         	call	_GETxAPIxVAL
  3212  000CD4  503A               	movf	?_GETxAPIxVAL,w,c
  3213  000CD6  5C46               	subwf	??_Update_StateMchn,w,c
  3214  000CD8  503B               	movf	?_GETxAPIxVAL+1,w,c
  3215  000CDA  5847               	subwfb	??_Update_StateMchn+1,w,c
  3216  000CDC  A0D8               	btfss	status,0,c
  3217  000CDE  D003               	goto	l460
  3218                           
  3219                           ;State_Mchn.c: 813: {
  3220                           ;State_Mchn.c: 814: DECRxAPIxVAL(7);
  3221  000CE0  0E07               	movlw	7
  3222  000CE2  ECA4  F012         	call	_DECRxAPIxVAL
  3223  000CE6                     l460:
  3224                           
  3225                           ;State_Mchn.c: 815: }
  3226                           ;State_Mchn.c: 816: if(GETxAPIxVAL(8) <= GETxAPIxVAL(5))
  3227  000CE6  0E05               	movlw	5
  3228  000CE8  ECD7  F012         	call	_GETxAPIxVAL
  3229  000CEC  C03A  F046         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  3230  000CF0  C03B  F047         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  3231  000CF4  0E08               	movlw	8
  3232  000CF6  ECD7  F012         	call	_GETxAPIxVAL
  3233  000CFA  503A               	movf	?_GETxAPIxVAL,w,c
  3234  000CFC  5C46               	subwf	??_Update_StateMchn,w,c
  3235  000CFE  503B               	movf	?_GETxAPIxVAL+1,w,c
  3236  000D00  5847               	subwfb	??_Update_StateMchn+1,w,c
  3237  000D02  A0D8               	btfss	status,0,c
  3238  000D04  D003               	goto	l5768
  3239                           
  3240                           ;State_Mchn.c: 817: {
  3241                           ;State_Mchn.c: 818: INCRxAPIxVAL(8);
  3242  000D06  0E08               	movlw	8
  3243  000D08  ECB7  F012         	call	_INCRxAPIxVAL
  3244  000D0C                     l5768:
  3245                           
  3246                           ;State_Mchn.c: 819: }
  3247                           ;State_Mchn.c: 820: Switch_Adjust_LB = 1;
  3248  000D0C  0E01               	movlw	1
  3249  000D0E  D00B               	goto	L16
  3250  000D10                     l5770:
  3251  000D10  5002               	movf	_Adjust_Counter+1,w,c
  3252  000D12  E104               	bnz	u4500
  3253  000D14  0E14               	movlw	20
  3254  000D16  5C01               	subwf	_Adjust_Counter,w,c
  3255  000D18  A0D8               	btfss	status,0,c
  3256  000D1A  D007               	goto	l5776
  3257  000D1C                     u4500:
  3258                           
  3259                           ;State_Mchn.c: 824: {
  3260                           ;State_Mchn.c: 825: Adjust_Counter = 0;
  3261  000D1C  0E00               	movlw	0
  3262  000D1E  6E02               	movwf	_Adjust_Counter+1,c
  3263  000D20  0E00               	movlw	0
  3264  000D22  6E01               	movwf	_Adjust_Counter,c
  3265  000D24  D7CB               	goto	l5760
  3266  000D26                     L16:
  3267  000D26  6E1A               	movwf	_Switch_Adjust_LB,c
  3268                           
  3269                           ;State_Mchn.c: 828: }
  3270                           
  3271                           ;State_Mchn.c: 827: break;
  3272  000D28  D04B               	goto	l5814
  3273  000D2A                     l5776:
  3274                           
  3275                           ;State_Mchn.c: 829: else {Adjust_Counter++;}
  3276  000D2A  4A01               	infsnz	_Adjust_Counter,f,c
  3277  000D2C  2A02               	incf	_Adjust_Counter+1,f,c
  3278                           
  3279                           ;State_Mchn.c: 830: break;
  3280  000D2E  D048               	goto	l5814
  3281  000D30                     l5782:
  3282  000D30  501A               	movf	_Switch_Adjust_LB,w,c
  3283                           
  3284                           ; Switch size 1, requested type "space"
  3285                           ; Number of cases is 2, Range of values is 0 to 1
  3286                           ; switch strategies available:
  3287                           ; Name         Instructions Cycles
  3288                           ; simple_byte            7     4 (average)
  3289                           ;	Chosen strategy is simple_byte
  3290  000D32  0A00               	xorlw	0	; case 0
  3291  000D34  B4D8               	btfsc	status,2,c
  3292  000D36  D7C4               	goto	l5762
  3293  000D38  0A01               	xorlw	1	; case 1
  3294  000D3A  B4D8               	btfsc	status,2,c
  3295  000D3C  D7E9               	goto	l5770
  3296  000D3E  D7BE               	goto	l5760
  3297  000D40                     l5786:
  3298  000D40  0E13               	movlw	19
  3299  000D42  ECD7  F012         	call	_GETxAPIxVAL
  3300                           
  3301                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3302                           ; Switch size 1, requested type "space"
  3303                           ; Number of cases is 1, Range of values is 0 to 0
  3304                           ; switch strategies available:
  3305                           ; Name         Instructions Cycles
  3306                           ; simple_byte            4     3 (average)
  3307                           ;	Chosen strategy is simple_byte
  3308  000D46  503B               	movf	?_GETxAPIxVAL+1,w,c
  3309  000D48  0A00               	xorlw	0	; case 0
  3310  000D4A  A4D8               	btfss	status,2,c
  3311  000D4C  D039               	goto	l5814
  3312                           
  3313                           ; Switch size 1, requested type "space"
  3314                           ; Number of cases is 2, Range of values is 0 to 1
  3315                           ; switch strategies available:
  3316                           ; Name         Instructions Cycles
  3317                           ; simple_byte            7     4 (average)
  3318                           ;	Chosen strategy is simple_byte
  3319  000D4E  503A               	movf	?_GETxAPIxVAL,w,c
  3320  000D50  0A00               	xorlw	0	; case 0
  3321  000D52  B4D8               	btfsc	status,2,c
  3322  000D54  D7B3               	goto	l5760
  3323  000D56  0A01               	xorlw	1	; case 1
  3324  000D58  B4D8               	btfsc	status,2,c
  3325  000D5A  D7EA               	goto	l5782
  3326                           
  3327                           ;State_Mchn.c: 841: switch(GETxAPIxVAL(20))
  3328  000D5C  D031               	goto	l5814
  3329  000D5E                     l5788:
  3330  000D5E  0E00               	movlw	0
  3331  000D60  D022               	goto	L18
  3332  000D62                     l5790:
  3333  000D62  0E07               	movlw	7
  3334  000D64  ECD7  F012         	call	_GETxAPIxVAL
  3335  000D68  283A               	incf	?_GETxAPIxVAL,w,c
  3336  000D6A  0E03               	movlw	3
  3337  000D6C  583B               	subwfb	?_GETxAPIxVAL+1,w,c
  3338  000D6E  B0D8               	btfsc	status,0,c
  3339  000D70  D003               	goto	l474
  3340                           
  3341                           ;State_Mchn.c: 849: {
  3342                           ;State_Mchn.c: 850: INCRxAPIxVAL(7);
  3343  000D72  0E07               	movlw	7
  3344  000D74  ECB7  F012         	call	_INCRxAPIxVAL
  3345  000D78                     l474:
  3346                           
  3347                           ;State_Mchn.c: 851: }
  3348                           ;State_Mchn.c: 852: if(GETxAPIxVAL(8) >= 1)
  3349  000D78  0E08               	movlw	8
  3350  000D7A  ECD7  F012         	call	_GETxAPIxVAL
  3351  000D7E  503A               	movf	?_GETxAPIxVAL,w,c
  3352  000D80  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  3353  000D82  B4D8               	btfsc	status,2,c
  3354  000D84  D003               	goto	l5796
  3355                           
  3356                           ;State_Mchn.c: 853: {
  3357                           ;State_Mchn.c: 854: DECRxAPIxVAL(8);
  3358  000D86  0E08               	movlw	8
  3359  000D88  ECA4  F012         	call	_DECRxAPIxVAL
  3360  000D8C                     l5796:
  3361                           
  3362                           ;State_Mchn.c: 855: }
  3363                           ;State_Mchn.c: 856: Switch_Adjust_LF = 1;
  3364  000D8C  0E01               	movlw	1
  3365  000D8E  D00B               	goto	L18
  3366  000D90                     l5798:
  3367  000D90  5002               	movf	_Adjust_Counter+1,w,c
  3368  000D92  E104               	bnz	u4530
  3369  000D94  0E14               	movlw	20
  3370  000D96  5C01               	subwf	_Adjust_Counter,w,c
  3371  000D98  A0D8               	btfss	status,0,c
  3372  000D9A  D007               	goto	l5804
  3373  000D9C                     u4530:
  3374                           
  3375                           ;State_Mchn.c: 860: {
  3376                           ;State_Mchn.c: 861: Adjust_Counter = 0;
  3377  000D9C  0E00               	movlw	0
  3378  000D9E  6E02               	movwf	_Adjust_Counter+1,c
  3379  000DA0  0E00               	movlw	0
  3380  000DA2  6E01               	movwf	_Adjust_Counter,c
  3381  000DA4  D7DC               	goto	l5788
  3382  000DA6                     L18:
  3383  000DA6  6E1B               	movwf	_Switch_Adjust_LF,c
  3384                           
  3385                           ;State_Mchn.c: 864: }
  3386                           
  3387                           ;State_Mchn.c: 863: break;
  3388  000DA8  D042               	goto	l5840
  3389  000DAA                     l5804:
  3390                           
  3391                           ;State_Mchn.c: 865: else {Adjust_Counter++;}
  3392  000DAA  4A01               	infsnz	_Adjust_Counter,f,c
  3393  000DAC  2A02               	incf	_Adjust_Counter+1,f,c
  3394                           
  3395                           ;State_Mchn.c: 866: break;
  3396  000DAE  D03F               	goto	l5840
  3397  000DB0                     l5810:
  3398  000DB0  501B               	movf	_Switch_Adjust_LF,w,c
  3399                           
  3400                           ; Switch size 1, requested type "space"
  3401                           ; Number of cases is 2, Range of values is 0 to 1
  3402                           ; switch strategies available:
  3403                           ; Name         Instructions Cycles
  3404                           ; simple_byte            7     4 (average)
  3405                           ;	Chosen strategy is simple_byte
  3406  000DB2  0A00               	xorlw	0	; case 0
  3407  000DB4  B4D8               	btfsc	status,2,c
  3408  000DB6  D7D5               	goto	l5790
  3409  000DB8  0A01               	xorlw	1	; case 1
  3410  000DBA  B4D8               	btfsc	status,2,c
  3411  000DBC  D7E9               	goto	l5798
  3412  000DBE  D7CF               	goto	l5788
  3413  000DC0                     l5814:
  3414  000DC0  0E14               	movlw	20
  3415  000DC2  ECD7  F012         	call	_GETxAPIxVAL
  3416                           
  3417                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3418                           ; Switch size 1, requested type "space"
  3419                           ; Number of cases is 1, Range of values is 0 to 0
  3420                           ; switch strategies available:
  3421                           ; Name         Instructions Cycles
  3422                           ; simple_byte            4     3 (average)
  3423                           ;	Chosen strategy is simple_byte
  3424  000DC6  503B               	movf	?_GETxAPIxVAL+1,w,c
  3425  000DC8  0A00               	xorlw	0	; case 0
  3426  000DCA  A4D8               	btfss	status,2,c
  3427  000DCC  D030               	goto	l5840
  3428                           
  3429                           ; Switch size 1, requested type "space"
  3430                           ; Number of cases is 2, Range of values is 0 to 1
  3431                           ; switch strategies available:
  3432                           ; Name         Instructions Cycles
  3433                           ; simple_byte            7     4 (average)
  3434                           ;	Chosen strategy is simple_byte
  3435  000DCE  503A               	movf	?_GETxAPIxVAL,w,c
  3436  000DD0  0A00               	xorlw	0	; case 0
  3437  000DD2  B4D8               	btfsc	status,2,c
  3438  000DD4  D7C4               	goto	l5788
  3439  000DD6  0A01               	xorlw	1	; case 1
  3440  000DD8  B4D8               	btfsc	status,2,c
  3441  000DDA  D7EA               	goto	l5810
  3442                           
  3443                           ;State_Mchn.c: 876: switch(GETxAPIxVAL(21))
  3444  000DDC  D028               	goto	l5840
  3445  000DDE                     l5816:
  3446  000DDE  0E00               	movlw	0
  3447  000DE0  D019               	goto	L20
  3448  000DE2                     l5818:
  3449  000DE2  0E09               	movlw	9
  3450  000DE4  ECD7  F012         	call	_GETxAPIxVAL
  3451  000DE8  503B               	movf	?_GETxAPIxVAL+1,w,c
  3452  000DEA  E107               	bnz	l5822
  3453  000DEC  0EFB               	movlw	251
  3454  000DEE  5C3A               	subwf	?_GETxAPIxVAL,w,c
  3455  000DF0  B0D8               	btfsc	status,0,c
  3456  000DF2  D003               	goto	l5822
  3457                           
  3458                           ;State_Mchn.c: 884: {
  3459                           ;State_Mchn.c: 885: INCRxAPIxVAL(9);
  3460  000DF4  0E09               	movlw	9
  3461  000DF6  ECB7  F012         	call	_INCRxAPIxVAL
  3462  000DFA                     l5822:
  3463                           
  3464                           ;State_Mchn.c: 886: }
  3465                           ;State_Mchn.c: 887: Switch_Adjust_RB = 1;
  3466  000DFA  0E01               	movlw	1
  3467  000DFC  D00B               	goto	L20
  3468  000DFE                     l5824:
  3469  000DFE  5002               	movf	_Adjust_Counter+1,w,c
  3470  000E00  E104               	bnz	u4550
  3471  000E02  0E14               	movlw	20
  3472  000E04  5C01               	subwf	_Adjust_Counter,w,c
  3473  000E06  A0D8               	btfss	status,0,c
  3474  000E08  D007               	goto	l5830
  3475  000E0A                     u4550:
  3476                           
  3477                           ;State_Mchn.c: 891: {
  3478                           ;State_Mchn.c: 892: Adjust_Counter = 0;
  3479  000E0A  0E00               	movlw	0
  3480  000E0C  6E02               	movwf	_Adjust_Counter+1,c
  3481  000E0E  0E00               	movlw	0
  3482  000E10  6E01               	movwf	_Adjust_Counter,c
  3483  000E12  D7E5               	goto	l5816
  3484  000E14                     L20:
  3485  000E14  6E1C               	movwf	_Switch_Adjust_RB,c
  3486                           
  3487                           ;State_Mchn.c: 895: }
  3488                           
  3489                           ;State_Mchn.c: 894: break;
  3490  000E16  D040               	goto	l5866
  3491  000E18                     l5830:
  3492                           
  3493                           ;State_Mchn.c: 896: else {Adjust_Counter++;}
  3494  000E18  4A01               	infsnz	_Adjust_Counter,f,c
  3495  000E1A  2A02               	incf	_Adjust_Counter+1,f,c
  3496                           
  3497                           ;State_Mchn.c: 897: break;
  3498  000E1C  D03D               	goto	l5866
  3499  000E1E                     l5836:
  3500  000E1E  501C               	movf	_Switch_Adjust_RB,w,c
  3501                           
  3502                           ; Switch size 1, requested type "space"
  3503                           ; Number of cases is 2, Range of values is 0 to 1
  3504                           ; switch strategies available:
  3505                           ; Name         Instructions Cycles
  3506                           ; simple_byte            7     4 (average)
  3507                           ;	Chosen strategy is simple_byte
  3508  000E20  0A00               	xorlw	0	; case 0
  3509  000E22  B4D8               	btfsc	status,2,c
  3510  000E24  D7DE               	goto	l5818
  3511  000E26  0A01               	xorlw	1	; case 1
  3512  000E28  B4D8               	btfsc	status,2,c
  3513  000E2A  D7E9               	goto	l5824
  3514  000E2C  D7D8               	goto	l5816
  3515  000E2E                     l5840:
  3516  000E2E  0E15               	movlw	21
  3517  000E30  ECD7  F012         	call	_GETxAPIxVAL
  3518                           
  3519                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3520                           ; Switch size 1, requested type "space"
  3521                           ; Number of cases is 1, Range of values is 0 to 0
  3522                           ; switch strategies available:
  3523                           ; Name         Instructions Cycles
  3524                           ; simple_byte            4     3 (average)
  3525                           ;	Chosen strategy is simple_byte
  3526  000E34  503B               	movf	?_GETxAPIxVAL+1,w,c
  3527  000E36  0A00               	xorlw	0	; case 0
  3528  000E38  A4D8               	btfss	status,2,c
  3529  000E3A  D02E               	goto	l5866
  3530                           
  3531                           ; Switch size 1, requested type "space"
  3532                           ; Number of cases is 2, Range of values is 0 to 1
  3533                           ; switch strategies available:
  3534                           ; Name         Instructions Cycles
  3535                           ; simple_byte            7     4 (average)
  3536                           ;	Chosen strategy is simple_byte
  3537  000E3C  503A               	movf	?_GETxAPIxVAL,w,c
  3538  000E3E  0A00               	xorlw	0	; case 0
  3539  000E40  B4D8               	btfsc	status,2,c
  3540  000E42  D7CD               	goto	l5816
  3541  000E44  0A01               	xorlw	1	; case 1
  3542  000E46  B4D8               	btfsc	status,2,c
  3543  000E48  D7EA               	goto	l5836
  3544                           
  3545                           ;State_Mchn.c: 908: switch(GETxAPIxVAL(22))
  3546  000E4A  D026               	goto	l5866
  3547  000E4C                     l5842:
  3548  000E4C  0E00               	movlw	0
  3549  000E4E  D017               	goto	L22
  3550  000E50                     l5844:
  3551  000E50  0E09               	movlw	9
  3552  000E52  ECD7  F012         	call	_GETxAPIxVAL
  3553  000E56  503A               	movf	?_GETxAPIxVAL,w,c
  3554  000E58  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  3555  000E5A  B4D8               	btfsc	status,2,c
  3556  000E5C  D003               	goto	l5848
  3557                           
  3558                           ;State_Mchn.c: 916: {
  3559                           ;State_Mchn.c: 917: DECRxAPIxVAL(9);
  3560  000E5E  0E09               	movlw	9
  3561  000E60  ECA4  F012         	call	_DECRxAPIxVAL
  3562  000E64                     l5848:
  3563                           
  3564                           ;State_Mchn.c: 918: }
  3565                           ;State_Mchn.c: 919: Switch_Adjust_RF = 1;
  3566  000E64  0E01               	movlw	1
  3567  000E66  D00B               	goto	L22
  3568  000E68                     l5850:
  3569  000E68  5002               	movf	_Adjust_Counter+1,w,c
  3570  000E6A  E104               	bnz	u4570
  3571  000E6C  0E14               	movlw	20
  3572  000E6E  5C01               	subwf	_Adjust_Counter,w,c
  3573  000E70  A0D8               	btfss	status,0,c
  3574  000E72  D007               	goto	l5856
  3575  000E74                     u4570:
  3576                           
  3577                           ;State_Mchn.c: 923: {
  3578                           ;State_Mchn.c: 924: Adjust_Counter = 0;
  3579  000E74  0E00               	movlw	0
  3580  000E76  6E02               	movwf	_Adjust_Counter+1,c
  3581  000E78  0E00               	movlw	0
  3582  000E7A  6E01               	movwf	_Adjust_Counter,c
  3583  000E7C  D7E7               	goto	l5842
  3584  000E7E                     L22:
  3585  000E7E  6E1D               	movwf	_Switch_Adjust_RF,c
  3586                           
  3587                           ;State_Mchn.c: 927: }
  3588                           
  3589                           ;State_Mchn.c: 926: break;
  3590  000E80  D019               	goto	l5868
  3591  000E82                     l5856:
  3592                           
  3593                           ;State_Mchn.c: 928: else {Adjust_Counter++;}
  3594  000E82  4A01               	infsnz	_Adjust_Counter,f,c
  3595  000E84  2A02               	incf	_Adjust_Counter+1,f,c
  3596                           
  3597                           ;State_Mchn.c: 929: break;
  3598  000E86  D016               	goto	l5868
  3599  000E88                     l5862:
  3600  000E88  501D               	movf	_Switch_Adjust_RF,w,c
  3601                           
  3602                           ; Switch size 1, requested type "space"
  3603                           ; Number of cases is 2, Range of values is 0 to 1
  3604                           ; switch strategies available:
  3605                           ; Name         Instructions Cycles
  3606                           ; simple_byte            7     4 (average)
  3607                           ;	Chosen strategy is simple_byte
  3608  000E8A  0A00               	xorlw	0	; case 0
  3609  000E8C  B4D8               	btfsc	status,2,c
  3610  000E8E  D7E0               	goto	l5844
  3611  000E90  0A01               	xorlw	1	; case 1
  3612  000E92  B4D8               	btfsc	status,2,c
  3613  000E94  D7E9               	goto	l5850
  3614  000E96  D7DA               	goto	l5842
  3615  000E98                     l5866:
  3616  000E98  0E16               	movlw	22
  3617  000E9A  ECD7  F012         	call	_GETxAPIxVAL
  3618                           
  3619                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3620                           ; Switch size 1, requested type "space"
  3621                           ; Number of cases is 1, Range of values is 0 to 0
  3622                           ; switch strategies available:
  3623                           ; Name         Instructions Cycles
  3624                           ; simple_byte            4     3 (average)
  3625                           ;	Chosen strategy is simple_byte
  3626  000E9E  503B               	movf	?_GETxAPIxVAL+1,w,c
  3627  000EA0  0A00               	xorlw	0	; case 0
  3628  000EA2  A4D8               	btfss	status,2,c
  3629  000EA4  D007               	goto	l5868
  3630                           
  3631                           ; Switch size 1, requested type "space"
  3632                           ; Number of cases is 2, Range of values is 0 to 1
  3633                           ; switch strategies available:
  3634                           ; Name         Instructions Cycles
  3635                           ; simple_byte            7     4 (average)
  3636                           ;	Chosen strategy is simple_byte
  3637  000EA6  503A               	movf	?_GETxAPIxVAL,w,c
  3638  000EA8  0A00               	xorlw	0	; case 0
  3639  000EAA  B4D8               	btfsc	status,2,c
  3640  000EAC  D7CF               	goto	l5842
  3641  000EAE  0A01               	xorlw	1	; case 1
  3642  000EB0  B4D8               	btfsc	status,2,c
  3643  000EB2  D7EA               	goto	l5862
  3644  000EB4                     l5868:
  3645                           
  3646                           ;State_Mchn.c: 938: if(Activate_Controls_Counter <= 1)
  3647  000EB4  0100               	movlb	0	; () banked
  3648  000EB6  51E9               	movf	(_Activate_Controls_Counter+1)& (0+255),w,b
  3649  000EB8  E128               	bnz	l511
  3650  000EBA  0E02               	movlw	2
  3651  000EBC  0100               	movlb	0	; () banked
  3652  000EBE  5DE8               	subwf	_Activate_Controls_Counter& (0+255),w,b
  3653  000EC0  B0D8               	btfsc	status,0,c
  3654  000EC2  0012               	return	
  3655                           
  3656                           ; BSR set to: 0
  3657                           ;State_Mchn.c: 939: {
  3658                           ;State_Mchn.c: 940: Switch_Activate_Controls = 0;
  3659  000EC4  0E00               	movlw	0
  3660  000EC6  6E19               	movwf	_Switch_Activate_Controls,c
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;State_Mchn.c: 941: Red_Led(0);
  3664  000EC8  0E00               	movlw	0
  3665  000ECA  EC12  F011         	call	_Red_Led
  3666                           
  3667                           ;State_Mchn.c: 942: }
  3668                           ;State_Mchn.c: 943: break;
  3669  000ECE  0012               	return	
  3670  000ED0                     l5874:
  3671  000ED0  0E00               	movlw	0
  3672  000ED2  6E19               	movwf	_Switch_Activate_Controls,c
  3673                           
  3674                           ;State_Mchn.c: 946: Red_Led(0);
  3675  000ED4  0E00               	movlw	0
  3676  000ED6  EC12  F011         	call	_Red_Led
  3677                           
  3678                           ;State_Mchn.c: 948: }
  3679                           
  3680                           ;State_Mchn.c: 947: break;
  3681  000EDA  0012               	return	
  3682  000EDC                     l5880:
  3683  000EDC  5019               	movf	_Switch_Activate_Controls,w,c
  3684                           
  3685                           ; Switch size 1, requested type "space"
  3686                           ; Number of cases is 3, Range of values is 0 to 2
  3687                           ; switch strategies available:
  3688                           ; Name         Instructions Cycles
  3689                           ; simple_byte           10     6 (average)
  3690                           ;	Chosen strategy is simple_byte
  3691  000EDE  0A00               	xorlw	0	; case 0
  3692  000EE0  B4D8               	btfsc	status,2,c
  3693  000EE2  D689               	goto	l5720
  3694  000EE4  0A01               	xorlw	1	; case 1
  3695  000EE6  B4D8               	btfsc	status,2,c
  3696  000EE8  D6A0               	goto	l5732
  3697  000EEA  0A03               	xorlw	3	; case 2
  3698  000EEC  B4D8               	btfsc	status,2,c
  3699  000EEE  D6BC               	goto	l5746
  3700  000EF0  D7EF               	goto	l5874
  3701  000EF2                     l5884:
  3702  000EF2  5020               	movf	_Switch_Main,w,c
  3703                           
  3704                           ; Switch size 1, requested type "space"
  3705                           ; Number of cases is 3, Range of values is 0 to 2
  3706                           ; switch strategies available:
  3707                           ; Name         Instructions Cycles
  3708                           ; simple_byte           10     6 (average)
  3709                           ;	Chosen strategy is simple_byte
  3710  000EF4  0A00               	xorlw	0	; case 0
  3711  000EF6  B4D8               	btfsc	status,2,c
  3712  000EF8  EF76  F003         	goto	l5420
  3713  000EFC  0A01               	xorlw	1	; case 1
  3714  000EFE  B4D8               	btfsc	status,2,c
  3715  000F00  D488               	goto	l5504
  3716  000F02  0A03               	xorlw	3	; case 2
  3717  000F04  A4D8               	btfss	status,2,c
  3718  000F06  0012               	return	
  3719  000F08  D668               	goto	l5718
  3720  000F0A                     l511:
  3721  000F0A  0012               	return		;funcret
  3722  000F0C                     __end_of_Update_StateMchn:
  3723                           	opt stack 0
  3724                           tblptru	equ	0xFF8
  3725                           tblptrh	equ	0xFF7
  3726                           tblptrl	equ	0xFF6
  3727                           tablat	equ	0xFF5
  3728                           postinc0	equ	0xFEE
  3729                           wreg	equ	0xFE8
  3730                           postdec1	equ	0xFE5
  3731                           fsr1l	equ	0xFE1
  3732                           status	equ	0xFD8
  3733                           
  3734 ;; *************** function _Train_Path *****************
  3735 ;; Defined at:
  3736 ;;		line 1068 in file "../State_Mchn.c"
  3737 ;; Parameters:    Size  Location     Type
  3738 ;;  From            1    wreg     unsigned char 
  3739 ;;  To              1   25[COMRAM] unsigned char 
  3740 ;; Auto vars:     Size  Location     Type
  3741 ;;  From            1   26[COMRAM] unsigned char 
  3742 ;; Return value:  Size  Location     Type
  3743 ;;                  1    wreg      unsigned char 
  3744 ;; Registers used:
  3745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3746 ;; Tracked objects:
  3747 ;;		On entry : 0/0
  3748 ;;		On exit  : 0/0
  3749 ;;		Unchanged: 0/0
  3750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3751 ;;      Params:         1       0       0       0       0       0       0       0       0
  3752 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3753 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3754 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3755 ;;Total ram usage:        2 bytes
  3756 ;; Hardware stack levels used:    1
  3757 ;; Hardware stack levels required when called:    6
  3758 ;; This function calls:
  3759 ;;		_GETxAPIxVAL
  3760 ;;		_Junction
  3761 ;;		_Left_Mountain_From_The_Left
  3762 ;;		_Left_Mountain_From_The_Right
  3763 ;;		_Right_Mountain_From_The_Left
  3764 ;;		_Right_Mountain_From_The_Right
  3765 ;;		_SetDCPWM1
  3766 ;;		_Train_Move_Left_Brake
  3767 ;;		_Train_Move_Left_Start
  3768 ;;		_Train_Move_Right_Brake
  3769 ;;		_Train_Move_Right_Start
  3770 ;; This function is called by:
  3771 ;;		_Update_StateMchn
  3772 ;; This function uses a non-reentrant model
  3773 ;;
  3774                           
  3775                           	psect	text2
  3776  001498                     __ptext2:
  3777                           	opt stack 0
  3778  001498                     _Train_Path:
  3779                           	opt stack 23
  3780                           
  3781                           ;incstack = 0
  3782                           ;Train_Path@From stored from wreg
  3783  001498  6E45               	movwf	Train_Path@From,c
  3784                           
  3785                           ;State_Mchn.c: 1070: static char Return_Val = (char)-1;
  3786                           ;State_Mchn.c: 1072: switch(Switch_Train_Path)
  3787  00149A  D1A4               	goto	l5020
  3788  00149C                     l4740:
  3789  00149C  0E00               	movlw	0
  3790  00149E  6E3D               	movwf	Junction@Straight_Bend,c
  3791  0014A0  0E01               	movlw	1
  3792  0014A2  EC67  F010         	call	_Junction
  3793  0014A6  D00D               	goto	L49
  3794  0014A8                     L47:
  3795  0014A8  6E23               	movwf	_Switch_Train_Path,c
  3796  0014AA  D02A               	goto	l4780
  3797  0014AC                     l4748:
  3798  0014AC  0E01               	movlw	1
  3799  0014AE  6E3D               	movwf	Junction@Straight_Bend,c
  3800  0014B0  0E01               	movlw	1
  3801  0014B2  EC67  F010         	call	_Junction
  3802  0014B6  D005               	goto	L49
  3803  0014B8                     l4756:
  3804  0014B8  0E01               	movlw	1
  3805  0014BA  6E3D               	movwf	Junction@Straight_Bend,c
  3806  0014BC  0E00               	movlw	0
  3807  0014BE  EC67  F010         	call	_Junction
  3808  0014C2                     L49:
  3809  0014C2  0900               	iorlw	0
  3810  0014C4  A4D8               	btfss	status,2,c
  3811  0014C6  D16D               	goto	l4972
  3812                           
  3813                           ;State_Mchn.c: 1091: {
  3814                           ;State_Mchn.c: 1092: Switch_Train_Path = 1;
  3815  0014C8  0E01               	movlw	1
  3816  0014CA  D7EE               	goto	L47
  3817  0014CC                     l4764:
  3818  0014CC  0E00               	movlw	0
  3819  0014CE  6E3D               	movwf	Junction@Straight_Bend,c
  3820  0014D0  0E00               	movlw	0
  3821  0014D2  EC67  F010         	call	_Junction
  3822  0014D6  D7F5               	goto	L49
  3823  0014D8                     l4774:
  3824  0014D8  5045               	movf	Train_Path@From,w,c
  3825                           
  3826                           ; Switch size 1, requested type "space"
  3827                           ; Number of cases is 4, Range of values is 0 to 3
  3828                           ; switch strategies available:
  3829                           ; Name         Instructions Cycles
  3830                           ; simple_byte           13     7 (average)
  3831                           ;	Chosen strategy is simple_byte
  3832  0014DA  0A00               	xorlw	0	; case 0
  3833  0014DC  B4D8               	btfsc	status,2,c
  3834  0014DE  D7EC               	goto	l4756
  3835  0014E0  0A01               	xorlw	1	; case 1
  3836  0014E2  B4D8               	btfsc	status,2,c
  3837  0014E4  D7F3               	goto	l4764
  3838  0014E6  0A03               	xorlw	3	; case 2
  3839  0014E8  B4D8               	btfsc	status,2,c
  3840  0014EA  D7D8               	goto	l4740
  3841  0014EC  0A01               	xorlw	1	; case 3
  3842  0014EE  B4D8               	btfsc	status,2,c
  3843  0014F0  D7DD               	goto	l4748
  3844                           
  3845                           ;State_Mchn.c: 1106: break;
  3846  0014F2  D1A1               	goto	l5022
  3847  0014F4                     l4776:
  3848  0014F4  0E00               	movlw	0
  3849  0014F6  6E3D               	movwf	Junction@Straight_Bend,c
  3850  0014F8  0E01               	movlw	1
  3851  0014FA  EC67  F010         	call	_Junction
  3852  0014FE  D00D               	goto	L51
  3853  001500                     l4780:
  3854                           
  3855                           ;State_Mchn.c: 1113: Return_Val = (char)-1;
  3856  001500  684D               	setf	Train_Path@Return_Val,c
  3857  001502  D14F               	goto	l4972
  3858  001504                     l4784:
  3859  001504  0E01               	movlw	1
  3860  001506  6E3D               	movwf	Junction@Straight_Bend,c
  3861  001508  0E01               	movlw	1
  3862  00150A  EC67  F010         	call	_Junction
  3863  00150E  D005               	goto	L51
  3864  001510                     l4792:
  3865  001510  0E01               	movlw	1
  3866  001512  6E3D               	movwf	Junction@Straight_Bend,c
  3867  001514  0E00               	movlw	0
  3868  001516  EC67  F010         	call	_Junction
  3869  00151A                     L51:
  3870  00151A  0900               	iorlw	0
  3871  00151C  A4D8               	btfss	status,2,c
  3872  00151E  D141               	goto	l4972
  3873                           
  3874                           ;State_Mchn.c: 1125: {
  3875                           ;State_Mchn.c: 1126: Switch_Train_Path = 2;
  3876  001520  0E02               	movlw	2
  3877  001522  D7C2               	goto	L47
  3878  001524                     l4800:
  3879  001524  0E00               	movlw	0
  3880  001526  6E3D               	movwf	Junction@Straight_Bend,c
  3881  001528  0E00               	movlw	0
  3882  00152A  EC67  F010         	call	_Junction
  3883  00152E  D7F5               	goto	L51
  3884  001530                     l4810:
  3885  001530  5044               	movf	Train_Path@To,w,c
  3886                           
  3887                           ; Switch size 1, requested type "space"
  3888                           ; Number of cases is 4, Range of values is 0 to 3
  3889                           ; switch strategies available:
  3890                           ; Name         Instructions Cycles
  3891                           ; simple_byte           13     7 (average)
  3892                           ;	Chosen strategy is simple_byte
  3893  001532  0A00               	xorlw	0	; case 0
  3894  001534  B4D8               	btfsc	status,2,c
  3895  001536  D7EC               	goto	l4792
  3896  001538  0A01               	xorlw	1	; case 1
  3897  00153A  B4D8               	btfsc	status,2,c
  3898  00153C  D7F3               	goto	l4800
  3899  00153E  0A03               	xorlw	3	; case 2
  3900  001540  B4D8               	btfsc	status,2,c
  3901  001542  D7D8               	goto	l4776
  3902  001544  0A01               	xorlw	1	; case 3
  3903  001546  B4D8               	btfsc	status,2,c
  3904  001548  D7DD               	goto	l4784
  3905                           
  3906                           ;State_Mchn.c: 1140: break;
  3907  00154A  D175               	goto	l5022
  3908  00154C                     l4812:
  3909  00154C  ECB0  F00E         	call	_Train_Move_Right_Start	;wreg free
  3910  001550  D008               	goto	L54
  3911  001552                     l4820:
  3912  001552  ECB0  F00E         	call	_Train_Move_Right_Start	;wreg free
  3913  001556  D005               	goto	L54
  3914  001558                     l4828:
  3915  001558  EC2C  F00F         	call	_Train_Move_Left_Start	;wreg free
  3916  00155C  D002               	goto	L54
  3917  00155E                     l4836:
  3918  00155E  EC2C  F00F         	call	_Train_Move_Left_Start	;wreg free
  3919  001562                     L54:
  3920  001562  0900               	iorlw	0
  3921  001564  A4D8               	btfss	status,2,c
  3922  001566  D11D               	goto	l4972
  3923                           
  3924                           ;State_Mchn.c: 1166: {
  3925                           ;State_Mchn.c: 1167: Switch_Train_Path = 3;
  3926  001568  0E03               	movlw	3
  3927  00156A  D79E               	goto	L47
  3928  00156C                     l4846:
  3929  00156C  5044               	movf	Train_Path@To,w,c
  3930                           
  3931                           ; Switch size 1, requested type "space"
  3932                           ; Number of cases is 4, Range of values is 0 to 3
  3933                           ; switch strategies available:
  3934                           ; Name         Instructions Cycles
  3935                           ; simple_byte           13     7 (average)
  3936                           ;	Chosen strategy is simple_byte
  3937  00156E  0A00               	xorlw	0	; case 0
  3938  001570  B4D8               	btfsc	status,2,c
  3939  001572  D7F2               	goto	l4828
  3940  001574  0A01               	xorlw	1	; case 1
  3941  001576  B4D8               	btfsc	status,2,c
  3942  001578  D7F2               	goto	l4836
  3943  00157A  0A03               	xorlw	3	; case 2
  3944  00157C  B4D8               	btfsc	status,2,c
  3945  00157E  D7E6               	goto	l4812
  3946  001580  0A01               	xorlw	1	; case 3
  3947  001582  B4D8               	btfsc	status,2,c
  3948  001584  D7E6               	goto	l4820
  3949                           
  3950                           ;State_Mchn.c: 1174: break;
  3951  001586  D157               	goto	l5022
  3952  001588                     l4848:
  3953  001588  0E0C               	movlw	12
  3954  00158A  ECD7  F012         	call	_GETxAPIxVAL
  3955  00158E  043A               	decf	?_GETxAPIxVAL,w,c
  3956  001590  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  3957  001592  A4D8               	btfss	status,2,c
  3958  001594  D002               	goto	l4852
  3959  001596                     l4850:
  3960                           
  3961                           ;State_Mchn.c: 1179: Switch_Train_Path = 4;
  3962  001596  0E04               	movlw	4
  3963  001598  D103               	goto	L44
  3964  00159A                     l4852:
  3965                           
  3966                           ;State_Mchn.c: 1181: else if(GETxAPIxVAL(25) == 1){
  3967  00159A  0E19               	movlw	25
  3968  00159C  ECD7  F012         	call	_GETxAPIxVAL
  3969  0015A0  043A               	decf	?_GETxAPIxVAL,w,c
  3970  0015A2  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  3971  0015A4  A4D8               	btfss	status,2,c
  3972  0015A6  D002               	goto	l4856
  3973  0015A8                     l4854:
  3974                           
  3975                           ;State_Mchn.c: 1182: Switch_Train_Path = 5;
  3976  0015A8  0E05               	movlw	5
  3977  0015AA  D0FA               	goto	L44
  3978  0015AC                     l4856:
  3979                           
  3980                           ;State_Mchn.c: 1184: else if(GETxAPIxVAL(26) == 1){
  3981  0015AC  0E1A               	movlw	26
  3982  0015AE  ECD7  F012         	call	_GETxAPIxVAL
  3983  0015B2  043A               	decf	?_GETxAPIxVAL,w,c
  3984  0015B4  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  3985  0015B6  A4D8               	btfss	status,2,c
  3986  0015B8  D002               	goto	l4860
  3987  0015BA                     l4858:
  3988                           
  3989                           ;State_Mchn.c: 1185: Switch_Train_Path = 6;
  3990  0015BA  0E06               	movlw	6
  3991  0015BC  D0F1               	goto	L44
  3992  0015BE                     l4860:
  3993                           
  3994                           ;State_Mchn.c: 1187: else if(GETxAPIxVAL(28) == 1){
  3995  0015BE  0E1C               	movlw	28
  3996  0015C0  ECD7  F012         	call	_GETxAPIxVAL
  3997  0015C4  043A               	decf	?_GETxAPIxVAL,w,c
  3998  0015C6  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  3999  0015C8  A4D8               	btfss	status,2,c
  4000  0015CA  D002               	goto	l4864
  4001  0015CC                     l4862:
  4002                           
  4003                           ;State_Mchn.c: 1188: Switch_Train_Path = 7;
  4004  0015CC  0E07               	movlw	7
  4005  0015CE  D0E8               	goto	L44
  4006  0015D0                     l4864:
  4007                           
  4008                           ;State_Mchn.c: 1190: else if(GETxAPIxVAL(27) == 1){
  4009  0015D0  0E1B               	movlw	27
  4010  0015D2  ECD7  F012         	call	_GETxAPIxVAL
  4011  0015D6  043A               	decf	?_GETxAPIxVAL,w,c
  4012  0015D8  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  4013  0015DA  A4D8               	btfss	status,2,c
  4014  0015DC  D002               	goto	l4868
  4015  0015DE                     l4866:
  4016                           
  4017                           ;State_Mchn.c: 1191: Switch_Train_Path = 8;
  4018  0015DE  0E08               	movlw	8
  4019  0015E0  D0DF               	goto	L44
  4020  0015E2                     l4868:
  4021                           
  4022                           ;State_Mchn.c: 1193: else{
  4023                           ;State_Mchn.c: 1194: SetDCPWM1(GETxAPIxVAL(7));
  4024  0015E2  0E07               	movlw	7
  4025  0015E4  ECD7  F012         	call	_GETxAPIxVAL
  4026  0015E8  C03A  F03D         	movff	?_GETxAPIxVAL,SetDCPWM1@dutycycle
  4027  0015EC  C03B  F03E         	movff	?_GETxAPIxVAL+1,SetDCPWM1@dutycycle+1
  4028  0015F0  EC29  F012         	call	_SetDCPWM1	;wreg free
  4029                           
  4030                           ;State_Mchn.c: 1195: Train_Move_Pwm_Count = GETxAPIxVAL(7);
  4031  0015F4  0E07               	movlw	7
  4032  0015F6  ECD7  F012         	call	_GETxAPIxVAL
  4033  0015FA  D097               	goto	L46
  4034  0015FC                     l4872:
  4035  0015FC  0E0D               	movlw	13
  4036  0015FE  ECD7  F012         	call	_GETxAPIxVAL
  4037  001602  043A               	decf	?_GETxAPIxVAL,w,c
  4038  001604  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  4039  001606  B4D8               	btfsc	status,2,c
  4040  001608  D7C6               	goto	l4850
  4041                           
  4042                           ;State_Mchn.c: 1202: else if(GETxAPIxVAL(25) == 1){
  4043                           
  4044                           ;State_Mchn.c: 1201: }
  4045                           
  4046                           ;State_Mchn.c: 1200: Switch_Train_Path = 4;
  4047  00160A  0E19               	movlw	25
  4048  00160C  ECD7  F012         	call	_GETxAPIxVAL
  4049  001610  043A               	decf	?_GETxAPIxVAL,w,c
  4050  001612  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  4051  001614  B4D8               	btfsc	status,2,c
  4052  001616  D7C8               	goto	l4854
  4053                           
  4054                           ;State_Mchn.c: 1205: else if(GETxAPIxVAL(26) == 1){
  4055                           
  4056                           ;State_Mchn.c: 1204: }
  4057                           
  4058                           ;State_Mchn.c: 1203: Switch_Train_Path = 5;
  4059  001618  0E1A               	movlw	26
  4060  00161A  ECD7  F012         	call	_GETxAPIxVAL
  4061  00161E  043A               	decf	?_GETxAPIxVAL,w,c
  4062  001620  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  4063  001622  B4D8               	btfsc	status,2,c
  4064  001624  D7CA               	goto	l4858
  4065                           
  4066                           ;State_Mchn.c: 1208: else if(GETxAPIxVAL(28) == 1){
  4067                           
  4068                           ;State_Mchn.c: 1207: }
  4069                           
  4070                           ;State_Mchn.c: 1206: Switch_Train_Path = 6;
  4071  001626  0E1C               	movlw	28
  4072  001628  ECD7  F012         	call	_GETxAPIxVAL
  4073  00162C  043A               	decf	?_GETxAPIxVAL,w,c
  4074  00162E  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  4075  001630  B4D8               	btfsc	status,2,c
  4076  001632  D7CC               	goto	l4862
  4077                           
  4078                           ;State_Mchn.c: 1211: else if(GETxAPIxVAL(27) == 1){
  4079                           
  4080                           ;State_Mchn.c: 1210: }
  4081                           
  4082                           ;State_Mchn.c: 1209: Switch_Train_Path = 7;
  4083  001634  0E1B               	movlw	27
  4084  001636  ECD7  F012         	call	_GETxAPIxVAL
  4085  00163A  043A               	decf	?_GETxAPIxVAL,w,c
  4086  00163C  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  4087  00163E  B4D8               	btfsc	status,2,c
  4088  001640  D7CE               	goto	l4866
  4089                           
  4090                           ;State_Mchn.c: 1214: else{
  4091                           ;State_Mchn.c: 1215: SetDCPWM1(GETxAPIxVAL(7));
  4092                           
  4093                           ;State_Mchn.c: 1213: }
  4094                           
  4095                           ;State_Mchn.c: 1212: Switch_Train_Path = 8;
  4096  001642  0E07               	movlw	7
  4097  001644  ECD7  F012         	call	_GETxAPIxVAL
  4098  001648  C03A  F03D         	movff	?_GETxAPIxVAL,SetDCPWM1@dutycycle
  4099  00164C  C03B  F03E         	movff	?_GETxAPIxVAL+1,SetDCPWM1@dutycycle+1
  4100  001650  EC29  F012         	call	_SetDCPWM1	;wreg free
  4101                           
  4102                           ;State_Mchn.c: 1216: Train_Move_Pwm_Count = GETxAPIxVAL(7);
  4103  001654  0E07               	movlw	7
  4104  001656  ECD7  F012         	call	_GETxAPIxVAL
  4105  00165A  D067               	goto	L46
  4106  00165C                     l4896:
  4107  00165C  0E0E               	movlw	14
  4108  00165E  ECD7  F012         	call	_GETxAPIxVAL
  4109  001662  043A               	decf	?_GETxAPIxVAL,w,c
  4110  001664  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  4111  001666  B4D8               	btfsc	status,2,c
  4112  001668  D796               	goto	l4850
  4113                           
  4114                           ;State_Mchn.c: 1224: else if(GETxAPIxVAL(25) == 1){
  4115                           
  4116                           ;State_Mchn.c: 1223: }
  4117                           
  4118                           ;State_Mchn.c: 1221: {
  4119                           ;State_Mchn.c: 1222: Switch_Train_Path = 4;
  4120  00166A  0E19               	movlw	25
  4121  00166C  ECD7  F012         	call	_GETxAPIxVAL
  4122  001670  043A               	decf	?_GETxAPIxVAL,w,c
  4123  001672  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  4124  001674  B4D8               	btfsc	status,2,c
  4125  001676  D030               	goto	l4926
  4126                           
  4127                           ;State_Mchn.c: 1227: else if(GETxAPIxVAL(26) == 1){
  4128                           
  4129                           ;State_Mchn.c: 1226: }
  4130                           
  4131                           ;State_Mchn.c: 1225: Switch_Train_Path = 9;
  4132  001678  0E1A               	movlw	26
  4133  00167A  ECD7  F012         	call	_GETxAPIxVAL
  4134  00167E  043A               	decf	?_GETxAPIxVAL,w,c
  4135  001680  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  4136  001682  B4D8               	btfsc	status,2,c
  4137  001684  D032               	goto	l4930
  4138                           
  4139                           ;State_Mchn.c: 1230: else if(GETxAPIxVAL(28) == 1){
  4140                           
  4141                           ;State_Mchn.c: 1229: }
  4142                           
  4143                           ;State_Mchn.c: 1228: Switch_Train_Path = 10;
  4144  001686  0E1C               	movlw	28
  4145  001688  ECD7  F012         	call	_GETxAPIxVAL
  4146  00168C  043A               	decf	?_GETxAPIxVAL,w,c
  4147  00168E  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  4148  001690  B4D8               	btfsc	status,2,c
  4149  001692  D034               	goto	l4934
  4150                           
  4151                           ;State_Mchn.c: 1233: else if(GETxAPIxVAL(27) == 1){
  4152                           
  4153                           ;State_Mchn.c: 1232: }
  4154                           
  4155                           ;State_Mchn.c: 1231: Switch_Train_Path = 11;
  4156  001694  0E1B               	movlw	27
  4157  001696  ECD7  F012         	call	_GETxAPIxVAL
  4158  00169A  043A               	decf	?_GETxAPIxVAL,w,c
  4159  00169C  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  4160  00169E  B4D8               	btfsc	status,2,c
  4161  0016A0  D036               	goto	l4938
  4162                           
  4163                           ;State_Mchn.c: 1236: else{
  4164                           ;State_Mchn.c: 1237: SetDCPWM1(GETxAPIxVAL(8));
  4165                           
  4166                           ;State_Mchn.c: 1235: }
  4167                           
  4168                           ;State_Mchn.c: 1234: Switch_Train_Path = 12;
  4169  0016A2  0E08               	movlw	8
  4170  0016A4  ECD7  F012         	call	_GETxAPIxVAL
  4171  0016A8  C03A  F03D         	movff	?_GETxAPIxVAL,SetDCPWM1@dutycycle
  4172  0016AC  C03B  F03E         	movff	?_GETxAPIxVAL+1,SetDCPWM1@dutycycle+1
  4173  0016B0  EC29  F012         	call	_SetDCPWM1	;wreg free
  4174                           
  4175                           ;State_Mchn.c: 1238: Train_Move_Pwm_Count = GETxAPIxVAL(8);
  4176  0016B4  0E08               	movlw	8
  4177  0016B6  ECD7  F012         	call	_GETxAPIxVAL
  4178  0016BA  D037               	goto	L46
  4179  0016BC                     l4920:
  4180  0016BC  0E0F               	movlw	15
  4181  0016BE  ECD7  F012         	call	_GETxAPIxVAL
  4182  0016C2  043A               	decf	?_GETxAPIxVAL,w,c
  4183  0016C4  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  4184  0016C6  B4D8               	btfsc	status,2,c
  4185  0016C8  D766               	goto	l4850
  4186                           
  4187                           ;State_Mchn.c: 1246: else if(GETxAPIxVAL(25) == 1){
  4188                           
  4189                           ;State_Mchn.c: 1245: }
  4190                           
  4191                           ;State_Mchn.c: 1243: {
  4192                           ;State_Mchn.c: 1244: Switch_Train_Path = 4;
  4193  0016CA  0E19               	movlw	25
  4194  0016CC  ECD7  F012         	call	_GETxAPIxVAL
  4195  0016D0  043A               	decf	?_GETxAPIxVAL,w,c
  4196  0016D2  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  4197  0016D4  A4D8               	btfss	status,2,c
  4198  0016D6  D002               	goto	l4928
  4199  0016D8                     l4926:
  4200                           
  4201                           ;State_Mchn.c: 1247: Switch_Train_Path = 9;
  4202  0016D8  0E09               	movlw	9
  4203  0016DA  D062               	goto	L44
  4204  0016DC                     l4928:
  4205                           
  4206                           ;State_Mchn.c: 1249: else if(GETxAPIxVAL(26) == 1){
  4207  0016DC  0E1A               	movlw	26
  4208  0016DE  ECD7  F012         	call	_GETxAPIxVAL
  4209  0016E2  043A               	decf	?_GETxAPIxVAL,w,c
  4210  0016E4  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  4211  0016E6  A4D8               	btfss	status,2,c
  4212  0016E8  D002               	goto	l4932
  4213  0016EA                     l4930:
  4214                           
  4215                           ;State_Mchn.c: 1250: Switch_Train_Path = 10;
  4216  0016EA  0E0A               	movlw	10
  4217  0016EC  D059               	goto	L44
  4218  0016EE                     l4932:
  4219                           
  4220                           ;State_Mchn.c: 1252: else if(GETxAPIxVAL(28) == 1){
  4221  0016EE  0E1C               	movlw	28
  4222  0016F0  ECD7  F012         	call	_GETxAPIxVAL
  4223  0016F4  043A               	decf	?_GETxAPIxVAL,w,c
  4224  0016F6  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  4225  0016F8  A4D8               	btfss	status,2,c
  4226  0016FA  D002               	goto	l4936
  4227  0016FC                     l4934:
  4228                           
  4229                           ;State_Mchn.c: 1253: Switch_Train_Path = 11;
  4230  0016FC  0E0B               	movlw	11
  4231  0016FE  D050               	goto	L44
  4232  001700                     l4936:
  4233                           
  4234                           ;State_Mchn.c: 1255: else if(GETxAPIxVAL(27) == 1){
  4235  001700  0E1B               	movlw	27
  4236  001702  ECD7  F012         	call	_GETxAPIxVAL
  4237  001706  043A               	decf	?_GETxAPIxVAL,w,c
  4238  001708  103B               	iorwf	?_GETxAPIxVAL+1,w,c
  4239  00170A  A4D8               	btfss	status,2,c
  4240  00170C  D002               	goto	l4940
  4241  00170E                     l4938:
  4242                           
  4243                           ;State_Mchn.c: 1256: Switch_Train_Path = 12;
  4244  00170E  0E0C               	movlw	12
  4245  001710  D047               	goto	L44
  4246  001712                     l4940:
  4247                           
  4248                           ;State_Mchn.c: 1258: else{
  4249                           ;State_Mchn.c: 1259: SetDCPWM1(GETxAPIxVAL(8));
  4250  001712  0E08               	movlw	8
  4251  001714  ECD7  F012         	call	_GETxAPIxVAL
  4252  001718  C03A  F03D         	movff	?_GETxAPIxVAL,SetDCPWM1@dutycycle
  4253  00171C  C03B  F03E         	movff	?_GETxAPIxVAL+1,SetDCPWM1@dutycycle+1
  4254  001720  EC29  F012         	call	_SetDCPWM1	;wreg free
  4255                           
  4256                           ;State_Mchn.c: 1260: Train_Move_Pwm_Count = GETxAPIxVAL(8);
  4257  001724  0E08               	movlw	8
  4258  001726  ECD7  F012         	call	_GETxAPIxVAL
  4259  00172A                     L46:
  4260  00172A  C03A  F048         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  4261  00172E  C03B  F049         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  4262  001732  D037               	goto	l4972
  4263  001734                     l4946:
  4264  001734  5044               	movf	Train_Path@To,w,c
  4265                           
  4266                           ; Switch size 1, requested type "space"
  4267                           ; Number of cases is 4, Range of values is 0 to 3
  4268                           ; switch strategies available:
  4269                           ; Name         Instructions Cycles
  4270                           ; simple_byte           13     7 (average)
  4271                           ;	Chosen strategy is simple_byte
  4272  001736  0A00               	xorlw	0	; case 0
  4273  001738  B4D8               	btfsc	status,2,c
  4274  00173A  D790               	goto	l4896
  4275  00173C  0A01               	xorlw	1	; case 1
  4276  00173E  B4D8               	btfsc	status,2,c
  4277  001740  D7BD               	goto	l4920
  4278  001742  0A03               	xorlw	3	; case 2
  4279  001744  B4D8               	btfsc	status,2,c
  4280  001746  D720               	goto	l4848
  4281  001748  0A01               	xorlw	1	; case 3
  4282  00174A  B4D8               	btfsc	status,2,c
  4283  00174C  D757               	goto	l4872
  4284                           
  4285                           ;State_Mchn.c: 1266: break;
  4286  00174E  D073               	goto	l5022
  4287  001750                     l4948:
  4288  001750  EC2F  F00E         	call	_Train_Move_Right_Brake	;wreg free
  4289  001754  D008               	goto	L62
  4290  001756                     l4952:
  4291  001756  EC2F  F00E         	call	_Train_Move_Right_Brake	;wreg free
  4292  00175A  D005               	goto	L62
  4293  00175C                     l4956:
  4294  00175C  ECAD  F00D         	call	_Train_Move_Left_Brake	;wreg free
  4295  001760  D002               	goto	L62
  4296  001762                     l4960:
  4297  001762  ECAD  F00D         	call	_Train_Move_Left_Brake	;wreg free
  4298  001766                     L62:
  4299  001766  0900               	iorlw	0
  4300  001768  A4D8               	btfss	status,2,c
  4301  00176A  D01B               	goto	l4972
  4302                           
  4303                           ;State_Mchn.c: 1295: {
  4304                           ;State_Mchn.c: 1296: Switch_Train_Path = 0;
  4305  00176C  0E00               	movlw	0
  4306  00176E  6E23               	movwf	_Switch_Train_Path,c
  4307                           
  4308                           ;State_Mchn.c: 1297: Return_Val = (char)0;
  4309  001770  0E00               	movlw	0
  4310  001772  6E4D               	movwf	Train_Path@Return_Val,c
  4311                           
  4312                           ;State_Mchn.c: 1298: break;
  4313  001774  D060               	goto	l5022
  4314  001776                     l4966:
  4315  001776  5044               	movf	Train_Path@To,w,c
  4316                           
  4317                           ; Switch size 1, requested type "space"
  4318                           ; Number of cases is 4, Range of values is 0 to 3
  4319                           ; switch strategies available:
  4320                           ; Name         Instructions Cycles
  4321                           ; simple_byte           13     7 (average)
  4322                           ;	Chosen strategy is simple_byte
  4323  001778  0A00               	xorlw	0	; case 0
  4324  00177A  B4D8               	btfsc	status,2,c
  4325  00177C  D7EF               	goto	l4956
  4326  00177E  0A01               	xorlw	1	; case 1
  4327  001780  B4D8               	btfsc	status,2,c
  4328  001782  D7EF               	goto	l4960
  4329  001784  0A03               	xorlw	3	; case 2
  4330  001786  B4D8               	btfsc	status,2,c
  4331  001788  D7E3               	goto	l4948
  4332  00178A  0A01               	xorlw	1	; case 3
  4333  00178C  B4D8               	btfsc	status,2,c
  4334  00178E  D7E3               	goto	l4952
  4335                           
  4336                           ;State_Mchn.c: 1304: break;
  4337  001790  D052               	goto	l5022
  4338  001792                     l4968:
  4339                           
  4340                           ;State_Mchn.c: 1307: if(Left_Mountain_From_The_Left(1) == (char)0){
  4341  001792  0E01               	movlw	1
  4342  001794  EC09  F013         	call	_Left_Mountain_From_The_Left
  4343  001798                     L39:
  4344  001798  0900               	iorlw	0
  4345  00179A  A4D8               	btfss	status,2,c
  4346  00179C  D04C               	goto	l5022
  4347                           
  4348                           ;State_Mchn.c: 1308: Switch_Train_Path = 3;
  4349  00179E  0E03               	movlw	3
  4350  0017A0                     L44:
  4351  0017A0  6E23               	movwf	_Switch_Train_Path,c
  4352  0017A2                     l4972:
  4353                           
  4354                           ;State_Mchn.c: 1309: Return_Val = (char)-1;
  4355  0017A2  684D               	setf	Train_Path@Return_Val,c
  4356                           
  4357                           ;State_Mchn.c: 1310: }
  4358                           ;State_Mchn.c: 1311: break;
  4359  0017A4  D048               	goto	l5022
  4360  0017A6                     l4974:
  4361                           
  4362                           ;State_Mchn.c: 1314: if(Left_Mountain_From_The_Left(2) == (char)0){
  4363  0017A6  0E02               	movlw	2
  4364  0017A8  EC09  F013         	call	_Left_Mountain_From_The_Left
  4365  0017AC  D7F5               	goto	L39
  4366  0017AE                     l4980:
  4367                           
  4368                           ;State_Mchn.c: 1321: if(Right_Mountain_From_The_Left(3) == (char)0){
  4369  0017AE  0E03               	movlw	3
  4370  0017B0  EC06  F013         	call	_Right_Mountain_From_The_Left
  4371  0017B4  D7F1               	goto	L39
  4372  0017B6                     l4986:
  4373                           
  4374                           ;State_Mchn.c: 1328: if(Right_Mountain_From_The_Left(4) == (char)0){
  4375  0017B6  0E04               	movlw	4
  4376  0017B8  EC06  F013         	call	_Right_Mountain_From_The_Left
  4377  0017BC  D7ED               	goto	L39
  4378  0017BE                     l4992:
  4379                           
  4380                           ;State_Mchn.c: 1335: if(Right_Mountain_From_The_Right(4) == (char)0){
  4381  0017BE  0E04               	movlw	4
  4382  0017C0  ECC2  F010         	call	_Right_Mountain_From_The_Right
  4383  0017C4  D7E9               	goto	L39
  4384  0017C6                     l4998:
  4385                           
  4386                           ;State_Mchn.c: 1342: if(Right_Mountain_From_The_Right(3) == (char)0){
  4387  0017C6  0E03               	movlw	3
  4388  0017C8  ECC2  F010         	call	_Right_Mountain_From_The_Right
  4389  0017CC  D7E5               	goto	L39
  4390  0017CE                     l5004:
  4391                           
  4392                           ;State_Mchn.c: 1349: if(Left_Mountain_From_The_Right(2) == (char)0){
  4393  0017CE  0E02               	movlw	2
  4394  0017D0  EC0C  F013         	call	_Left_Mountain_From_The_Right
  4395  0017D4  D7E1               	goto	L39
  4396  0017D6                     l5010:
  4397                           
  4398                           ;State_Mchn.c: 1356: if(Left_Mountain_From_The_Right(1) == (char)0){
  4399  0017D6  0E01               	movlw	1
  4400  0017D8  EC0C  F013         	call	_Left_Mountain_From_The_Right
  4401  0017DC  D7DD               	goto	L39
  4402  0017DE                     l5016:
  4403  0017DE  0E00               	movlw	0
  4404  0017E0  6E23               	movwf	_Switch_Train_Path,c
  4405                           
  4406                           ;State_Mchn.c: 1365: }
  4407  0017E2  D029               	goto	l5022
  4408  0017E4                     l5020:
  4409  0017E4  5023               	movf	_Switch_Train_Path,w,c
  4410                           
  4411                           ; Switch size 1, requested type "space"
  4412                           ; Number of cases is 13, Range of values is 0 to 12
  4413                           ; switch strategies available:
  4414                           ; Name         Instructions Cycles
  4415                           ; simple_byte           40    21 (average)
  4416                           ;	Chosen strategy is simple_byte
  4417  0017E6  0A00               	xorlw	0	; case 0
  4418  0017E8  B4D8               	btfsc	status,2,c
  4419  0017EA  D676               	goto	l4774
  4420  0017EC  0A01               	xorlw	1	; case 1
  4421  0017EE  B4D8               	btfsc	status,2,c
  4422  0017F0  D69F               	goto	l4810
  4423  0017F2  0A03               	xorlw	3	; case 2
  4424  0017F4  B4D8               	btfsc	status,2,c
  4425  0017F6  D6BA               	goto	l4846
  4426  0017F8  0A01               	xorlw	1	; case 3
  4427  0017FA  B4D8               	btfsc	status,2,c
  4428  0017FC  D79B               	goto	l4946
  4429  0017FE  0A07               	xorlw	7	; case 4
  4430  001800  B4D8               	btfsc	status,2,c
  4431  001802  D7B9               	goto	l4966
  4432  001804  0A01               	xorlw	1	; case 5
  4433  001806  B4D8               	btfsc	status,2,c
  4434  001808  D7C4               	goto	l4968
  4435  00180A  0A03               	xorlw	3	; case 6
  4436  00180C  B4D8               	btfsc	status,2,c
  4437  00180E  D7CB               	goto	l4974
  4438  001810  0A01               	xorlw	1	; case 7
  4439  001812  B4D8               	btfsc	status,2,c
  4440  001814  D7CC               	goto	l4980
  4441  001816  0A0F               	xorlw	15	; case 8
  4442  001818  B4D8               	btfsc	status,2,c
  4443  00181A  D7CD               	goto	l4986
  4444  00181C  0A01               	xorlw	1	; case 9
  4445  00181E  B4D8               	btfsc	status,2,c
  4446  001820  D7CE               	goto	l4992
  4447  001822  0A03               	xorlw	3	; case 10
  4448  001824  B4D8               	btfsc	status,2,c
  4449  001826  D7CF               	goto	l4998
  4450  001828  0A01               	xorlw	1	; case 11
  4451  00182A  B4D8               	btfsc	status,2,c
  4452  00182C  D7D0               	goto	l5004
  4453  00182E  0A07               	xorlw	7	; case 12
  4454  001830  B4D8               	btfsc	status,2,c
  4455  001832  D7D1               	goto	l5010
  4456  001834  D7D4               	goto	l5016
  4457  001836                     l5022:
  4458                           
  4459                           ;State_Mchn.c: 1367: return(Return_Val);
  4460  001836  504D               	movf	Train_Path@Return_Val,w,c
  4461  001838  0012               	return	
  4462  00183A                     __end_of_Train_Path:
  4463                           	opt stack 0
  4464                           tblptru	equ	0xFF8
  4465                           tblptrh	equ	0xFF7
  4466                           tblptrl	equ	0xFF6
  4467                           tablat	equ	0xFF5
  4468                           postinc0	equ	0xFEE
  4469                           wreg	equ	0xFE8
  4470                           postdec1	equ	0xFE5
  4471                           fsr1l	equ	0xFE1
  4472                           status	equ	0xFD8
  4473                           
  4474 ;; *************** function _Train_Move_Right_Start *****************
  4475 ;; Defined at:
  4476 ;;		line 1645 in file "../State_Mchn.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;		None
  4479 ;; Auto vars:     Size  Location     Type
  4480 ;;		None
  4481 ;; Return value:  Size  Location     Type
  4482 ;;                  1    wreg      unsigned char 
  4483 ;; Registers used:
  4484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4485 ;; Tracked objects:
  4486 ;;		On entry : 0/0
  4487 ;;		On exit  : 0/0
  4488 ;;		Unchanged: 0/0
  4489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4490 ;;      Params:         0       0       0       0       0       0       0       0       0
  4491 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4492 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4493 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4494 ;;Total ram usage:        0 bytes
  4495 ;; Hardware stack levels used:    1
  4496 ;; Hardware stack levels required when called:    5
  4497 ;; This function calls:
  4498 ;;		_GETxAPIxVAL
  4499 ;;		_SetDCPWM1
  4500 ;; This function is called by:
  4501 ;;		_Train_Path
  4502 ;; This function uses a non-reentrant model
  4503 ;;
  4504                           
  4505                           	psect	text3
  4506  001D60                     __ptext3:
  4507                           	opt stack 0
  4508  001D60                     _Train_Move_Right_Start:
  4509                           	opt stack 23
  4510                           
  4511                           ;State_Mchn.c: 1647: static char Return_Val = (char)-1;
  4512                           ;State_Mchn.c: 1648: static unsigned int Train_Move_Wait_Time = 0;
  4513                           ;State_Mchn.c: 1650: switch(Switch_Train_Move)
  4514                           
  4515                           ;incstack = 0
  4516  001D60  D06B               	goto	l4200
  4517  001D62                     l4152:
  4518  001D62  0E04               	movlw	4
  4519  001D64  ECD7  F012         	call	_GETxAPIxVAL
  4520  001D68  503A               	movf	?_GETxAPIxVAL,w,c
  4521  001D6A  0100               	movlb	0	; () banked
  4522  001D6C  5DE6               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  4523  001D6E  503B               	movf	?_GETxAPIxVAL+1,w,c
  4524  001D70  0100               	movlb	0	; () banked
  4525  001D72  59E7               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4526  001D74  A0D8               	btfss	status,0,c
  4527  001D76  D008               	goto	l4158
  4528                           
  4529                           ; BSR set to: 0
  4530                           ;State_Mchn.c: 1655: {
  4531                           ;State_Mchn.c: 1656: Switch_Train_Move = 1;
  4532  001D78  0E01               	movlw	1
  4533  001D7A  6E22               	movwf	_Switch_Train_Move,c
  4534                           
  4535                           ;State_Mchn.c: 1657: Train_Move_Wait_Time = 0;
  4536  001D7C  0E00               	movlw	0
  4537  001D7E  0100               	movlb	0	; () banked
  4538  001D80  6FE7               	movwf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),b
  4539  001D82  0E00               	movlw	0
  4540  001D84  6FE6               	movwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),b
  4541  001D86  D055               	goto	l4196
  4542  001D88                     l4158:
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;State_Mchn.c: 1660: }
  4546                           ;State_Mchn.c: 1661: Train_Move_Wait_Time++;
  4547  001D88  0100               	movlb	0	; () banked
  4548  001D8A  4BE6               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  4549  001D8C  2BE7               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4550                           
  4551                           ; BSR set to: 0
  4552                           ;State_Mchn.c: 1662: Switch_Train_Move = 0;
  4553  001D8E  0E00               	movlw	0
  4554  001D90  6E22               	movwf	_Switch_Train_Move,c
  4555  001D92  D04F               	goto	l4196
  4556  001D94                     l4164:
  4557  001D94  0E06               	movlw	6
  4558  001D96  ECD7  F012         	call	_GETxAPIxVAL
  4559  001D9A  C03A  F03D         	movff	?_GETxAPIxVAL,SetDCPWM1@dutycycle
  4560  001D9E  C03B  F03E         	movff	?_GETxAPIxVAL+1,SetDCPWM1@dutycycle+1
  4561  001DA2  EC29  F012         	call	_SetDCPWM1	;wreg free
  4562                           
  4563                           ;State_Mchn.c: 1667: Train_Move_Pwm_Count = GETxAPIxVAL(6);
  4564  001DA6  0E06               	movlw	6
  4565  001DA8  ECD7  F012         	call	_GETxAPIxVAL
  4566  001DAC  C03A  F048         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  4567  001DB0  C03B  F049         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  4568                           
  4569                           ;State_Mchn.c: 1668: PORTCbits.RC0 = 0;
  4570  001DB4  9082               	bcf	3970,0,c	;volatile
  4571                           
  4572                           ;State_Mchn.c: 1669: Return_Val = (char)-1;
  4573  001DB6  0100               	movlb	0	; () banked
  4574  001DB8  69F3               	setf	Train_Move_Right_Start@Return_Val& (0+255),b
  4575  001DBA  D012               	goto	l4180
  4576  001DBC                     l4172:
  4577  001DBC  0E02               	movlw	2
  4578  001DBE  ECD7  F012         	call	_GETxAPIxVAL
  4579  001DC2  503A               	movf	?_GETxAPIxVAL,w,c
  4580  001DC4  0100               	movlb	0	; () banked
  4581  001DC6  5DE6               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  4582  001DC8  503B               	movf	?_GETxAPIxVAL+1,w,c
  4583  001DCA  0100               	movlb	0	; () banked
  4584  001DCC  59E7               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4585  001DCE  A0D8               	btfss	status,0,c
  4586  001DD0  D002               	goto	l739
  4587                           
  4588                           ; BSR set to: 0
  4589                           ;State_Mchn.c: 1674: {
  4590                           ;State_Mchn.c: 1675: Switch_Train_Move = 3;
  4591  001DD2  0E03               	movlw	3
  4592  001DD4  D7D2               	goto	L55
  4593  001DD6                     l739:
  4594                           
  4595                           ; BSR set to: 0
  4596                           ;State_Mchn.c: 1679: }
  4597                           ;State_Mchn.c: 1680: Return_Val = (char)-1;
  4598  001DD6  0100               	movlb	0	; () banked
  4599  001DD8  69F3               	setf	Train_Move_Right_Start@Return_Val& (0+255),b
  4600                           
  4601                           ; BSR set to: 0
  4602                           ;State_Mchn.c: 1681: Train_Move_Wait_Time++;
  4603  001DDA  0100               	movlb	0	; () banked
  4604  001DDC  4BE6               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  4605  001DDE  2BE7               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4606  001DE0                     l4180:
  4607                           
  4608                           ; BSR set to: 0
  4609                           ;State_Mchn.c: 1682: Switch_Train_Move = 2;
  4610  001DE0  0E02               	movlw	2
  4611  001DE2  6E22               	movwf	_Switch_Train_Move,c
  4612                           
  4613                           ;State_Mchn.c: 1683: break;
  4614  001DE4  D036               	goto	l4202
  4615  001DE6                     l4182:
  4616  001DE6  C048  F03D         	movff	_Train_Move_Pwm_Count,SetDCPWM1@dutycycle
  4617  001DEA  C049  F03E         	movff	_Train_Move_Pwm_Count+1,SetDCPWM1@dutycycle+1
  4618  001DEE  EC29  F012         	call	_SetDCPWM1	;wreg free
  4619                           
  4620                           ;State_Mchn.c: 1686: if (Train_Move_Pwm_Count >= GETxAPIxVAL(7))
  4621  001DF2  0E07               	movlw	7
  4622  001DF4  ECD7  F012         	call	_GETxAPIxVAL
  4623  001DF8  503A               	movf	?_GETxAPIxVAL,w,c
  4624  001DFA  5C48               	subwf	_Train_Move_Pwm_Count,w,c
  4625  001DFC  503B               	movf	?_GETxAPIxVAL+1,w,c
  4626  001DFE  5849               	subwfb	_Train_Move_Pwm_Count+1,w,c
  4627  001E00  A0D8               	btfss	status,0,c
  4628  001E02  D006               	goto	l4188
  4629                           
  4630                           ;State_Mchn.c: 1687: {
  4631                           ;State_Mchn.c: 1688: Switch_Train_Move = 0;
  4632  001E04  0E00               	movlw	0
  4633  001E06  6E22               	movwf	_Switch_Train_Move,c
  4634                           
  4635                           ;State_Mchn.c: 1689: Return_Val = (char)0;
  4636  001E08  0E00               	movlw	0
  4637  001E0A  0100               	movlb	0	; () banked
  4638  001E0C  6FF3               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4639                           
  4640                           ;State_Mchn.c: 1690: break;
  4641  001E0E  D021               	goto	l4202
  4642  001E10                     l4188:
  4643                           
  4644                           ;State_Mchn.c: 1691: }
  4645                           ;State_Mchn.c: 1692: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  4646  001E10  0E0A               	movlw	10
  4647  001E12  ECD7  F012         	call	_GETxAPIxVAL
  4648  001E16  503A               	movf	?_GETxAPIxVAL,w,c
  4649  001E18  5C07               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  4650  001E1A  503B               	movf	?_GETxAPIxVAL+1,w,c
  4651  001E1C  5808               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  4652  001E1E  A0D8               	btfss	status,0,c
  4653  001E20  D006               	goto	l4194
  4654                           
  4655                           ;State_Mchn.c: 1693: {
  4656                           ;State_Mchn.c: 1694: Train_Move_Pwm_Count++;
  4657  001E22  4A48               	infsnz	_Train_Move_Pwm_Count,f,c
  4658  001E24  2A49               	incf	_Train_Move_Pwm_Count+1,f,c
  4659                           
  4660                           ;State_Mchn.c: 1695: Train_Move_Pwm_Fast_Count = 0;
  4661  001E26  0E00               	movlw	0
  4662  001E28  6E08               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  4663  001E2A  0E00               	movlw	0
  4664  001E2C  6E07               	movwf	_Train_Move_Pwm_Fast_Count,c
  4665  001E2E                     l4194:
  4666                           
  4667                           ;State_Mchn.c: 1696: }
  4668                           ;State_Mchn.c: 1697: Train_Move_Pwm_Fast_Count++;
  4669  001E2E  4A07               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  4670  001E30  2A08               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  4671  001E32                     l4196:
  4672                           
  4673                           ;State_Mchn.c: 1698: Return_Val = (char)-1;
  4674  001E32  0100               	movlb	0	; () banked
  4675  001E34  69F3               	setf	Train_Move_Right_Start@Return_Val& (0+255),b
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;State_Mchn.c: 1702: }
  4679                           
  4680                           ; BSR set to: 0
  4681                           
  4682                           ;State_Mchn.c: 1701: default : break;
  4683                           
  4684                           ;State_Mchn.c: 1699: break;
  4685  001E36  D00D               	goto	l4202
  4686  001E38                     l4200:
  4687  001E38  5022               	movf	_Switch_Train_Move,w,c
  4688                           
  4689                           ; Switch size 1, requested type "space"
  4690                           ; Number of cases is 4, Range of values is 0 to 3
  4691                           ; switch strategies available:
  4692                           ; Name         Instructions Cycles
  4693                           ; simple_byte           13     7 (average)
  4694                           ;	Chosen strategy is simple_byte
  4695  001E3A  0A00               	xorlw	0	; case 0
  4696  001E3C  B4D8               	btfsc	status,2,c
  4697  001E3E  D791               	goto	l4152
  4698  001E40  0A01               	xorlw	1	; case 1
  4699  001E42  B4D8               	btfsc	status,2,c
  4700  001E44  D7A7               	goto	l4164
  4701  001E46  0A03               	xorlw	3	; case 2
  4702  001E48  B4D8               	btfsc	status,2,c
  4703  001E4A  D7B8               	goto	l4172
  4704  001E4C  0A01               	xorlw	1	; case 3
  4705  001E4E  B4D8               	btfsc	status,2,c
  4706  001E50  D7CA               	goto	l4182
  4707  001E52                     l4202:
  4708                           
  4709                           ;State_Mchn.c: 1704: return(Return_Val);
  4710  001E52  0100               	movlb	0	; () banked
  4711  001E54  51F3               	movf	Train_Move_Right_Start@Return_Val& (0+255),w,b
  4712  001E56  0012               	return	
  4713  001E58                     __end_of_Train_Move_Right_Start:
  4714                           	opt stack 0
  4715                           tblptru	equ	0xFF8
  4716                           tblptrh	equ	0xFF7
  4717                           tblptrl	equ	0xFF6
  4718                           tablat	equ	0xFF5
  4719                           postinc0	equ	0xFEE
  4720                           wreg	equ	0xFE8
  4721                           postdec1	equ	0xFE5
  4722                           fsr1l	equ	0xFE1
  4723                           status	equ	0xFD8
  4724                           
  4725 ;; *************** function _Train_Move_Right_Brake *****************
  4726 ;; Defined at:
  4727 ;;		line 1722 in file "../State_Mchn.c"
  4728 ;; Parameters:    Size  Location     Type
  4729 ;;		None
  4730 ;; Auto vars:     Size  Location     Type
  4731 ;;		None
  4732 ;; Return value:  Size  Location     Type
  4733 ;;                  1    wreg      unsigned char 
  4734 ;; Registers used:
  4735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4736 ;; Tracked objects:
  4737 ;;		On entry : 0/0
  4738 ;;		On exit  : 0/0
  4739 ;;		Unchanged: 0/0
  4740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4741 ;;      Params:         0       0       0       0       0       0       0       0       0
  4742 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4743 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4744 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4745 ;;Total ram usage:        0 bytes
  4746 ;; Hardware stack levels used:    1
  4747 ;; Hardware stack levels required when called:    5
  4748 ;; This function calls:
  4749 ;;		_GETxAPIxVAL
  4750 ;;		_SetDCPWM1
  4751 ;; This function is called by:
  4752 ;;		_Train_Path
  4753 ;; This function uses a non-reentrant model
  4754 ;;
  4755                           
  4756                           	psect	text4
  4757  001C5E                     __ptext4:
  4758                           	opt stack 0
  4759  001C5E                     _Train_Move_Right_Brake:
  4760                           	opt stack 23
  4761                           
  4762                           ;State_Mchn.c: 1724: static char Return_Val = (char)-1;
  4763                           ;State_Mchn.c: 1725: static unsigned int Train_Move_Wait_Time = 0;
  4764                           ;State_Mchn.c: 1727: switch(Switch_Train_Move)
  4765                           
  4766                           ; BSR set to: 0
  4767                           ;incstack = 0
  4768  001C5E  D070               	goto	l4314
  4769  001C60                     l4266:
  4770  001C60  C048  F03D         	movff	_Train_Move_Pwm_Count,SetDCPWM1@dutycycle
  4771  001C64  C049  F03E         	movff	_Train_Move_Pwm_Count+1,SetDCPWM1@dutycycle+1
  4772  001C68  EC29  F012         	call	_SetDCPWM1	;wreg free
  4773                           
  4774                           ;State_Mchn.c: 1730: if (Train_Move_Pwm_Count <= GETxAPIxVAL(6))
  4775  001C6C  0E06               	movlw	6
  4776  001C6E  ECD7  F012         	call	_GETxAPIxVAL
  4777  001C72  5048               	movf	_Train_Move_Pwm_Count,w,c
  4778  001C74  5C3A               	subwf	?_GETxAPIxVAL,w,c
  4779  001C76  5049               	movf	_Train_Move_Pwm_Count+1,w,c
  4780  001C78  583B               	subwfb	?_GETxAPIxVAL+1,w,c
  4781  001C7A  A0D8               	btfss	status,0,c
  4782  001C7C  D003               	goto	l4274
  4783                           
  4784                           ;State_Mchn.c: 1731: {
  4785                           ;State_Mchn.c: 1732: Switch_Train_Move = 1;
  4786  001C7E  0E01               	movlw	1
  4787  001C80  6E22               	movwf	_Switch_Train_Move,c
  4788  001C82  D040               	goto	l4300
  4789  001C84                     l4274:
  4790                           
  4791                           ;State_Mchn.c: 1735: }
  4792                           ;State_Mchn.c: 1736: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(9))
  4793  001C84  0E09               	movlw	9
  4794  001C86  ECD7  F012         	call	_GETxAPIxVAL
  4795  001C8A  503A               	movf	?_GETxAPIxVAL,w,c
  4796  001C8C  5C07               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  4797  001C8E  503B               	movf	?_GETxAPIxVAL+1,w,c
  4798  001C90  5808               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  4799  001C92  A0D8               	btfss	status,0,c
  4800  001C94  D007               	goto	l4280
  4801                           
  4802                           ;State_Mchn.c: 1737: {
  4803                           ;State_Mchn.c: 1738: Train_Move_Pwm_Count--;
  4804  001C96  0648               	decf	_Train_Move_Pwm_Count,f,c
  4805  001C98  A0D8               	btfss	status,0,c
  4806  001C9A  0649               	decf	_Train_Move_Pwm_Count+1,f,c
  4807                           
  4808                           ;State_Mchn.c: 1739: Train_Move_Pwm_Fast_Count = 0;
  4809  001C9C  0E00               	movlw	0
  4810  001C9E  6E08               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  4811  001CA0  0E00               	movlw	0
  4812  001CA2  6E07               	movwf	_Train_Move_Pwm_Fast_Count,c
  4813  001CA4                     l4280:
  4814                           
  4815                           ;State_Mchn.c: 1740: }
  4816                           ;State_Mchn.c: 1741: Train_Move_Pwm_Fast_Count++;
  4817  001CA4  4A07               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  4818  001CA6  2A08               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  4819  001CA8  D02D               	goto	l4300
  4820  001CAA                     l4284:
  4821  001CAA  0E02               	movlw	2
  4822  001CAC  ECD7  F012         	call	_GETxAPIxVAL
  4823  001CB0  503A               	movf	?_GETxAPIxVAL,w,c
  4824  001CB2  0100               	movlb	0	; () banked
  4825  001CB4  5DE4               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  4826  001CB6  503B               	movf	?_GETxAPIxVAL+1,w,c
  4827  001CB8  0100               	movlb	0	; () banked
  4828  001CBA  59E5               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  4829  001CBC  A0D8               	btfss	status,0,c
  4830  001CBE  D008               	goto	l757
  4831                           
  4832                           ; BSR set to: 0
  4833                           ;State_Mchn.c: 1746: {
  4834                           ;State_Mchn.c: 1747: Switch_Train_Move = 2;
  4835  001CC0  0E02               	movlw	2
  4836  001CC2  6E22               	movwf	_Switch_Train_Move,c
  4837                           
  4838                           ;State_Mchn.c: 1748: Train_Move_Wait_Time = 0;
  4839  001CC4  0E00               	movlw	0
  4840  001CC6  0100               	movlb	0	; () banked
  4841  001CC8  6FE5               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  4842  001CCA  0E00               	movlw	0
  4843  001CCC  6FE4               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  4844  001CCE  D01A               	goto	l4300
  4845  001CD0                     l757:
  4846                           
  4847                           ; BSR set to: 0
  4848                           ;State_Mchn.c: 1751: }
  4849                           ;State_Mchn.c: 1752: Return_Val = (char)-1;
  4850  001CD0  0100               	movlb	0	; () banked
  4851  001CD2  69F2               	setf	Train_Move_Right_Brake@Return_Val& (0+255),b
  4852                           
  4853                           ; BSR set to: 0
  4854                           ;State_Mchn.c: 1753: Train_Move_Wait_Time++;
  4855  001CD4  0100               	movlb	0	; () banked
  4856  001CD6  4BE4               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  4857  001CD8  2BE5               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  4858                           
  4859                           ; BSR set to: 0
  4860                           ;State_Mchn.c: 1754: Switch_Train_Move = 1;
  4861  001CDA  0E01               	movlw	1
  4862  001CDC  6E22               	movwf	_Switch_Train_Move,c
  4863                           
  4864                           ;State_Mchn.c: 1755: break;
  4865  001CDE  D03D               	goto	l4316
  4866  001CE0                     l4294:
  4867  001CE0  0E06               	movlw	6
  4868  001CE2  ECD7  F012         	call	_GETxAPIxVAL
  4869  001CE6  C03A  F03D         	movff	?_GETxAPIxVAL,SetDCPWM1@dutycycle
  4870  001CEA  C03B  F03E         	movff	?_GETxAPIxVAL+1,SetDCPWM1@dutycycle+1
  4871  001CEE  EC29  F012         	call	_SetDCPWM1	;wreg free
  4872                           
  4873                           ;State_Mchn.c: 1758: PORTCbits.RC0 = 1;
  4874  001CF2  8082               	bsf	3970,0,c	;volatile
  4875                           
  4876                           ;State_Mchn.c: 1759: Train_Move_Pwm_Count = GETxAPIxVAL(6);
  4877  001CF4  0E06               	movlw	6
  4878  001CF6  ECD7  F012         	call	_GETxAPIxVAL
  4879  001CFA  C03A  F048         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  4880  001CFE  C03B  F049         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  4881  001D02  D01C               	goto	l4308
  4882  001D04                     l4300:
  4883                           
  4884                           ;State_Mchn.c: 1761: Return_Val = (char)-1;
  4885  001D04  0100               	movlb	0	; () banked
  4886  001D06  69F2               	setf	Train_Move_Right_Brake@Return_Val& (0+255),b
  4887                           
  4888                           ;State_Mchn.c: 1762: break;
  4889  001D08  D028               	goto	l4316
  4890  001D0A                     l4302:
  4891  001D0A  0E04               	movlw	4
  4892  001D0C  ECD7  F012         	call	_GETxAPIxVAL
  4893  001D10  503A               	movf	?_GETxAPIxVAL,w,c
  4894  001D12  0100               	movlb	0	; () banked
  4895  001D14  5DE4               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  4896  001D16  503B               	movf	?_GETxAPIxVAL+1,w,c
  4897  001D18  0100               	movlb	0	; () banked
  4898  001D1A  59E5               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  4899  001D1C  A0D8               	btfss	status,0,c
  4900  001D1E  D00B               	goto	l4306
  4901                           
  4902                           ; BSR set to: 0
  4903                           ;State_Mchn.c: 1765: {
  4904                           ;State_Mchn.c: 1766: Switch_Train_Move = 0;
  4905  001D20  0E00               	movlw	0
  4906  001D22  6E22               	movwf	_Switch_Train_Move,c
  4907                           
  4908                           ;State_Mchn.c: 1767: Train_Move_Wait_Time = 0;
  4909  001D24  0E00               	movlw	0
  4910  001D26  0100               	movlb	0	; () banked
  4911  001D28  6FE5               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  4912  001D2A  0E00               	movlw	0
  4913  001D2C  6FE4               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  4914                           
  4915                           ;State_Mchn.c: 1768: Return_Val = (char)0;
  4916  001D2E  0E00               	movlw	0
  4917  001D30  0100               	movlb	0	; () banked
  4918  001D32  6FF2               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  4919                           
  4920                           ;State_Mchn.c: 1769: break;
  4921  001D34  D012               	goto	l4316
  4922  001D36                     l4306:
  4923                           
  4924                           ; BSR set to: 0
  4925                           ;State_Mchn.c: 1770: }
  4926                           ;State_Mchn.c: 1771: Train_Move_Wait_Time++;
  4927  001D36  0100               	movlb	0	; () banked
  4928  001D38  4BE4               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  4929  001D3A  2BE5               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  4930  001D3C                     l4308:
  4931                           
  4932                           ; BSR set to: 0
  4933                           ;State_Mchn.c: 1772: Switch_Train_Move = 3;
  4934  001D3C  0E03               	movlw	3
  4935  001D3E  D7A0               	goto	L56
  4936  001D40                     l4314:
  4937  001D40  5022               	movf	_Switch_Train_Move,w,c
  4938                           
  4939                           ; Switch size 1, requested type "space"
  4940                           ; Number of cases is 4, Range of values is 0 to 3
  4941                           ; switch strategies available:
  4942                           ; Name         Instructions Cycles
  4943                           ; simple_byte           13     7 (average)
  4944                           ;	Chosen strategy is simple_byte
  4945  001D42  0A00               	xorlw	0	; case 0
  4946  001D44  B4D8               	btfsc	status,2,c
  4947  001D46  D78C               	goto	l4266
  4948  001D48  0A01               	xorlw	1	; case 1
  4949  001D4A  B4D8               	btfsc	status,2,c
  4950  001D4C  D7AE               	goto	l4284
  4951  001D4E  0A03               	xorlw	3	; case 2
  4952  001D50  B4D8               	btfsc	status,2,c
  4953  001D52  D7C6               	goto	l4294
  4954  001D54  0A01               	xorlw	1	; case 3
  4955  001D56  B4D8               	btfsc	status,2,c
  4956  001D58  D7D8               	goto	l4302
  4957  001D5A                     l4316:
  4958                           
  4959                           ;State_Mchn.c: 1779: return(Return_Val);
  4960  001D5A  0100               	movlb	0	; () banked
  4961  001D5C  51F2               	movf	Train_Move_Right_Brake@Return_Val& (0+255),w,b
  4962  001D5E  0012               	return	
  4963  001D60                     __end_of_Train_Move_Right_Brake:
  4964                           	opt stack 0
  4965                           tblptru	equ	0xFF8
  4966                           tblptrh	equ	0xFF7
  4967                           tblptrl	equ	0xFF6
  4968                           tablat	equ	0xFF5
  4969                           postinc0	equ	0xFEE
  4970                           wreg	equ	0xFE8
  4971                           postdec1	equ	0xFE5
  4972                           fsr1l	equ	0xFE1
  4973                           status	equ	0xFD8
  4974                           
  4975 ;; *************** function _Train_Move_Left_Start *****************
  4976 ;; Defined at:
  4977 ;;		line 1385 in file "../State_Mchn.c"
  4978 ;; Parameters:    Size  Location     Type
  4979 ;;		None
  4980 ;; Auto vars:     Size  Location     Type
  4981 ;;		None
  4982 ;; Return value:  Size  Location     Type
  4983 ;;                  1    wreg      unsigned char 
  4984 ;; Registers used:
  4985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4986 ;; Tracked objects:
  4987 ;;		On entry : 0/0
  4988 ;;		On exit  : 0/0
  4989 ;;		Unchanged: 0/0
  4990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4991 ;;      Params:         0       0       0       0       0       0       0       0       0
  4992 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4993 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4994 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4995 ;;Total ram usage:        0 bytes
  4996 ;; Hardware stack levels used:    1
  4997 ;; Hardware stack levels required when called:    5
  4998 ;; This function calls:
  4999 ;;		_GETxAPIxVAL
  5000 ;;		_SetDCPWM1
  5001 ;; This function is called by:
  5002 ;;		_Train_Path
  5003 ;; This function uses a non-reentrant model
  5004 ;;
  5005                           
  5006                           	psect	text5
  5007  001E58                     __ptext5:
  5008                           	opt stack 0
  5009  001E58                     _Train_Move_Left_Start:
  5010                           	opt stack 23
  5011                           
  5012                           ;State_Mchn.c: 1387: static char Return_Val = (char)-1;
  5013                           ;State_Mchn.c: 1388: static unsigned int Train_Move_Wait_Time = 0;
  5014                           ;State_Mchn.c: 1390: switch(Switch_Train_Move)
  5015                           
  5016                           ; BSR set to: 0
  5017                           ;incstack = 0
  5018  001E58  D068               	goto	l4258
  5019  001E5A                     l4208:
  5020  001E5A  0E04               	movlw	4
  5021  001E5C  ECD7  F012         	call	_GETxAPIxVAL
  5022  001E60  503A               	movf	?_GETxAPIxVAL,w,c
  5023  001E62  0100               	movlb	0	; () banked
  5024  001E64  5DE2               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  5025  001E66  503B               	movf	?_GETxAPIxVAL+1,w,c
  5026  001E68  0100               	movlb	0	; () banked
  5027  001E6A  59E3               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5028  001E6C  A0D8               	btfss	status,0,c
  5029  001E6E  D002               	goto	l4214
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;State_Mchn.c: 1395: {
  5033                           ;State_Mchn.c: 1396: Switch_Train_Move = 1;
  5034  001E70  0E01               	movlw	1
  5035  001E72  D027               	goto	L58
  5036  001E74                     l4214:
  5037                           
  5038                           ; BSR set to: 0
  5039                           ;State_Mchn.c: 1400: }
  5040                           ;State_Mchn.c: 1401: Train_Move_Wait_Time++;
  5041  001E74  0100               	movlb	0	; () banked
  5042  001E76  4BE2               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  5043  001E78  2BE3               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5044                           
  5045                           ; BSR set to: 0
  5046                           ;State_Mchn.c: 1402: Switch_Train_Move = 0;
  5047  001E7A  0E00               	movlw	0
  5048  001E7C  D014               	goto	L57
  5049  001E7E                     l4218:
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;State_Mchn.c: 1403: Return_Val = (char)-1;
  5053  001E7E  684C               	setf	Train_Move_Left_Start@Return_Val,c
  5054                           
  5055                           ;State_Mchn.c: 1404: break;
  5056  001E80  D061               	goto	l4260
  5057  001E82                     l4220:
  5058  001E82  0E05               	movlw	5
  5059  001E84  ECD7  F012         	call	_GETxAPIxVAL
  5060  001E88  C03A  F03D         	movff	?_GETxAPIxVAL,SetDCPWM1@dutycycle
  5061  001E8C  C03B  F03E         	movff	?_GETxAPIxVAL+1,SetDCPWM1@dutycycle+1
  5062  001E90  EC29  F012         	call	_SetDCPWM1	;wreg free
  5063                           
  5064                           ;State_Mchn.c: 1407: Train_Move_Pwm_Count = GETxAPIxVAL(5);
  5065  001E94  0E05               	movlw	5
  5066  001E96  ECD7  F012         	call	_GETxAPIxVAL
  5067  001E9A  C03A  F048         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5068  001E9E  C03B  F049         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5069                           
  5070                           ;State_Mchn.c: 1408: PORTCbits.RC0 = 0;
  5071  001EA2  9082               	bcf	3970,0,c	;volatile
  5072  001EA4  D018               	goto	l4236
  5073  001EA6                     L57:
  5074  001EA6  6E22               	movwf	_Switch_Train_Move,c
  5075  001EA8  D7EA               	goto	l4218
  5076  001EAA                     l4228:
  5077  001EAA  0E02               	movlw	2
  5078  001EAC  ECD7  F012         	call	_GETxAPIxVAL
  5079  001EB0  503A               	movf	?_GETxAPIxVAL,w,c
  5080  001EB2  0100               	movlb	0	; () banked
  5081  001EB4  5DE2               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  5082  001EB6  503B               	movf	?_GETxAPIxVAL+1,w,c
  5083  001EB8  0100               	movlb	0	; () banked
  5084  001EBA  59E3               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5085  001EBC  A0D8               	btfss	status,0,c
  5086  001EBE  D008               	goto	l4234
  5087                           
  5088                           ; BSR set to: 0
  5089                           ;State_Mchn.c: 1414: {
  5090                           ;State_Mchn.c: 1415: Switch_Train_Move = 3;
  5091  001EC0  0E03               	movlw	3
  5092  001EC2                     L58:
  5093  001EC2  6E22               	movwf	_Switch_Train_Move,c
  5094                           
  5095                           ;State_Mchn.c: 1416: Train_Move_Wait_Time = 0;
  5096  001EC4  0E00               	movlw	0
  5097  001EC6  0100               	movlb	0	; () banked
  5098  001EC8  6FE3               	movwf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),b
  5099  001ECA  0E00               	movlw	0
  5100  001ECC  6FE2               	movwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),b
  5101  001ECE  D7D7               	goto	l4218
  5102  001ED0                     l4234:
  5103                           
  5104                           ; BSR set to: 0
  5105                           ;State_Mchn.c: 1419: }
  5106                           ;State_Mchn.c: 1420: Train_Move_Wait_Time++;
  5107  001ED0  0100               	movlb	0	; () banked
  5108  001ED2  4BE2               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  5109  001ED4  2BE3               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5110  001ED6                     l4236:
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;State_Mchn.c: 1421: Switch_Train_Move = 2;
  5114  001ED6  0E02               	movlw	2
  5115  001ED8  D7E6               	goto	L57
  5116  001EDA                     l4240:
  5117  001EDA  C048  F03D         	movff	_Train_Move_Pwm_Count,SetDCPWM1@dutycycle
  5118  001EDE  C049  F03E         	movff	_Train_Move_Pwm_Count+1,SetDCPWM1@dutycycle+1
  5119  001EE2  EC29  F012         	call	_SetDCPWM1	;wreg free
  5120                           
  5121                           ;State_Mchn.c: 1426: Return_Val = (char)-1;
  5122  001EE6  684C               	setf	Train_Move_Left_Start@Return_Val,c
  5123                           
  5124                           ;State_Mchn.c: 1427: if (Train_Move_Pwm_Count <= GETxAPIxVAL(8))
  5125  001EE8  0E08               	movlw	8
  5126  001EEA  ECD7  F012         	call	_GETxAPIxVAL
  5127  001EEE  5048               	movf	_Train_Move_Pwm_Count,w,c
  5128  001EF0  5C3A               	subwf	?_GETxAPIxVAL,w,c
  5129  001EF2  5049               	movf	_Train_Move_Pwm_Count+1,w,c
  5130  001EF4  583B               	subwfb	?_GETxAPIxVAL+1,w,c
  5131  001EF6  A0D8               	btfss	status,0,c
  5132  001EF8  D005               	goto	l4248
  5133                           
  5134                           ;State_Mchn.c: 1428: {
  5135                           ;State_Mchn.c: 1429: Switch_Train_Move = 0;
  5136  001EFA  0E00               	movlw	0
  5137  001EFC  6E22               	movwf	_Switch_Train_Move,c
  5138                           
  5139                           ;State_Mchn.c: 1430: Return_Val = (char)0;
  5140  001EFE  0E00               	movlw	0
  5141  001F00  6E4C               	movwf	Train_Move_Left_Start@Return_Val,c
  5142                           
  5143                           ;State_Mchn.c: 1431: break;
  5144  001F02  D020               	goto	l4260
  5145  001F04                     l4248:
  5146                           
  5147                           ;State_Mchn.c: 1432: }
  5148                           ;State_Mchn.c: 1433: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  5149  001F04  0E0A               	movlw	10
  5150  001F06  ECD7  F012         	call	_GETxAPIxVAL
  5151  001F0A  503A               	movf	?_GETxAPIxVAL,w,c
  5152  001F0C  5C07               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  5153  001F0E  503B               	movf	?_GETxAPIxVAL+1,w,c
  5154  001F10  5808               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  5155  001F12  A0D8               	btfss	status,0,c
  5156  001F14  D007               	goto	l4254
  5157                           
  5158                           ;State_Mchn.c: 1434: {
  5159                           ;State_Mchn.c: 1435: Train_Move_Pwm_Count--;
  5160  001F16  0648               	decf	_Train_Move_Pwm_Count,f,c
  5161  001F18  A0D8               	btfss	status,0,c
  5162  001F1A  0649               	decf	_Train_Move_Pwm_Count+1,f,c
  5163                           
  5164                           ;State_Mchn.c: 1436: Train_Move_Pwm_Fast_Count = 0;
  5165  001F1C  0E00               	movlw	0
  5166  001F1E  6E08               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  5167  001F20  0E00               	movlw	0
  5168  001F22  6E07               	movwf	_Train_Move_Pwm_Fast_Count,c
  5169  001F24                     l4254:
  5170                           
  5171                           ;State_Mchn.c: 1437: }
  5172                           ;State_Mchn.c: 1438: Train_Move_Pwm_Fast_Count++;
  5173  001F24  4A07               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  5174  001F26  2A08               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  5175                           
  5176                           ;State_Mchn.c: 1441: }
  5177                           
  5178                           ;State_Mchn.c: 1440: default : break;
  5179                           
  5180                           ;State_Mchn.c: 1439: break;
  5181  001F28  D00D               	goto	l4260
  5182  001F2A                     l4258:
  5183  001F2A  5022               	movf	_Switch_Train_Move,w,c
  5184                           
  5185                           ; Switch size 1, requested type "space"
  5186                           ; Number of cases is 4, Range of values is 0 to 3
  5187                           ; switch strategies available:
  5188                           ; Name         Instructions Cycles
  5189                           ; simple_byte           13     7 (average)
  5190                           ;	Chosen strategy is simple_byte
  5191  001F2C  0A00               	xorlw	0	; case 0
  5192  001F2E  B4D8               	btfsc	status,2,c
  5193  001F30  D794               	goto	l4208
  5194  001F32  0A01               	xorlw	1	; case 1
  5195  001F34  B4D8               	btfsc	status,2,c
  5196  001F36  D7A5               	goto	l4220
  5197  001F38  0A03               	xorlw	3	; case 2
  5198  001F3A  B4D8               	btfsc	status,2,c
  5199  001F3C  D7B6               	goto	l4228
  5200  001F3E  0A01               	xorlw	1	; case 3
  5201  001F40  B4D8               	btfsc	status,2,c
  5202  001F42  D7CB               	goto	l4240
  5203  001F44                     l4260:
  5204                           
  5205                           ;State_Mchn.c: 1443: return(Return_Val);
  5206  001F44  504C               	movf	Train_Move_Left_Start@Return_Val,w,c
  5207  001F46  0012               	return	
  5208  001F48                     __end_of_Train_Move_Left_Start:
  5209                           	opt stack 0
  5210                           tblptru	equ	0xFF8
  5211                           tblptrh	equ	0xFF7
  5212                           tblptrl	equ	0xFF6
  5213                           tablat	equ	0xFF5
  5214                           postinc0	equ	0xFEE
  5215                           wreg	equ	0xFE8
  5216                           postdec1	equ	0xFE5
  5217                           fsr1l	equ	0xFE1
  5218                           status	equ	0xFD8
  5219                           
  5220 ;; *************** function _Train_Move_Left_Brake *****************
  5221 ;; Defined at:
  5222 ;;		line 1569 in file "../State_Mchn.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;		None
  5225 ;; Auto vars:     Size  Location     Type
  5226 ;;		None
  5227 ;; Return value:  Size  Location     Type
  5228 ;;                  1    wreg      unsigned char 
  5229 ;; Registers used:
  5230 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5231 ;; Tracked objects:
  5232 ;;		On entry : 0/0
  5233 ;;		On exit  : 0/0
  5234 ;;		Unchanged: 0/0
  5235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5236 ;;      Params:         0       0       0       0       0       0       0       0       0
  5237 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5238 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5239 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5240 ;;Total ram usage:        0 bytes
  5241 ;; Hardware stack levels used:    1
  5242 ;; Hardware stack levels required when called:    5
  5243 ;; This function calls:
  5244 ;;		_GETxAPIxVAL
  5245 ;;		_SetDCPWM1
  5246 ;; This function is called by:
  5247 ;;		_Train_Path
  5248 ;; This function uses a non-reentrant model
  5249 ;;
  5250                           
  5251                           	psect	text6
  5252  001B5A                     __ptext6:
  5253                           	opt stack 0
  5254  001B5A                     _Train_Move_Left_Brake:
  5255                           	opt stack 23
  5256                           
  5257                           ;State_Mchn.c: 1571: static char Return_Val = (char)-1;
  5258                           ;State_Mchn.c: 1572: static unsigned int Train_Move_Wait_Time = 0;
  5259                           ;State_Mchn.c: 1574: switch(Switch_Train_Move)
  5260                           
  5261                           ;incstack = 0
  5262  001B5A  D071               	goto	l4370
  5263  001B5C                     l4322:
  5264  001B5C  C048  F03D         	movff	_Train_Move_Pwm_Count,SetDCPWM1@dutycycle
  5265  001B60  C049  F03E         	movff	_Train_Move_Pwm_Count+1,SetDCPWM1@dutycycle+1
  5266  001B64  EC29  F012         	call	_SetDCPWM1	;wreg free
  5267                           
  5268                           ;State_Mchn.c: 1577: Return_Val = (char)-1;
  5269  001B68  0100               	movlb	0	; () banked
  5270  001B6A  69F1               	setf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5271                           
  5272                           ; BSR set to: 0
  5273                           ;State_Mchn.c: 1578: if (Train_Move_Pwm_Count >= GETxAPIxVAL(5))
  5274  001B6C  0E05               	movlw	5
  5275  001B6E  ECD7  F012         	call	_GETxAPIxVAL
  5276  001B72  503A               	movf	?_GETxAPIxVAL,w,c
  5277  001B74  5C48               	subwf	_Train_Move_Pwm_Count,w,c
  5278  001B76  503B               	movf	?_GETxAPIxVAL+1,w,c
  5279  001B78  5849               	subwfb	_Train_Move_Pwm_Count+1,w,c
  5280  001B7A  A0D8               	btfss	status,0,c
  5281  001B7C  D003               	goto	l4332
  5282                           
  5283                           ;State_Mchn.c: 1579: {
  5284                           ;State_Mchn.c: 1580: Switch_Train_Move = 1;
  5285  001B7E  0E01               	movlw	1
  5286  001B80  6E22               	movwf	_Switch_Train_Move,c
  5287  001B82  D03F               	goto	l4356
  5288  001B84                     l4332:
  5289                           
  5290                           ;State_Mchn.c: 1583: }
  5291                           ;State_Mchn.c: 1584: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(9))
  5292  001B84  0E09               	movlw	9
  5293  001B86  ECD7  F012         	call	_GETxAPIxVAL
  5294  001B8A  503A               	movf	?_GETxAPIxVAL,w,c
  5295  001B8C  5C07               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  5296  001B8E  503B               	movf	?_GETxAPIxVAL+1,w,c
  5297  001B90  5808               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  5298  001B92  A0D8               	btfss	status,0,c
  5299  001B94  D006               	goto	l4338
  5300                           
  5301                           ;State_Mchn.c: 1585: {
  5302                           ;State_Mchn.c: 1586: Train_Move_Pwm_Count++;
  5303  001B96  4A48               	infsnz	_Train_Move_Pwm_Count,f,c
  5304  001B98  2A49               	incf	_Train_Move_Pwm_Count+1,f,c
  5305                           
  5306                           ;State_Mchn.c: 1587: Train_Move_Pwm_Fast_Count = 0;
  5307  001B9A  0E00               	movlw	0
  5308  001B9C  6E08               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  5309  001B9E  0E00               	movlw	0
  5310  001BA0  6E07               	movwf	_Train_Move_Pwm_Fast_Count,c
  5311  001BA2                     l4338:
  5312                           
  5313                           ;State_Mchn.c: 1588: }
  5314                           ;State_Mchn.c: 1589: Train_Move_Pwm_Fast_Count++;
  5315  001BA2  4A07               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  5316  001BA4  2A08               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  5317                           
  5318                           ;State_Mchn.c: 1590: break;
  5319  001BA6  D058               	goto	l4372
  5320  001BA8                     l4340:
  5321  001BA8  0E02               	movlw	2
  5322  001BAA  ECD7  F012         	call	_GETxAPIxVAL
  5323  001BAE  503A               	movf	?_GETxAPIxVAL,w,c
  5324  001BB0  0100               	movlb	0	; () banked
  5325  001BB2  5DE0               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5326  001BB4  503B               	movf	?_GETxAPIxVAL+1,w,c
  5327  001BB6  0100               	movlb	0	; () banked
  5328  001BB8  59E1               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5329  001BBA  A0D8               	btfss	status,0,c
  5330  001BBC  D008               	goto	l721
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;State_Mchn.c: 1593: {
  5334                           ;State_Mchn.c: 1594: Switch_Train_Move = 2;
  5335  001BBE  0E02               	movlw	2
  5336  001BC0  6E22               	movwf	_Switch_Train_Move,c
  5337                           
  5338                           ;State_Mchn.c: 1595: Train_Move_Wait_Time = 0;
  5339  001BC2  0E00               	movlw	0
  5340  001BC4  0100               	movlb	0	; () banked
  5341  001BC6  6FE1               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5342  001BC8  0E00               	movlw	0
  5343  001BCA  6FE0               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5344  001BCC  D01A               	goto	l4356
  5345  001BCE                     l721:
  5346                           
  5347                           ; BSR set to: 0
  5348                           ;State_Mchn.c: 1598: }
  5349                           ;State_Mchn.c: 1599: Return_Val = (char)-1;
  5350  001BCE  0100               	movlb	0	; () banked
  5351  001BD0  69F1               	setf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5352                           
  5353                           ; BSR set to: 0
  5354                           ;State_Mchn.c: 1600: Train_Move_Wait_Time++;
  5355  001BD2  0100               	movlb	0	; () banked
  5356  001BD4  4BE0               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  5357  001BD6  2BE1               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5358                           
  5359                           ; BSR set to: 0
  5360                           ;State_Mchn.c: 1601: Switch_Train_Move = 1;
  5361  001BD8  0E01               	movlw	1
  5362  001BDA  6E22               	movwf	_Switch_Train_Move,c
  5363                           
  5364                           ;State_Mchn.c: 1602: break;
  5365  001BDC  D03D               	goto	l4372
  5366  001BDE                     l4350:
  5367  001BDE  0E05               	movlw	5
  5368  001BE0  ECD7  F012         	call	_GETxAPIxVAL
  5369  001BE4  C03A  F03D         	movff	?_GETxAPIxVAL,SetDCPWM1@dutycycle
  5370  001BE8  C03B  F03E         	movff	?_GETxAPIxVAL+1,SetDCPWM1@dutycycle+1
  5371  001BEC  EC29  F012         	call	_SetDCPWM1	;wreg free
  5372                           
  5373                           ;State_Mchn.c: 1605: PORTCbits.RC0 = 1;
  5374  001BF0  8082               	bsf	3970,0,c	;volatile
  5375                           
  5376                           ;State_Mchn.c: 1606: Train_Move_Pwm_Count = GETxAPIxVAL(5);
  5377  001BF2  0E05               	movlw	5
  5378  001BF4  ECD7  F012         	call	_GETxAPIxVAL
  5379  001BF8  C03A  F048         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5380  001BFC  C03B  F049         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5381  001C00  D01C               	goto	l4364
  5382  001C02                     l4356:
  5383                           
  5384                           ;State_Mchn.c: 1608: Return_Val = (char)-1;
  5385  001C02  0100               	movlb	0	; () banked
  5386  001C04  69F1               	setf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5387                           
  5388                           ;State_Mchn.c: 1609: break;
  5389  001C06  D028               	goto	l4372
  5390  001C08                     l4358:
  5391  001C08  0E04               	movlw	4
  5392  001C0A  ECD7  F012         	call	_GETxAPIxVAL
  5393  001C0E  503A               	movf	?_GETxAPIxVAL,w,c
  5394  001C10  0100               	movlb	0	; () banked
  5395  001C12  5DE0               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5396  001C14  503B               	movf	?_GETxAPIxVAL+1,w,c
  5397  001C16  0100               	movlb	0	; () banked
  5398  001C18  59E1               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5399  001C1A  A0D8               	btfss	status,0,c
  5400  001C1C  D00B               	goto	l4362
  5401                           
  5402                           ; BSR set to: 0
  5403                           ;State_Mchn.c: 1612: {
  5404                           ;State_Mchn.c: 1613: Switch_Train_Move = 0;
  5405  001C1E  0E00               	movlw	0
  5406  001C20  6E22               	movwf	_Switch_Train_Move,c
  5407                           
  5408                           ;State_Mchn.c: 1614: Train_Move_Wait_Time = 0;
  5409  001C22  0E00               	movlw	0
  5410  001C24  0100               	movlb	0	; () banked
  5411  001C26  6FE1               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5412  001C28  0E00               	movlw	0
  5413  001C2A  6FE0               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5414                           
  5415                           ;State_Mchn.c: 1615: Return_Val = (char)0;
  5416  001C2C  0E00               	movlw	0
  5417  001C2E  0100               	movlb	0	; () banked
  5418  001C30  6FF1               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5419                           
  5420                           ;State_Mchn.c: 1616: break;
  5421  001C32  D012               	goto	l4372
  5422  001C34                     l4362:
  5423                           
  5424                           ; BSR set to: 0
  5425                           ;State_Mchn.c: 1617: }
  5426                           ;State_Mchn.c: 1618: Train_Move_Wait_Time++;
  5427  001C34  0100               	movlb	0	; () banked
  5428  001C36  4BE0               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  5429  001C38  2BE1               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5430  001C3A                     l4364:
  5431                           
  5432                           ; BSR set to: 0
  5433                           ;State_Mchn.c: 1619: Switch_Train_Move = 3;
  5434  001C3A  0E03               	movlw	3
  5435  001C3C  D7A1               	goto	L59
  5436  001C3E                     l4370:
  5437  001C3E  5022               	movf	_Switch_Train_Move,w,c
  5438                           
  5439                           ; Switch size 1, requested type "space"
  5440                           ; Number of cases is 4, Range of values is 0 to 3
  5441                           ; switch strategies available:
  5442                           ; Name         Instructions Cycles
  5443                           ; simple_byte           13     7 (average)
  5444                           ;	Chosen strategy is simple_byte
  5445  001C40  0A00               	xorlw	0	; case 0
  5446  001C42  B4D8               	btfsc	status,2,c
  5447  001C44  D78B               	goto	l4322
  5448  001C46  0A01               	xorlw	1	; case 1
  5449  001C48  B4D8               	btfsc	status,2,c
  5450  001C4A  D7AE               	goto	l4340
  5451  001C4C  0A03               	xorlw	3	; case 2
  5452  001C4E  B4D8               	btfsc	status,2,c
  5453  001C50  D7C6               	goto	l4350
  5454  001C52  0A01               	xorlw	1	; case 3
  5455  001C54  B4D8               	btfsc	status,2,c
  5456  001C56  D7D8               	goto	l4358
  5457  001C58                     l4372:
  5458                           
  5459                           ;State_Mchn.c: 1626: return(Return_Val);
  5460  001C58  0100               	movlb	0	; () banked
  5461  001C5A  51F1               	movf	Train_Move_Left_Brake@Return_Val& (0+255),w,b
  5462  001C5C  0012               	return	
  5463  001C5E                     __end_of_Train_Move_Left_Brake:
  5464                           	opt stack 0
  5465                           tblptru	equ	0xFF8
  5466                           tblptrh	equ	0xFF7
  5467                           tblptrl	equ	0xFF6
  5468                           tablat	equ	0xFF5
  5469                           postinc0	equ	0xFEE
  5470                           wreg	equ	0xFE8
  5471                           postdec1	equ	0xFE5
  5472                           fsr1l	equ	0xFE1
  5473                           status	equ	0xFD8
  5474                           
  5475 ;; *************** function _Right_Mountain_From_The_Right *****************
  5476 ;; Defined at:
  5477 ;;		line 1461 in file "../State_Mchn.c"
  5478 ;; Parameters:    Size  Location     Type
  5479 ;;  rc              1    wreg     unsigned char 
  5480 ;; Auto vars:     Size  Location     Type
  5481 ;;  rc              1   24[COMRAM] unsigned char 
  5482 ;; Return value:  Size  Location     Type
  5483 ;;                  1    wreg      unsigned char 
  5484 ;; Registers used:
  5485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5486 ;; Tracked objects:
  5487 ;;		On entry : 0/0
  5488 ;;		On exit  : 0/0
  5489 ;;		Unchanged: 0/0
  5490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5491 ;;      Params:         0       0       0       0       0       0       0       0       0
  5492 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5493 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5494 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5495 ;;Total ram usage:        1 bytes
  5496 ;; Hardware stack levels used:    1
  5497 ;; Hardware stack levels required when called:    5
  5498 ;; This function calls:
  5499 ;;		_GETxAPIxVAL
  5500 ;;		_SetDCPWM1
  5501 ;; This function is called by:
  5502 ;;		_Train_Path
  5503 ;; This function uses a non-reentrant model
  5504 ;;
  5505                           
  5506                           	psect	text7
  5507  002184                     __ptext7:
  5508                           	opt stack 0
  5509  002184                     _Right_Mountain_From_The_Right:
  5510                           	opt stack 23
  5511                           
  5512                           ; BSR set to: 0
  5513                           ;incstack = 0
  5514                           ;Right_Mountain_From_The_Right@rc stored from wreg
  5515  002184  6E43               	movwf	Right_Mountain_From_The_Right@rc,c
  5516                           
  5517                           ;State_Mchn.c: 1463: static char Return_Val = (char)-1;
  5518                           ;State_Mchn.c: 1464: if(rc == 4){
  5519  002186  0E04               	movlw	4
  5520  002188  1843               	xorwf	Right_Mountain_From_The_Right@rc,w,c
  5521  00218A  A4D8               	btfss	status,2,c
  5522  00218C  D023               	goto	l4396
  5523                           
  5524                           ;State_Mchn.c: 1465: SetDCPWM1(Train_Move_Pwm_Count);
  5525  00218E  C048  F03D         	movff	_Train_Move_Pwm_Count,SetDCPWM1@dutycycle
  5526  002192  C049  F03E         	movff	_Train_Move_Pwm_Count+1,SetDCPWM1@dutycycle+1
  5527  002196  EC29  F012         	call	_SetDCPWM1	;wreg free
  5528                           
  5529                           ;State_Mchn.c: 1466: if (Train_Move_Pwm_Count >= GETxAPIxVAL(30))
  5530  00219A  0E1E               	movlw	30
  5531  00219C  ECD7  F012         	call	_GETxAPIxVAL
  5532  0021A0  503A               	movf	?_GETxAPIxVAL,w,c
  5533  0021A2  5C48               	subwf	_Train_Move_Pwm_Count,w,c
  5534  0021A4  503B               	movf	?_GETxAPIxVAL+1,w,c
  5535  0021A6  5849               	subwfb	_Train_Move_Pwm_Count+1,w,c
  5536  0021A8  A0D8               	btfss	status,0,c
  5537  0021AA  D004               	goto	l4388
  5538                           
  5539                           ;State_Mchn.c: 1467: {
  5540                           ;State_Mchn.c: 1468: Switch_Train_Move = 0;
  5541  0021AC  0E00               	movlw	0
  5542  0021AE  6E22               	movwf	_Switch_Train_Move,c
  5543                           
  5544                           ;State_Mchn.c: 1469: Return_Val = (char)0;
  5545  0021B0  0E00               	movlw	0
  5546  0021B2  6E4B               	movwf	Right_Mountain_From_The_Right@Return_Val,c
  5547  0021B4                     l4388:
  5548                           
  5549                           ;State_Mchn.c: 1470: }
  5550                           ;State_Mchn.c: 1471: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  5551  0021B4  0E0A               	movlw	10
  5552  0021B6  ECD7  F012         	call	_GETxAPIxVAL
  5553  0021BA  503A               	movf	?_GETxAPIxVAL,w,c
  5554  0021BC  5C07               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  5555  0021BE  503B               	movf	?_GETxAPIxVAL+1,w,c
  5556  0021C0  5808               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  5557  0021C2  A0D8               	btfss	status,0,c
  5558  0021C4  D02B               	goto	l4410
  5559                           
  5560                           ;State_Mchn.c: 1472: {
  5561                           ;State_Mchn.c: 1473: Train_Move_Pwm_Count++;
  5562  0021C6  4A48               	infsnz	_Train_Move_Pwm_Count,f,c
  5563  0021C8  2A49               	incf	_Train_Move_Pwm_Count+1,f,c
  5564  0021CA                     l4392:
  5565                           
  5566                           ;State_Mchn.c: 1474: Train_Move_Pwm_Fast_Count = 0;
  5567  0021CA  0E00               	movlw	0
  5568  0021CC  6E08               	movwf	_Train_Move_Pwm_Fast_Count+1,c
  5569  0021CE  0E00               	movlw	0
  5570  0021D0  6E07               	movwf	_Train_Move_Pwm_Fast_Count,c
  5571  0021D2  D024               	goto	l4410
  5572  0021D4                     l4396:
  5573                           
  5574                           ;State_Mchn.c: 1478: else if (rc == 3){
  5575  0021D4  0E03               	movlw	3
  5576  0021D6  1843               	xorwf	Right_Mountain_From_The_Right@rc,w,c
  5577  0021D8  A4D8               	btfss	status,2,c
  5578  0021DA  D022               	goto	l689
  5579                           
  5580                           ;State_Mchn.c: 1479: SetDCPWM1(Train_Move_Pwm_Count);
  5581  0021DC  C048  F03D         	movff	_Train_Move_Pwm_Count,SetDCPWM1@dutycycle
  5582  0021E0  C049  F03E         	movff	_Train_Move_Pwm_Count+1,SetDCPWM1@dutycycle+1
  5583  0021E4  EC29  F012         	call	_SetDCPWM1	;wreg free
  5584                           
  5585                           ;State_Mchn.c: 1480: if (Train_Move_Pwm_Count <= GETxAPIxVAL(8))
  5586  0021E8  0E08               	movlw	8
  5587  0021EA  ECD7  F012         	call	_GETxAPIxVAL
  5588  0021EE  5048               	movf	_Train_Move_Pwm_Count,w,c
  5589  0021F0  5C3A               	subwf	?_GETxAPIxVAL,w,c
  5590  0021F2  5049               	movf	_Train_Move_Pwm_Count+1,w,c
  5591  0021F4  583B               	subwfb	?_GETxAPIxVAL+1,w,c
  5592  0021F6  A0D8               	btfss	status,0,c
  5593  0021F8  D004               	goto	l4404
  5594                           
  5595                           ;State_Mchn.c: 1481: {
  5596                           ;State_Mchn.c: 1482: Switch_Train_Move = 0;
  5597  0021FA  0E00               	movlw	0
  5598  0021FC  6E22               	movwf	_Switch_Train_Move,c
  5599                           
  5600                           ;State_Mchn.c: 1483: Return_Val = (char)0;
  5601  0021FE  0E00               	movlw	0
  5602  002200  6E4B               	movwf	Right_Mountain_From_The_Right@Return_Val,c
  5603  002202                     l4404:
  5604                           
  5605                           ;State_Mchn.c: 1484: }
  5606                           ;State_Mchn.c: 1485: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(10))
  5607  002202  0E0A               	movlw	10
  5608  002204  ECD7  F012         	call	_GETxAPIxVAL
  5609  002208  503A               	movf	?_GETxAPIxVAL,w,c
  5610  00220A  5C07               	subwf	_Train_Move_Pwm_Fast_Count,w,c
  5611  00220C  503B               	movf	?_GETxAPIxVAL+1,w,c
  5612  00220E  5808               	subwfb	_Train_Move_Pwm_Fast_Count+1,w,c
  5613  002210  A0D8               	btfss	status,0,c
  5614  002212  D004               	goto	l4410
  5615                           
  5616                           ;State_Mchn.c: 1486: {
  5617                           ;State_Mchn.c: 1487: Train_Move_Pwm_Count--;
  5618  002214  0648               	decf	_Train_Move_Pwm_Count,f,c
  5619  002216  A0D8               	btfss	status,0,c
  5620  002218  0649               	decf	_Train_Move_Pwm_Count+1,f,c
  5621  00221A  D7D7               	goto	l4392
  5622  00221C                     l4410:
  5623                           
  5624                           ;State_Mchn.c: 1489: }
  5625                           ;State_Mchn.c: 1490: Train_Move_Pwm_Fast_Count++;
  5626  00221C  4A07               	infsnz	_Train_Move_Pwm_Fast_Count,f,c
  5627  00221E  2A08               	incf	_Train_Move_Pwm_Fast_Count+1,f,c
  5628  002220                     l689:
  5629                           
  5630                           ;State_Mchn.c: 1491: }
  5631                           ;State_Mchn.c: 1492: return(Return_Val);
  5632  002220  504B               	movf	Right_Mountain_From_The_Right@Return_Val,w,c
  5633  002222  0012               	return	
  5634  002224                     __end_of_Right_Mountain_From_The_Right:
  5635                           	opt stack 0
  5636                           tblptru	equ	0xFF8
  5637                           tblptrh	equ	0xFF7
  5638                           tblptrl	equ	0xFF6
  5639                           tablat	equ	0xFF5
  5640                           postinc0	equ	0xFEE
  5641                           wreg	equ	0xFE8
  5642                           postdec1	equ	0xFE5
  5643                           fsr1l	equ	0xFE1
  5644                           status	equ	0xFD8
  5645                           
  5646 ;; *************** function _SetDCPWM1 *****************
  5647 ;; Defined at:
  5648 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\pic18\plib\PWM\pw1setdc.c"
  5649 ;; Parameters:    Size  Location     Type
  5650 ;;  dutycycle       2   18[COMRAM] unsigned int 
  5651 ;; Auto vars:     Size  Location     Type
  5652 ;;  DCycle          2   22[COMRAM] struct PWMDC
  5653 ;; Return value:  Size  Location     Type
  5654 ;;                  1    wreg      void 
  5655 ;; Registers used:
  5656 ;;		wreg, status,2, status,0
  5657 ;; Tracked objects:
  5658 ;;		On entry : 0/0
  5659 ;;		On exit  : 0/0
  5660 ;;		Unchanged: 0/0
  5661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5662 ;;      Params:         2       0       0       0       0       0       0       0       0
  5663 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5664 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5665 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5666 ;;Total ram usage:        6 bytes
  5667 ;; Hardware stack levels used:    1
  5668 ;; Hardware stack levels required when called:    4
  5669 ;; This function calls:
  5670 ;;		Nothing
  5671 ;; This function is called by:
  5672 ;;		_Train_Path
  5673 ;;		_Train_Move_Left_Start
  5674 ;;		_Right_Mountain_From_The_Right
  5675 ;;		_Train_Move_Left_Brake
  5676 ;;		_Train_Move_Right_Start
  5677 ;;		_Train_Move_Right_Brake
  5678 ;; This function uses a non-reentrant model
  5679 ;;
  5680                           
  5681                           	psect	text8
  5682  002452                     __ptext8:
  5683                           	opt stack 0
  5684  002452                     _SetDCPWM1:
  5685                           	opt stack 23
  5686                           
  5687                           ;incstack = 0
  5688  002452  C03D  F03F         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
  5689  002456  C03E  F040         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
  5690  00245A  0E06               	movlw	6
  5691  00245C                     u2385:
  5692  00245C  90D8               	bcf	status,0,c
  5693  00245E  363F               	rlcf	??_SetDCPWM1,f,c
  5694  002460  3640               	rlcf	??_SetDCPWM1+1,f,c
  5695  002462  2EE8               	decfsz	wreg,f,c
  5696  002464  D7FB               	goto	u2385
  5697  002466  C03F  F041         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
  5698  00246A  C040  F042         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
  5699  00246E  C042  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
  5700  002472  C041  F03F         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
  5701  002476  90D8               	bcf	status,0,c
  5702  002478  323F               	rrcf	??_SetDCPWM1,f,c
  5703  00247A  90D8               	bcf	status,0,c
  5704  00247C  323F               	rrcf	??_SetDCPWM1,f,c
  5705  00247E  0E30               	movlw	48
  5706  002480  163F               	andwf	??_SetDCPWM1,f,c
  5707  002482  50BD               	movf	4029,w,c	;volatile
  5708  002484  0BCF               	andlw	207
  5709  002486  103F               	iorwf	??_SetDCPWM1,w,c
  5710  002488  6EBD               	movwf	4029,c	;volatile
  5711  00248A  0012               	return		;funcret
  5712  00248C                     __end_of_SetDCPWM1:
  5713                           	opt stack 0
  5714                           tblptru	equ	0xFF8
  5715                           tblptrh	equ	0xFF7
  5716                           tblptrl	equ	0xFF6
  5717                           tablat	equ	0xFF5
  5718                           postinc0	equ	0xFEE
  5719                           wreg	equ	0xFE8
  5720                           postdec1	equ	0xFE5
  5721                           fsr1l	equ	0xFE1
  5722                           status	equ	0xFD8
  5723                           
  5724 ;; *************** function _Right_Mountain_From_The_Left *****************
  5725 ;; Defined at:
  5726 ;;		line 1549 in file "../State_Mchn.c"
  5727 ;; Parameters:    Size  Location     Type
  5728 ;;  rc              1    wreg     unsigned char 
  5729 ;; Auto vars:     Size  Location     Type
  5730 ;;  rc              1    0[COMRAM] unsigned char 
  5731 ;; Return value:  Size  Location     Type
  5732 ;;                  1    wreg      unsigned char 
  5733 ;; Registers used:
  5734 ;;		wreg, status,2
  5735 ;; Tracked objects:
  5736 ;;		On entry : 0/0
  5737 ;;		On exit  : 0/0
  5738 ;;		Unchanged: 0/0
  5739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5740 ;;      Params:         0       0       0       0       0       0       0       0       0
  5741 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5742 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5743 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5744 ;;Total ram usage:        0 bytes
  5745 ;; Hardware stack levels used:    1
  5746 ;; Hardware stack levels required when called:    4
  5747 ;; This function calls:
  5748 ;;		Nothing
  5749 ;; This function is called by:
  5750 ;;		_Train_Path
  5751 ;; This function uses a non-reentrant model
  5752 ;;
  5753                           
  5754                           	psect	text9
  5755  00260C                     __ptext9:
  5756                           	opt stack 0
  5757  00260C                     _Right_Mountain_From_The_Left:
  5758                           	opt stack 24
  5759                           
  5760                           ;State_Mchn.c: 1551: static char Return_Val = (char)-1;
  5761                           ;State_Mchn.c: 1552: return(Return_Val);
  5762                           
  5763                           ;incstack = 0
  5764  00260C  0100               	movlb	0	; () banked
  5765  00260E  51F0               	movf	Right_Mountain_From_The_Left@Return_Val& (0+255),w,b
  5766                           
  5767                           ; BSR set to: 0
  5768  002610  0012               	return		;funcret
  5769  002612                     __end_of_Right_Mountain_From_The_Left:
  5770                           	opt stack 0
  5771                           tblptru	equ	0xFF8
  5772                           tblptrh	equ	0xFF7
  5773                           tblptrl	equ	0xFF6
  5774                           tablat	equ	0xFF5
  5775                           postinc0	equ	0xFEE
  5776                           wreg	equ	0xFE8
  5777                           postdec1	equ	0xFE5
  5778                           fsr1l	equ	0xFE1
  5779                           status	equ	0xFD8
  5780                           
  5781 ;; *************** function _Left_Mountain_From_The_Right *****************
  5782 ;; Defined at:
  5783 ;;		line 1509 in file "../State_Mchn.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;  rc              1    wreg     unsigned char 
  5786 ;; Auto vars:     Size  Location     Type
  5787 ;;  rc              1    0[COMRAM] unsigned char 
  5788 ;; Return value:  Size  Location     Type
  5789 ;;                  1    wreg      unsigned char 
  5790 ;; Registers used:
  5791 ;;		wreg, status,2
  5792 ;; Tracked objects:
  5793 ;;		On entry : 0/0
  5794 ;;		On exit  : 0/0
  5795 ;;		Unchanged: 0/0
  5796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5797 ;;      Params:         0       0       0       0       0       0       0       0       0
  5798 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5799 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5800 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5801 ;;Total ram usage:        0 bytes
  5802 ;; Hardware stack levels used:    1
  5803 ;; Hardware stack levels required when called:    4
  5804 ;; This function calls:
  5805 ;;		Nothing
  5806 ;; This function is called by:
  5807 ;;		_Train_Path
  5808 ;; This function uses a non-reentrant model
  5809 ;;
  5810                           
  5811                           	psect	text10
  5812  002618                     __ptext10:
  5813                           	opt stack 0
  5814  002618                     _Left_Mountain_From_The_Right:
  5815                           	opt stack 24
  5816                           
  5817                           ;State_Mchn.c: 1511: static char Return_Val = (char)-1;
  5818                           ;State_Mchn.c: 1512: return(Return_Val);
  5819                           
  5820                           ; BSR set to: 0
  5821                           ;incstack = 0
  5822  002618  504A               	movf	Left_Mountain_From_The_Right@Return_Val,w,c
  5823  00261A  0012               	return		;funcret
  5824  00261C                     __end_of_Left_Mountain_From_The_Right:
  5825                           	opt stack 0
  5826                           tblptru	equ	0xFF8
  5827                           tblptrh	equ	0xFF7
  5828                           tblptrl	equ	0xFF6
  5829                           tablat	equ	0xFF5
  5830                           postinc0	equ	0xFEE
  5831                           wreg	equ	0xFE8
  5832                           postdec1	equ	0xFE5
  5833                           fsr1l	equ	0xFE1
  5834                           status	equ	0xFD8
  5835                           
  5836 ;; *************** function _Left_Mountain_From_The_Left *****************
  5837 ;; Defined at:
  5838 ;;		line 1529 in file "../State_Mchn.c"
  5839 ;; Parameters:    Size  Location     Type
  5840 ;;  rc              1    wreg     unsigned char 
  5841 ;; Auto vars:     Size  Location     Type
  5842 ;;  rc              1    0[COMRAM] unsigned char 
  5843 ;; Return value:  Size  Location     Type
  5844 ;;                  1    wreg      unsigned char 
  5845 ;; Registers used:
  5846 ;;		wreg, status,2
  5847 ;; Tracked objects:
  5848 ;;		On entry : 0/0
  5849 ;;		On exit  : 0/0
  5850 ;;		Unchanged: 0/0
  5851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5852 ;;      Params:         0       0       0       0       0       0       0       0       0
  5853 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5854 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5855 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5856 ;;Total ram usage:        0 bytes
  5857 ;; Hardware stack levels used:    1
  5858 ;; Hardware stack levels required when called:    4
  5859 ;; This function calls:
  5860 ;;		Nothing
  5861 ;; This function is called by:
  5862 ;;		_Train_Path
  5863 ;; This function uses a non-reentrant model
  5864 ;;
  5865                           
  5866                           	psect	text11
  5867  002612                     __ptext11:
  5868                           	opt stack 0
  5869  002612                     _Left_Mountain_From_The_Left:
  5870                           	opt stack 24
  5871                           
  5872                           ;State_Mchn.c: 1531: static char Return_Val = (char)-1;
  5873                           ;State_Mchn.c: 1532: return(Return_Val);
  5874                           
  5875                           ;incstack = 0
  5876  002612  0100               	movlb	0	; () banked
  5877  002614  51EF               	movf	Left_Mountain_From_The_Left@Return_Val& (0+255),w,b
  5878                           
  5879                           ; BSR set to: 0
  5880  002616  0012               	return		;funcret
  5881  002618                     __end_of_Left_Mountain_From_The_Left:
  5882                           	opt stack 0
  5883                           tblptru	equ	0xFF8
  5884                           tblptrh	equ	0xFF7
  5885                           tblptrl	equ	0xFF6
  5886                           tablat	equ	0xFF5
  5887                           postinc0	equ	0xFEE
  5888                           wreg	equ	0xFE8
  5889                           postdec1	equ	0xFE5
  5890                           fsr1l	equ	0xFE1
  5891                           status	equ	0xFD8
  5892                           
  5893 ;; *************** function _Junction *****************
  5894 ;; Defined at:
  5895 ;;		line 1798 in file "../State_Mchn.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;  Junction_Lef    1    wreg     unsigned char 
  5898 ;;  Straight_Ben    1   18[COMRAM] unsigned char 
  5899 ;; Auto vars:     Size  Location     Type
  5900 ;;  Junction_Lef    1   19[COMRAM] unsigned char 
  5901 ;; Return value:  Size  Location     Type
  5902 ;;                  1    wreg      unsigned char 
  5903 ;; Registers used:
  5904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5905 ;; Tracked objects:
  5906 ;;		On entry : 0/0
  5907 ;;		On exit  : 0/0
  5908 ;;		Unchanged: 0/0
  5909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5910 ;;      Params:         1       0       0       0       0       0       0       0       0
  5911 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5912 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5913 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5914 ;;Total ram usage:        2 bytes
  5915 ;; Hardware stack levels used:    1
  5916 ;; Hardware stack levels required when called:    5
  5917 ;; This function calls:
  5918 ;;		_GETxAPIxVAL
  5919 ;; This function is called by:
  5920 ;;		_Train_Path
  5921 ;; This function uses a non-reentrant model
  5922 ;;
  5923                           
  5924                           	psect	text12
  5925  0020CE                     __ptext12:
  5926                           	opt stack 0
  5927  0020CE                     _Junction:
  5928                           	opt stack 23
  5929                           
  5930                           ; BSR set to: 0
  5931                           ;incstack = 0
  5932                           ;Junction@Junction_Left_Right stored from wreg
  5933  0020CE  6E3E               	movwf	Junction@Junction_Left_Right,c
  5934                           
  5935                           ;State_Mchn.c: 1800: static char Return_Val = (char)-1;
  5936                           ;State_Mchn.c: 1801: static unsigned int Junction_Switch_Time = 0;
  5937                           ;State_Mchn.c: 1803: switch (Switch_Junction)
  5938  0020D0  D04C               	goto	l4144
  5939  0020D2                     l770:
  5940  0020D2  0100               	movlb	0	; () banked
  5941  0020D4  69EE               	setf	Junction@Return_Val& (0+255),b
  5942                           
  5943                           ;State_Mchn.c: 1806: switch (Junction_Left_Right)
  5944  0020D6  D018               	goto	l4126
  5945  0020D8                     l774:
  5946  0020D8  8680               	bsf	3968,3,c	;volatile
  5947  0020DA  D01D               	goto	l4128
  5948  0020DC                     l776:
  5949  0020DC  8480               	bsf	3968,2,c	;volatile
  5950                           
  5951                           ;State_Mchn.c: 1813: }
  5952                           
  5953                           ;State_Mchn.c: 1812: default : break;
  5954  0020DE  D01B               	goto	l4128
  5955  0020E0                     l4118:
  5956  0020E0  503D               	movf	Junction@Straight_Bend,w,c
  5957                           
  5958                           ; Switch size 1, requested type "space"
  5959                           ; Number of cases is 2, Range of values is 0 to 1
  5960                           ; switch strategies available:
  5961                           ; Name         Instructions Cycles
  5962                           ; simple_byte            7     4 (average)
  5963                           ;	Chosen strategy is simple_byte
  5964  0020E2  0A00               	xorlw	0	; case 0
  5965  0020E4  B4D8               	btfsc	status,2,c
  5966  0020E6  D7F8               	goto	l774
  5967  0020E8  0A01               	xorlw	1	; case 1
  5968  0020EA  B4D8               	btfsc	status,2,c
  5969  0020EC  D7F7               	goto	l776
  5970                           
  5971                           ;State_Mchn.c: 1814: break;
  5972  0020EE  D013               	goto	l4128
  5973  0020F0                     l781:
  5974  0020F0  8280               	bsf	3968,1,c	;volatile
  5975  0020F2  D011               	goto	l4128
  5976  0020F4                     l783:
  5977  0020F4  8080               	bsf	3968,0,c	;volatile
  5978                           
  5979                           ;State_Mchn.c: 1821: }
  5980                           
  5981                           ;State_Mchn.c: 1820: default : break;
  5982  0020F6  D00F               	goto	l4128
  5983  0020F8                     l4122:
  5984  0020F8  503D               	movf	Junction@Straight_Bend,w,c
  5985                           
  5986                           ; Switch size 1, requested type "space"
  5987                           ; Number of cases is 2, Range of values is 0 to 1
  5988                           ; switch strategies available:
  5989                           ; Name         Instructions Cycles
  5990                           ; simple_byte            7     4 (average)
  5991                           ;	Chosen strategy is simple_byte
  5992  0020FA  0A00               	xorlw	0	; case 0
  5993  0020FC  B4D8               	btfsc	status,2,c
  5994  0020FE  D7F8               	goto	l781
  5995  002100  0A01               	xorlw	1	; case 1
  5996  002102  B4D8               	btfsc	status,2,c
  5997  002104  D7F7               	goto	l783
  5998                           
  5999                           ;State_Mchn.c: 1825: }
  6000                           
  6001                           ;State_Mchn.c: 1824: default : break;
  6002                           
  6003                           ;State_Mchn.c: 1822: break;
  6004  002106  D007               	goto	l4128
  6005  002108                     l4126:
  6006  002108  503E               	movf	Junction@Junction_Left_Right,w,c
  6007                           
  6008                           ; Switch size 1, requested type "space"
  6009                           ; Number of cases is 2, Range of values is 0 to 1
  6010                           ; switch strategies available:
  6011                           ; Name         Instructions Cycles
  6012                           ; simple_byte            7     4 (average)
  6013                           ;	Chosen strategy is simple_byte
  6014  00210A  0A00               	xorlw	0	; case 0
  6015  00210C  B4D8               	btfsc	status,2,c
  6016  00210E  D7E8               	goto	l4118
  6017  002110  0A01               	xorlw	1	; case 1
  6018  002112  B4D8               	btfsc	status,2,c
  6019  002114  D7F1               	goto	l4122
  6020  002116                     l4128:
  6021                           
  6022                           ;State_Mchn.c: 1826: Switch_Junction = 1;
  6023  002116  0E01               	movlw	1
  6024  002118  6E1F               	movwf	_Switch_Junction,c
  6025                           
  6026                           ;State_Mchn.c: 1827: break;
  6027  00211A  D031               	goto	l4146
  6028  00211C                     l4130:
  6029  00211C  0E03               	movlw	3
  6030  00211E  ECD7  F012         	call	_GETxAPIxVAL
  6031  002122  503A               	movf	?_GETxAPIxVAL,w,c
  6032  002124  0100               	movlb	0	; () banked
  6033  002126  5DDE               	subwf	Junction@Junction_Switch_Time& (0+255),w,b
  6034  002128  503B               	movf	?_GETxAPIxVAL+1,w,c
  6035  00212A  0100               	movlb	0	; () banked
  6036  00212C  59DF               	subwfb	(Junction@Junction_Switch_Time+1)& (0+255),w,b
  6037  00212E  A0D8               	btfss	status,0,c
  6038  002130  D00A               	goto	l788
  6039                           
  6040                           ; BSR set to: 0
  6041                           ;State_Mchn.c: 1830: {
  6042                           ;State_Mchn.c: 1831: Switch_Junction = 2;
  6043  002132  0E02               	movlw	2
  6044  002134  6E1F               	movwf	_Switch_Junction,c
  6045                           
  6046                           ;State_Mchn.c: 1832: Junction_Switch_Time = 0;
  6047  002136  0E00               	movlw	0
  6048  002138  0100               	movlb	0	; () banked
  6049  00213A  6FDF               	movwf	(Junction@Junction_Switch_Time+1)& (0+255),b
  6050  00213C  0E00               	movlw	0
  6051  00213E  6FDE               	movwf	Junction@Junction_Switch_Time& (0+255),b
  6052                           
  6053                           ; BSR set to: 0
  6054                           ;State_Mchn.c: 1833: Return_Val = (char)-1;
  6055  002140  0100               	movlb	0	; () banked
  6056  002142  69EE               	setf	Junction@Return_Val& (0+255),b
  6057                           
  6058                           ;State_Mchn.c: 1834: break;
  6059  002144  D01C               	goto	l4146
  6060  002146                     l788:
  6061                           
  6062                           ; BSR set to: 0
  6063                           ;State_Mchn.c: 1835: }
  6064                           ;State_Mchn.c: 1836: Return_Val = (char)-1;
  6065  002146  0100               	movlb	0	; () banked
  6066  002148  69EE               	setf	Junction@Return_Val& (0+255),b
  6067                           
  6068                           ; BSR set to: 0
  6069                           ;State_Mchn.c: 1837: Switch_Junction = 1;
  6070  00214A  0E01               	movlw	1
  6071  00214C  6E1F               	movwf	_Switch_Junction,c
  6072                           
  6073                           ; BSR set to: 0
  6074                           ;State_Mchn.c: 1838: Junction_Switch_Time++;
  6075  00214E  0100               	movlb	0	; () banked
  6076  002150  4BDE               	infsnz	Junction@Junction_Switch_Time& (0+255),f,b
  6077  002152  2BDF               	incf	(Junction@Junction_Switch_Time+1)& (0+255),f,b
  6078                           
  6079                           ;State_Mchn.c: 1839: break;
  6080  002154  D014               	goto	l4146
  6081  002156                     l789:
  6082  002156  9680               	bcf	3968,3,c	;volatile
  6083                           
  6084                           ;State_Mchn.c: 1842: PORTAbits.RA2 = 0;
  6085  002158  9480               	bcf	3968,2,c	;volatile
  6086                           
  6087                           ;State_Mchn.c: 1843: PORTAbits.RA1 = 0;
  6088  00215A  9280               	bcf	3968,1,c	;volatile
  6089                           
  6090                           ;State_Mchn.c: 1844: PORTAbits.RA0 = 0;
  6091  00215C  9080               	bcf	3968,0,c	;volatile
  6092                           
  6093                           ;State_Mchn.c: 1845: Switch_Junction = 0;
  6094  00215E  0E00               	movlw	0
  6095  002160  6E1F               	movwf	_Switch_Junction,c
  6096                           
  6097                           ;State_Mchn.c: 1846: Return_Val = (char)0;
  6098  002162  0E00               	movlw	0
  6099  002164  0100               	movlb	0	; () banked
  6100  002166  6FEE               	movwf	Junction@Return_Val& (0+255),b
  6101                           
  6102                           ; BSR set to: 0
  6103                           ;State_Mchn.c: 1850: }
  6104                           
  6105                           ; BSR set to: 0
  6106                           
  6107                           ;State_Mchn.c: 1849: default : break;
  6108                           
  6109                           ;State_Mchn.c: 1847: break;
  6110  002168  D00A               	goto	l4146
  6111  00216A                     l4144:
  6112  00216A  501F               	movf	_Switch_Junction,w,c
  6113                           
  6114                           ; Switch size 1, requested type "space"
  6115                           ; Number of cases is 3, Range of values is 0 to 2
  6116                           ; switch strategies available:
  6117                           ; Name         Instructions Cycles
  6118                           ; simple_byte           10     6 (average)
  6119                           ;	Chosen strategy is simple_byte
  6120  00216C  0A00               	xorlw	0	; case 0
  6121  00216E  B4D8               	btfsc	status,2,c
  6122  002170  D7B0               	goto	l770
  6123  002172  0A01               	xorlw	1	; case 1
  6124  002174  B4D8               	btfsc	status,2,c
  6125  002176  D7D2               	goto	l4130
  6126  002178  0A03               	xorlw	3	; case 2
  6127  00217A  B4D8               	btfsc	status,2,c
  6128  00217C  D7EC               	goto	l789
  6129  00217E                     l4146:
  6130                           
  6131                           ;State_Mchn.c: 1852: return (Return_Val);
  6132  00217E  0100               	movlb	0	; () banked
  6133  002180  51EE               	movf	Junction@Return_Val& (0+255),w,b
  6134  002182  0012               	return	
  6135  002184                     __end_of_Junction:
  6136                           	opt stack 0
  6137                           tblptru	equ	0xFF8
  6138                           tblptrh	equ	0xFF7
  6139                           tblptrl	equ	0xFF6
  6140                           tablat	equ	0xFF5
  6141                           postinc0	equ	0xFEE
  6142                           wreg	equ	0xFE8
  6143                           postdec1	equ	0xFE5
  6144                           fsr1l	equ	0xFE1
  6145                           status	equ	0xFD8
  6146                           
  6147 ;; *************** function _Red_Led *****************
  6148 ;; Defined at:
  6149 ;;		line 1018 in file "../State_Mchn.c"
  6150 ;; Parameters:    Size  Location     Type
  6151 ;;  Operation       1    wreg     unsigned char 
  6152 ;; Auto vars:     Size  Location     Type
  6153 ;;  Operation       1   15[COMRAM] unsigned char 
  6154 ;; Return value:  Size  Location     Type
  6155 ;;                  1    wreg      void 
  6156 ;; Registers used:
  6157 ;;		wreg, status,2, status,0
  6158 ;; Tracked objects:
  6159 ;;		On entry : 0/0
  6160 ;;		On exit  : 0/0
  6161 ;;		Unchanged: 0/0
  6162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6163 ;;      Params:         0       0       0       0       0       0       0       0       0
  6164 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6165 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6166 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6167 ;;Total ram usage:        1 bytes
  6168 ;; Hardware stack levels used:    1
  6169 ;; Hardware stack levels required when called:    4
  6170 ;; This function calls:
  6171 ;;		Nothing
  6172 ;; This function is called by:
  6173 ;;		_Update_StateMchn
  6174 ;; This function uses a non-reentrant model
  6175 ;;
  6176                           
  6177                           	psect	text13
  6178  002224                     __ptext13:
  6179                           	opt stack 0
  6180  002224                     _Red_Led:
  6181                           	opt stack 25
  6182                           
  6183                           ; BSR set to: 0
  6184                           ;incstack = 0
  6185                           ;Red_Led@Operation stored from wreg
  6186  002224  6E3A               	movwf	Red_Led@Operation,c
  6187                           
  6188                           ;State_Mchn.c: 1020: switch(Operation)
  6189  002226  D030               	goto	l4736
  6190  002228                     l531:
  6191  002228  9A83               	bcf	3971,5,c	;volatile
  6192  00222A  0012               	return	
  6193  00222C                     l533:
  6194  00222C  8A83               	bsf	3971,5,c	;volatile
  6195  00222E  0012               	return	
  6196  002230                     l4714:
  6197  002230  4A05               	infsnz	_Red_Led_Counter,f,c
  6198  002232  2A06               	incf	_Red_Led_Counter+1,f,c
  6199                           
  6200                           ;State_Mchn.c: 1027: if(Red_Led_Counter >= 3000)
  6201  002234  0EB8               	movlw	184
  6202  002236  5C05               	subwf	_Red_Led_Counter,w,c
  6203  002238  0E0B               	movlw	11
  6204  00223A  5806               	subwfb	_Red_Led_Counter+1,w,c
  6205  00223C  A0D8               	btfss	status,0,c
  6206  00223E  D004               	goto	l4720
  6207                           
  6208                           ;State_Mchn.c: 1028: {
  6209                           ;State_Mchn.c: 1029: Red_Led_Counter = 0;
  6210  002240  0E00               	movlw	0
  6211  002242  6E06               	movwf	_Red_Led_Counter+1,c
  6212  002244  0E00               	movlw	0
  6213  002246  6E05               	movwf	_Red_Led_Counter,c
  6214  002248                     l4720:
  6215                           
  6216                           ;State_Mchn.c: 1030: }
  6217                           ;State_Mchn.c: 1031: if(Red_Led_Counter >= 3000/2)
  6218  002248  0EDC               	movlw	220
  6219  00224A  5C05               	subwf	_Red_Led_Counter,w,c
  6220  00224C  0E05               	movlw	5
  6221  00224E  5806               	subwfb	_Red_Led_Counter+1,w,c
  6222  002250  A0D8               	btfss	status,0,c
  6223  002252  D002               	goto	l536
  6224                           
  6225                           ;State_Mchn.c: 1032: {
  6226                           ;State_Mchn.c: 1033: PORTDbits.RD5 = 1;
  6227  002254  8A83               	bsf	3971,5,c	;volatile
  6228                           
  6229                           ;State_Mchn.c: 1034: }
  6230  002256  0012               	return	
  6231  002258                     l536:
  6232                           
  6233                           ;State_Mchn.c: 1035: else {PORTDbits.RD5 = 0;}
  6234  002258  9A83               	bcf	3971,5,c	;volatile
  6235                           
  6236                           ;State_Mchn.c: 1036: break;
  6237  00225A  0012               	return	
  6238  00225C                     l4724:
  6239  00225C  4A05               	infsnz	_Red_Led_Counter,f,c
  6240  00225E  2A06               	incf	_Red_Led_Counter+1,f,c
  6241                           
  6242                           ;State_Mchn.c: 1039: if(Red_Led_Counter >= 1000)
  6243  002260  0EE8               	movlw	232
  6244  002262  5C05               	subwf	_Red_Led_Counter,w,c
  6245  002264  0E03               	movlw	3
  6246  002266  5806               	subwfb	_Red_Led_Counter+1,w,c
  6247  002268  A0D8               	btfss	status,0,c
  6248  00226A  D004               	goto	l4730
  6249                           
  6250                           ;State_Mchn.c: 1040: {
  6251                           ;State_Mchn.c: 1041: Red_Led_Counter = 0;
  6252  00226C  0E00               	movlw	0
  6253  00226E  6E06               	movwf	_Red_Led_Counter+1,c
  6254  002270  0E00               	movlw	0
  6255  002272  6E05               	movwf	_Red_Led_Counter,c
  6256  002274                     l4730:
  6257                           
  6258                           ;State_Mchn.c: 1042: }
  6259                           ;State_Mchn.c: 1043: if(Red_Led_Counter >= 1000/2)
  6260  002274  0EF4               	movlw	244
  6261  002276  5C05               	subwf	_Red_Led_Counter,w,c
  6262  002278  0E01               	movlw	1
  6263  00227A  5806               	subwfb	_Red_Led_Counter+1,w,c
  6264  00227C  A0D8               	btfss	status,0,c
  6265  00227E  D002               	goto	l540
  6266                           
  6267                           ;State_Mchn.c: 1044: {
  6268                           ;State_Mchn.c: 1045: PORTDbits.RD5 = 1;
  6269  002280  8A83               	bsf	3971,5,c	;volatile
  6270                           
  6271                           ;State_Mchn.c: 1046: }
  6272  002282  0012               	return	
  6273  002284                     l540:
  6274                           
  6275                           ;State_Mchn.c: 1047: else {PORTDbits.RD5 = 0;}
  6276  002284  9A83               	bcf	3971,5,c	;volatile
  6277                           
  6278                           ;State_Mchn.c: 1051: }
  6279                           
  6280                           ;State_Mchn.c: 1050: default : break;
  6281                           
  6282                           ;State_Mchn.c: 1048: break;
  6283  002286  0012               	return	
  6284  002288                     l4736:
  6285  002288  503A               	movf	Red_Led@Operation,w,c
  6286                           
  6287                           ; Switch size 1, requested type "space"
  6288                           ; Number of cases is 4, Range of values is 0 to 3
  6289                           ; switch strategies available:
  6290                           ; Name         Instructions Cycles
  6291                           ; simple_byte           13     7 (average)
  6292                           ;	Chosen strategy is simple_byte
  6293  00228A  0A00               	xorlw	0	; case 0
  6294  00228C  B4D8               	btfsc	status,2,c
  6295  00228E  D7CC               	goto	l531
  6296  002290  0A01               	xorlw	1	; case 1
  6297  002292  B4D8               	btfsc	status,2,c
  6298  002294  D7CB               	goto	l533
  6299  002296  0A03               	xorlw	3	; case 2
  6300  002298  B4D8               	btfsc	status,2,c
  6301  00229A  D7CA               	goto	l4714
  6302  00229C  0A01               	xorlw	1	; case 3
  6303  00229E  A4D8               	btfss	status,2,c
  6304  0022A0  0012               	return	
  6305  0022A2  D7DC               	goto	l4724
  6306  0022A4                     __end_of_Red_Led:
  6307                           	opt stack 0
  6308                           tblptru	equ	0xFF8
  6309                           tblptrh	equ	0xFF7
  6310                           tblptrl	equ	0xFF6
  6311                           tablat	equ	0xFF5
  6312                           postinc0	equ	0xFEE
  6313                           wreg	equ	0xFE8
  6314                           postdec1	equ	0xFE5
  6315                           fsr1l	equ	0xFE1
  6316                           status	equ	0xFD8
  6317                           
  6318 ;; *************** function _INCRxAPIxVAL *****************
  6319 ;; Defined at:
  6320 ;;		line 144 in file "../api.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;  index           1    wreg     unsigned char 
  6323 ;; Auto vars:     Size  Location     Type
  6324 ;;  index           1   20[COMRAM] unsigned char 
  6325 ;;  value           2   18[COMRAM] unsigned int 
  6326 ;; Return value:  Size  Location     Type
  6327 ;;                  1    wreg      void 
  6328 ;; Registers used:
  6329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6330 ;; Tracked objects:
  6331 ;;		On entry : 0/0
  6332 ;;		On exit  : 0/0
  6333 ;;		Unchanged: 0/0
  6334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6335 ;;      Params:         0       0       0       0       0       0       0       0       0
  6336 ;;      Locals:         3       0       0       0       0       0       0       0       0
  6337 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6338 ;;      Totals:         3       0       0       0       0       0       0       0       0
  6339 ;;Total ram usage:        3 bytes
  6340 ;; Hardware stack levels used:    1
  6341 ;; Hardware stack levels required when called:    5
  6342 ;; This function calls:
  6343 ;;		_GETxAPIxVAL
  6344 ;;		_SETxAPIxVAL
  6345 ;; This function is called by:
  6346 ;;		_Update_StateMchn
  6347 ;; This function uses a non-reentrant model
  6348 ;;
  6349                           
  6350                           	psect	text14
  6351  00256E                     __ptext14:
  6352                           	opt stack 0
  6353  00256E                     _INCRxAPIxVAL:
  6354                           	opt stack 24
  6355                           
  6356                           ;incstack = 0
  6357                           ;INCRxAPIxVAL@index stored from wreg
  6358  00256E  6E3F               	movwf	INCRxAPIxVAL@index,c
  6359                           
  6360                           ;api.c: 145: unsigned int value;
  6361                           ;api.c: 146: value = GETxAPIxVAL(index);
  6362  002570  503F               	movf	INCRxAPIxVAL@index,w,c
  6363  002572  ECD7  F012         	call	_GETxAPIxVAL
  6364  002576  C03A  F03D         	movff	?_GETxAPIxVAL,INCRxAPIxVAL@value
  6365  00257A  C03B  F03E         	movff	?_GETxAPIxVAL+1,INCRxAPIxVAL@value+1
  6366                           
  6367                           ;api.c: 147: value++;
  6368  00257E  4A3D               	infsnz	INCRxAPIxVAL@value,f,c
  6369  002580  2A3E               	incf	INCRxAPIxVAL@value+1,f,c
  6370                           
  6371                           ;api.c: 148: SETxAPIxVAL(index, value);
  6372  002582  C03D  F03A         	movff	INCRxAPIxVAL@value,SETxAPIxVAL@value
  6373  002586  C03E  F03B         	movff	INCRxAPIxVAL@value+1,SETxAPIxVAL@value+1
  6374  00258A  503F               	movf	INCRxAPIxVAL@index,w,c
  6375  00258C  ECC9  F012         	call	_SETxAPIxVAL
  6376  002590  0012               	return		;funcret
  6377  002592                     __end_of_INCRxAPIxVAL:
  6378                           	opt stack 0
  6379                           tblptru	equ	0xFF8
  6380                           tblptrh	equ	0xFF7
  6381                           tblptrl	equ	0xFF6
  6382                           tablat	equ	0xFF5
  6383                           postinc0	equ	0xFEE
  6384                           wreg	equ	0xFE8
  6385                           postdec1	equ	0xFE5
  6386                           fsr1l	equ	0xFE1
  6387                           status	equ	0xFD8
  6388                           
  6389 ;; *************** function _Green_Led *****************
  6390 ;; Defined at:
  6391 ;;		line 968 in file "../State_Mchn.c"
  6392 ;; Parameters:    Size  Location     Type
  6393 ;;  Operation       1    wreg     unsigned char 
  6394 ;; Auto vars:     Size  Location     Type
  6395 ;;  Operation       1   15[COMRAM] unsigned char 
  6396 ;; Return value:  Size  Location     Type
  6397 ;;                  1    wreg      void 
  6398 ;; Registers used:
  6399 ;;		wreg, status,2, status,0
  6400 ;; Tracked objects:
  6401 ;;		On entry : 0/0
  6402 ;;		On exit  : 0/0
  6403 ;;		Unchanged: 0/0
  6404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6405 ;;      Params:         0       0       0       0       0       0       0       0       0
  6406 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6407 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6408 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6409 ;;Total ram usage:        1 bytes
  6410 ;; Hardware stack levels used:    1
  6411 ;; Hardware stack levels required when called:    4
  6412 ;; This function calls:
  6413 ;;		Nothing
  6414 ;; This function is called by:
  6415 ;;		_Update_StateMchn
  6416 ;; This function uses a non-reentrant model
  6417 ;;
  6418                           
  6419                           	psect	text15
  6420  0022A4                     __ptext15:
  6421                           	opt stack 0
  6422  0022A4                     _Green_Led:
  6423                           	opt stack 25
  6424                           
  6425                           ;incstack = 0
  6426                           ;Green_Led@Operation stored from wreg
  6427  0022A4  6E3A               	movwf	Green_Led@Operation,c
  6428                           
  6429                           ;State_Mchn.c: 970: switch(Operation)
  6430  0022A6  D030               	goto	l4710
  6431  0022A8                     l515:
  6432  0022A8  9C83               	bcf	3971,6,c	;volatile
  6433  0022AA  0012               	return	
  6434  0022AC                     l517:
  6435  0022AC  8C83               	bsf	3971,6,c	;volatile
  6436  0022AE  0012               	return	
  6437  0022B0                     l4688:
  6438  0022B0  4A03               	infsnz	_Green_Led_Counter,f,c
  6439  0022B2  2A04               	incf	_Green_Led_Counter+1,f,c
  6440                           
  6441                           ;State_Mchn.c: 977: if(Green_Led_Counter >= 3000)
  6442  0022B4  0EB8               	movlw	184
  6443  0022B6  5C03               	subwf	_Green_Led_Counter,w,c
  6444  0022B8  0E0B               	movlw	11
  6445  0022BA  5804               	subwfb	_Green_Led_Counter+1,w,c
  6446  0022BC  A0D8               	btfss	status,0,c
  6447  0022BE  D004               	goto	l4694
  6448                           
  6449                           ;State_Mchn.c: 978: {
  6450                           ;State_Mchn.c: 979: Green_Led_Counter = 0;
  6451  0022C0  0E00               	movlw	0
  6452  0022C2  6E04               	movwf	_Green_Led_Counter+1,c
  6453  0022C4  0E00               	movlw	0
  6454  0022C6  6E03               	movwf	_Green_Led_Counter,c
  6455  0022C8                     l4694:
  6456                           
  6457                           ;State_Mchn.c: 980: }
  6458                           ;State_Mchn.c: 981: if(Green_Led_Counter >= 3000/2)
  6459  0022C8  0EDC               	movlw	220
  6460  0022CA  5C03               	subwf	_Green_Led_Counter,w,c
  6461  0022CC  0E05               	movlw	5
  6462  0022CE  5804               	subwfb	_Green_Led_Counter+1,w,c
  6463  0022D0  A0D8               	btfss	status,0,c
  6464  0022D2  D002               	goto	l520
  6465                           
  6466                           ;State_Mchn.c: 982: {
  6467                           ;State_Mchn.c: 983: PORTDbits.RD6 = 1;
  6468  0022D4  8C83               	bsf	3971,6,c	;volatile
  6469                           
  6470                           ;State_Mchn.c: 984: }
  6471  0022D6  0012               	return	
  6472  0022D8                     l520:
  6473                           
  6474                           ;State_Mchn.c: 985: else {PORTDbits.RD6 = 0;}
  6475  0022D8  9C83               	bcf	3971,6,c	;volatile
  6476                           
  6477                           ;State_Mchn.c: 986: break;
  6478  0022DA  0012               	return	
  6479  0022DC                     l4698:
  6480  0022DC  4A03               	infsnz	_Green_Led_Counter,f,c
  6481  0022DE  2A04               	incf	_Green_Led_Counter+1,f,c
  6482                           
  6483                           ;State_Mchn.c: 989: if(Green_Led_Counter >= 1000)
  6484  0022E0  0EE8               	movlw	232
  6485  0022E2  5C03               	subwf	_Green_Led_Counter,w,c
  6486  0022E4  0E03               	movlw	3
  6487  0022E6  5804               	subwfb	_Green_Led_Counter+1,w,c
  6488  0022E8  A0D8               	btfss	status,0,c
  6489  0022EA  D004               	goto	l4704
  6490                           
  6491                           ;State_Mchn.c: 990: {
  6492                           ;State_Mchn.c: 991: Green_Led_Counter = 0;
  6493  0022EC  0E00               	movlw	0
  6494  0022EE  6E04               	movwf	_Green_Led_Counter+1,c
  6495  0022F0  0E00               	movlw	0
  6496  0022F2  6E03               	movwf	_Green_Led_Counter,c
  6497  0022F4                     l4704:
  6498                           
  6499                           ;State_Mchn.c: 992: }
  6500                           ;State_Mchn.c: 993: if(Green_Led_Counter >= 1000/2)
  6501  0022F4  0EF4               	movlw	244
  6502  0022F6  5C03               	subwf	_Green_Led_Counter,w,c
  6503  0022F8  0E01               	movlw	1
  6504  0022FA  5804               	subwfb	_Green_Led_Counter+1,w,c
  6505  0022FC  A0D8               	btfss	status,0,c
  6506  0022FE  D002               	goto	l524
  6507                           
  6508                           ;State_Mchn.c: 994: {
  6509                           ;State_Mchn.c: 995: PORTDbits.RD6 = 1;
  6510  002300  8C83               	bsf	3971,6,c	;volatile
  6511                           
  6512                           ;State_Mchn.c: 996: }
  6513  002302  0012               	return	
  6514  002304                     l524:
  6515                           
  6516                           ;State_Mchn.c: 997: else {PORTDbits.RD6 = 0;}
  6517  002304  9C83               	bcf	3971,6,c	;volatile
  6518                           
  6519                           ;State_Mchn.c: 1001: }
  6520                           
  6521                           ;State_Mchn.c: 1000: default : break;
  6522                           
  6523                           ;State_Mchn.c: 998: break;
  6524  002306  0012               	return	
  6525  002308                     l4710:
  6526  002308  503A               	movf	Green_Led@Operation,w,c
  6527                           
  6528                           ; Switch size 1, requested type "space"
  6529                           ; Number of cases is 4, Range of values is 0 to 3
  6530                           ; switch strategies available:
  6531                           ; Name         Instructions Cycles
  6532                           ; simple_byte           13     7 (average)
  6533                           ;	Chosen strategy is simple_byte
  6534  00230A  0A00               	xorlw	0	; case 0
  6535  00230C  B4D8               	btfsc	status,2,c
  6536  00230E  D7CC               	goto	l515
  6537  002310  0A01               	xorlw	1	; case 1
  6538  002312  B4D8               	btfsc	status,2,c
  6539  002314  D7CB               	goto	l517
  6540  002316  0A03               	xorlw	3	; case 2
  6541  002318  B4D8               	btfsc	status,2,c
  6542  00231A  D7CA               	goto	l4688
  6543  00231C  0A01               	xorlw	1	; case 3
  6544  00231E  A4D8               	btfss	status,2,c
  6545  002320  0012               	return	
  6546  002322  D7DC               	goto	l4698
  6547  002324                     __end_of_Green_Led:
  6548                           	opt stack 0
  6549                           tblptru	equ	0xFF8
  6550                           tblptrh	equ	0xFF7
  6551                           tblptrl	equ	0xFF6
  6552                           tablat	equ	0xFF5
  6553                           postinc0	equ	0xFEE
  6554                           wreg	equ	0xFE8
  6555                           postdec1	equ	0xFE5
  6556                           fsr1l	equ	0xFE1
  6557                           status	equ	0xFD8
  6558                           
  6559 ;; *************** function _Eeprom_Store *****************
  6560 ;; Defined at:
  6561 ;;		line 2156 in file "../State_Mchn.c"
  6562 ;; Parameters:    Size  Location     Type
  6563 ;;		None
  6564 ;; Auto vars:     Size  Location     Type
  6565 ;;		None
  6566 ;; Return value:  Size  Location     Type
  6567 ;;                  1    wreg      void 
  6568 ;; Registers used:
  6569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6570 ;; Tracked objects:
  6571 ;;		On entry : 0/0
  6572 ;;		On exit  : 0/0
  6573 ;;		Unchanged: 0/0
  6574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6575 ;;      Params:         0       0       0       0       0       0       0       0       0
  6576 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6577 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6578 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6579 ;;Total ram usage:        0 bytes
  6580 ;; Hardware stack levels used:    1
  6581 ;; Hardware stack levels required when called:    5
  6582 ;; This function calls:
  6583 ;;		_GETxAPIxVAL
  6584 ;; This function is called by:
  6585 ;;		_Update_StateMchn
  6586 ;; This function uses a non-reentrant model
  6587 ;;
  6588                           
  6589                           	psect	text16
  6590  00200E                     __ptext16:
  6591                           	opt stack 0
  6592  00200E                     _Eeprom_Store:
  6593                           	opt stack 24
  6594                           
  6595                           ;State_Mchn.c: 2158: INTCON = 0x00;
  6596                           
  6597                           ;incstack = 0
  6598  00200E  0E00               	movlw	0
  6599  002010  6EF2               	movwf	intcon,c	;volatile
  6600                           
  6601                           ;State_Mchn.c: 2160: EECON1bits.EEPGD = 0;
  6602  002012  9EA6               	bcf	4006,7,c	;volatile
  6603                           
  6604                           ;State_Mchn.c: 2161: EECON1bits.WREN = 1;
  6605  002014  84A6               	bsf	4006,2,c	;volatile
  6606                           
  6607                           ;State_Mchn.c: 2162: EEADR = 0x01;
  6608  002016  0E01               	movlw	1
  6609  002018  6EA9               	movwf	4009,c	;volatile
  6610                           
  6611                           ;State_Mchn.c: 2163: EEDATA = GETxAPIxVAL(7);
  6612  00201A  0E07               	movlw	7
  6613  00201C  ECD7  F012         	call	_GETxAPIxVAL
  6614  002020  503A               	movf	?_GETxAPIxVAL,w,c
  6615  002022  6EA8               	movwf	4008,c	;volatile
  6616                           
  6617                           ;State_Mchn.c: 2164: EECON2 = 0x55;
  6618  002024  0E55               	movlw	85
  6619  002026  6EA7               	movwf	4007,c	;volatile
  6620                           
  6621                           ;State_Mchn.c: 2165: EECON2 = 0xaa;
  6622  002028  0EAA               	movlw	170
  6623  00202A  6EA7               	movwf	4007,c	;volatile
  6624                           
  6625                           ;State_Mchn.c: 2166: EECON1bits.WR = 1;
  6626  00202C  82A6               	bsf	4006,1,c	;volatile
  6627  00202E                     l902:
  6628  00202E  A8A1               	btfss	4001,4,c	;volatile
  6629  002030  D7FE               	goto	l902
  6630                           
  6631                           ;State_Mchn.c: 2168: PIR2bits.EEIF = 0;
  6632  002032  98A1               	bcf	4001,4,c	;volatile
  6633                           
  6634                           ;State_Mchn.c: 2170: EECON1bits.EEPGD = 0;
  6635  002034  9EA6               	bcf	4006,7,c	;volatile
  6636                           
  6637                           ;State_Mchn.c: 2171: EECON1bits.WREN = 1;
  6638  002036  84A6               	bsf	4006,2,c	;volatile
  6639                           
  6640                           ;State_Mchn.c: 2172: EEADR = 0x00;
  6641  002038  0E00               	movlw	0
  6642  00203A  6EA9               	movwf	4009,c	;volatile
  6643                           
  6644                           ;State_Mchn.c: 2173: EEDATA = GETxAPIxVAL(7)>>8;
  6645  00203C  0E07               	movlw	7
  6646  00203E  ECD7  F012         	call	_GETxAPIxVAL
  6647  002042  C03B  F03A         	movff	?_GETxAPIxVAL+1,?_GETxAPIxVAL
  6648  002046  6A3B               	clrf	?_GETxAPIxVAL+1,c
  6649  002048  503A               	movf	?_GETxAPIxVAL,w,c
  6650  00204A  6EA8               	movwf	4008,c	;volatile
  6651                           
  6652                           ;State_Mchn.c: 2174: EECON2 = 0x55;
  6653  00204C  0E55               	movlw	85
  6654  00204E  6EA7               	movwf	4007,c	;volatile
  6655                           
  6656                           ;State_Mchn.c: 2175: EECON2 = 0xaa;
  6657  002050  0EAA               	movlw	170
  6658  002052  6EA7               	movwf	4007,c	;volatile
  6659                           
  6660                           ;State_Mchn.c: 2176: EECON1bits.WR = 1;
  6661  002054  82A6               	bsf	4006,1,c	;volatile
  6662  002056                     l905:
  6663  002056  A8A1               	btfss	4001,4,c	;volatile
  6664  002058  D7FE               	goto	l905
  6665                           
  6666                           ;State_Mchn.c: 2178: PIR2bits.EEIF = 0;
  6667  00205A  98A1               	bcf	4001,4,c	;volatile
  6668                           
  6669                           ;State_Mchn.c: 2180: EECON1bits.EEPGD = 0;
  6670  00205C  9EA6               	bcf	4006,7,c	;volatile
  6671                           
  6672                           ;State_Mchn.c: 2181: EECON1bits.WREN = 1;
  6673  00205E  84A6               	bsf	4006,2,c	;volatile
  6674                           
  6675                           ;State_Mchn.c: 2182: EEADR = 0x03;
  6676  002060  0E03               	movlw	3
  6677  002062  6EA9               	movwf	4009,c	;volatile
  6678                           
  6679                           ;State_Mchn.c: 2183: EEDATA = GETxAPIxVAL(8);
  6680  002064  0E08               	movlw	8
  6681  002066  ECD7  F012         	call	_GETxAPIxVAL
  6682  00206A  503A               	movf	?_GETxAPIxVAL,w,c
  6683  00206C  6EA8               	movwf	4008,c	;volatile
  6684                           
  6685                           ;State_Mchn.c: 2184: EECON2 = 0x55;
  6686  00206E  0E55               	movlw	85
  6687  002070  6EA7               	movwf	4007,c	;volatile
  6688                           
  6689                           ;State_Mchn.c: 2185: EECON2 = 0xaa;
  6690  002072  0EAA               	movlw	170
  6691  002074  6EA7               	movwf	4007,c	;volatile
  6692                           
  6693                           ;State_Mchn.c: 2186: EECON1bits.WR = 1;
  6694  002076  82A6               	bsf	4006,1,c	;volatile
  6695  002078                     l908:
  6696  002078  A8A1               	btfss	4001,4,c	;volatile
  6697  00207A  D7FE               	goto	l908
  6698                           
  6699                           ;State_Mchn.c: 2188: PIR2bits.EEIF = 0;
  6700  00207C  98A1               	bcf	4001,4,c	;volatile
  6701                           
  6702                           ;State_Mchn.c: 2190: EECON1bits.EEPGD = 0;
  6703  00207E  9EA6               	bcf	4006,7,c	;volatile
  6704                           
  6705                           ;State_Mchn.c: 2191: EECON1bits.WREN = 1;
  6706  002080  84A6               	bsf	4006,2,c	;volatile
  6707                           
  6708                           ;State_Mchn.c: 2192: EEADR = 0x02;
  6709  002082  0E02               	movlw	2
  6710  002084  6EA9               	movwf	4009,c	;volatile
  6711                           
  6712                           ;State_Mchn.c: 2193: EEDATA = GETxAPIxVAL(8)>>8;
  6713  002086  0E08               	movlw	8
  6714  002088  ECD7  F012         	call	_GETxAPIxVAL
  6715  00208C  C03B  F03A         	movff	?_GETxAPIxVAL+1,?_GETxAPIxVAL
  6716  002090  6A3B               	clrf	?_GETxAPIxVAL+1,c
  6717  002092  503A               	movf	?_GETxAPIxVAL,w,c
  6718  002094  6EA8               	movwf	4008,c	;volatile
  6719                           
  6720                           ;State_Mchn.c: 2194: EECON2 = 0x55;
  6721  002096  0E55               	movlw	85
  6722  002098  6EA7               	movwf	4007,c	;volatile
  6723                           
  6724                           ;State_Mchn.c: 2195: EECON2 = 0xaa;
  6725  00209A  0EAA               	movlw	170
  6726  00209C  6EA7               	movwf	4007,c	;volatile
  6727                           
  6728                           ;State_Mchn.c: 2196: EECON1bits.WR = 1;
  6729  00209E  82A6               	bsf	4006,1,c	;volatile
  6730  0020A0                     l911:
  6731  0020A0  A8A1               	btfss	4001,4,c	;volatile
  6732  0020A2  D7FE               	goto	l911
  6733                           
  6734                           ;State_Mchn.c: 2198: PIR2bits.EEIF = 0;
  6735  0020A4  98A1               	bcf	4001,4,c	;volatile
  6736                           
  6737                           ;State_Mchn.c: 2200: EECON1bits.EEPGD = 0;
  6738  0020A6  9EA6               	bcf	4006,7,c	;volatile
  6739                           
  6740                           ;State_Mchn.c: 2201: EECON1bits.WREN = 1;
  6741  0020A8  84A6               	bsf	4006,2,c	;volatile
  6742                           
  6743                           ;State_Mchn.c: 2202: EEADR = 0x04;
  6744  0020AA  0E04               	movlw	4
  6745  0020AC  6EA9               	movwf	4009,c	;volatile
  6746                           
  6747                           ;State_Mchn.c: 2203: EEDATA = GETxAPIxVAL(9);
  6748  0020AE  0E09               	movlw	9
  6749  0020B0  ECD7  F012         	call	_GETxAPIxVAL
  6750  0020B4  503A               	movf	?_GETxAPIxVAL,w,c
  6751  0020B6  6EA8               	movwf	4008,c	;volatile
  6752                           
  6753                           ;State_Mchn.c: 2204: EECON2 = 0x55;
  6754  0020B8  0E55               	movlw	85
  6755  0020BA  6EA7               	movwf	4007,c	;volatile
  6756                           
  6757                           ;State_Mchn.c: 2205: EECON2 = 0xaa;
  6758  0020BC  0EAA               	movlw	170
  6759  0020BE  6EA7               	movwf	4007,c	;volatile
  6760                           
  6761                           ;State_Mchn.c: 2206: EECON1bits.WR = 1;
  6762  0020C0  82A6               	bsf	4006,1,c	;volatile
  6763  0020C2                     l914:
  6764  0020C2  A8A1               	btfss	4001,4,c	;volatile
  6765  0020C4  D7FE               	goto	l914
  6766                           
  6767                           ;State_Mchn.c: 2208: PIR2bits.EEIF = 0;
  6768  0020C6  98A1               	bcf	4001,4,c	;volatile
  6769                           
  6770                           ;State_Mchn.c: 2211: INTCON = 0xA0;
  6771  0020C8  0EA0               	movlw	160
  6772  0020CA  6EF2               	movwf	intcon,c	;volatile
  6773  0020CC  0012               	return		;funcret
  6774  0020CE                     __end_of_Eeprom_Store:
  6775                           	opt stack 0
  6776                           tblptru	equ	0xFF8
  6777                           tblptrh	equ	0xFF7
  6778                           tblptrl	equ	0xFF6
  6779                           tablat	equ	0xFF5
  6780                           intcon	equ	0xFF2
  6781                           postinc0	equ	0xFEE
  6782                           wreg	equ	0xFE8
  6783                           postdec1	equ	0xFE5
  6784                           fsr1l	equ	0xFE1
  6785                           status	equ	0xFD8
  6786                           
  6787 ;; *************** function _Debounce_Inputs *****************
  6788 ;; Defined at:
  6789 ;;		line 1870 in file "../State_Mchn.c"
  6790 ;; Parameters:    Size  Location     Type
  6791 ;;		None
  6792 ;; Auto vars:     Size  Location     Type
  6793 ;;		None
  6794 ;; Return value:  Size  Location     Type
  6795 ;;                  1    wreg      void 
  6796 ;; Registers used:
  6797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6798 ;; Tracked objects:
  6799 ;;		On entry : 0/0
  6800 ;;		On exit  : 0/0
  6801 ;;		Unchanged: 0/0
  6802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6803 ;;      Params:         0       0       0       0       0       0       0       0       0
  6804 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6805 ;;      Temps:          2       0       0       0       0       0       0       0       0
  6806 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6807 ;;Total ram usage:        2 bytes
  6808 ;; Hardware stack levels used:    1
  6809 ;; Hardware stack levels required when called:    5
  6810 ;; This function calls:
  6811 ;;		_GETxAPIxVAL
  6812 ;;		_SETxAPIxVAL
  6813 ;; This function is called by:
  6814 ;;		_Update_StateMchn
  6815 ;; This function uses a non-reentrant model
  6816 ;;
  6817                           
  6818                           	psect	text17
  6819  000F0C                     __ptext17:
  6820                           	opt stack 0
  6821  000F0C                     _Debounce_Inputs:
  6822                           	opt stack 24
  6823                           
  6824                           ;State_Mchn.c: 1872: switch(PORTDbits.RD2)
  6825                           
  6826                           ;incstack = 0
  6827  000F0C  D020               	goto	l4432
  6828  000F0E                     l4418:
  6829  000F0E  0E00               	movlw	0
  6830  000F10  6E11               	movwf	_Reed_Contact_LF_Counter,c
  6831                           
  6832                           ;State_Mchn.c: 1875: SETxAPIxVAL(15, 0);
  6833  000F12  0E00               	movlw	0
  6834  000F14  6E3B               	movwf	SETxAPIxVAL@value+1,c
  6835  000F16  0E00               	movlw	0
  6836  000F18  6E3A               	movwf	SETxAPIxVAL@value,c
  6837  000F1A  0E0F               	movlw	15
  6838  000F1C  ECC9  F012         	call	_SETxAPIxVAL
  6839                           
  6840                           ;State_Mchn.c: 1876: break;
  6841  000F20  D042               	goto	l4448
  6842  000F22                     l4422:
  6843  000F22  5011               	movf	_Reed_Contact_LF_Counter,w,c
  6844  000F24  6E3D               	movwf	??_Debounce_Inputs& (0+255),c
  6845  000F26  6A3E               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  6846  000F28  0E0B               	movlw	11
  6847  000F2A  ECD7  F012         	call	_GETxAPIxVAL
  6848  000F2E  503D               	movf	??_Debounce_Inputs,w,c
  6849  000F30  5C3A               	subwf	?_GETxAPIxVAL,w,c
  6850  000F32  503E               	movf	??_Debounce_Inputs+1,w,c
  6851  000F34  583B               	subwfb	?_GETxAPIxVAL+1,w,c
  6852  000F36  A0D8               	btfss	status,0,c
  6853  000F38  D002               	goto	l4428
  6854                           
  6855                           ;State_Mchn.c: 1879: {
  6856                           ;State_Mchn.c: 1880: Reed_Contact_LF_Counter++;
  6857  000F3A  2A11               	incf	_Reed_Contact_LF_Counter,f,c
  6858                           
  6859                           ;State_Mchn.c: 1882: }
  6860                           
  6861                           ;State_Mchn.c: 1881: break;
  6862  000F3C  D034               	goto	l4448
  6863  000F3E                     l4428:
  6864                           
  6865                           ;State_Mchn.c: 1883: else {SETxAPIxVAL(15, 1);}
  6866  000F3E  0E00               	movlw	0
  6867  000F40  6E3B               	movwf	SETxAPIxVAL@value+1,c
  6868  000F42  0E01               	movlw	1
  6869  000F44  6E3A               	movwf	SETxAPIxVAL@value,c
  6870  000F46  0E0F               	movlw	15
  6871  000F48  ECC9  F012         	call	_SETxAPIxVAL
  6872                           
  6873                           ;State_Mchn.c: 1887: }
  6874                           
  6875                           ;State_Mchn.c: 1886: default : break;
  6876                           
  6877                           ;State_Mchn.c: 1884: break;
  6878  000F4C  D02C               	goto	l4448
  6879  000F4E                     l4432:
  6880  000F4E  A483               	btfss	3971,2,c	;volatile
  6881  000F50  D002               	goto	u2630
  6882  000F52  0E01               	movlw	1
  6883  000F54  D001               	goto	u2636
  6884  000F56                     u2630:
  6885  000F56  0E00               	movlw	0
  6886  000F58                     u2636:
  6887                           
  6888                           ; Switch size 1, requested type "space"
  6889                           ; Number of cases is 2, Range of values is 0 to 1
  6890                           ; switch strategies available:
  6891                           ; Name         Instructions Cycles
  6892                           ; simple_byte            7     4 (average)
  6893                           ;	Chosen strategy is simple_byte
  6894  000F58  0A00               	xorlw	0	; case 0
  6895  000F5A  B4D8               	btfsc	status,2,c
  6896  000F5C  D7E2               	goto	l4422
  6897  000F5E  0A01               	xorlw	1	; case 1
  6898  000F60  B4D8               	btfsc	status,2,c
  6899  000F62  D7D5               	goto	l4418
  6900                           
  6901                           ;State_Mchn.c: 1890: switch(PORTDbits.RD3)
  6902  000F64  D020               	goto	l4448
  6903  000F66                     l4434:
  6904  000F66  0E00               	movlw	0
  6905  000F68  6E10               	movwf	_Reed_Contact_LB_Counter,c
  6906                           
  6907                           ;State_Mchn.c: 1893: SETxAPIxVAL(14, 0);
  6908  000F6A  0E00               	movlw	0
  6909  000F6C  6E3B               	movwf	SETxAPIxVAL@value+1,c
  6910  000F6E  0E00               	movlw	0
  6911  000F70  6E3A               	movwf	SETxAPIxVAL@value,c
  6912  000F72  0E0E               	movlw	14
  6913  000F74  ECC9  F012         	call	_SETxAPIxVAL
  6914                           
  6915                           ;State_Mchn.c: 1894: break;
  6916  000F78  D042               	goto	l4464
  6917  000F7A                     l4438:
  6918  000F7A  5010               	movf	_Reed_Contact_LB_Counter,w,c
  6919  000F7C  6E3D               	movwf	??_Debounce_Inputs& (0+255),c
  6920  000F7E  6A3E               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  6921  000F80  0E0B               	movlw	11
  6922  000F82  ECD7  F012         	call	_GETxAPIxVAL
  6923  000F86  503D               	movf	??_Debounce_Inputs,w,c
  6924  000F88  5C3A               	subwf	?_GETxAPIxVAL,w,c
  6925  000F8A  503E               	movf	??_Debounce_Inputs+1,w,c
  6926  000F8C  583B               	subwfb	?_GETxAPIxVAL+1,w,c
  6927  000F8E  A0D8               	btfss	status,0,c
  6928  000F90  D002               	goto	l4444
  6929                           
  6930                           ;State_Mchn.c: 1897: {
  6931                           ;State_Mchn.c: 1898: Reed_Contact_LB_Counter++;
  6932  000F92  2A10               	incf	_Reed_Contact_LB_Counter,f,c
  6933                           
  6934                           ;State_Mchn.c: 1900: }
  6935                           
  6936                           ;State_Mchn.c: 1899: break;
  6937  000F94  D034               	goto	l4464
  6938  000F96                     l4444:
  6939                           
  6940                           ;State_Mchn.c: 1901: else {SETxAPIxVAL(14, 1);}
  6941  000F96  0E00               	movlw	0
  6942  000F98  6E3B               	movwf	SETxAPIxVAL@value+1,c
  6943  000F9A  0E01               	movlw	1
  6944  000F9C  6E3A               	movwf	SETxAPIxVAL@value,c
  6945  000F9E  0E0E               	movlw	14
  6946  000FA0  ECC9  F012         	call	_SETxAPIxVAL
  6947                           
  6948                           ;State_Mchn.c: 1905: }
  6949                           
  6950                           ;State_Mchn.c: 1904: default : break;
  6951                           
  6952                           ;State_Mchn.c: 1902: break;
  6953  000FA4  D02C               	goto	l4464
  6954  000FA6                     l4448:
  6955  000FA6  A683               	btfss	3971,3,c	;volatile
  6956  000FA8  D002               	goto	u2650
  6957  000FAA  0E01               	movlw	1
  6958  000FAC  D001               	goto	u2656
  6959  000FAE                     u2650:
  6960  000FAE  0E00               	movlw	0
  6961  000FB0                     u2656:
  6962                           
  6963                           ; Switch size 1, requested type "space"
  6964                           ; Number of cases is 2, Range of values is 0 to 1
  6965                           ; switch strategies available:
  6966                           ; Name         Instructions Cycles
  6967                           ; simple_byte            7     4 (average)
  6968                           ;	Chosen strategy is simple_byte
  6969  000FB0  0A00               	xorlw	0	; case 0
  6970  000FB2  B4D8               	btfsc	status,2,c
  6971  000FB4  D7E2               	goto	l4438
  6972  000FB6  0A01               	xorlw	1	; case 1
  6973  000FB8  B4D8               	btfsc	status,2,c
  6974  000FBA  D7D5               	goto	l4434
  6975                           
  6976                           ;State_Mchn.c: 1908: switch(PORTDbits.RD0)
  6977  000FBC  D020               	goto	l4464
  6978  000FBE                     l4450:
  6979  000FBE  0E00               	movlw	0
  6980  000FC0  6E15               	movwf	_Reed_Contact_RF_Counter,c
  6981                           
  6982                           ;State_Mchn.c: 1911: SETxAPIxVAL(13, 0);
  6983  000FC2  0E00               	movlw	0
  6984  000FC4  6E3B               	movwf	SETxAPIxVAL@value+1,c
  6985  000FC6  0E00               	movlw	0
  6986  000FC8  6E3A               	movwf	SETxAPIxVAL@value,c
  6987  000FCA  0E0D               	movlw	13
  6988  000FCC  ECC9  F012         	call	_SETxAPIxVAL
  6989                           
  6990                           ;State_Mchn.c: 1912: break;
  6991  000FD0  D042               	goto	l4480
  6992  000FD2                     l4454:
  6993  000FD2  5015               	movf	_Reed_Contact_RF_Counter,w,c
  6994  000FD4  6E3D               	movwf	??_Debounce_Inputs& (0+255),c
  6995  000FD6  6A3E               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  6996  000FD8  0E0B               	movlw	11
  6997  000FDA  ECD7  F012         	call	_GETxAPIxVAL
  6998  000FDE  503D               	movf	??_Debounce_Inputs,w,c
  6999  000FE0  5C3A               	subwf	?_GETxAPIxVAL,w,c
  7000  000FE2  503E               	movf	??_Debounce_Inputs+1,w,c
  7001  000FE4  583B               	subwfb	?_GETxAPIxVAL+1,w,c
  7002  000FE6  A0D8               	btfss	status,0,c
  7003  000FE8  D002               	goto	l4460
  7004                           
  7005                           ;State_Mchn.c: 1915: {
  7006                           ;State_Mchn.c: 1916: Reed_Contact_RF_Counter++;
  7007  000FEA  2A15               	incf	_Reed_Contact_RF_Counter,f,c
  7008                           
  7009                           ;State_Mchn.c: 1918: }
  7010                           
  7011                           ;State_Mchn.c: 1917: break;
  7012  000FEC  D034               	goto	l4480
  7013  000FEE                     l4460:
  7014                           
  7015                           ;State_Mchn.c: 1919: else {SETxAPIxVAL(13, 1);}
  7016  000FEE  0E00               	movlw	0
  7017  000FF0  6E3B               	movwf	SETxAPIxVAL@value+1,c
  7018  000FF2  0E01               	movlw	1
  7019  000FF4  6E3A               	movwf	SETxAPIxVAL@value,c
  7020  000FF6  0E0D               	movlw	13
  7021  000FF8  ECC9  F012         	call	_SETxAPIxVAL
  7022                           
  7023                           ;State_Mchn.c: 1923: }
  7024                           
  7025                           ;State_Mchn.c: 1922: default : break;
  7026                           
  7027                           ;State_Mchn.c: 1920: break;
  7028  000FFC  D02C               	goto	l4480
  7029  000FFE                     l4464:
  7030  000FFE  A083               	btfss	3971,0,c	;volatile
  7031  001000  D002               	goto	u2670
  7032  001002  0E01               	movlw	1
  7033  001004  D001               	goto	u2676
  7034  001006                     u2670:
  7035  001006  0E00               	movlw	0
  7036  001008                     u2676:
  7037                           
  7038                           ; Switch size 1, requested type "space"
  7039                           ; Number of cases is 2, Range of values is 0 to 1
  7040                           ; switch strategies available:
  7041                           ; Name         Instructions Cycles
  7042                           ; simple_byte            7     4 (average)
  7043                           ;	Chosen strategy is simple_byte
  7044  001008  0A00               	xorlw	0	; case 0
  7045  00100A  B4D8               	btfsc	status,2,c
  7046  00100C  D7E2               	goto	l4454
  7047  00100E  0A01               	xorlw	1	; case 1
  7048  001010  B4D8               	btfsc	status,2,c
  7049  001012  D7D5               	goto	l4450
  7050                           
  7051                           ;State_Mchn.c: 1926: switch(PORTDbits.RD1)
  7052  001014  D020               	goto	l4480
  7053  001016                     l4466:
  7054  001016  0E00               	movlw	0
  7055  001018  6E14               	movwf	_Reed_Contact_RB_Counter,c
  7056                           
  7057                           ;State_Mchn.c: 1929: SETxAPIxVAL(12, 0);
  7058  00101A  0E00               	movlw	0
  7059  00101C  6E3B               	movwf	SETxAPIxVAL@value+1,c
  7060  00101E  0E00               	movlw	0
  7061  001020  6E3A               	movwf	SETxAPIxVAL@value,c
  7062  001022  0E0C               	movlw	12
  7063  001024  ECC9  F012         	call	_SETxAPIxVAL
  7064                           
  7065                           ;State_Mchn.c: 1930: break;
  7066  001028  D042               	goto	l4496
  7067  00102A                     l4470:
  7068  00102A  5014               	movf	_Reed_Contact_RB_Counter,w,c
  7069  00102C  6E3D               	movwf	??_Debounce_Inputs& (0+255),c
  7070  00102E  6A3E               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  7071  001030  0E0B               	movlw	11
  7072  001032  ECD7  F012         	call	_GETxAPIxVAL
  7073  001036  503D               	movf	??_Debounce_Inputs,w,c
  7074  001038  5C3A               	subwf	?_GETxAPIxVAL,w,c
  7075  00103A  503E               	movf	??_Debounce_Inputs+1,w,c
  7076  00103C  583B               	subwfb	?_GETxAPIxVAL+1,w,c
  7077  00103E  A0D8               	btfss	status,0,c
  7078  001040  D002               	goto	l4476
  7079                           
  7080                           ;State_Mchn.c: 1933: {
  7081                           ;State_Mchn.c: 1934: Reed_Contact_RB_Counter++;
  7082  001042  2A14               	incf	_Reed_Contact_RB_Counter,f,c
  7083                           
  7084                           ;State_Mchn.c: 1936: }
  7085                           
  7086                           ;State_Mchn.c: 1935: break;
  7087  001044  D034               	goto	l4496
  7088  001046                     l4476:
  7089                           
  7090                           ;State_Mchn.c: 1937: else {SETxAPIxVAL(12, 1);}
  7091  001046  0E00               	movlw	0
  7092  001048  6E3B               	movwf	SETxAPIxVAL@value+1,c
  7093  00104A  0E01               	movlw	1
  7094  00104C  6E3A               	movwf	SETxAPIxVAL@value,c
  7095  00104E  0E0C               	movlw	12
  7096  001050  ECC9  F012         	call	_SETxAPIxVAL
  7097                           
  7098                           ;State_Mchn.c: 1941: }
  7099                           
  7100                           ;State_Mchn.c: 1940: default : break;
  7101                           
  7102                           ;State_Mchn.c: 1938: break;
  7103  001054  D02C               	goto	l4496
  7104  001056                     l4480:
  7105  001056  A283               	btfss	3971,1,c	;volatile
  7106  001058  D002               	goto	u2690
  7107  00105A  0E01               	movlw	1
  7108  00105C  D001               	goto	u2696
  7109  00105E                     u2690:
  7110  00105E  0E00               	movlw	0
  7111  001060                     u2696:
  7112                           
  7113                           ; Switch size 1, requested type "space"
  7114                           ; Number of cases is 2, Range of values is 0 to 1
  7115                           ; switch strategies available:
  7116                           ; Name         Instructions Cycles
  7117                           ; simple_byte            7     4 (average)
  7118                           ;	Chosen strategy is simple_byte
  7119  001060  0A00               	xorlw	0	; case 0
  7120  001062  B4D8               	btfsc	status,2,c
  7121  001064  D7E2               	goto	l4470
  7122  001066  0A01               	xorlw	1	; case 1
  7123  001068  B4D8               	btfsc	status,2,c
  7124  00106A  D7D5               	goto	l4466
  7125                           
  7126                           ;State_Mchn.c: 1944: switch(!PORTBbits.RB0)
  7127  00106C  D020               	goto	l4496
  7128  00106E                     l4482:
  7129  00106E  500E               	movf	_Button_Contact_Counter_Start,w,c
  7130  001070  6E3D               	movwf	??_Debounce_Inputs& (0+255),c
  7131  001072  6A3E               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  7132  001074  0E0B               	movlw	11
  7133  001076  ECD7  F012         	call	_GETxAPIxVAL
  7134  00107A  503D               	movf	??_Debounce_Inputs,w,c
  7135  00107C  5C3A               	subwf	?_GETxAPIxVAL,w,c
  7136  00107E  503E               	movf	??_Debounce_Inputs+1,w,c
  7137  001080  583B               	subwfb	?_GETxAPIxVAL+1,w,c
  7138  001082  A0D8               	btfss	status,0,c
  7139  001084  D002               	goto	l4488
  7140                           
  7141                           ;State_Mchn.c: 1947: {
  7142                           ;State_Mchn.c: 1948: Button_Contact_Counter_Start++;
  7143  001086  2A0E               	incf	_Button_Contact_Counter_Start,f,c
  7144                           
  7145                           ;State_Mchn.c: 1950: }
  7146                           
  7147                           ;State_Mchn.c: 1949: break;
  7148  001088  D045               	goto	l4512
  7149  00108A                     l4488:
  7150                           
  7151                           ;State_Mchn.c: 1951: else {SETxAPIxVAL(16, 1); }
  7152  00108A  0E00               	movlw	0
  7153  00108C  6E3B               	movwf	SETxAPIxVAL@value+1,c
  7154  00108E  0E01               	movlw	1
  7155  001090  6E3A               	movwf	SETxAPIxVAL@value,c
  7156  001092  0E10               	movlw	16
  7157  001094  ECC9  F012         	call	_SETxAPIxVAL
  7158                           
  7159                           ;State_Mchn.c: 1952: break;
  7160  001098  D03D               	goto	l4512
  7161  00109A                     l4490:
  7162  00109A  0E00               	movlw	0
  7163  00109C  6E0E               	movwf	_Button_Contact_Counter_Start,c
  7164                           
  7165                           ;State_Mchn.c: 1955: SETxAPIxVAL(16, 0);
  7166  00109E  0E00               	movlw	0
  7167  0010A0  6E3B               	movwf	SETxAPIxVAL@value+1,c
  7168  0010A2  0E00               	movlw	0
  7169  0010A4  6E3A               	movwf	SETxAPIxVAL@value,c
  7170  0010A6  0E10               	movlw	16
  7171  0010A8  ECC9  F012         	call	_SETxAPIxVAL
  7172                           
  7173                           ;State_Mchn.c: 1959: }
  7174                           
  7175                           ;State_Mchn.c: 1958: default : break;
  7176                           
  7177                           ;State_Mchn.c: 1956: break;
  7178  0010AC  D033               	goto	l4512
  7179  0010AE                     l4496:
  7180  0010AE  B081               	btfsc	3969,0,c	;volatile
  7181  0010B0  D002               	goto	u2710
  7182  0010B2  0E01               	movlw	1
  7183  0010B4  D001               	goto	u2720
  7184  0010B6                     u2710:
  7185  0010B6  0E00               	movlw	0
  7186  0010B8                     u2720:
  7187  0010B8  6E3D               	movwf	??_Debounce_Inputs& (0+255),c
  7188  0010BA  6A3E               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  7189                           
  7190                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7191                           ; Switch size 1, requested type "space"
  7192                           ; Number of cases is 1, Range of values is 0 to 0
  7193                           ; switch strategies available:
  7194                           ; Name         Instructions Cycles
  7195                           ; simple_byte            4     3 (average)
  7196                           ;	Chosen strategy is simple_byte
  7197  0010BC  503E               	movf	??_Debounce_Inputs+1,w,c
  7198  0010BE  0A00               	xorlw	0	; case 0
  7199  0010C0  A4D8               	btfss	status,2,c
  7200  0010C2  D028               	goto	l4512
  7201                           
  7202                           ; Switch size 1, requested type "space"
  7203                           ; Number of cases is 2, Range of values is 0 to 1
  7204                           ; switch strategies available:
  7205                           ; Name         Instructions Cycles
  7206                           ; simple_byte            7     4 (average)
  7207                           ;	Chosen strategy is simple_byte
  7208  0010C4  503D               	movf	??_Debounce_Inputs,w,c
  7209  0010C6  0A00               	xorlw	0	; case 0
  7210  0010C8  B4D8               	btfsc	status,2,c
  7211  0010CA  D7E7               	goto	l4490
  7212  0010CC  0A01               	xorlw	1	; case 1
  7213  0010CE  B4D8               	btfsc	status,2,c
  7214  0010D0  D7CE               	goto	l4482
  7215                           
  7216                           ;State_Mchn.c: 1962: switch(!PORTDbits.RD7)
  7217  0010D2  D020               	goto	l4512
  7218  0010D4                     l4498:
  7219  0010D4  500F               	movf	_Button_Contact_Counter_Stop,w,c
  7220  0010D6  6E3D               	movwf	??_Debounce_Inputs& (0+255),c
  7221  0010D8  6A3E               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  7222  0010DA  0E0B               	movlw	11
  7223  0010DC  ECD7  F012         	call	_GETxAPIxVAL
  7224  0010E0  503D               	movf	??_Debounce_Inputs,w,c
  7225  0010E2  5C3A               	subwf	?_GETxAPIxVAL,w,c
  7226  0010E4  503E               	movf	??_Debounce_Inputs+1,w,c
  7227  0010E6  583B               	subwfb	?_GETxAPIxVAL+1,w,c
  7228  0010E8  A0D8               	btfss	status,0,c
  7229  0010EA  D002               	goto	l4504
  7230                           
  7231                           ;State_Mchn.c: 1965: {
  7232                           ;State_Mchn.c: 1966: Button_Contact_Counter_Stop++;
  7233  0010EC  2A0F               	incf	_Button_Contact_Counter_Stop,f,c
  7234                           
  7235                           ;State_Mchn.c: 1968: }
  7236                           
  7237                           ;State_Mchn.c: 1967: break;
  7238  0010EE  D045               	goto	l4528
  7239  0010F0                     l4504:
  7240                           
  7241                           ;State_Mchn.c: 1969: else {SETxAPIxVAL(17, 1); }
  7242  0010F0  0E00               	movlw	0
  7243  0010F2  6E3B               	movwf	SETxAPIxVAL@value+1,c
  7244  0010F4  0E01               	movlw	1
  7245  0010F6  6E3A               	movwf	SETxAPIxVAL@value,c
  7246  0010F8  0E11               	movlw	17
  7247  0010FA  ECC9  F012         	call	_SETxAPIxVAL
  7248                           
  7249                           ;State_Mchn.c: 1970: break;
  7250  0010FE  D03D               	goto	l4528
  7251  001100                     l4506:
  7252  001100  0E00               	movlw	0
  7253  001102  6E0F               	movwf	_Button_Contact_Counter_Stop,c
  7254                           
  7255                           ;State_Mchn.c: 1973: SETxAPIxVAL(17, 0);
  7256  001104  0E00               	movlw	0
  7257  001106  6E3B               	movwf	SETxAPIxVAL@value+1,c
  7258  001108  0E00               	movlw	0
  7259  00110A  6E3A               	movwf	SETxAPIxVAL@value,c
  7260  00110C  0E11               	movlw	17
  7261  00110E  ECC9  F012         	call	_SETxAPIxVAL
  7262                           
  7263                           ;State_Mchn.c: 1977: }
  7264                           
  7265                           ;State_Mchn.c: 1976: default : break;
  7266                           
  7267                           ;State_Mchn.c: 1974: break;
  7268  001112  D033               	goto	l4528
  7269  001114                     l4512:
  7270  001114  BE83               	btfsc	3971,7,c	;volatile
  7271  001116  D002               	goto	u2740
  7272  001118  0E01               	movlw	1
  7273  00111A  D001               	goto	u2750
  7274  00111C                     u2740:
  7275  00111C  0E00               	movlw	0
  7276  00111E                     u2750:
  7277  00111E  6E3D               	movwf	??_Debounce_Inputs& (0+255),c
  7278  001120  6A3E               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  7279                           
  7280                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7281                           ; Switch size 1, requested type "space"
  7282                           ; Number of cases is 1, Range of values is 0 to 0
  7283                           ; switch strategies available:
  7284                           ; Name         Instructions Cycles
  7285                           ; simple_byte            4     3 (average)
  7286                           ;	Chosen strategy is simple_byte
  7287  001122  503E               	movf	??_Debounce_Inputs+1,w,c
  7288  001124  0A00               	xorlw	0	; case 0
  7289  001126  A4D8               	btfss	status,2,c
  7290  001128  D028               	goto	l4528
  7291                           
  7292                           ; Switch size 1, requested type "space"
  7293                           ; Number of cases is 2, Range of values is 0 to 1
  7294                           ; switch strategies available:
  7295                           ; Name         Instructions Cycles
  7296                           ; simple_byte            7     4 (average)
  7297                           ;	Chosen strategy is simple_byte
  7298  00112A  503D               	movf	??_Debounce_Inputs,w,c
  7299  00112C  0A00               	xorlw	0	; case 0
  7300  00112E  B4D8               	btfsc	status,2,c
  7301  001130  D7E7               	goto	l4506
  7302  001132  0A01               	xorlw	1	; case 1
  7303  001134  B4D8               	btfsc	status,2,c
  7304  001136  D7CE               	goto	l4498
  7305                           
  7306                           ;State_Mchn.c: 1980: switch(!PORTBbits.RB1)
  7307  001138  D020               	goto	l4528
  7308  00113A                     l4514:
  7309  00113A  500B               	movf	_Button_Contact_Counter_Middle,w,c
  7310  00113C  6E3D               	movwf	??_Debounce_Inputs& (0+255),c
  7311  00113E  6A3E               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  7312  001140  0E0B               	movlw	11
  7313  001142  ECD7  F012         	call	_GETxAPIxVAL
  7314  001146  503D               	movf	??_Debounce_Inputs,w,c
  7315  001148  5C3A               	subwf	?_GETxAPIxVAL,w,c
  7316  00114A  503E               	movf	??_Debounce_Inputs+1,w,c
  7317  00114C  583B               	subwfb	?_GETxAPIxVAL+1,w,c
  7318  00114E  A0D8               	btfss	status,0,c
  7319  001150  D002               	goto	l4520
  7320                           
  7321                           ;State_Mchn.c: 1983: {
  7322                           ;State_Mchn.c: 1984: Button_Contact_Counter_Middle++;
  7323  001152  2A0B               	incf	_Button_Contact_Counter_Middle,f,c
  7324                           
  7325                           ;State_Mchn.c: 1986: }
  7326                           
  7327                           ;State_Mchn.c: 1985: break;
  7328  001154  D045               	goto	l4544
  7329  001156                     l4520:
  7330                           
  7331                           ;State_Mchn.c: 1987: else {SETxAPIxVAL(18, 1); }
  7332  001156  0E00               	movlw	0
  7333  001158  6E3B               	movwf	SETxAPIxVAL@value+1,c
  7334  00115A  0E01               	movlw	1
  7335  00115C  6E3A               	movwf	SETxAPIxVAL@value,c
  7336  00115E  0E12               	movlw	18
  7337  001160  ECC9  F012         	call	_SETxAPIxVAL
  7338                           
  7339                           ;State_Mchn.c: 1988: break;
  7340  001164  D03D               	goto	l4544
  7341  001166                     l4522:
  7342  001166  0E00               	movlw	0
  7343  001168  6E0B               	movwf	_Button_Contact_Counter_Middle,c
  7344                           
  7345                           ;State_Mchn.c: 1991: SETxAPIxVAL(18, 0);
  7346  00116A  0E00               	movlw	0
  7347  00116C  6E3B               	movwf	SETxAPIxVAL@value+1,c
  7348  00116E  0E00               	movlw	0
  7349  001170  6E3A               	movwf	SETxAPIxVAL@value,c
  7350  001172  0E12               	movlw	18
  7351  001174  ECC9  F012         	call	_SETxAPIxVAL
  7352                           
  7353                           ;State_Mchn.c: 1995: }
  7354                           
  7355                           ;State_Mchn.c: 1994: default : break;
  7356                           
  7357                           ;State_Mchn.c: 1992: break;
  7358  001178  D033               	goto	l4544
  7359  00117A                     l4528:
  7360  00117A  B281               	btfsc	3969,1,c	;volatile
  7361  00117C  D002               	goto	u2770
  7362  00117E  0E01               	movlw	1
  7363  001180  D001               	goto	u2780
  7364  001182                     u2770:
  7365  001182  0E00               	movlw	0
  7366  001184                     u2780:
  7367  001184  6E3D               	movwf	??_Debounce_Inputs& (0+255),c
  7368  001186  6A3E               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  7369                           
  7370                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7371                           ; Switch size 1, requested type "space"
  7372                           ; Number of cases is 1, Range of values is 0 to 0
  7373                           ; switch strategies available:
  7374                           ; Name         Instructions Cycles
  7375                           ; simple_byte            4     3 (average)
  7376                           ;	Chosen strategy is simple_byte
  7377  001188  503E               	movf	??_Debounce_Inputs+1,w,c
  7378  00118A  0A00               	xorlw	0	; case 0
  7379  00118C  A4D8               	btfss	status,2,c
  7380  00118E  D028               	goto	l4544
  7381                           
  7382                           ; Switch size 1, requested type "space"
  7383                           ; Number of cases is 2, Range of values is 0 to 1
  7384                           ; switch strategies available:
  7385                           ; Name         Instructions Cycles
  7386                           ; simple_byte            7     4 (average)
  7387                           ;	Chosen strategy is simple_byte
  7388  001190  503D               	movf	??_Debounce_Inputs,w,c
  7389  001192  0A00               	xorlw	0	; case 0
  7390  001194  B4D8               	btfsc	status,2,c
  7391  001196  D7E7               	goto	l4522
  7392  001198  0A01               	xorlw	1	; case 1
  7393  00119A  B4D8               	btfsc	status,2,c
  7394  00119C  D7CE               	goto	l4514
  7395                           
  7396                           ;State_Mchn.c: 1998: switch(!PORTBbits.RB5)
  7397  00119E  D020               	goto	l4544
  7398  0011A0                     l4530:
  7399  0011A0  5009               	movf	_Button_Contact_Counter_LB,w,c
  7400  0011A2  6E3D               	movwf	??_Debounce_Inputs& (0+255),c
  7401  0011A4  6A3E               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  7402  0011A6  0E0B               	movlw	11
  7403  0011A8  ECD7  F012         	call	_GETxAPIxVAL
  7404  0011AC  503D               	movf	??_Debounce_Inputs,w,c
  7405  0011AE  5C3A               	subwf	?_GETxAPIxVAL,w,c
  7406  0011B0  503E               	movf	??_Debounce_Inputs+1,w,c
  7407  0011B2  583B               	subwfb	?_GETxAPIxVAL+1,w,c
  7408  0011B4  A0D8               	btfss	status,0,c
  7409  0011B6  D002               	goto	l4536
  7410                           
  7411                           ;State_Mchn.c: 2001: {
  7412                           ;State_Mchn.c: 2002: Button_Contact_Counter_LB++;
  7413  0011B8  2A09               	incf	_Button_Contact_Counter_LB,f,c
  7414                           
  7415                           ;State_Mchn.c: 2004: }
  7416                           
  7417                           ;State_Mchn.c: 2003: break;
  7418  0011BA  D045               	goto	l4560
  7419  0011BC                     l4536:
  7420                           
  7421                           ;State_Mchn.c: 2005: else {SETxAPIxVAL(19, 1); }
  7422  0011BC  0E00               	movlw	0
  7423  0011BE  6E3B               	movwf	SETxAPIxVAL@value+1,c
  7424  0011C0  0E01               	movlw	1
  7425  0011C2  6E3A               	movwf	SETxAPIxVAL@value,c
  7426  0011C4  0E13               	movlw	19
  7427  0011C6  ECC9  F012         	call	_SETxAPIxVAL
  7428                           
  7429                           ;State_Mchn.c: 2006: break;
  7430  0011CA  D03D               	goto	l4560
  7431  0011CC                     l4538:
  7432  0011CC  0E00               	movlw	0
  7433  0011CE  6E09               	movwf	_Button_Contact_Counter_LB,c
  7434                           
  7435                           ;State_Mchn.c: 2009: SETxAPIxVAL(19, 0);
  7436  0011D0  0E00               	movlw	0
  7437  0011D2  6E3B               	movwf	SETxAPIxVAL@value+1,c
  7438  0011D4  0E00               	movlw	0
  7439  0011D6  6E3A               	movwf	SETxAPIxVAL@value,c
  7440  0011D8  0E13               	movlw	19
  7441  0011DA  ECC9  F012         	call	_SETxAPIxVAL
  7442                           
  7443                           ;State_Mchn.c: 2013: }
  7444                           
  7445                           ;State_Mchn.c: 2012: default : break;
  7446                           
  7447                           ;State_Mchn.c: 2010: break;
  7448  0011DE  D033               	goto	l4560
  7449  0011E0                     l4544:
  7450  0011E0  BA81               	btfsc	3969,5,c	;volatile
  7451  0011E2  D002               	goto	u2800
  7452  0011E4  0E01               	movlw	1
  7453  0011E6  D001               	goto	u2810
  7454  0011E8                     u2800:
  7455  0011E8  0E00               	movlw	0
  7456  0011EA                     u2810:
  7457  0011EA  6E3D               	movwf	??_Debounce_Inputs& (0+255),c
  7458  0011EC  6A3E               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  7459                           
  7460                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7461                           ; Switch size 1, requested type "space"
  7462                           ; Number of cases is 1, Range of values is 0 to 0
  7463                           ; switch strategies available:
  7464                           ; Name         Instructions Cycles
  7465                           ; simple_byte            4     3 (average)
  7466                           ;	Chosen strategy is simple_byte
  7467  0011EE  503E               	movf	??_Debounce_Inputs+1,w,c
  7468  0011F0  0A00               	xorlw	0	; case 0
  7469  0011F2  A4D8               	btfss	status,2,c
  7470  0011F4  D028               	goto	l4560
  7471                           
  7472                           ; Switch size 1, requested type "space"
  7473                           ; Number of cases is 2, Range of values is 0 to 1
  7474                           ; switch strategies available:
  7475                           ; Name         Instructions Cycles
  7476                           ; simple_byte            7     4 (average)
  7477                           ;	Chosen strategy is simple_byte
  7478  0011F6  503D               	movf	??_Debounce_Inputs,w,c
  7479  0011F8  0A00               	xorlw	0	; case 0
  7480  0011FA  B4D8               	btfsc	status,2,c
  7481  0011FC  D7E7               	goto	l4538
  7482  0011FE  0A01               	xorlw	1	; case 1
  7483  001200  B4D8               	btfsc	status,2,c
  7484  001202  D7CE               	goto	l4530
  7485                           
  7486                           ;State_Mchn.c: 2016: switch(!PORTBbits.RB4)
  7487  001204  D020               	goto	l4560
  7488  001206                     l4546:
  7489  001206  500A               	movf	_Button_Contact_Counter_LF,w,c
  7490  001208  6E3D               	movwf	??_Debounce_Inputs& (0+255),c
  7491  00120A  6A3E               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  7492  00120C  0E0B               	movlw	11
  7493  00120E  ECD7  F012         	call	_GETxAPIxVAL
  7494  001212  503D               	movf	??_Debounce_Inputs,w,c
  7495  001214  5C3A               	subwf	?_GETxAPIxVAL,w,c
  7496  001216  503E               	movf	??_Debounce_Inputs+1,w,c
  7497  001218  583B               	subwfb	?_GETxAPIxVAL+1,w,c
  7498  00121A  A0D8               	btfss	status,0,c
  7499  00121C  D002               	goto	l4552
  7500                           
  7501                           ;State_Mchn.c: 2019: {
  7502                           ;State_Mchn.c: 2020: Button_Contact_Counter_LF++;
  7503  00121E  2A0A               	incf	_Button_Contact_Counter_LF,f,c
  7504                           
  7505                           ;State_Mchn.c: 2022: }
  7506                           
  7507                           ;State_Mchn.c: 2021: break;
  7508  001220  D045               	goto	l4576
  7509  001222                     l4552:
  7510                           
  7511                           ;State_Mchn.c: 2023: else {SETxAPIxVAL(20, 1); }
  7512  001222  0E00               	movlw	0
  7513  001224  6E3B               	movwf	SETxAPIxVAL@value+1,c
  7514  001226  0E01               	movlw	1
  7515  001228  6E3A               	movwf	SETxAPIxVAL@value,c
  7516  00122A  0E14               	movlw	20
  7517  00122C  ECC9  F012         	call	_SETxAPIxVAL
  7518                           
  7519                           ;State_Mchn.c: 2024: break;
  7520  001230  D03D               	goto	l4576
  7521  001232                     l4554:
  7522  001232  0E00               	movlw	0
  7523  001234  6E0A               	movwf	_Button_Contact_Counter_LF,c
  7524                           
  7525                           ;State_Mchn.c: 2027: SETxAPIxVAL(20, 0);
  7526  001236  0E00               	movlw	0
  7527  001238  6E3B               	movwf	SETxAPIxVAL@value+1,c
  7528  00123A  0E00               	movlw	0
  7529  00123C  6E3A               	movwf	SETxAPIxVAL@value,c
  7530  00123E  0E14               	movlw	20
  7531  001240  ECC9  F012         	call	_SETxAPIxVAL
  7532                           
  7533                           ;State_Mchn.c: 2031: }
  7534                           
  7535                           ;State_Mchn.c: 2030: default : break;
  7536                           
  7537                           ;State_Mchn.c: 2028: break;
  7538  001244  D033               	goto	l4576
  7539  001246                     l4560:
  7540  001246  B881               	btfsc	3969,4,c	;volatile
  7541  001248  D002               	goto	u2830
  7542  00124A  0E01               	movlw	1
  7543  00124C  D001               	goto	u2840
  7544  00124E                     u2830:
  7545  00124E  0E00               	movlw	0
  7546  001250                     u2840:
  7547  001250  6E3D               	movwf	??_Debounce_Inputs& (0+255),c
  7548  001252  6A3E               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  7549                           
  7550                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7551                           ; Switch size 1, requested type "space"
  7552                           ; Number of cases is 1, Range of values is 0 to 0
  7553                           ; switch strategies available:
  7554                           ; Name         Instructions Cycles
  7555                           ; simple_byte            4     3 (average)
  7556                           ;	Chosen strategy is simple_byte
  7557  001254  503E               	movf	??_Debounce_Inputs+1,w,c
  7558  001256  0A00               	xorlw	0	; case 0
  7559  001258  A4D8               	btfss	status,2,c
  7560  00125A  D028               	goto	l4576
  7561                           
  7562                           ; Switch size 1, requested type "space"
  7563                           ; Number of cases is 2, Range of values is 0 to 1
  7564                           ; switch strategies available:
  7565                           ; Name         Instructions Cycles
  7566                           ; simple_byte            7     4 (average)
  7567                           ;	Chosen strategy is simple_byte
  7568  00125C  503D               	movf	??_Debounce_Inputs,w,c
  7569  00125E  0A00               	xorlw	0	; case 0
  7570  001260  B4D8               	btfsc	status,2,c
  7571  001262  D7E7               	goto	l4554
  7572  001264  0A01               	xorlw	1	; case 1
  7573  001266  B4D8               	btfsc	status,2,c
  7574  001268  D7CE               	goto	l4546
  7575                           
  7576                           ;State_Mchn.c: 2034: switch(!PORTBbits.RB3)
  7577  00126A  D020               	goto	l4576
  7578  00126C                     l4562:
  7579  00126C  500C               	movf	_Button_Contact_Counter_RB,w,c
  7580  00126E  6E3D               	movwf	??_Debounce_Inputs& (0+255),c
  7581  001270  6A3E               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  7582  001272  0E0B               	movlw	11
  7583  001274  ECD7  F012         	call	_GETxAPIxVAL
  7584  001278  503D               	movf	??_Debounce_Inputs,w,c
  7585  00127A  5C3A               	subwf	?_GETxAPIxVAL,w,c
  7586  00127C  503E               	movf	??_Debounce_Inputs+1,w,c
  7587  00127E  583B               	subwfb	?_GETxAPIxVAL+1,w,c
  7588  001280  A0D8               	btfss	status,0,c
  7589  001282  D002               	goto	l4568
  7590                           
  7591                           ;State_Mchn.c: 2037: {
  7592                           ;State_Mchn.c: 2038: Button_Contact_Counter_RB++;
  7593  001284  2A0C               	incf	_Button_Contact_Counter_RB,f,c
  7594                           
  7595                           ;State_Mchn.c: 2040: }
  7596                           
  7597                           ;State_Mchn.c: 2039: break;
  7598  001286  D045               	goto	l4592
  7599  001288                     l4568:
  7600                           
  7601                           ;State_Mchn.c: 2041: else {SETxAPIxVAL(21, 1); }
  7602  001288  0E00               	movlw	0
  7603  00128A  6E3B               	movwf	SETxAPIxVAL@value+1,c
  7604  00128C  0E01               	movlw	1
  7605  00128E  6E3A               	movwf	SETxAPIxVAL@value,c
  7606  001290  0E15               	movlw	21
  7607  001292  ECC9  F012         	call	_SETxAPIxVAL
  7608                           
  7609                           ;State_Mchn.c: 2042: break;
  7610  001296  D03D               	goto	l4592
  7611  001298                     l4570:
  7612  001298  0E00               	movlw	0
  7613  00129A  6E0C               	movwf	_Button_Contact_Counter_RB,c
  7614                           
  7615                           ;State_Mchn.c: 2045: SETxAPIxVAL(21, 0);
  7616  00129C  0E00               	movlw	0
  7617  00129E  6E3B               	movwf	SETxAPIxVAL@value+1,c
  7618  0012A0  0E00               	movlw	0
  7619  0012A2  6E3A               	movwf	SETxAPIxVAL@value,c
  7620  0012A4  0E15               	movlw	21
  7621  0012A6  ECC9  F012         	call	_SETxAPIxVAL
  7622                           
  7623                           ;State_Mchn.c: 2049: }
  7624                           
  7625                           ;State_Mchn.c: 2048: default : break;
  7626                           
  7627                           ;State_Mchn.c: 2046: break;
  7628  0012AA  D033               	goto	l4592
  7629  0012AC                     l4576:
  7630  0012AC  B681               	btfsc	3969,3,c	;volatile
  7631  0012AE  D002               	goto	u2860
  7632  0012B0  0E01               	movlw	1
  7633  0012B2  D001               	goto	u2870
  7634  0012B4                     u2860:
  7635  0012B4  0E00               	movlw	0
  7636  0012B6                     u2870:
  7637  0012B6  6E3D               	movwf	??_Debounce_Inputs& (0+255),c
  7638  0012B8  6A3E               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  7639                           
  7640                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7641                           ; Switch size 1, requested type "space"
  7642                           ; Number of cases is 1, Range of values is 0 to 0
  7643                           ; switch strategies available:
  7644                           ; Name         Instructions Cycles
  7645                           ; simple_byte            4     3 (average)
  7646                           ;	Chosen strategy is simple_byte
  7647  0012BA  503E               	movf	??_Debounce_Inputs+1,w,c
  7648  0012BC  0A00               	xorlw	0	; case 0
  7649  0012BE  A4D8               	btfss	status,2,c
  7650  0012C0  D028               	goto	l4592
  7651                           
  7652                           ; Switch size 1, requested type "space"
  7653                           ; Number of cases is 2, Range of values is 0 to 1
  7654                           ; switch strategies available:
  7655                           ; Name         Instructions Cycles
  7656                           ; simple_byte            7     4 (average)
  7657                           ;	Chosen strategy is simple_byte
  7658  0012C2  503D               	movf	??_Debounce_Inputs,w,c
  7659  0012C4  0A00               	xorlw	0	; case 0
  7660  0012C6  B4D8               	btfsc	status,2,c
  7661  0012C8  D7E7               	goto	l4570
  7662  0012CA  0A01               	xorlw	1	; case 1
  7663  0012CC  B4D8               	btfsc	status,2,c
  7664  0012CE  D7CE               	goto	l4562
  7665                           
  7666                           ;State_Mchn.c: 2052: switch(!PORTBbits.RB2)
  7667  0012D0  D020               	goto	l4592
  7668  0012D2                     l4578:
  7669  0012D2  500D               	movf	_Button_Contact_Counter_RF,w,c
  7670  0012D4  6E3D               	movwf	??_Debounce_Inputs& (0+255),c
  7671  0012D6  6A3E               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  7672  0012D8  0E0B               	movlw	11
  7673  0012DA  ECD7  F012         	call	_GETxAPIxVAL
  7674  0012DE  503D               	movf	??_Debounce_Inputs,w,c
  7675  0012E0  5C3A               	subwf	?_GETxAPIxVAL,w,c
  7676  0012E2  503E               	movf	??_Debounce_Inputs+1,w,c
  7677  0012E4  583B               	subwfb	?_GETxAPIxVAL+1,w,c
  7678  0012E6  A0D8               	btfss	status,0,c
  7679  0012E8  D002               	goto	l4584
  7680                           
  7681                           ;State_Mchn.c: 2055: {
  7682                           ;State_Mchn.c: 2056: Button_Contact_Counter_RF++;
  7683  0012EA  2A0D               	incf	_Button_Contact_Counter_RF,f,c
  7684                           
  7685                           ;State_Mchn.c: 2058: }
  7686                           
  7687                           ;State_Mchn.c: 2057: break;
  7688  0012EC  D045               	goto	l4608
  7689  0012EE                     l4584:
  7690                           
  7691                           ;State_Mchn.c: 2059: else {SETxAPIxVAL(22, 1); }
  7692  0012EE  0E00               	movlw	0
  7693  0012F0  6E3B               	movwf	SETxAPIxVAL@value+1,c
  7694  0012F2  0E01               	movlw	1
  7695  0012F4  6E3A               	movwf	SETxAPIxVAL@value,c
  7696  0012F6  0E16               	movlw	22
  7697  0012F8  ECC9  F012         	call	_SETxAPIxVAL
  7698                           
  7699                           ;State_Mchn.c: 2060: break;
  7700  0012FC  D03D               	goto	l4608
  7701  0012FE                     l4586:
  7702  0012FE  0E00               	movlw	0
  7703  001300  6E0D               	movwf	_Button_Contact_Counter_RF,c
  7704                           
  7705                           ;State_Mchn.c: 2063: SETxAPIxVAL(22, 0);
  7706  001302  0E00               	movlw	0
  7707  001304  6E3B               	movwf	SETxAPIxVAL@value+1,c
  7708  001306  0E00               	movlw	0
  7709  001308  6E3A               	movwf	SETxAPIxVAL@value,c
  7710  00130A  0E16               	movlw	22
  7711  00130C  ECC9  F012         	call	_SETxAPIxVAL
  7712                           
  7713                           ;State_Mchn.c: 2067: }
  7714                           
  7715                           ;State_Mchn.c: 2066: default : break;
  7716                           
  7717                           ;State_Mchn.c: 2064: break;
  7718  001310  D033               	goto	l4608
  7719  001312                     l4592:
  7720  001312  B481               	btfsc	3969,2,c	;volatile
  7721  001314  D002               	goto	u2890
  7722  001316  0E01               	movlw	1
  7723  001318  D001               	goto	u2900
  7724  00131A                     u2890:
  7725  00131A  0E00               	movlw	0
  7726  00131C                     u2900:
  7727  00131C  6E3D               	movwf	??_Debounce_Inputs& (0+255),c
  7728  00131E  6A3E               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  7729                           
  7730                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7731                           ; Switch size 1, requested type "space"
  7732                           ; Number of cases is 1, Range of values is 0 to 0
  7733                           ; switch strategies available:
  7734                           ; Name         Instructions Cycles
  7735                           ; simple_byte            4     3 (average)
  7736                           ;	Chosen strategy is simple_byte
  7737  001320  503E               	movf	??_Debounce_Inputs+1,w,c
  7738  001322  0A00               	xorlw	0	; case 0
  7739  001324  A4D8               	btfss	status,2,c
  7740  001326  D028               	goto	l4608
  7741                           
  7742                           ; Switch size 1, requested type "space"
  7743                           ; Number of cases is 2, Range of values is 0 to 1
  7744                           ; switch strategies available:
  7745                           ; Name         Instructions Cycles
  7746                           ; simple_byte            7     4 (average)
  7747                           ;	Chosen strategy is simple_byte
  7748  001328  503D               	movf	??_Debounce_Inputs,w,c
  7749  00132A  0A00               	xorlw	0	; case 0
  7750  00132C  B4D8               	btfsc	status,2,c
  7751  00132E  D7E7               	goto	l4586
  7752  001330  0A01               	xorlw	1	; case 1
  7753  001332  B4D8               	btfsc	status,2,c
  7754  001334  D7CE               	goto	l4578
  7755                           
  7756                           ;State_Mchn.c: 2070: switch(PORTCbits.RC1)
  7757  001336  D020               	goto	l4608
  7758  001338                     l4594:
  7759  001338  5013               	movf	_Reed_Contact_LMU_Counter,w,c
  7760  00133A  6E3D               	movwf	??_Debounce_Inputs& (0+255),c
  7761  00133C  6A3E               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  7762  00133E  0E0B               	movlw	11
  7763  001340  ECD7  F012         	call	_GETxAPIxVAL
  7764  001344  503D               	movf	??_Debounce_Inputs,w,c
  7765  001346  5C3A               	subwf	?_GETxAPIxVAL,w,c
  7766  001348  503E               	movf	??_Debounce_Inputs+1,w,c
  7767  00134A  583B               	subwfb	?_GETxAPIxVAL+1,w,c
  7768  00134C  A0D8               	btfss	status,0,c
  7769  00134E  D002               	goto	l4600
  7770                           
  7771                           ;State_Mchn.c: 2073: {
  7772                           ;State_Mchn.c: 2074: Reed_Contact_LMU_Counter++;
  7773  001350  2A13               	incf	_Reed_Contact_LMU_Counter,f,c
  7774                           
  7775                           ;State_Mchn.c: 2076: }
  7776                           
  7777                           ;State_Mchn.c: 2075: break;
  7778  001352  D03E               	goto	l4624
  7779  001354                     l4600:
  7780                           
  7781                           ;State_Mchn.c: 2077: else {SETxAPIxVAL(25, 1); }
  7782  001354  0E00               	movlw	0
  7783  001356  6E3B               	movwf	SETxAPIxVAL@value+1,c
  7784  001358  0E01               	movlw	1
  7785  00135A  6E3A               	movwf	SETxAPIxVAL@value,c
  7786  00135C  0E19               	movlw	25
  7787  00135E  ECC9  F012         	call	_SETxAPIxVAL
  7788                           
  7789                           ;State_Mchn.c: 2078: break;
  7790  001362  D036               	goto	l4624
  7791  001364                     l4602:
  7792  001364  0E00               	movlw	0
  7793  001366  6E13               	movwf	_Reed_Contact_LMU_Counter,c
  7794                           
  7795                           ;State_Mchn.c: 2081: SETxAPIxVAL(25, 0);
  7796  001368  0E00               	movlw	0
  7797  00136A  6E3B               	movwf	SETxAPIxVAL@value+1,c
  7798  00136C  0E00               	movlw	0
  7799  00136E  6E3A               	movwf	SETxAPIxVAL@value,c
  7800  001370  0E19               	movlw	25
  7801  001372  ECC9  F012         	call	_SETxAPIxVAL
  7802                           
  7803                           ;State_Mchn.c: 2085: }
  7804                           
  7805                           ;State_Mchn.c: 2084: default : break;
  7806                           
  7807                           ;State_Mchn.c: 2082: break;
  7808  001376  D02C               	goto	l4624
  7809  001378                     l4608:
  7810  001378  A282               	btfss	3970,1,c	;volatile
  7811  00137A  D002               	goto	u2920
  7812  00137C  0E01               	movlw	1
  7813  00137E  D001               	goto	u2926
  7814  001380                     u2920:
  7815  001380  0E00               	movlw	0
  7816  001382                     u2926:
  7817                           
  7818                           ; Switch size 1, requested type "space"
  7819                           ; Number of cases is 2, Range of values is 0 to 1
  7820                           ; switch strategies available:
  7821                           ; Name         Instructions Cycles
  7822                           ; simple_byte            7     4 (average)
  7823                           ;	Chosen strategy is simple_byte
  7824  001382  0A00               	xorlw	0	; case 0
  7825  001384  B4D8               	btfsc	status,2,c
  7826  001386  D7EE               	goto	l4602
  7827  001388  0A01               	xorlw	1	; case 1
  7828  00138A  B4D8               	btfsc	status,2,c
  7829  00138C  D7D5               	goto	l4594
  7830                           
  7831                           ;State_Mchn.c: 2088: switch(PORTDbits.RD4)
  7832  00138E  D020               	goto	l4624
  7833  001390                     l4610:
  7834  001390  5012               	movf	_Reed_Contact_LMD_Counter,w,c
  7835  001392  6E3D               	movwf	??_Debounce_Inputs& (0+255),c
  7836  001394  6A3E               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  7837  001396  0E0B               	movlw	11
  7838  001398  ECD7  F012         	call	_GETxAPIxVAL
  7839  00139C  503D               	movf	??_Debounce_Inputs,w,c
  7840  00139E  5C3A               	subwf	?_GETxAPIxVAL,w,c
  7841  0013A0  503E               	movf	??_Debounce_Inputs+1,w,c
  7842  0013A2  583B               	subwfb	?_GETxAPIxVAL+1,w,c
  7843  0013A4  A0D8               	btfss	status,0,c
  7844  0013A6  D002               	goto	l4616
  7845                           
  7846                           ;State_Mchn.c: 2091: {
  7847                           ;State_Mchn.c: 2092: Reed_Contact_LMD_Counter++;
  7848  0013A8  2A12               	incf	_Reed_Contact_LMD_Counter,f,c
  7849                           
  7850                           ;State_Mchn.c: 2094: }
  7851                           
  7852                           ;State_Mchn.c: 2093: break;
  7853  0013AA  D03E               	goto	l4640
  7854  0013AC                     l4616:
  7855                           
  7856                           ;State_Mchn.c: 2095: else {SETxAPIxVAL(26, 1); }
  7857  0013AC  0E00               	movlw	0
  7858  0013AE  6E3B               	movwf	SETxAPIxVAL@value+1,c
  7859  0013B0  0E01               	movlw	1
  7860  0013B2  6E3A               	movwf	SETxAPIxVAL@value,c
  7861  0013B4  0E1A               	movlw	26
  7862  0013B6  ECC9  F012         	call	_SETxAPIxVAL
  7863                           
  7864                           ;State_Mchn.c: 2096: break;
  7865  0013BA  D036               	goto	l4640
  7866  0013BC                     l4618:
  7867  0013BC  0E00               	movlw	0
  7868  0013BE  6E12               	movwf	_Reed_Contact_LMD_Counter,c
  7869                           
  7870                           ;State_Mchn.c: 2099: SETxAPIxVAL(26, 0);
  7871  0013C0  0E00               	movlw	0
  7872  0013C2  6E3B               	movwf	SETxAPIxVAL@value+1,c
  7873  0013C4  0E00               	movlw	0
  7874  0013C6  6E3A               	movwf	SETxAPIxVAL@value,c
  7875  0013C8  0E1A               	movlw	26
  7876  0013CA  ECC9  F012         	call	_SETxAPIxVAL
  7877                           
  7878                           ;State_Mchn.c: 2103: }
  7879                           
  7880                           ;State_Mchn.c: 2102: default : break;
  7881                           
  7882                           ;State_Mchn.c: 2100: break;
  7883  0013CE  D02C               	goto	l4640
  7884  0013D0                     l4624:
  7885  0013D0  A883               	btfss	3971,4,c	;volatile
  7886  0013D2  D002               	goto	u2940
  7887  0013D4  0E01               	movlw	1
  7888  0013D6  D001               	goto	u2946
  7889  0013D8                     u2940:
  7890  0013D8  0E00               	movlw	0
  7891  0013DA                     u2946:
  7892                           
  7893                           ; Switch size 1, requested type "space"
  7894                           ; Number of cases is 2, Range of values is 0 to 1
  7895                           ; switch strategies available:
  7896                           ; Name         Instructions Cycles
  7897                           ; simple_byte            7     4 (average)
  7898                           ;	Chosen strategy is simple_byte
  7899  0013DA  0A00               	xorlw	0	; case 0
  7900  0013DC  B4D8               	btfsc	status,2,c
  7901  0013DE  D7EE               	goto	l4618
  7902  0013E0  0A01               	xorlw	1	; case 1
  7903  0013E2  B4D8               	btfsc	status,2,c
  7904  0013E4  D7D5               	goto	l4610
  7905                           
  7906                           ;State_Mchn.c: 2106: switch(PORTCbits.RC4)
  7907  0013E6  D020               	goto	l4640
  7908  0013E8                     l4626:
  7909  0013E8  5017               	movf	_Reed_Contact_RMU_Counter,w,c
  7910  0013EA  6E3D               	movwf	??_Debounce_Inputs& (0+255),c
  7911  0013EC  6A3E               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  7912  0013EE  0E0B               	movlw	11
  7913  0013F0  ECD7  F012         	call	_GETxAPIxVAL
  7914  0013F4  503D               	movf	??_Debounce_Inputs,w,c
  7915  0013F6  5C3A               	subwf	?_GETxAPIxVAL,w,c
  7916  0013F8  503E               	movf	??_Debounce_Inputs+1,w,c
  7917  0013FA  583B               	subwfb	?_GETxAPIxVAL+1,w,c
  7918  0013FC  A0D8               	btfss	status,0,c
  7919  0013FE  D002               	goto	l4632
  7920                           
  7921                           ;State_Mchn.c: 2109: {
  7922                           ;State_Mchn.c: 2110: Reed_Contact_RMU_Counter++;
  7923  001400  2A17               	incf	_Reed_Contact_RMU_Counter,f,c
  7924                           
  7925                           ;State_Mchn.c: 2112: }
  7926                           
  7927                           ;State_Mchn.c: 2111: break;
  7928  001402  D03E               	goto	l4656
  7929  001404                     l4632:
  7930                           
  7931                           ;State_Mchn.c: 2113: else {SETxAPIxVAL(27, 1); }
  7932  001404  0E00               	movlw	0
  7933  001406  6E3B               	movwf	SETxAPIxVAL@value+1,c
  7934  001408  0E01               	movlw	1
  7935  00140A  6E3A               	movwf	SETxAPIxVAL@value,c
  7936  00140C  0E1B               	movlw	27
  7937  00140E  ECC9  F012         	call	_SETxAPIxVAL
  7938                           
  7939                           ;State_Mchn.c: 2114: break;
  7940  001412  D036               	goto	l4656
  7941  001414                     l4634:
  7942  001414  0E00               	movlw	0
  7943  001416  6E17               	movwf	_Reed_Contact_RMU_Counter,c
  7944                           
  7945                           ;State_Mchn.c: 2117: SETxAPIxVAL(27, 0);
  7946  001418  0E00               	movlw	0
  7947  00141A  6E3B               	movwf	SETxAPIxVAL@value+1,c
  7948  00141C  0E00               	movlw	0
  7949  00141E  6E3A               	movwf	SETxAPIxVAL@value,c
  7950  001420  0E1B               	movlw	27
  7951  001422  ECC9  F012         	call	_SETxAPIxVAL
  7952                           
  7953                           ;State_Mchn.c: 2121: }
  7954                           
  7955                           ;State_Mchn.c: 2120: default : break;
  7956                           
  7957                           ;State_Mchn.c: 2118: break;
  7958  001426  D02C               	goto	l4656
  7959  001428                     l4640:
  7960  001428  A882               	btfss	3970,4,c	;volatile
  7961  00142A  D002               	goto	u2960
  7962  00142C  0E01               	movlw	1
  7963  00142E  D001               	goto	u2966
  7964  001430                     u2960:
  7965  001430  0E00               	movlw	0
  7966  001432                     u2966:
  7967                           
  7968                           ; Switch size 1, requested type "space"
  7969                           ; Number of cases is 2, Range of values is 0 to 1
  7970                           ; switch strategies available:
  7971                           ; Name         Instructions Cycles
  7972                           ; simple_byte            7     4 (average)
  7973                           ;	Chosen strategy is simple_byte
  7974  001432  0A00               	xorlw	0	; case 0
  7975  001434  B4D8               	btfsc	status,2,c
  7976  001436  D7EE               	goto	l4634
  7977  001438  0A01               	xorlw	1	; case 1
  7978  00143A  B4D8               	btfsc	status,2,c
  7979  00143C  D7D5               	goto	l4626
  7980                           
  7981                           ;State_Mchn.c: 2124: switch(PORTCbits.RC5)
  7982  00143E  D020               	goto	l4656
  7983  001440                     l4642:
  7984  001440  5016               	movf	_Reed_Contact_RMD_Counter,w,c
  7985  001442  6E3D               	movwf	??_Debounce_Inputs& (0+255),c
  7986  001444  6A3E               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  7987  001446  0E0B               	movlw	11
  7988  001448  ECD7  F012         	call	_GETxAPIxVAL
  7989  00144C  503D               	movf	??_Debounce_Inputs,w,c
  7990  00144E  5C3A               	subwf	?_GETxAPIxVAL,w,c
  7991  001450  503E               	movf	??_Debounce_Inputs+1,w,c
  7992  001452  583B               	subwfb	?_GETxAPIxVAL+1,w,c
  7993  001454  A0D8               	btfss	status,0,c
  7994  001456  D002               	goto	l4648
  7995                           
  7996                           ;State_Mchn.c: 2127: {
  7997                           ;State_Mchn.c: 2128: Reed_Contact_RMD_Counter++;
  7998  001458  2A16               	incf	_Reed_Contact_RMD_Counter,f,c
  7999                           
  8000                           ;State_Mchn.c: 2130: }
  8001                           
  8002                           ;State_Mchn.c: 2129: break;
  8003  00145A  0012               	return	
  8004  00145C                     l4648:
  8005                           
  8006                           ;State_Mchn.c: 2131: else {SETxAPIxVAL(28, 1); }
  8007  00145C  0E00               	movlw	0
  8008  00145E  6E3B               	movwf	SETxAPIxVAL@value+1,c
  8009  001460  0E01               	movlw	1
  8010  001462  6E3A               	movwf	SETxAPIxVAL@value,c
  8011  001464  0E1C               	movlw	28
  8012  001466  ECC9  F012         	call	_SETxAPIxVAL
  8013                           
  8014                           ;State_Mchn.c: 2132: break;
  8015  00146A  0012               	return	
  8016  00146C                     l4650:
  8017  00146C  0E00               	movlw	0
  8018  00146E  6E16               	movwf	_Reed_Contact_RMD_Counter,c
  8019                           
  8020                           ;State_Mchn.c: 2135: SETxAPIxVAL(28, 0);
  8021  001470  0E00               	movlw	0
  8022  001472  6E3B               	movwf	SETxAPIxVAL@value+1,c
  8023  001474  0E00               	movlw	0
  8024  001476  6E3A               	movwf	SETxAPIxVAL@value,c
  8025  001478  0E1C               	movlw	28
  8026  00147A  ECC9  F012         	call	_SETxAPIxVAL
  8027                           
  8028                           ;State_Mchn.c: 2139: }
  8029                           
  8030                           ;State_Mchn.c: 2138: default : break;
  8031                           
  8032                           ;State_Mchn.c: 2136: break;
  8033  00147E  0012               	return	
  8034  001480                     l4656:
  8035  001480  AA82               	btfss	3970,5,c	;volatile
  8036  001482  D002               	goto	u2980
  8037  001484  0E01               	movlw	1
  8038  001486  D001               	goto	u2986
  8039  001488                     u2980:
  8040  001488  0E00               	movlw	0
  8041  00148A                     u2986:
  8042                           
  8043                           ; Switch size 1, requested type "space"
  8044                           ; Number of cases is 2, Range of values is 0 to 1
  8045                           ; switch strategies available:
  8046                           ; Name         Instructions Cycles
  8047                           ; simple_byte            7     4 (average)
  8048                           ;	Chosen strategy is simple_byte
  8049  00148A  0A00               	xorlw	0	; case 0
  8050  00148C  B4D8               	btfsc	status,2,c
  8051  00148E  D7EE               	goto	l4650
  8052  001490  0A01               	xorlw	1	; case 1
  8053  001492  A4D8               	btfss	status,2,c
  8054  001494  0012               	return	
  8055  001496  D7D4               	goto	l4642
  8056  001498                     __end_of_Debounce_Inputs:
  8057                           	opt stack 0
  8058                           tblptru	equ	0xFF8
  8059                           tblptrh	equ	0xFF7
  8060                           tblptrl	equ	0xFF6
  8061                           tablat	equ	0xFF5
  8062                           intcon	equ	0xFF2
  8063                           postinc0	equ	0xFEE
  8064                           wreg	equ	0xFE8
  8065                           postdec1	equ	0xFE5
  8066                           fsr1l	equ	0xFE1
  8067                           status	equ	0xFD8
  8068                           
  8069 ;; *************** function _DECRxAPIxVAL *****************
  8070 ;; Defined at:
  8071 ;;		line 151 in file "../api.c"
  8072 ;; Parameters:    Size  Location     Type
  8073 ;;  index           1    wreg     unsigned char 
  8074 ;; Auto vars:     Size  Location     Type
  8075 ;;  index           1   20[COMRAM] unsigned char 
  8076 ;;  value           2   18[COMRAM] unsigned int 
  8077 ;; Return value:  Size  Location     Type
  8078 ;;                  1    wreg      void 
  8079 ;; Registers used:
  8080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8081 ;; Tracked objects:
  8082 ;;		On entry : 0/0
  8083 ;;		On exit  : 0/0
  8084 ;;		Unchanged: 0/0
  8085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8086 ;;      Params:         0       0       0       0       0       0       0       0       0
  8087 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8088 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8089 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8090 ;;Total ram usage:        3 bytes
  8091 ;; Hardware stack levels used:    1
  8092 ;; Hardware stack levels required when called:    5
  8093 ;; This function calls:
  8094 ;;		_GETxAPIxVAL
  8095 ;;		_SETxAPIxVAL
  8096 ;; This function is called by:
  8097 ;;		_Update_StateMchn
  8098 ;; This function uses a non-reentrant model
  8099 ;;
  8100                           
  8101                           	psect	text18
  8102  002548                     __ptext18:
  8103                           	opt stack 0
  8104  002548                     _DECRxAPIxVAL:
  8105                           	opt stack 24
  8106                           
  8107                           ;incstack = 0
  8108                           ;DECRxAPIxVAL@index stored from wreg
  8109  002548  6E3F               	movwf	DECRxAPIxVAL@index,c
  8110                           
  8111                           ;api.c: 152: unsigned int value;
  8112                           ;api.c: 153: value = GETxAPIxVAL(index);
  8113  00254A  503F               	movf	DECRxAPIxVAL@index,w,c
  8114  00254C  ECD7  F012         	call	_GETxAPIxVAL
  8115  002550  C03A  F03D         	movff	?_GETxAPIxVAL,DECRxAPIxVAL@value
  8116  002554  C03B  F03E         	movff	?_GETxAPIxVAL+1,DECRxAPIxVAL@value+1
  8117                           
  8118                           ;api.c: 154: value--;
  8119  002558  063D               	decf	DECRxAPIxVAL@value,f,c
  8120  00255A  A0D8               	btfss	status,0,c
  8121  00255C  063E               	decf	DECRxAPIxVAL@value+1,f,c
  8122                           
  8123                           ;api.c: 155: SETxAPIxVAL(index, value);
  8124  00255E  C03D  F03A         	movff	DECRxAPIxVAL@value,SETxAPIxVAL@value
  8125  002562  C03E  F03B         	movff	DECRxAPIxVAL@value+1,SETxAPIxVAL@value+1
  8126  002566  503F               	movf	DECRxAPIxVAL@index,w,c
  8127  002568  ECC9  F012         	call	_SETxAPIxVAL
  8128  00256C  0012               	return		;funcret
  8129  00256E                     __end_of_DECRxAPIxVAL:
  8130                           	opt stack 0
  8131                           tblptru	equ	0xFF8
  8132                           tblptrh	equ	0xFF7
  8133                           tblptrl	equ	0xFF6
  8134                           tablat	equ	0xFF5
  8135                           intcon	equ	0xFF2
  8136                           postinc0	equ	0xFEE
  8137                           wreg	equ	0xFE8
  8138                           postdec1	equ	0xFE5
  8139                           fsr1l	equ	0xFE1
  8140                           status	equ	0xFD8
  8141                           
  8142 ;; *************** function _SETxAPIxVAL *****************
  8143 ;; Defined at:
  8144 ;;		line 137 in file "../api.c"
  8145 ;; Parameters:    Size  Location     Type
  8146 ;;  index           1    wreg     unsigned char 
  8147 ;;  value           2   15[COMRAM] unsigned int 
  8148 ;; Auto vars:     Size  Location     Type
  8149 ;;  index           1   17[COMRAM] unsigned char 
  8150 ;; Return value:  Size  Location     Type
  8151 ;;                  1    wreg      void 
  8152 ;; Registers used:
  8153 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8154 ;; Tracked objects:
  8155 ;;		On entry : 0/0
  8156 ;;		On exit  : 0/0
  8157 ;;		Unchanged: 0/0
  8158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8159 ;;      Params:         2       0       0       0       0       0       0       0       0
  8160 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8161 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8162 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8163 ;;Total ram usage:        3 bytes
  8164 ;; Hardware stack levels used:    1
  8165 ;; Hardware stack levels required when called:    4
  8166 ;; This function calls:
  8167 ;;		Nothing
  8168 ;; This function is called by:
  8169 ;;		_Update_StateMchn
  8170 ;;		_Debounce_Inputs
  8171 ;;		_INCRxAPIxVAL
  8172 ;;		_DECRxAPIxVAL
  8173 ;; This function uses a non-reentrant model
  8174 ;;
  8175                           
  8176                           	psect	text19
  8177  002592                     __ptext19:
  8178                           	opt stack 0
  8179  002592                     _SETxAPIxVAL:
  8180                           	opt stack 25
  8181                           
  8182                           ;incstack = 0
  8183                           ;SETxAPIxVAL@index stored from wreg
  8184  002592  6E3C               	movwf	SETxAPIxVAL@index,c
  8185                           
  8186                           ;api.c: 138: API[index] = value;
  8187  002594  503C               	movf	SETxAPIxVAL@index,w,c
  8188  002596  0D02               	mullw	2
  8189  002598  0E60               	movlw	low _API
  8190  00259A  24F3               	addwf	prodl,w,c
  8191  00259C  6ED9               	movwf	fsr2l,c
  8192  00259E  0E00               	movlw	high _API
  8193  0025A0  20F4               	addwfc	prodh,w,c
  8194  0025A2  6EDA               	movwf	fsr2h,c
  8195  0025A4  C03A  FFDE         	movff	SETxAPIxVAL@value,postinc2
  8196  0025A8  C03B  FFDD         	movff	SETxAPIxVAL@value+1,postdec2
  8197  0025AC  0012               	return		;funcret
  8198  0025AE                     __end_of_SETxAPIxVAL:
  8199                           	opt stack 0
  8200                           tblptru	equ	0xFF8
  8201                           tblptrh	equ	0xFF7
  8202                           tblptrl	equ	0xFF6
  8203                           tablat	equ	0xFF5
  8204                           prodh	equ	0xFF4
  8205                           prodl	equ	0xFF3
  8206                           intcon	equ	0xFF2
  8207                           postinc0	equ	0xFEE
  8208                           wreg	equ	0xFE8
  8209                           postdec1	equ	0xFE5
  8210                           fsr1l	equ	0xFE1
  8211                           postinc2	equ	0xFDE
  8212                           postdec2	equ	0xFDD
  8213                           fsr2h	equ	0xFDA
  8214                           fsr2l	equ	0xFD9
  8215                           status	equ	0xFD8
  8216                           
  8217 ;; *************** function _GETxAPIxVAL *****************
  8218 ;; Defined at:
  8219 ;;		line 140 in file "../api.c"
  8220 ;; Parameters:    Size  Location     Type
  8221 ;;  index           1    wreg     unsigned char 
  8222 ;; Auto vars:     Size  Location     Type
  8223 ;;  index           1   17[COMRAM] unsigned char 
  8224 ;; Return value:  Size  Location     Type
  8225 ;;                  2   15[COMRAM] unsigned int 
  8226 ;; Registers used:
  8227 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8228 ;; Tracked objects:
  8229 ;;		On entry : 0/0
  8230 ;;		On exit  : 0/0
  8231 ;;		Unchanged: 0/0
  8232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8233 ;;      Params:         2       0       0       0       0       0       0       0       0
  8234 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8235 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8236 ;;      Totals:         3       0       0       0       0       0       0       0       0
  8237 ;;Total ram usage:        3 bytes
  8238 ;; Hardware stack levels used:    1
  8239 ;; Hardware stack levels required when called:    4
  8240 ;; This function calls:
  8241 ;;		Nothing
  8242 ;; This function is called by:
  8243 ;;		_Update_StateMchn
  8244 ;;		_Train_Path
  8245 ;;		_Train_Move_Left_Start
  8246 ;;		_Right_Mountain_From_The_Right
  8247 ;;		_Train_Move_Left_Brake
  8248 ;;		_Train_Move_Right_Start
  8249 ;;		_Train_Move_Right_Brake
  8250 ;;		_Junction
  8251 ;;		_Debounce_Inputs
  8252 ;;		_Eeprom_Store
  8253 ;;		_INCRxAPIxVAL
  8254 ;;		_DECRxAPIxVAL
  8255 ;; This function uses a non-reentrant model
  8256 ;;
  8257                           
  8258                           	psect	text20
  8259  0025AE                     __ptext20:
  8260                           	opt stack 0
  8261  0025AE                     _GETxAPIxVAL:
  8262                           	opt stack 23
  8263                           
  8264                           ;incstack = 0
  8265                           ;GETxAPIxVAL@index stored from wreg
  8266  0025AE  6E3C               	movwf	GETxAPIxVAL@index,c
  8267                           
  8268                           ;api.c: 141: return API[index];
  8269  0025B0  503C               	movf	GETxAPIxVAL@index,w,c
  8270  0025B2  0D02               	mullw	2
  8271  0025B4  0E60               	movlw	low _API
  8272  0025B6  24F3               	addwf	prodl,w,c
  8273  0025B8  6ED9               	movwf	fsr2l,c
  8274  0025BA  0E00               	movlw	high _API
  8275  0025BC  20F4               	addwfc	prodh,w,c
  8276  0025BE  6EDA               	movwf	fsr2h,c
  8277  0025C0  CFDE F03A          	movff	postinc2,?_GETxAPIxVAL
  8278  0025C4  CFDD F03B          	movff	postdec2,?_GETxAPIxVAL+1
  8279  0025C8  0012               	return	
  8280  0025CA                     __end_of_GETxAPIxVAL:
  8281                           	opt stack 0
  8282                           tblptru	equ	0xFF8
  8283                           tblptrh	equ	0xFF7
  8284                           tblptrl	equ	0xFF6
  8285                           tablat	equ	0xFF5
  8286                           prodh	equ	0xFF4
  8287                           prodl	equ	0xFF3
  8288                           intcon	equ	0xFF2
  8289                           postinc0	equ	0xFEE
  8290                           wreg	equ	0xFE8
  8291                           postdec1	equ	0xFE5
  8292                           fsr1l	equ	0xFE1
  8293                           postinc2	equ	0xFDE
  8294                           postdec2	equ	0xFDD
  8295                           fsr2h	equ	0xFDA
  8296                           fsr2l	equ	0xFD9
  8297                           status	equ	0xFD8
  8298                           
  8299 ;; *************** function _Init_Timers *****************
  8300 ;; Defined at:
  8301 ;;		line 180 in file "../Main.c"
  8302 ;; Parameters:    Size  Location     Type
  8303 ;;		None
  8304 ;; Auto vars:     Size  Location     Type
  8305 ;;		None
  8306 ;; Return value:  Size  Location     Type
  8307 ;;                  1    wreg      void 
  8308 ;; Registers used:
  8309 ;;		wreg, status,2
  8310 ;; Tracked objects:
  8311 ;;		On entry : 0/0
  8312 ;;		On exit  : 0/0
  8313 ;;		Unchanged: 0/0
  8314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8315 ;;      Params:         0       0       0       0       0       0       0       0       0
  8316 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8317 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8318 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8319 ;;Total ram usage:        0 bytes
  8320 ;; Hardware stack levels used:    1
  8321 ;; Hardware stack levels required when called:    4
  8322 ;; This function calls:
  8323 ;;		Nothing
  8324 ;; This function is called by:
  8325 ;;		_main
  8326 ;; This function uses a non-reentrant model
  8327 ;;
  8328                           
  8329                           	psect	text21
  8330  0025CA                     __ptext21:
  8331                           	opt stack 0
  8332  0025CA                     _Init_Timers:
  8333                           	opt stack 26
  8334                           
  8335                           ;Main.c: 182: RCONbits.IPEN = 1;
  8336                           
  8337                           ;incstack = 0
  8338  0025CA  8ED0               	bsf	4048,7,c	;volatile
  8339                           
  8340                           ;Main.c: 183: INTCON = 0xA0;
  8341  0025CC  0EA0               	movlw	160
  8342  0025CE  6EF2               	movwf	intcon,c	;volatile
  8343                           
  8344                           ;Main.c: 184: INTCON2 = 0x84;
  8345  0025D0  0E84               	movlw	132
  8346  0025D2  6EF1               	movwf	intcon2,c	;volatile
  8347                           
  8348                           ;Main.c: 185: TMR0H = 0x0;
  8349  0025D4  0E00               	movlw	0
  8350  0025D6  6ED7               	movwf	4055,c	;volatile
  8351                           
  8352                           ;Main.c: 186: TMR0L = 0x0;
  8353  0025D8  0E00               	movlw	0
  8354  0025DA  6ED6               	movwf	4054,c	;volatile
  8355                           
  8356                           ;Main.c: 187: T0CON = 0xC3;
  8357  0025DC  0EC3               	movlw	195
  8358  0025DE  6ED5               	movwf	4053,c	;volatile
  8359  0025E0  0012               	return		;funcret
  8360  0025E2                     __end_of_Init_Timers:
  8361                           	opt stack 0
  8362                           tblptru	equ	0xFF8
  8363                           tblptrh	equ	0xFF7
  8364                           tblptrl	equ	0xFF6
  8365                           tablat	equ	0xFF5
  8366                           prodh	equ	0xFF4
  8367                           prodl	equ	0xFF3
  8368                           intcon	equ	0xFF2
  8369                           intcon2	equ	0xFF1
  8370                           postinc0	equ	0xFEE
  8371                           wreg	equ	0xFE8
  8372                           postdec1	equ	0xFE5
  8373                           fsr1l	equ	0xFE1
  8374                           postinc2	equ	0xFDE
  8375                           postdec2	equ	0xFDD
  8376                           fsr2h	equ	0xFDA
  8377                           fsr2l	equ	0xFD9
  8378                           status	equ	0xFD8
  8379                           
  8380 ;; *************** function _Init_Pwm *****************
  8381 ;; Defined at:
  8382 ;;		line 193 in file "../Main.c"
  8383 ;; Parameters:    Size  Location     Type
  8384 ;;		None
  8385 ;; Auto vars:     Size  Location     Type
  8386 ;;		None
  8387 ;; Return value:  Size  Location     Type
  8388 ;;                  1    wreg      void 
  8389 ;; Registers used:
  8390 ;;		wreg, status,2
  8391 ;; Tracked objects:
  8392 ;;		On entry : 0/0
  8393 ;;		On exit  : 0/0
  8394 ;;		Unchanged: 0/0
  8395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8396 ;;      Params:         0       0       0       0       0       0       0       0       0
  8397 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8398 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8399 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8400 ;;Total ram usage:        0 bytes
  8401 ;; Hardware stack levels used:    1
  8402 ;; Hardware stack levels required when called:    4
  8403 ;; This function calls:
  8404 ;;		Nothing
  8405 ;; This function is called by:
  8406 ;;		_main
  8407 ;; This function uses a non-reentrant model
  8408 ;;
  8409                           
  8410                           	psect	text22
  8411  0025E2                     __ptext22:
  8412                           	opt stack 0
  8413  0025E2                     _Init_Pwm:
  8414                           	opt stack 26
  8415                           
  8416                           ;Main.c: 196: PORTCbits.RC0 = 1;
  8417                           
  8418                           ;incstack = 0
  8419  0025E2  8082               	bsf	3970,0,c	;volatile
  8420                           
  8421                           ;Main.c: 197: PR2=0xFF;
  8422  0025E4  68CB               	setf	4043,c	;volatile
  8423                           
  8424                           ;Main.c: 198: CCPR1L = 0x7F;
  8425  0025E6  0E7F               	movlw	127
  8426  0025E8  6EBE               	movwf	4030,c	;volatile
  8427                           
  8428                           ;Main.c: 199: CCP1CON = 0x0F;
  8429  0025EA  0E0F               	movlw	15
  8430  0025EC  6EBD               	movwf	4029,c	;volatile
  8431                           
  8432                           ;Main.c: 200: T2CON = 0x04;
  8433  0025EE  0E04               	movlw	4
  8434  0025F0  6ECA               	movwf	4042,c	;volatile
  8435                           
  8436                           ;Main.c: 201: TRISCbits.TRISC2=0;TRISCbits.TRISC0=0;;
  8437  0025F2  9494               	bcf	3988,2,c	;volatile
  8438  0025F4  9094               	bcf	3988,0,c	;volatile
  8439  0025F6  0012               	return		;funcret
  8440  0025F8                     __end_of_Init_Pwm:
  8441                           	opt stack 0
  8442                           tblptru	equ	0xFF8
  8443                           tblptrh	equ	0xFF7
  8444                           tblptrl	equ	0xFF6
  8445                           tablat	equ	0xFF5
  8446                           prodh	equ	0xFF4
  8447                           prodl	equ	0xFF3
  8448                           intcon	equ	0xFF2
  8449                           intcon2	equ	0xFF1
  8450                           postinc0	equ	0xFEE
  8451                           wreg	equ	0xFE8
  8452                           postdec1	equ	0xFE5
  8453                           fsr1l	equ	0xFE1
  8454                           postinc2	equ	0xFDE
  8455                           postdec2	equ	0xFDD
  8456                           fsr2h	equ	0xFDA
  8457                           fsr2l	equ	0xFD9
  8458                           status	equ	0xFD8
  8459                           
  8460 ;; *************** function _INIT_TERMINAL *****************
  8461 ;; Defined at:
  8462 ;;		line 12 in file "../terminal.c"
  8463 ;; Parameters:    Size  Location     Type
  8464 ;;		None
  8465 ;; Auto vars:     Size  Location     Type
  8466 ;;  i               2   15[COMRAM] int 
  8467 ;; Return value:  Size  Location     Type
  8468 ;;                  1    wreg      void 
  8469 ;; Registers used:
  8470 ;;		wreg, status,2, status,0
  8471 ;; Tracked objects:
  8472 ;;		On entry : 0/0
  8473 ;;		On exit  : 0/0
  8474 ;;		Unchanged: 0/0
  8475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8476 ;;      Params:         0       0       0       0       0       0       0       0       0
  8477 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8478 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8479 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8480 ;;Total ram usage:        2 bytes
  8481 ;; Hardware stack levels used:    1
  8482 ;; Hardware stack levels required when called:    4
  8483 ;; This function calls:
  8484 ;;		Nothing
  8485 ;; This function is called by:
  8486 ;;		_main
  8487 ;; This function uses a non-reentrant model
  8488 ;;
  8489                           
  8490                           	psect	text23
  8491  002520                     __ptext23:
  8492                           	opt stack 0
  8493  002520                     _INIT_TERMINAL:
  8494                           	opt stack 26
  8495                           
  8496                           ;terminal.c: 13: int i = 0;
  8497                           
  8498                           ;incstack = 0
  8499  002520  0E00               	movlw	0
  8500  002522  6E3B               	movwf	INIT_TERMINAL@i+1,c
  8501  002524  0E00               	movlw	0
  8502  002526  6E3A               	movwf	INIT_TERMINAL@i,c
  8503                           
  8504                           ;terminal.c: 14: for (i=0; i<22; i++){
  8505  002528  0E00               	movlw	0
  8506  00252A  6E3B               	movwf	INIT_TERMINAL@i+1,c
  8507  00252C  0E00               	movlw	0
  8508  00252E  6E3A               	movwf	INIT_TERMINAL@i,c
  8509  002530                     l2664:
  8510  002530  BE3B               	btfsc	INIT_TERMINAL@i+1,7,c
  8511  002532  D006               	goto	l2668
  8512  002534  503B               	movf	INIT_TERMINAL@i+1,w,c
  8513  002536  E107               	bnz	l988
  8514  002538  0E16               	movlw	22
  8515  00253A  5C3A               	subwf	INIT_TERMINAL@i,w,c
  8516  00253C  B0D8               	btfsc	status,0,c
  8517  00253E  0012               	return	
  8518  002540                     l2668:
  8519  002540  4A3A               	infsnz	INIT_TERMINAL@i,f,c
  8520  002542  2A3B               	incf	INIT_TERMINAL@i+1,f,c
  8521  002544  D7F5               	goto	l2664
  8522  002546                     l988:
  8523  002546  0012               	return		;funcret
  8524  002548                     __end_of_INIT_TERMINAL:
  8525                           	opt stack 0
  8526                           tblptru	equ	0xFF8
  8527                           tblptrh	equ	0xFF7
  8528                           tblptrl	equ	0xFF6
  8529                           tablat	equ	0xFF5
  8530                           prodh	equ	0xFF4
  8531                           prodl	equ	0xFF3
  8532                           intcon	equ	0xFF2
  8533                           intcon2	equ	0xFF1
  8534                           postinc0	equ	0xFEE
  8535                           wreg	equ	0xFE8
  8536                           postdec1	equ	0xFE5
  8537                           fsr1l	equ	0xFE1
  8538                           postinc2	equ	0xFDE
  8539                           postdec2	equ	0xFDD
  8540                           fsr2h	equ	0xFDA
  8541                           fsr2l	equ	0xFD9
  8542                           status	equ	0xFD8
  8543                           
  8544 ;; *************** function _EUSART1_Initialize *****************
  8545 ;; Defined at:
  8546 ;;		line 77 in file "../eusart1.c"
  8547 ;; Parameters:    Size  Location     Type
  8548 ;;		None
  8549 ;; Auto vars:     Size  Location     Type
  8550 ;;  baud_rate       2   15[COMRAM] unsigned int 
  8551 ;; Return value:  Size  Location     Type
  8552 ;;                  1    wreg      void 
  8553 ;; Registers used:
  8554 ;;		wreg, status,2
  8555 ;; Tracked objects:
  8556 ;;		On entry : 0/0
  8557 ;;		On exit  : 0/0
  8558 ;;		Unchanged: 0/0
  8559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8560 ;;      Params:         0       0       0       0       0       0       0       0       0
  8561 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8562 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8563 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8564 ;;Total ram usage:        2 bytes
  8565 ;; Hardware stack levels used:    1
  8566 ;; Hardware stack levels required when called:    4
  8567 ;; This function calls:
  8568 ;;		Nothing
  8569 ;; This function is called by:
  8570 ;;		_main
  8571 ;; This function uses a non-reentrant model
  8572 ;;
  8573                           
  8574                           	psect	text24
  8575  00240A                     __ptext24:
  8576                           	opt stack 0
  8577  00240A                     _EUSART1_Initialize:
  8578                           	opt stack 26
  8579                           
  8580                           ;eusart1.c: 79: PIE1bits.RC1IE = 0;
  8581                           
  8582                           ;incstack = 0
  8583  00240A  9A9D               	bcf	3997,5,c	;volatile
  8584                           
  8585                           ;eusart1.c: 80: PIE1bits.TX1IE = 0;
  8586  00240C  989D               	bcf	3997,4,c	;volatile
  8587                           
  8588                           ;eusart1.c: 84: BAUDCONbits.BRG16 = 1;
  8589  00240E  86B8               	bsf	4024,3,c	;volatile
  8590                           
  8591                           ;eusart1.c: 86: RCSTAbits.SPEN = 1;
  8592  002410  8EAB               	bsf	4011,7,c	;volatile
  8593                           
  8594                           ;eusart1.c: 87: RCSTAbits.RX9 = 0;
  8595  002412  9CAB               	bcf	4011,6,c	;volatile
  8596                           
  8597                           ;eusart1.c: 88: RCSTAbits.CREN = 1;
  8598  002414  88AB               	bsf	4011,4,c	;volatile
  8599                           
  8600                           ;eusart1.c: 89: RCSTAbits.ADDEN = 0;
  8601  002416  96AB               	bcf	4011,3,c	;volatile
  8602                           
  8603                           ;eusart1.c: 91: TXSTAbits.TX9 = 0;
  8604  002418  9CAC               	bcf	4012,6,c	;volatile
  8605                           
  8606                           ;eusart1.c: 92: TXSTAbits.TXEN = 1;
  8607  00241A  8AAC               	bsf	4012,5,c	;volatile
  8608                           
  8609                           ;eusart1.c: 93: TXSTAbits.SYNC = 0;
  8610  00241C  98AC               	bcf	4012,4,c	;volatile
  8611                           
  8612                           ;eusart1.c: 94: TXSTAbits.SENDB = 0;
  8613  00241E  96AC               	bcf	4012,3,c	;volatile
  8614                           
  8615                           ;eusart1.c: 95: TXSTAbits.BRGH = 1;
  8616  002420  84AC               	bsf	4012,2,c	;volatile
  8617                           
  8618                           ;eusart1.c: 96: TXSTAbits.TRMT = 1;
  8619  002422  82AC               	bsf	4012,1,c	;volatile
  8620                           
  8621                           ;eusart1.c: 97: TXSTAbits.TX9D = 0;
  8622  002424  90AC               	bcf	4012,0,c	;volatile
  8623                           
  8624                           ;eusart1.c: 99: unsigned int baud_rate;
  8625                           ;eusart1.c: 101: baud_rate = 417;
  8626  002426  0E01               	movlw	1
  8627  002428  6E3B               	movwf	EUSART1_Initialize@baud_rate+1,c
  8628  00242A  0EA1               	movlw	161
  8629  00242C  6E3A               	movwf	EUSART1_Initialize@baud_rate,c
  8630                           
  8631                           ;eusart1.c: 103: SPBRGH = baud_rate >> 8;
  8632  00242E  503B               	movf	EUSART1_Initialize@baud_rate+1,w,c
  8633  002430  6EB0               	movwf	4016,c	;volatile
  8634                           
  8635                           ;eusart1.c: 104: SPBRG = baud_rate;
  8636  002432  C03A  FFAF         	movff	EUSART1_Initialize@baud_rate,4015	;volatile
  8637                           
  8638                           ;eusart1.c: 108: eusart1TxHead = 0;
  8639  002436  0E00               	movlw	0
  8640  002438  6E29               	movwf	_eusart1TxHead,c
  8641                           
  8642                           ;eusart1.c: 109: eusart1TxTail = 0;
  8643  00243A  0E00               	movlw	0
  8644  00243C  6E2A               	movwf	_eusart1TxTail,c
  8645                           
  8646                           ;eusart1.c: 110: eusart1TxBufferRemaining = sizeof (eusart1TxBuffer);
  8647  00243E  0E7E               	movlw	126
  8648  002440  6E28               	movwf	_eusart1TxBufferRemaining,c	;volatile
  8649                           
  8650                           ;eusart1.c: 112: eusart1RxHead = 0;
  8651  002442  0E00               	movlw	0
  8652  002444  6E26               	movwf	_eusart1RxHead,c
  8653                           
  8654                           ;eusart1.c: 113: eusart1RxTail = 0;
  8655  002446  0E00               	movlw	0
  8656  002448  6E27               	movwf	_eusart1RxTail,c
  8657                           
  8658                           ;eusart1.c: 114: eusart1RxCount = 0;
  8659  00244A  0E00               	movlw	0
  8660  00244C  6E25               	movwf	_eusart1RxCount,c	;volatile
  8661                           
  8662                           ;eusart1.c: 117: PIE1bits.RC1IE = 1;
  8663  00244E  8A9D               	bsf	3997,5,c	;volatile
  8664  002450  0012               	return		;funcret
  8665  002452                     __end_of_EUSART1_Initialize:
  8666                           	opt stack 0
  8667                           tblptru	equ	0xFF8
  8668                           tblptrh	equ	0xFF7
  8669                           tblptrl	equ	0xFF6
  8670                           tablat	equ	0xFF5
  8671                           prodh	equ	0xFF4
  8672                           prodl	equ	0xFF3
  8673                           intcon	equ	0xFF2
  8674                           intcon2	equ	0xFF1
  8675                           postinc0	equ	0xFEE
  8676                           wreg	equ	0xFE8
  8677                           postdec1	equ	0xFE5
  8678                           fsr1l	equ	0xFE1
  8679                           postinc2	equ	0xFDE
  8680                           postdec2	equ	0xFDD
  8681                           fsr2h	equ	0xFDA
  8682                           fsr2l	equ	0xFD9
  8683                           status	equ	0xFD8
  8684                           
  8685 ;; *************** function _APIxInitialize *****************
  8686 ;; Defined at:
  8687 ;;		line 30 in file "../api.c"
  8688 ;; Parameters:    Size  Location     Type
  8689 ;;		None
  8690 ;; Auto vars:     Size  Location     Type
  8691 ;;  i               2   15[COMRAM] unsigned int 
  8692 ;; Return value:  Size  Location     Type
  8693 ;;                  1    wreg      void 
  8694 ;; Registers used:
  8695 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8696 ;; Tracked objects:
  8697 ;;		On entry : 0/0
  8698 ;;		On exit  : 0/0
  8699 ;;		Unchanged: 0/0
  8700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8701 ;;      Params:         0       0       0       0       0       0       0       0       0
  8702 ;;      Locals:         2       0       0       0       0       0       0       0       0
  8703 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8704 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8705 ;;Total ram usage:        2 bytes
  8706 ;; Hardware stack levels used:    1
  8707 ;; Hardware stack levels required when called:    4
  8708 ;; This function calls:
  8709 ;;		Nothing
  8710 ;; This function is called by:
  8711 ;;		_main
  8712 ;; This function uses a non-reentrant model
  8713 ;;
  8714                           
  8715                           	psect	text25
  8716  00183A                     __ptext25:
  8717                           	opt stack 0
  8718  00183A                     _APIxInitialize:
  8719                           	opt stack 26
  8720                           
  8721                           ;api.c: 32: unsigned int i;
  8722                           ;api.c: 33: for(i = 0; i < (63 + 1); i++ )
  8723                           
  8724                           ;incstack = 0
  8725  00183A  0E00               	movlw	0
  8726  00183C  6E3B               	movwf	APIxInitialize@i+1,c
  8727  00183E  0E00               	movlw	0
  8728  001840  6E3A               	movwf	APIxInitialize@i,c
  8729  001842                     l5114:
  8730  001842  503B               	movf	APIxInitialize@i+1,w,c
  8731  001844  E121               	bnz	l5124
  8732  001846  0E40               	movlw	64
  8733  001848  5C3A               	subwf	APIxInitialize@i,w,c
  8734  00184A  B0D8               	btfsc	status,0,c
  8735  00184C  D01D               	goto	l5124
  8736                           
  8737                           ;api.c: 34: {
  8738                           ;api.c: 35: API_RW[i] = 0;
  8739  00184E  90D8               	bcf	status,0,c
  8740  001850  343A               	rlcf	APIxInitialize@i,w,c
  8741  001852  6ED9               	movwf	fsr2l,c
  8742  001854  343B               	rlcf	APIxInitialize@i+1,w,c
  8743  001856  6EDA               	movwf	fsr2h,c
  8744  001858  0E00               	movlw	low _API_RW
  8745  00185A  26D9               	addwf	fsr2l,f,c
  8746  00185C  0E01               	movlw	high _API_RW
  8747  00185E  22DA               	addwfc	fsr2h,f,c
  8748  001860  0E00               	movlw	0
  8749  001862  6EDE               	movwf	postinc2,c
  8750  001864  0E00               	movlw	0
  8751  001866  6EDD               	movwf	postdec2,c
  8752                           
  8753                           ;api.c: 36: API[i] = 0;
  8754  001868  90D8               	bcf	status,0,c
  8755  00186A  343A               	rlcf	APIxInitialize@i,w,c
  8756  00186C  6ED9               	movwf	fsr2l,c
  8757  00186E  343B               	rlcf	APIxInitialize@i+1,w,c
  8758  001870  6EDA               	movwf	fsr2h,c
  8759  001872  0E60               	movlw	low _API
  8760  001874  26D9               	addwf	fsr2l,f,c
  8761  001876  0E00               	movlw	high _API
  8762  001878  22DA               	addwfc	fsr2h,f,c
  8763  00187A  0E00               	movlw	0
  8764  00187C  6EDE               	movwf	postinc2,c
  8765  00187E  0E00               	movlw	0
  8766  001880  6EDD               	movwf	postdec2,c
  8767  001882  4A3A               	infsnz	APIxInitialize@i,f,c
  8768  001884  2A3B               	incf	APIxInitialize@i+1,f,c
  8769  001886  D7DD               	goto	l5114
  8770  001888                     l5124:
  8771                           
  8772                           ;api.c: 37: }
  8773                           ;api.c: 40: API_RW[0] = 0;
  8774  001888  0E00               	movlw	0
  8775  00188A  0101               	movlb	1	; () banked
  8776  00188C  6F01               	movwf	(_API_RW+1)& (0+255),b
  8777  00188E  0E00               	movlw	0
  8778  001890  6F00               	movwf	_API_RW& (0+255),b
  8779                           
  8780                           ;api.c: 41: API_RW[2] = 1;
  8781  001892  0E00               	movlw	0
  8782  001894  0101               	movlb	1	; () banked
  8783  001896  6F05               	movwf	(_API_RW+5)& (0+255),b
  8784  001898  0E01               	movlw	1
  8785  00189A  6F04               	movwf	(_API_RW+4)& (0+255),b
  8786                           
  8787                           ;api.c: 42: API_RW[3] = 1;
  8788  00189C  0E00               	movlw	0
  8789  00189E  0101               	movlb	1	; () banked
  8790  0018A0  6F07               	movwf	(_API_RW+7)& (0+255),b
  8791  0018A2  0E01               	movlw	1
  8792  0018A4  6F06               	movwf	(_API_RW+6)& (0+255),b
  8793                           
  8794                           ;api.c: 43: API_RW[4] = 1;
  8795  0018A6  0E00               	movlw	0
  8796  0018A8  0101               	movlb	1	; () banked
  8797  0018AA  6F09               	movwf	(_API_RW+9)& (0+255),b
  8798  0018AC  0E01               	movlw	1
  8799  0018AE  6F08               	movwf	(_API_RW+8)& (0+255),b
  8800                           
  8801                           ;api.c: 44: API_RW[5] = 1;
  8802  0018B0  0E00               	movlw	0
  8803  0018B2  0101               	movlb	1	; () banked
  8804  0018B4  6F0B               	movwf	(_API_RW+11)& (0+255),b
  8805  0018B6  0E01               	movlw	1
  8806  0018B8  6F0A               	movwf	(_API_RW+10)& (0+255),b
  8807                           
  8808                           ;api.c: 45: API_RW[6] = 1;
  8809  0018BA  0E00               	movlw	0
  8810  0018BC  0101               	movlb	1	; () banked
  8811  0018BE  6F0D               	movwf	(_API_RW+13)& (0+255),b
  8812  0018C0  0E01               	movlw	1
  8813  0018C2  6F0C               	movwf	(_API_RW+12)& (0+255),b
  8814                           
  8815                           ;api.c: 46: API_RW[7] = 1;
  8816  0018C4  0E00               	movlw	0
  8817  0018C6  0101               	movlb	1	; () banked
  8818  0018C8  6F0F               	movwf	(_API_RW+15)& (0+255),b
  8819  0018CA  0E01               	movlw	1
  8820  0018CC  6F0E               	movwf	(_API_RW+14)& (0+255),b
  8821                           
  8822                           ;api.c: 47: API_RW[8] = 1;
  8823  0018CE  0E00               	movlw	0
  8824  0018D0  0101               	movlb	1	; () banked
  8825  0018D2  6F11               	movwf	(_API_RW+17)& (0+255),b
  8826  0018D4  0E01               	movlw	1
  8827  0018D6  6F10               	movwf	(_API_RW+16)& (0+255),b
  8828                           
  8829                           ;api.c: 48: API_RW[9] = 1;
  8830  0018D8  0E00               	movlw	0
  8831  0018DA  0101               	movlb	1	; () banked
  8832  0018DC  6F13               	movwf	(_API_RW+19)& (0+255),b
  8833  0018DE  0E01               	movlw	1
  8834  0018E0  6F12               	movwf	(_API_RW+18)& (0+255),b
  8835                           
  8836                           ;api.c: 49: API_RW[10] = 1;
  8837  0018E2  0E00               	movlw	0
  8838  0018E4  0101               	movlb	1	; () banked
  8839  0018E6  6F15               	movwf	(_API_RW+21)& (0+255),b
  8840  0018E8  0E01               	movlw	1
  8841  0018EA  6F14               	movwf	(_API_RW+20)& (0+255),b
  8842                           
  8843                           ;api.c: 50: API_RW[11] = 1;
  8844  0018EC  0E00               	movlw	0
  8845  0018EE  0101               	movlb	1	; () banked
  8846  0018F0  6F17               	movwf	(_API_RW+23)& (0+255),b
  8847  0018F2  0E01               	movlw	1
  8848  0018F4  6F16               	movwf	(_API_RW+22)& (0+255),b
  8849                           
  8850                           ;api.c: 51: API_RW[12] = 0;
  8851  0018F6  0E00               	movlw	0
  8852  0018F8  0101               	movlb	1	; () banked
  8853  0018FA  6F19               	movwf	(_API_RW+25)& (0+255),b
  8854  0018FC  0E00               	movlw	0
  8855  0018FE  6F18               	movwf	(_API_RW+24)& (0+255),b
  8856                           
  8857                           ;api.c: 52: API_RW[13] = 0;
  8858  001900  0E00               	movlw	0
  8859  001902  0101               	movlb	1	; () banked
  8860  001904  6F1B               	movwf	(_API_RW+27)& (0+255),b
  8861  001906  0E00               	movlw	0
  8862  001908  6F1A               	movwf	(_API_RW+26)& (0+255),b
  8863                           
  8864                           ;api.c: 53: API_RW[14] = 0;
  8865  00190A  0E00               	movlw	0
  8866  00190C  0101               	movlb	1	; () banked
  8867  00190E  6F1D               	movwf	(_API_RW+29)& (0+255),b
  8868  001910  0E00               	movlw	0
  8869  001912  6F1C               	movwf	(_API_RW+28)& (0+255),b
  8870                           
  8871                           ;api.c: 54: API_RW[15] = 0;
  8872  001914  0E00               	movlw	0
  8873  001916  0101               	movlb	1	; () banked
  8874  001918  6F1F               	movwf	(_API_RW+31)& (0+255),b
  8875  00191A  0E00               	movlw	0
  8876  00191C  6F1E               	movwf	(_API_RW+30)& (0+255),b
  8877                           
  8878                           ;api.c: 55: API_RW[16] = 0;
  8879  00191E  0E00               	movlw	0
  8880  001920  0101               	movlb	1	; () banked
  8881  001922  6F21               	movwf	(_API_RW+33)& (0+255),b
  8882  001924  0E00               	movlw	0
  8883  001926  6F20               	movwf	(_API_RW+32)& (0+255),b
  8884                           
  8885                           ;api.c: 56: API_RW[17] = 0;
  8886  001928  0E00               	movlw	0
  8887  00192A  0101               	movlb	1	; () banked
  8888  00192C  6F23               	movwf	(_API_RW+35)& (0+255),b
  8889  00192E  0E00               	movlw	0
  8890  001930  6F22               	movwf	(_API_RW+34)& (0+255),b
  8891                           
  8892                           ;api.c: 57: API_RW[18] = 0;
  8893  001932  0E00               	movlw	0
  8894  001934  0101               	movlb	1	; () banked
  8895  001936  6F25               	movwf	(_API_RW+37)& (0+255),b
  8896  001938  0E00               	movlw	0
  8897  00193A  6F24               	movwf	(_API_RW+36)& (0+255),b
  8898                           
  8899                           ;api.c: 58: API_RW[19] = 0;
  8900  00193C  0E00               	movlw	0
  8901  00193E  0101               	movlb	1	; () banked
  8902  001940  6F27               	movwf	(_API_RW+39)& (0+255),b
  8903  001942  0E00               	movlw	0
  8904  001944  6F26               	movwf	(_API_RW+38)& (0+255),b
  8905                           
  8906                           ;api.c: 59: API_RW[20] = 0;
  8907  001946  0E00               	movlw	0
  8908  001948  0101               	movlb	1	; () banked
  8909  00194A  6F29               	movwf	(_API_RW+41)& (0+255),b
  8910  00194C  0E00               	movlw	0
  8911  00194E  6F28               	movwf	(_API_RW+40)& (0+255),b
  8912                           
  8913                           ;api.c: 60: API_RW[21] = 0;
  8914  001950  0E00               	movlw	0
  8915  001952  0101               	movlb	1	; () banked
  8916  001954  6F2B               	movwf	(_API_RW+43)& (0+255),b
  8917  001956  0E00               	movlw	0
  8918  001958  6F2A               	movwf	(_API_RW+42)& (0+255),b
  8919                           
  8920                           ;api.c: 61: API_RW[22] = 0;
  8921  00195A  0E00               	movlw	0
  8922  00195C  0101               	movlb	1	; () banked
  8923  00195E  6F2D               	movwf	(_API_RW+45)& (0+255),b
  8924  001960  0E00               	movlw	0
  8925  001962  6F2C               	movwf	(_API_RW+44)& (0+255),b
  8926                           
  8927                           ;api.c: 62: API_RW[23] = 1;
  8928  001964  0E00               	movlw	0
  8929  001966  0101               	movlb	1	; () banked
  8930  001968  6F2F               	movwf	(_API_RW+47)& (0+255),b
  8931  00196A  0E01               	movlw	1
  8932  00196C  6F2E               	movwf	(_API_RW+46)& (0+255),b
  8933                           
  8934                           ;api.c: 63: API_RW[24] = 1;
  8935  00196E  0E00               	movlw	0
  8936  001970  0101               	movlb	1	; () banked
  8937  001972  6F31               	movwf	(_API_RW+49)& (0+255),b
  8938  001974  0E01               	movlw	1
  8939  001976  6F30               	movwf	(_API_RW+48)& (0+255),b
  8940                           
  8941                           ;api.c: 64: API_RW[25] = 0;
  8942  001978  0E00               	movlw	0
  8943  00197A  0101               	movlb	1	; () banked
  8944  00197C  6F33               	movwf	(_API_RW+51)& (0+255),b
  8945  00197E  0E00               	movlw	0
  8946  001980  6F32               	movwf	(_API_RW+50)& (0+255),b
  8947                           
  8948                           ;api.c: 65: API_RW[26] = 0;
  8949  001982  0E00               	movlw	0
  8950  001984  0101               	movlb	1	; () banked
  8951  001986  6F35               	movwf	(_API_RW+53)& (0+255),b
  8952  001988  0E00               	movlw	0
  8953  00198A  6F34               	movwf	(_API_RW+52)& (0+255),b
  8954                           
  8955                           ;api.c: 66: API_RW[27] = 0;
  8956  00198C  0E00               	movlw	0
  8957  00198E  0101               	movlb	1	; () banked
  8958  001990  6F37               	movwf	(_API_RW+55)& (0+255),b
  8959  001992  0E00               	movlw	0
  8960  001994  6F36               	movwf	(_API_RW+54)& (0+255),b
  8961                           
  8962                           ;api.c: 67: API_RW[28] = 0;
  8963  001996  0E00               	movlw	0
  8964  001998  0101               	movlb	1	; () banked
  8965  00199A  6F39               	movwf	(_API_RW+57)& (0+255),b
  8966  00199C  0E00               	movlw	0
  8967  00199E  6F38               	movwf	(_API_RW+56)& (0+255),b
  8968                           
  8969                           ;api.c: 71: API[0] = 63;
  8970  0019A0  0E00               	movlw	0
  8971  0019A2  0100               	movlb	0	; () banked
  8972  0019A4  6F61               	movwf	(_API+1)& (0+255),b
  8973  0019A6  0E3F               	movlw	63
  8974  0019A8  6F60               	movwf	_API& (0+255),b
  8975                           
  8976                           ;api.c: 72: API[2] = 10000;
  8977  0019AA  0E27               	movlw	39
  8978  0019AC  0100               	movlb	0	; () banked
  8979  0019AE  6F65               	movwf	(_API+5)& (0+255),b
  8980  0019B0  0E10               	movlw	16
  8981  0019B2  6F64               	movwf	(_API+4)& (0+255),b
  8982                           
  8983                           ;api.c: 73: API[3] = 800;
  8984  0019B4  0E03               	movlw	3
  8985  0019B6  0100               	movlb	0	; () banked
  8986  0019B8  6F67               	movwf	(_API+7)& (0+255),b
  8987  0019BA  0E20               	movlw	32
  8988  0019BC  6F66               	movwf	(_API+6)& (0+255),b
  8989                           
  8990                           ;api.c: 74: API[4] = 5000;
  8991  0019BE  0E13               	movlw	19
  8992  0019C0  0100               	movlb	0	; () banked
  8993  0019C2  6F69               	movwf	(_API+9)& (0+255),b
  8994  0019C4  0E88               	movlw	136
  8995  0019C6  6F68               	movwf	(_API+8)& (0+255),b
  8996                           
  8997                           ;api.c: 75: API[5] = 460;
  8998  0019C8  0E01               	movlw	1
  8999  0019CA  0100               	movlb	0	; () banked
  9000  0019CC  6F6B               	movwf	(_API+11)& (0+255),b
  9001  0019CE  0ECC               	movlw	204
  9002  0019D0  6F6A               	movwf	(_API+10)& (0+255),b
  9003                           
  9004                           ;api.c: 76: API[6] = 550;
  9005  0019D2  0E02               	movlw	2
  9006  0019D4  0100               	movlb	0	; () banked
  9007  0019D6  6F6D               	movwf	(_API+13)& (0+255),b
  9008  0019D8  0E26               	movlw	38
  9009  0019DA  6F6C               	movwf	(_API+12)& (0+255),b
  9010                           
  9011                           ;api.c: 77: API[7] = 725;
  9012  0019DC  0E02               	movlw	2
  9013  0019DE  0100               	movlb	0	; () banked
  9014  0019E0  6F6F               	movwf	(_API+15)& (0+255),b
  9015  0019E2  0ED5               	movlw	213
  9016  0019E4  6F6E               	movwf	(_API+14)& (0+255),b
  9017                           
  9018                           ;api.c: 78: API[8] = 307;
  9019  0019E6  0E01               	movlw	1
  9020  0019E8  0100               	movlb	0	; () banked
  9021  0019EA  6F71               	movwf	(_API+17)& (0+255),b
  9022  0019EC  0E33               	movlw	51
  9023  0019EE  6F70               	movwf	(_API+16)& (0+255),b
  9024                           
  9025                           ;api.c: 79: API[9] = 80;
  9026  0019F0  0E00               	movlw	0
  9027  0019F2  0100               	movlb	0	; () banked
  9028  0019F4  6F73               	movwf	(_API+19)& (0+255),b
  9029  0019F6  0E50               	movlw	80
  9030  0019F8  6F72               	movwf	(_API+18)& (0+255),b
  9031                           
  9032                           ;api.c: 80: API[10] = 45;
  9033  0019FA  0E00               	movlw	0
  9034  0019FC  0100               	movlb	0	; () banked
  9035  0019FE  6F75               	movwf	(_API+21)& (0+255),b
  9036  001A00  0E2D               	movlw	45
  9037  001A02  6F74               	movwf	(_API+20)& (0+255),b
  9038                           
  9039                           ;api.c: 81: API[11] = 20;
  9040  001A04  0E00               	movlw	0
  9041  001A06  0100               	movlb	0	; () banked
  9042  001A08  6F77               	movwf	(_API+23)& (0+255),b
  9043  001A0A  0E14               	movlw	20
  9044  001A0C  6F76               	movwf	(_API+22)& (0+255),b
  9045                           
  9046                           ;api.c: 82: API[12] = 0;
  9047  001A0E  0E00               	movlw	0
  9048  001A10  0100               	movlb	0	; () banked
  9049  001A12  6F79               	movwf	(_API+25)& (0+255),b
  9050  001A14  0E00               	movlw	0
  9051  001A16  6F78               	movwf	(_API+24)& (0+255),b
  9052                           
  9053                           ;api.c: 83: API[13] = 0;
  9054  001A18  0E00               	movlw	0
  9055  001A1A  0100               	movlb	0	; () banked
  9056  001A1C  6F7B               	movwf	(_API+27)& (0+255),b
  9057  001A1E  0E00               	movlw	0
  9058  001A20  6F7A               	movwf	(_API+26)& (0+255),b
  9059                           
  9060                           ;api.c: 84: API[14] = 0;
  9061  001A22  0E00               	movlw	0
  9062  001A24  0100               	movlb	0	; () banked
  9063  001A26  6F7D               	movwf	(_API+29)& (0+255),b
  9064  001A28  0E00               	movlw	0
  9065  001A2A  6F7C               	movwf	(_API+28)& (0+255),b
  9066                           
  9067                           ;api.c: 85: API[15] = 0;
  9068  001A2C  0E00               	movlw	0
  9069  001A2E  0100               	movlb	0	; () banked
  9070  001A30  6F7F               	movwf	(_API+31)& (0+255),b
  9071  001A32  0E00               	movlw	0
  9072  001A34  6F7E               	movwf	(_API+30)& (0+255),b
  9073                           
  9074                           ;api.c: 86: API[16] = 0;
  9075  001A36  0E00               	movlw	0
  9076  001A38  0100               	movlb	0	; () banked
  9077  001A3A  6F81               	movwf	(_API+33)& (0+255),b
  9078  001A3C  0E00               	movlw	0
  9079  001A3E  6F80               	movwf	(_API+32)& (0+255),b
  9080                           
  9081                           ;api.c: 87: API[17] = 0;
  9082  001A40  0E00               	movlw	0
  9083  001A42  0100               	movlb	0	; () banked
  9084  001A44  6F83               	movwf	(_API+35)& (0+255),b
  9085  001A46  0E00               	movlw	0
  9086  001A48  6F82               	movwf	(_API+34)& (0+255),b
  9087                           
  9088                           ;api.c: 88: API[18] = 0;
  9089  001A4A  0E00               	movlw	0
  9090  001A4C  0100               	movlb	0	; () banked
  9091  001A4E  6F85               	movwf	(_API+37)& (0+255),b
  9092  001A50  0E00               	movlw	0
  9093  001A52  6F84               	movwf	(_API+36)& (0+255),b
  9094                           
  9095                           ;api.c: 89: API[19] = 0;
  9096  001A54  0E00               	movlw	0
  9097  001A56  0100               	movlb	0	; () banked
  9098  001A58  6F87               	movwf	(_API+39)& (0+255),b
  9099  001A5A  0E00               	movlw	0
  9100  001A5C  6F86               	movwf	(_API+38)& (0+255),b
  9101                           
  9102                           ;api.c: 90: API[20] = 0;
  9103  001A5E  0E00               	movlw	0
  9104  001A60  0100               	movlb	0	; () banked
  9105  001A62  6F89               	movwf	(_API+41)& (0+255),b
  9106  001A64  0E00               	movlw	0
  9107  001A66  6F88               	movwf	(_API+40)& (0+255),b
  9108                           
  9109                           ;api.c: 91: API[21] = 0;
  9110  001A68  0E00               	movlw	0
  9111  001A6A  0100               	movlb	0	; () banked
  9112  001A6C  6F8B               	movwf	(_API+43)& (0+255),b
  9113  001A6E  0E00               	movlw	0
  9114  001A70  6F8A               	movwf	(_API+42)& (0+255),b
  9115                           
  9116                           ;api.c: 92: API[22] = 0;
  9117  001A72  0E00               	movlw	0
  9118  001A74  0100               	movlb	0	; () banked
  9119  001A76  6F8D               	movwf	(_API+45)& (0+255),b
  9120  001A78  0E00               	movlw	0
  9121  001A7A  6F8C               	movwf	(_API+44)& (0+255),b
  9122                           
  9123                           ;api.c: 93: API[23] = 9;
  9124  001A7C  0E00               	movlw	0
  9125  001A7E  0100               	movlb	0	; () banked
  9126  001A80  6F8F               	movwf	(_API+47)& (0+255),b
  9127  001A82  0E09               	movlw	9
  9128  001A84  6F8E               	movwf	(_API+46)& (0+255),b
  9129                           
  9130                           ;api.c: 94: API[24] = 9;
  9131  001A86  0E00               	movlw	0
  9132  001A88  0100               	movlb	0	; () banked
  9133  001A8A  6F91               	movwf	(_API+49)& (0+255),b
  9134  001A8C  0E09               	movlw	9
  9135  001A8E  6F90               	movwf	(_API+48)& (0+255),b
  9136                           
  9137                           ;api.c: 95: API[25] = 0;
  9138  001A90  0E00               	movlw	0
  9139  001A92  0100               	movlb	0	; () banked
  9140  001A94  6F93               	movwf	(_API+51)& (0+255),b
  9141  001A96  0E00               	movlw	0
  9142  001A98  6F92               	movwf	(_API+50)& (0+255),b
  9143                           
  9144                           ;api.c: 96: API[26] = 0;
  9145  001A9A  0E00               	movlw	0
  9146  001A9C  0100               	movlb	0	; () banked
  9147  001A9E  6F95               	movwf	(_API+53)& (0+255),b
  9148  001AA0  0E00               	movlw	0
  9149  001AA2  6F94               	movwf	(_API+52)& (0+255),b
  9150                           
  9151                           ;api.c: 97: API[27] = 0;
  9152  001AA4  0E00               	movlw	0
  9153  001AA6  0100               	movlb	0	; () banked
  9154  001AA8  6F97               	movwf	(_API+55)& (0+255),b
  9155  001AAA  0E00               	movlw	0
  9156  001AAC  6F96               	movwf	(_API+54)& (0+255),b
  9157                           
  9158                           ;api.c: 98: API[28] = 0;
  9159  001AAE  0E00               	movlw	0
  9160  001AB0  0100               	movlb	0	; () banked
  9161  001AB2  6F99               	movwf	(_API+57)& (0+255),b
  9162  001AB4  0E00               	movlw	0
  9163  001AB6  6F98               	movwf	(_API+56)& (0+255),b
  9164                           
  9165                           ;api.c: 99: API[29] = 725;
  9166  001AB8  0E02               	movlw	2
  9167  001ABA  0100               	movlb	0	; () banked
  9168  001ABC  6F9B               	movwf	(_API+59)& (0+255),b
  9169  001ABE  0ED5               	movlw	213
  9170  001AC0  6F9A               	movwf	(_API+58)& (0+255),b
  9171                           
  9172                           ;api.c: 100: API[30] = 307;
  9173  001AC2  0E01               	movlw	1
  9174  001AC4  0100               	movlb	0	; () banked
  9175  001AC6  6F9D               	movwf	(_API+61)& (0+255),b
  9176  001AC8  0E33               	movlw	51
  9177  001ACA  6F9C               	movwf	(_API+60)& (0+255),b
  9178                           
  9179                           ;api.c: 101: API[31] = 725;
  9180  001ACC  0E02               	movlw	2
  9181  001ACE  0100               	movlb	0	; () banked
  9182  001AD0  6F9F               	movwf	(_API+63)& (0+255),b
  9183  001AD2  0ED5               	movlw	213
  9184  001AD4  6F9E               	movwf	(_API+62)& (0+255),b
  9185                           
  9186                           ;api.c: 102: API[32] = 307;
  9187  001AD6  0E01               	movlw	1
  9188  001AD8  0100               	movlb	0	; () banked
  9189  001ADA  6FA1               	movwf	(_API+65)& (0+255),b
  9190  001ADC  0E33               	movlw	51
  9191  001ADE  6FA0               	movwf	(_API+64)& (0+255),b
  9192                           
  9193                           ;api.c: 103: API[33] = 725;
  9194  001AE0  0E02               	movlw	2
  9195  001AE2  0100               	movlb	0	; () banked
  9196  001AE4  6FA3               	movwf	(_API+67)& (0+255),b
  9197  001AE6  0ED5               	movlw	213
  9198  001AE8  6FA2               	movwf	(_API+66)& (0+255),b
  9199                           
  9200                           ;api.c: 104: API[34] = 307;
  9201  001AEA  0E01               	movlw	1
  9202  001AEC  0100               	movlb	0	; () banked
  9203  001AEE  6FA5               	movwf	(_API+69)& (0+255),b
  9204  001AF0  0E33               	movlw	51
  9205  001AF2  6FA4               	movwf	(_API+68)& (0+255),b
  9206                           
  9207                           ;api.c: 105: API[35] = 725;
  9208  001AF4  0E02               	movlw	2
  9209  001AF6  0100               	movlb	0	; () banked
  9210  001AF8  6FA7               	movwf	(_API+71)& (0+255),b
  9211  001AFA  0ED5               	movlw	213
  9212  001AFC  6FA6               	movwf	(_API+70)& (0+255),b
  9213                           
  9214                           ;api.c: 106: API[36] = 307;
  9215  001AFE  0E01               	movlw	1
  9216  001B00  0100               	movlb	0	; () banked
  9217  001B02  6FA9               	movwf	(_API+73)& (0+255),b
  9218  001B04  0E33               	movlw	51
  9219  001B06  6FA8               	movwf	(_API+72)& (0+255),b
  9220                           
  9221                           ;api.c: 107: API[37] = 100;
  9222  001B08  0E00               	movlw	0
  9223  001B0A  0100               	movlb	0	; () banked
  9224  001B0C  6FAB               	movwf	(_API+75)& (0+255),b
  9225  001B0E  0E64               	movlw	100
  9226  001B10  6FAA               	movwf	(_API+74)& (0+255),b
  9227                           
  9228                           ;api.c: 108: API[38] = 100;
  9229  001B12  0E00               	movlw	0
  9230  001B14  0100               	movlb	0	; () banked
  9231  001B16  6FAD               	movwf	(_API+77)& (0+255),b
  9232  001B18  0E64               	movlw	100
  9233  001B1A  6FAC               	movwf	(_API+76)& (0+255),b
  9234                           
  9235                           ;api.c: 109: API[39] = 100;
  9236  001B1C  0E00               	movlw	0
  9237  001B1E  0100               	movlb	0	; () banked
  9238  001B20  6FAF               	movwf	(_API+79)& (0+255),b
  9239  001B22  0E64               	movlw	100
  9240  001B24  6FAE               	movwf	(_API+78)& (0+255),b
  9241                           
  9242                           ;api.c: 110: API[40] = 100;
  9243  001B26  0E00               	movlw	0
  9244  001B28  0100               	movlb	0	; () banked
  9245  001B2A  6FB1               	movwf	(_API+81)& (0+255),b
  9246  001B2C  0E64               	movlw	100
  9247  001B2E  6FB0               	movwf	(_API+80)& (0+255),b
  9248                           
  9249                           ;api.c: 111: API[41] = 100;
  9250  001B30  0E00               	movlw	0
  9251  001B32  0100               	movlb	0	; () banked
  9252  001B34  6FB3               	movwf	(_API+83)& (0+255),b
  9253  001B36  0E64               	movlw	100
  9254  001B38  6FB2               	movwf	(_API+82)& (0+255),b
  9255                           
  9256                           ;api.c: 112: API[42] = 100;
  9257  001B3A  0E00               	movlw	0
  9258  001B3C  0100               	movlb	0	; () banked
  9259  001B3E  6FB5               	movwf	(_API+85)& (0+255),b
  9260  001B40  0E64               	movlw	100
  9261  001B42  6FB4               	movwf	(_API+84)& (0+255),b
  9262                           
  9263                           ;api.c: 113: API[43] = 100;
  9264  001B44  0E00               	movlw	0
  9265  001B46  0100               	movlb	0	; () banked
  9266  001B48  6FB7               	movwf	(_API+87)& (0+255),b
  9267  001B4A  0E64               	movlw	100
  9268  001B4C  6FB6               	movwf	(_API+86)& (0+255),b
  9269                           
  9270                           ;api.c: 114: API[44] = 100;
  9271  001B4E  0E00               	movlw	0
  9272  001B50  0100               	movlb	0	; () banked
  9273  001B52  6FB9               	movwf	(_API+89)& (0+255),b
  9274  001B54  0E64               	movlw	100
  9275  001B56  6FB8               	movwf	(_API+88)& (0+255),b
  9276                           
  9277                           ; BSR set to: 0
  9278  001B58  0012               	return		;funcret
  9279  001B5A                     __end_of_APIxInitialize:
  9280                           	opt stack 0
  9281                           tblptru	equ	0xFF8
  9282                           tblptrh	equ	0xFF7
  9283                           tblptrl	equ	0xFF6
  9284                           tablat	equ	0xFF5
  9285                           prodh	equ	0xFF4
  9286                           prodl	equ	0xFF3
  9287                           intcon	equ	0xFF2
  9288                           intcon2	equ	0xFF1
  9289                           postinc0	equ	0xFEE
  9290                           wreg	equ	0xFE8
  9291                           postdec1	equ	0xFE5
  9292                           fsr1l	equ	0xFE1
  9293                           postinc2	equ	0xFDE
  9294                           postdec2	equ	0xFDD
  9295                           fsr2h	equ	0xFDA
  9296                           fsr2l	equ	0xFD9
  9297                           status	equ	0xFD8
  9298                           
  9299 ;; *************** function _tc_low *****************
  9300 ;; Defined at:
  9301 ;;		line 144 in file "../Main.c"
  9302 ;; Parameters:    Size  Location     Type
  9303 ;;		None
  9304 ;; Auto vars:     Size  Location     Type
  9305 ;;		None
  9306 ;; Return value:  Size  Location     Type
  9307 ;;                  1    wreg      void 
  9308 ;; Registers used:
  9309 ;;		None
  9310 ;; Tracked objects:
  9311 ;;		On entry : 0/0
  9312 ;;		On exit  : 0/0
  9313 ;;		Unchanged: 0/0
  9314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9315 ;;      Params:         0       0       0       0       0       0       0       0       0
  9316 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9317 ;;      Temps:          0       0       0      17       0       0       0       0       0
  9318 ;;      Totals:         0       0       0      17       0       0       0       0       0
  9319 ;;Total ram usage:       17 bytes
  9320 ;; Hardware stack levels used:    1
  9321 ;; Hardware stack levels required when called:    3
  9322 ;; This function calls:
  9323 ;;		Nothing
  9324 ;; This function is called by:
  9325 ;;		Interrupt level 1
  9326 ;; This function uses a non-reentrant model
  9327 ;;
  9328                           
  9329                           	psect	intcodelo
  9330  000018                     __pintcodelo:
  9331                           	opt stack 0
  9332  000018                     _tc_low:
  9333                           	opt stack 23
  9334                           
  9335                           ; BSR set to: 0
  9336                           ;incstack = 0
  9337  000018  804E               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  9338  00001A  CFD8 F27E          	movff	status,??_tc_low
  9339  00001E  CFE8 F27F          	movff	wreg,??_tc_low+1
  9340  000022  CFE0 F280          	movff	bsr,??_tc_low+2
  9341  000026  CFFA F281          	movff	pclath,??_tc_low+3
  9342  00002A  CFFB F282          	movff	pclatu,??_tc_low+4
  9343  00002E  CFE9 F283          	movff	fsr0l,??_tc_low+5
  9344  000032  CFEA F284          	movff	fsr0h,??_tc_low+6
  9345  000036  CFE1 F285          	movff	fsr1l,??_tc_low+7
  9346  00003A  CFE2 F286          	movff	fsr1h,??_tc_low+8
  9347  00003E  CFD9 F287          	movff	fsr2l,??_tc_low+9
  9348  000042  CFDA F288          	movff	fsr2h,??_tc_low+10
  9349  000046  CFF3 F289          	movff	prodl,??_tc_low+11
  9350  00004A  CFF4 F28A          	movff	prodh,??_tc_low+12
  9351  00004E  CFF6 F28B          	movff	tblptrl,??_tc_low+13
  9352  000052  CFF7 F28C          	movff	tblptrh,??_tc_low+14
  9353  000056  CFF8 F28D          	movff	tblptru,??_tc_low+15
  9354  00005A  CFF5 F28E          	movff	tablat,??_tc_low+16
  9355  00005E  C28E  FFF5         	movff	??_tc_low+16,tablat
  9356  000062  C28D  FFF8         	movff	??_tc_low+15,tblptru
  9357  000066  C28C  FFF7         	movff	??_tc_low+14,tblptrh
  9358  00006A  C28B  FFF6         	movff	??_tc_low+13,tblptrl
  9359  00006E  C28A  FFF4         	movff	??_tc_low+12,prodh
  9360  000072  C289  FFF3         	movff	??_tc_low+11,prodl
  9361  000076  C288  FFDA         	movff	??_tc_low+10,fsr2h
  9362  00007A  C287  FFD9         	movff	??_tc_low+9,fsr2l
  9363  00007E  C286  FFE2         	movff	??_tc_low+8,fsr1h
  9364  000082  C285  FFE1         	movff	??_tc_low+7,fsr1l
  9365  000086  C284  FFEA         	movff	??_tc_low+6,fsr0h
  9366  00008A  C283  FFE9         	movff	??_tc_low+5,fsr0l
  9367  00008E  C282  FFFB         	movff	??_tc_low+4,pclatu
  9368  000092  C281  FFFA         	movff	??_tc_low+3,pclath
  9369  000096  C280  FFE0         	movff	??_tc_low+2,bsr
  9370  00009A  C27F  FFE8         	movff	??_tc_low+1,wreg
  9371  00009E  C27E  FFD8         	movff	??_tc_low,status
  9372  0000A2  904E               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  9373  0000A4  0010               	retfie	
  9374  0000A6                     __end_of_tc_low:
  9375                           	opt stack 0
  9376                           pclatu	equ	0xFFB
  9377                           pclath	equ	0xFFA
  9378                           tblptru	equ	0xFF8
  9379                           tblptrh	equ	0xFF7
  9380                           tblptrl	equ	0xFF6
  9381                           tablat	equ	0xFF5
  9382                           prodh	equ	0xFF4
  9383                           prodl	equ	0xFF3
  9384                           intcon	equ	0xFF2
  9385                           intcon2	equ	0xFF1
  9386                           postinc0	equ	0xFEE
  9387                           fsr0h	equ	0xFEA
  9388                           fsr0l	equ	0xFE9
  9389                           wreg	equ	0xFE8
  9390                           postdec1	equ	0xFE5
  9391                           fsr1h	equ	0xFE2
  9392                           fsr1l	equ	0xFE1
  9393                           bsr	equ	0xFE0
  9394                           postinc2	equ	0xFDE
  9395                           postdec2	equ	0xFDD
  9396                           fsr2h	equ	0xFDA
  9397                           fsr2l	equ	0xFD9
  9398                           status	equ	0xFD8
  9399                           
  9400 ;; *************** function _tc_high *****************
  9401 ;; Defined at:
  9402 ;;		line 148 in file "../Main.c"
  9403 ;; Parameters:    Size  Location     Type
  9404 ;;		None
  9405 ;; Auto vars:     Size  Location     Type
  9406 ;;		None
  9407 ;; Return value:  Size  Location     Type
  9408 ;;                  1    wreg      void 
  9409 ;; Registers used:
  9410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9411 ;; Tracked objects:
  9412 ;;		On entry : 0/0
  9413 ;;		On exit  : 0/0
  9414 ;;		Unchanged: 0/0
  9415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9416 ;;      Params:         0       0       0       0       0       0       0       0       0
  9417 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9418 ;;      Temps:         14       0       0       0       0       0       0       0       0
  9419 ;;      Totals:        14       0       0       0       0       0       0       0       0
  9420 ;;Total ram usage:       14 bytes
  9421 ;; Hardware stack levels used:    1
  9422 ;; Hardware stack levels required when called:    2
  9423 ;; This function calls:
  9424 ;;		_EUSART1_Receive_ISR
  9425 ;;		_EUSART1_Transmit_ISR
  9426 ;;		_UPDATExTERMINAL
  9427 ;; This function is called by:
  9428 ;;		Interrupt level 2
  9429 ;; This function uses a non-reentrant model
  9430 ;;
  9431                           
  9432                           	psect	intcode
  9433  000008                     __pintcode:
  9434                           	opt stack 0
  9435  000008                     _tc_high:
  9436                           	opt stack 23
  9437                           
  9438                           ;incstack = 0
  9439  000008  824E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9440  00000A  CFFA F02C          	movff	pclath,??_tc_high
  9441  00000E  CFFB F02D          	movff	pclatu,??_tc_high+1
  9442  000012  EDA4  F00F         	call	int_func,f	;refresh shadow registers
  9443                           pclatu	equ	0xFFB
  9444                           pclath	equ	0xFFA
  9445                           tblptru	equ	0xFF8
  9446                           tblptrh	equ	0xFF7
  9447                           tblptrl	equ	0xFF6
  9448                           tablat	equ	0xFF5
  9449                           prodh	equ	0xFF4
  9450                           prodl	equ	0xFF3
  9451                           intcon	equ	0xFF2
  9452                           intcon2	equ	0xFF1
  9453                           postinc0	equ	0xFEE
  9454                           fsr0h	equ	0xFEA
  9455                           fsr0l	equ	0xFE9
  9456                           wreg	equ	0xFE8
  9457                           postdec1	equ	0xFE5
  9458                           fsr1h	equ	0xFE2
  9459                           fsr1l	equ	0xFE1
  9460                           bsr	equ	0xFE0
  9461                           postinc2	equ	0xFDE
  9462                           postdec2	equ	0xFDD
  9463                           fsr2h	equ	0xFDA
  9464                           fsr2l	equ	0xFD9
  9465                           status	equ	0xFD8
  9466                           
  9467                           	psect	intcode_body
  9468  001F48                     __pintcode_body:
  9469                           	opt stack 23
  9470  001F48                     int_func:
  9471                           	opt stack 23
  9472  001F48  0006               	pop		; remove dummy address from shadow register refresh
  9473  001F4A  CFE9 F02E          	movff	fsr0l,??_tc_high+2
  9474  001F4E  CFEA F02F          	movff	fsr0h,??_tc_high+3
  9475  001F52  CFE1 F030          	movff	fsr1l,??_tc_high+4
  9476  001F56  CFE2 F031          	movff	fsr1h,??_tc_high+5
  9477  001F5A  CFD9 F032          	movff	fsr2l,??_tc_high+6
  9478  001F5E  CFDA F033          	movff	fsr2h,??_tc_high+7
  9479  001F62  CFF3 F034          	movff	prodl,??_tc_high+8
  9480  001F66  CFF4 F035          	movff	prodh,??_tc_high+9
  9481  001F6A  CFF6 F036          	movff	tblptrl,??_tc_high+10
  9482  001F6E  CFF7 F037          	movff	tblptrh,??_tc_high+11
  9483  001F72  CFF8 F038          	movff	tblptru,??_tc_high+12
  9484  001F76  CFF5 F039          	movff	tablat,??_tc_high+13
  9485                           
  9486                           ;Main.c: 150: if (INTCONbits.TMR0IF)
  9487  001F7A  A4F2               	btfss	intcon,2,c	;volatile
  9488  001F7C  D020               	goto	i2l6066
  9489                           
  9490                           ;Main.c: 151: {
  9491                           ;Main.c: 152: if(Led1_Counter <= 100)
  9492  001F7E  0100               	movlb	0	; () banked
  9493  001F80  51EB               	movf	(_Led1_Counter+1)& (0+255),w,b
  9494  001F82  E107               	bnz	i2l90
  9495  001F84  0E65               	movlw	101
  9496  001F86  0100               	movlb	0	; () banked
  9497  001F88  5DEA               	subwf	_Led1_Counter& (0+255),w,b
  9498  001F8A  B0D8               	btfsc	status,0,c
  9499  001F8C  D002               	goto	i2l90
  9500                           
  9501                           ; BSR set to: 0
  9502                           ;Main.c: 153: {
  9503                           ;Main.c: 154: PORTAbits.RA4 = 1;
  9504  001F8E  8880               	bsf	3968,4,c	;volatile
  9505                           
  9506                           ;Main.c: 155: }
  9507  001F90  D001               	goto	i2l6054
  9508  001F92                     i2l90:
  9509                           
  9510                           ; BSR set to: 0
  9511                           ;Main.c: 156: else
  9512                           ;Main.c: 157: {
  9513                           ;Main.c: 158: PORTAbits.RA4 = 0;
  9514  001F92  9880               	bcf	3968,4,c	;volatile
  9515  001F94                     i2l6054:
  9516                           
  9517                           ; BSR set to: 0
  9518                           ;Main.c: 159: }
  9519                           ;Main.c: 160: if(Led1_Counter >= 700)
  9520  001F94  0EBC               	movlw	188
  9521  001F96  0100               	movlb	0	; () banked
  9522  001F98  5DEA               	subwf	_Led1_Counter& (0+255),w,b
  9523  001F9A  0E02               	movlw	2
  9524  001F9C  0100               	movlb	0	; () banked
  9525  001F9E  59EB               	subwfb	(_Led1_Counter+1)& (0+255),w,b
  9526  001FA0  A0D8               	btfss	status,0,c
  9527  001FA2  D007               	goto	i2l6060
  9528                           
  9529                           ; BSR set to: 0
  9530                           ;Main.c: 161: {
  9531                           ;Main.c: 162: Led1_Counter = 0;
  9532  001FA4  0E00               	movlw	0
  9533  001FA6  0100               	movlb	0	; () banked
  9534  001FA8  6FEB               	movwf	(_Led1_Counter+1)& (0+255),b
  9535  001FAA  0E00               	movlw	0
  9536  001FAC  6FEA               	movwf	_Led1_Counter& (0+255),b
  9537                           
  9538                           ; BSR set to: 0
  9539                           ;Main.c: 163: UPDATExTERMINAL();
  9540  001FAE  ECFC  F012         	call	_UPDATExTERMINAL	;wreg free
  9541  001FB2                     i2l6060:
  9542                           
  9543                           ;Main.c: 164: }
  9544                           ;Main.c: 165: Led1_Counter++;
  9545  001FB2  0100               	movlb	0	; () banked
  9546  001FB4  4BEA               	infsnz	_Led1_Counter& (0+255),f,b
  9547  001FB6  2BEB               	incf	(_Led1_Counter+1)& (0+255),f,b
  9548                           
  9549                           ; BSR set to: 0
  9550                           ;Main.c: 166: Update_State_Machine = 1;
  9551  001FB8  0E01               	movlw	1
  9552  001FBA  6E24               	movwf	_Update_State_Machine,c
  9553                           
  9554                           ; BSR set to: 0
  9555                           ;Main.c: 167: INTCONbits.TMR0IF = 0;
  9556  001FBC  94F2               	bcf	intcon,2,c	;volatile
  9557  001FBE                     i2l6066:
  9558                           
  9559                           ;Main.c: 168: }
  9560                           ;Main.c: 170: if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
  9561  001FBE  BA9D               	btfsc	3997,5,c	;volatile
  9562  001FC0  AA9E               	btfss	3998,5,c	;volatile
  9563  001FC2  D002               	goto	i2l6072
  9564                           
  9565                           ;Main.c: 171: EUSART1_Receive_ISR();
  9566  001FC4  EC7A  F012         	call	_EUSART1_Receive_ISR	;wreg free
  9567  001FC8                     i2l6072:
  9568                           
  9569                           ;Main.c: 172: }
  9570                           ;Main.c: 173: if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
  9571  001FC8  B89D               	btfsc	3997,4,c	;volatile
  9572  001FCA  A89E               	btfss	3998,4,c	;volatile
  9573  001FCC  D002               	goto	i2l95
  9574                           
  9575                           ;Main.c: 174: EUSART1_Transmit_ISR();
  9576  001FCE  EC63  F012         	call	_EUSART1_Transmit_ISR	;wreg free
  9577  001FD2                     i2l95:
  9578  001FD2  C039  FFF5         	movff	??_tc_high+13,tablat
  9579  001FD6  C038  FFF8         	movff	??_tc_high+12,tblptru
  9580  001FDA  C037  FFF7         	movff	??_tc_high+11,tblptrh
  9581  001FDE  C036  FFF6         	movff	??_tc_high+10,tblptrl
  9582  001FE2  C035  FFF4         	movff	??_tc_high+9,prodh
  9583  001FE6  C034  FFF3         	movff	??_tc_high+8,prodl
  9584  001FEA  C033  FFDA         	movff	??_tc_high+7,fsr2h
  9585  001FEE  C032  FFD9         	movff	??_tc_high+6,fsr2l
  9586  001FF2  C031  FFE2         	movff	??_tc_high+5,fsr1h
  9587  001FF6  C030  FFE1         	movff	??_tc_high+4,fsr1l
  9588  001FFA  C02F  FFEA         	movff	??_tc_high+3,fsr0h
  9589  001FFE  C02E  FFE9         	movff	??_tc_high+2,fsr0l
  9590  002002  C02D  FFFB         	movff	??_tc_high+1,pclatu
  9591  002006  C02C  FFFA         	movff	??_tc_high,pclath
  9592  00200A  924E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9593  00200C  0011               	retfie		f
  9594  00200E                     __end_of_tc_high:
  9595                           	opt stack 0
  9596                           pclatu	equ	0xFFB
  9597                           pclath	equ	0xFFA
  9598                           tblptru	equ	0xFF8
  9599                           tblptrh	equ	0xFF7
  9600                           tblptrl	equ	0xFF6
  9601                           tablat	equ	0xFF5
  9602                           prodh	equ	0xFF4
  9603                           prodl	equ	0xFF3
  9604                           intcon	equ	0xFF2
  9605                           intcon2	equ	0xFF1
  9606                           postinc0	equ	0xFEE
  9607                           fsr0h	equ	0xFEA
  9608                           fsr0l	equ	0xFE9
  9609                           wreg	equ	0xFE8
  9610                           postdec1	equ	0xFE5
  9611                           fsr1h	equ	0xFE2
  9612                           fsr1l	equ	0xFE1
  9613                           bsr	equ	0xFE0
  9614                           postinc2	equ	0xFDE
  9615                           postdec2	equ	0xFDD
  9616                           fsr2h	equ	0xFDA
  9617                           fsr2l	equ	0xFD9
  9618                           status	equ	0xFD8
  9619                           
  9620 ;; *************** function _UPDATExTERMINAL *****************
  9621 ;; Defined at:
  9622 ;;		line 21 in file "../terminal.c"
  9623 ;; Parameters:    Size  Location     Type
  9624 ;;		None
  9625 ;; Auto vars:     Size  Location     Type
  9626 ;;		None
  9627 ;; Return value:  Size  Location     Type
  9628 ;;                  1    wreg      void 
  9629 ;; Registers used:
  9630 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9631 ;; Tracked objects:
  9632 ;;		On entry : 0/0
  9633 ;;		On exit  : 0/0
  9634 ;;		Unchanged: 0/0
  9635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9636 ;;      Params:         0       0       0       0       0       0       0       0       0
  9637 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9638 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9639 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9640 ;;Total ram usage:        0 bytes
  9641 ;; Hardware stack levels used:    1
  9642 ;; Hardware stack levels required when called:    1
  9643 ;; This function calls:
  9644 ;;		_EUSART1_Write
  9645 ;; This function is called by:
  9646 ;;		_tc_high
  9647 ;; This function uses a non-reentrant model
  9648 ;;
  9649                           
  9650                           	psect	text28
  9651  0025F8                     __ptext28:
  9652                           	opt stack 0
  9653  0025F8                     _UPDATExTERMINAL:
  9654                           	opt stack 23
  9655                           
  9656                           ;terminal.c: 22: EUSART1_Write('A');
  9657                           
  9658                           ;incstack = 0
  9659  0025F8  0E41               	movlw	65
  9660  0025FA  EC46  F012         	call	_EUSART1_Write
  9661  0025FE  0012               	return		;funcret
  9662  002600                     __end_of_UPDATExTERMINAL:
  9663                           	opt stack 0
  9664                           pclatu	equ	0xFFB
  9665                           pclath	equ	0xFFA
  9666                           tblptru	equ	0xFF8
  9667                           tblptrh	equ	0xFF7
  9668                           tblptrl	equ	0xFF6
  9669                           tablat	equ	0xFF5
  9670                           prodh	equ	0xFF4
  9671                           prodl	equ	0xFF3
  9672                           intcon	equ	0xFF2
  9673                           intcon2	equ	0xFF1
  9674                           postinc0	equ	0xFEE
  9675                           fsr0h	equ	0xFEA
  9676                           fsr0l	equ	0xFE9
  9677                           wreg	equ	0xFE8
  9678                           postdec1	equ	0xFE5
  9679                           fsr1h	equ	0xFE2
  9680                           fsr1l	equ	0xFE1
  9681                           bsr	equ	0xFE0
  9682                           postinc2	equ	0xFDE
  9683                           postdec2	equ	0xFDD
  9684                           fsr2h	equ	0xFDA
  9685                           fsr2l	equ	0xFD9
  9686                           status	equ	0xFD8
  9687                           
  9688 ;; *************** function _EUSART1_Write *****************
  9689 ;; Defined at:
  9690 ;;		line 160 in file "../eusart1.c"
  9691 ;; Parameters:    Size  Location     Type
  9692 ;;  txData          1    wreg     unsigned char 
  9693 ;; Auto vars:     Size  Location     Type
  9694 ;;  txData          1    0[COMRAM] unsigned char 
  9695 ;; Return value:  Size  Location     Type
  9696 ;;                  1    wreg      void 
  9697 ;; Registers used:
  9698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9699 ;; Tracked objects:
  9700 ;;		On entry : 0/0
  9701 ;;		On exit  : 0/0
  9702 ;;		Unchanged: 0/0
  9703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9704 ;;      Params:         0       0       0       0       0       0       0       0       0
  9705 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9706 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9707 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9708 ;;Total ram usage:        1 bytes
  9709 ;; Hardware stack levels used:    1
  9710 ;; This function calls:
  9711 ;;		Nothing
  9712 ;; This function is called by:
  9713 ;;		_UPDATExTERMINAL
  9714 ;; This function uses a non-reentrant model
  9715 ;;
  9716                           
  9717                           	psect	text29
  9718  00248C                     __ptext29:
  9719                           	opt stack 0
  9720  00248C                     _EUSART1_Write:
  9721                           	opt stack 23
  9722                           
  9723                           ;incstack = 0
  9724                           ;EUSART1_Write@txData stored from wreg
  9725  00248C  6E2B               	movwf	EUSART1_Write@txData,c
  9726  00248E                     i2l5096:
  9727  00248E  5028               	movf	_eusart1TxBufferRemaining,w,c	;volatile
  9728  002490  B4D8               	btfsc	status,2,c
  9729  002492  D7FD               	goto	i2l5096
  9730                           
  9731                           ;eusart1.c: 162: }
  9732                           ;eusart1.c: 164: if (0 == PIE1bits.TX1IE) {
  9733  002494  B89D               	btfsc	3997,4,c	;volatile
  9734  002496  D003               	goto	i2l967
  9735                           
  9736                           ;eusart1.c: 165: TXREG1 = txData;
  9737  002498  C02B  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  9738                           
  9739                           ;eusart1.c: 166: } else {
  9740  00249C  D012               	goto	i2l5110
  9741  00249E                     i2l967:
  9742                           
  9743                           ;eusart1.c: 167: PIE1bits.TX1IE = 0;
  9744  00249E  989D               	bcf	3997,4,c	;volatile
  9745                           
  9746                           ;eusart1.c: 168: eusart1TxBuffer[eusart1TxHead++] = txData;
  9747  0024A0  5029               	movf	_eusart1TxHead,w,c
  9748  0024A2  0D01               	mullw	1
  9749  0024A4  0E7E               	movlw	low _eusart1TxBuffer
  9750  0024A6  24F3               	addwf	prodl,w,c
  9751  0024A8  6ED9               	movwf	fsr2l,c
  9752  0024AA  0E01               	movlw	high _eusart1TxBuffer
  9753  0024AC  20F4               	addwfc	prodh,w,c
  9754  0024AE  6EDA               	movwf	fsr2h,c
  9755  0024B0  C02B  FFDF         	movff	EUSART1_Write@txData,indf2
  9756  0024B4  2A29               	incf	_eusart1TxHead,f,c
  9757                           
  9758                           ;eusart1.c: 169: if (sizeof (eusart1TxBuffer) <= eusart1TxHead) {
  9759  0024B6  0E7D               	movlw	125
  9760  0024B8  6429               	cpfsgt	_eusart1TxHead,c
  9761  0024BA  D002               	goto	i2l5108
  9762                           
  9763                           ;eusart1.c: 170: eusart1TxHead = 0;
  9764  0024BC  0E00               	movlw	0
  9765  0024BE  6E29               	movwf	_eusart1TxHead,c
  9766  0024C0                     i2l5108:
  9767                           
  9768                           ;eusart1.c: 171: }
  9769                           ;eusart1.c: 172: eusart1TxBufferRemaining--;
  9770  0024C0  0628               	decf	_eusart1TxBufferRemaining,f,c	;volatile
  9771  0024C2                     i2l5110:
  9772                           
  9773                           ;eusart1.c: 173: }
  9774                           ;eusart1.c: 174: PIE1bits.TX1IE = 1;
  9775  0024C2  889D               	bsf	3997,4,c	;volatile
  9776  0024C4  0012               	return		;funcret
  9777  0024C6                     __end_of_EUSART1_Write:
  9778                           	opt stack 0
  9779                           pclatu	equ	0xFFB
  9780                           pclath	equ	0xFFA
  9781                           tblptru	equ	0xFF8
  9782                           tblptrh	equ	0xFF7
  9783                           tblptrl	equ	0xFF6
  9784                           tablat	equ	0xFF5
  9785                           prodh	equ	0xFF4
  9786                           prodl	equ	0xFF3
  9787                           intcon	equ	0xFF2
  9788                           intcon2	equ	0xFF1
  9789                           postinc0	equ	0xFEE
  9790                           fsr0h	equ	0xFEA
  9791                           fsr0l	equ	0xFE9
  9792                           wreg	equ	0xFE8
  9793                           postdec1	equ	0xFE5
  9794                           fsr1h	equ	0xFE2
  9795                           fsr1l	equ	0xFE1
  9796                           bsr	equ	0xFE0
  9797                           indf2	equ	0xFDF
  9798                           postinc2	equ	0xFDE
  9799                           postdec2	equ	0xFDD
  9800                           fsr2h	equ	0xFDA
  9801                           fsr2l	equ	0xFD9
  9802                           status	equ	0xFD8
  9803                           
  9804 ;; *************** function _EUSART1_Transmit_ISR *****************
  9805 ;; Defined at:
  9806 ;;		line 177 in file "../eusart1.c"
  9807 ;; Parameters:    Size  Location     Type
  9808 ;;		None
  9809 ;; Auto vars:     Size  Location     Type
  9810 ;;		None
  9811 ;; Return value:  Size  Location     Type
  9812 ;;                  1    wreg      void 
  9813 ;; Registers used:
  9814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9815 ;; Tracked objects:
  9816 ;;		On entry : 0/0
  9817 ;;		On exit  : 0/0
  9818 ;;		Unchanged: 0/0
  9819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9820 ;;      Params:         0       0       0       0       0       0       0       0       0
  9821 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9822 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9823 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9824 ;;Total ram usage:        0 bytes
  9825 ;; Hardware stack levels used:    1
  9826 ;; This function calls:
  9827 ;;		Nothing
  9828 ;; This function is called by:
  9829 ;;		_tc_high
  9830 ;; This function uses a non-reentrant model
  9831 ;;
  9832                           
  9833                           	psect	text30
  9834  0024C6                     __ptext30:
  9835                           	opt stack 0
  9836  0024C6                     _EUSART1_Transmit_ISR:
  9837                           	opt stack 24
  9838                           
  9839                           ;eusart1.c: 180: if (sizeof (eusart1TxBuffer) > eusart1TxBufferRemaining) {
  9840                           
  9841                           ;incstack = 0
  9842  0024C6  0E7E               	movlw	126
  9843  0024C8  6028               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
  9844  0024CA  D012               	goto	i2l973
  9845                           
  9846                           ;eusart1.c: 181: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
  9847  0024CC  502A               	movf	_eusart1TxTail,w,c
  9848  0024CE  0D01               	mullw	1
  9849  0024D0  0E7E               	movlw	low _eusart1TxBuffer
  9850  0024D2  24F3               	addwf	prodl,w,c
  9851  0024D4  6ED9               	movwf	fsr2l,c
  9852  0024D6  0E01               	movlw	high _eusart1TxBuffer
  9853  0024D8  20F4               	addwfc	prodh,w,c
  9854  0024DA  6EDA               	movwf	fsr2h,c
  9855  0024DC  50DF               	movf	indf2,w,c
  9856  0024DE  6EAD               	movwf	4013,c	;volatile
  9857  0024E0  2A2A               	incf	_eusart1TxTail,f,c
  9858                           
  9859                           ;eusart1.c: 182: if (sizeof (eusart1TxBuffer) <= eusart1TxTail) {
  9860  0024E2  0E7D               	movlw	125
  9861  0024E4  642A               	cpfsgt	_eusart1TxTail,c
  9862  0024E6  D002               	goto	i2l5976
  9863                           
  9864                           ;eusart1.c: 183: eusart1TxTail = 0;
  9865  0024E8  0E00               	movlw	0
  9866  0024EA  6E2A               	movwf	_eusart1TxTail,c
  9867  0024EC                     i2l5976:
  9868                           
  9869                           ;eusart1.c: 184: }
  9870                           ;eusart1.c: 185: eusart1TxBufferRemaining++;
  9871  0024EC  2A28               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  9872                           
  9873                           ;eusart1.c: 186: } else {
  9874  0024EE  0012               	return	
  9875  0024F0                     i2l973:
  9876                           
  9877                           ;eusart1.c: 187: PIE1bits.TX1IE = 0;
  9878  0024F0  989D               	bcf	3997,4,c	;volatile
  9879  0024F2  0012               	return	
  9880  0024F4                     __end_of_EUSART1_Transmit_ISR:
  9881                           	opt stack 0
  9882                           pclatu	equ	0xFFB
  9883                           pclath	equ	0xFFA
  9884                           tblptru	equ	0xFF8
  9885                           tblptrh	equ	0xFF7
  9886                           tblptrl	equ	0xFF6
  9887                           tablat	equ	0xFF5
  9888                           prodh	equ	0xFF4
  9889                           prodl	equ	0xFF3
  9890                           intcon	equ	0xFF2
  9891                           intcon2	equ	0xFF1
  9892                           postinc0	equ	0xFEE
  9893                           fsr0h	equ	0xFEA
  9894                           fsr0l	equ	0xFE9
  9895                           wreg	equ	0xFE8
  9896                           postdec1	equ	0xFE5
  9897                           fsr1h	equ	0xFE2
  9898                           fsr1l	equ	0xFE1
  9899                           bsr	equ	0xFE0
  9900                           indf2	equ	0xFDF
  9901                           postinc2	equ	0xFDE
  9902                           postdec2	equ	0xFDD
  9903                           fsr2h	equ	0xFDA
  9904                           fsr2l	equ	0xFD9
  9905                           status	equ	0xFD8
  9906                           
  9907 ;; *************** function _EUSART1_Receive_ISR *****************
  9908 ;; Defined at:
  9909 ;;		line 191 in file "../eusart1.c"
  9910 ;; Parameters:    Size  Location     Type
  9911 ;;		None
  9912 ;; Auto vars:     Size  Location     Type
  9913 ;;		None
  9914 ;; Return value:  Size  Location     Type
  9915 ;;                  1    wreg      void 
  9916 ;; Registers used:
  9917 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9918 ;; Tracked objects:
  9919 ;;		On entry : 0/0
  9920 ;;		On exit  : 0/0
  9921 ;;		Unchanged: 0/0
  9922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9923 ;;      Params:         0       0       0       0       0       0       0       0       0
  9924 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9925 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9926 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9927 ;;Total ram usage:        0 bytes
  9928 ;; Hardware stack levels used:    1
  9929 ;; This function calls:
  9930 ;;		Nothing
  9931 ;; This function is called by:
  9932 ;;		_tc_high
  9933 ;; This function uses a non-reentrant model
  9934 ;;
  9935                           
  9936                           	psect	text31
  9937  0024F4                     __ptext31:
  9938                           	opt stack 0
  9939  0024F4                     _EUSART1_Receive_ISR:
  9940                           	opt stack 24
  9941                           
  9942                           ;eusart1.c: 192: if (1 == RCSTA1bits.OERR) {
  9943                           
  9944                           ;incstack = 0
  9945  0024F4  A2AB               	btfss	4011,1,c	;volatile
  9946  0024F6  D002               	goto	i2l5956
  9947                           
  9948                           ;eusart1.c: 195: RCSTA1bits.CREN = 0;
  9949  0024F8  98AB               	bcf	4011,4,c	;volatile
  9950                           
  9951                           ;eusart1.c: 196: RCSTA1bits.CREN = 1;
  9952  0024FA  88AB               	bsf	4011,4,c	;volatile
  9953  0024FC                     i2l5956:
  9954                           
  9955                           ;eusart1.c: 197: }
  9956                           ;eusart1.c: 200: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
  9957  0024FC  5026               	movf	_eusart1RxHead,w,c
  9958  0024FE  0D01               	mullw	1
  9959  002500  0E00               	movlw	low _eusart1RxBuffer
  9960  002502  24F3               	addwf	prodl,w,c
  9961  002504  6ED9               	movwf	fsr2l,c
  9962  002506  0E02               	movlw	high _eusart1RxBuffer
  9963  002508  20F4               	addwfc	prodh,w,c
  9964  00250A  6EDA               	movwf	fsr2h,c
  9965  00250C  CFAE FFDF          	movff	4014,indf2	;volatile
  9966  002510  2A26               	incf	_eusart1RxHead,f,c
  9967                           
  9968                           ;eusart1.c: 201: if (sizeof (eusart1RxBuffer) <= eusart1RxHead) {
  9969  002512  0E7D               	movlw	125
  9970  002514  6426               	cpfsgt	_eusart1RxHead,c
  9971  002516  D002               	goto	i2l5964
  9972                           
  9973                           ;eusart1.c: 202: eusart1RxHead = 0;
  9974  002518  0E00               	movlw	0
  9975  00251A  6E26               	movwf	_eusart1RxHead,c
  9976  00251C                     i2l5964:
  9977                           
  9978                           ;eusart1.c: 203: }
  9979                           ;eusart1.c: 204: eusart1RxCount++;
  9980  00251C  2A25               	incf	_eusart1RxCount,f,c	;volatile
  9981  00251E  0012               	return		;funcret
  9982  002520                     __end_of_EUSART1_Receive_ISR:
  9983                           	opt stack 0
  9984  0000                     pclatu	equ	0xFFB
  9985                           pclath	equ	0xFFA
  9986                           tblptru	equ	0xFF8
  9987                           tblptrh	equ	0xFF7
  9988                           tblptrl	equ	0xFF6
  9989                           tablat	equ	0xFF5
  9990                           prodh	equ	0xFF4
  9991                           prodl	equ	0xFF3
  9992                           intcon	equ	0xFF2
  9993                           intcon2	equ	0xFF1
  9994                           postinc0	equ	0xFEE
  9995                           fsr0h	equ	0xFEA
  9996                           fsr0l	equ	0xFE9
  9997                           wreg	equ	0xFE8
  9998                           postdec1	equ	0xFE5
  9999                           fsr1h	equ	0xFE2
 10000                           fsr1l	equ	0xFE1
 10001                           bsr	equ	0xFE0
 10002                           indf2	equ	0xFDF
 10003                           postinc2	equ	0xFDE
 10004                           postdec2	equ	0xFDD
 10005                           fsr2h	equ	0xFDA
 10006                           fsr2l	equ	0xFD9
 10007                           status	equ	0xFD8
 10008                           pclatu	equ	0xFFB
 10009                           pclath	equ	0xFFA
 10010                           tblptru	equ	0xFF8
 10011                           tblptrh	equ	0xFF7
 10012                           tblptrl	equ	0xFF6
 10013                           tablat	equ	0xFF5
 10014                           prodh	equ	0xFF4
 10015                           prodl	equ	0xFF3
 10016                           intcon	equ	0xFF2
 10017                           intcon2	equ	0xFF1
 10018                           postinc0	equ	0xFEE
 10019                           fsr0h	equ	0xFEA
 10020                           fsr0l	equ	0xFE9
 10021                           wreg	equ	0xFE8
 10022                           postdec1	equ	0xFE5
 10023                           fsr1h	equ	0xFE2
 10024                           fsr1l	equ	0xFE1
 10025                           bsr	equ	0xFE0
 10026                           indf2	equ	0xFDF
 10027                           postinc2	equ	0xFDE
 10028                           postdec2	equ	0xFDD
 10029                           fsr2h	equ	0xFDA
 10030                           fsr2l	equ	0xFD9
 10031                           status	equ	0xFD8
 10032                           
 10033                           	psect	rparam
 10034  0000                     pclatu	equ	0xFFB
 10035                           pclath	equ	0xFFA
 10036                           tblptru	equ	0xFF8
 10037                           tblptrh	equ	0xFF7
 10038                           tblptrl	equ	0xFF6
 10039                           tablat	equ	0xFF5
 10040                           prodh	equ	0xFF4
 10041                           prodl	equ	0xFF3
 10042                           intcon	equ	0xFF2
 10043                           intcon2	equ	0xFF1
 10044                           postinc0	equ	0xFEE
 10045                           fsr0h	equ	0xFEA
 10046                           fsr0l	equ	0xFE9
 10047                           wreg	equ	0xFE8
 10048                           postdec1	equ	0xFE5
 10049                           fsr1h	equ	0xFE2
 10050                           fsr1l	equ	0xFE1
 10051                           bsr	equ	0xFE0
 10052                           indf2	equ	0xFDF
 10053                           postinc2	equ	0xFDE
 10054                           postdec2	equ	0xFDD
 10055                           fsr2h	equ	0xFDA
 10056                           fsr2l	equ	0xFD9
 10057                           status	equ	0xFD8
 10058                           
 10059                           	psect	temp
 10060  00004E                     btemp:
 10061                           	opt stack 0
 10062  00004E                     	ds	1
 10063  0000                     int$flags	set	btemp
 10064                           pclatu	equ	0xFFB
 10065                           pclath	equ	0xFFA
 10066                           tblptru	equ	0xFF8
 10067                           tblptrh	equ	0xFF7
 10068                           tblptrl	equ	0xFF6
 10069                           tablat	equ	0xFF5
 10070                           prodh	equ	0xFF4
 10071                           prodl	equ	0xFF3
 10072                           intcon	equ	0xFF2
 10073                           intcon2	equ	0xFF1
 10074                           postinc0	equ	0xFEE
 10075                           fsr0h	equ	0xFEA
 10076                           fsr0l	equ	0xFE9
 10077                           wreg	equ	0xFE8
 10078                           postdec1	equ	0xFE5
 10079                           fsr1h	equ	0xFE2
 10080                           fsr1l	equ	0xFE1
 10081                           bsr	equ	0xFE0
 10082                           indf2	equ	0xFDF
 10083                           postinc2	equ	0xFDE
 10084                           postdec2	equ	0xFDD
 10085                           fsr2h	equ	0xFDA
 10086                           fsr2l	equ	0xFD9
 10087                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        12
    BSS         562
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     29      77
    BANK0           160      0     148
    BANK1           256      0     252
    BANK2           256     17     143
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_Update_StateMchn
    _Update_StateMchn->_Train_Path
    _Train_Path->_Right_Mountain_From_The_Right
    _Train_Move_Right_Start->_SetDCPWM1
    _Train_Move_Right_Brake->_SetDCPWM1
    _Train_Move_Left_Start->_SetDCPWM1
    _Train_Move_Left_Brake->_SetDCPWM1
    _Right_Mountain_From_The_Right->_SetDCPWM1
    _SetDCPWM1->_GETxAPIxVAL
    _Junction->_GETxAPIxVAL
    _INCRxAPIxVAL->_GETxAPIxVAL
    _INCRxAPIxVAL->_SETxAPIxVAL
    _Eeprom_Store->_GETxAPIxVAL
    _Debounce_Inputs->_GETxAPIxVAL
    _Debounce_Inputs->_SETxAPIxVAL
    _DECRxAPIxVAL->_GETxAPIxVAL
    _DECRxAPIxVAL->_SETxAPIxVAL

Critical Paths under _tc_low in COMRAM

    None.

Critical Paths under _tc_high in COMRAM

    _UPDATExTERMINAL->_EUSART1_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _tc_low in BANK0

    None.

Critical Paths under _tc_high in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tc_low in BANK1

    None.

Critical Paths under _tc_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_low in BANK2

    None.

Critical Paths under _tc_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_low in BANK3

    None.

Critical Paths under _tc_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _tc_low in BANK4

    None.

Critical Paths under _tc_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _tc_low in BANK5

    None.

Critical Paths under _tc_high in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _tc_low in BANK6

    None.

Critical Paths under _tc_high in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _tc_low in BANK7

    None.

Critical Paths under _tc_high in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   13266
                     _APIxInitialize
                 _EUSART1_Initialize
                      _INIT_TERMINAL
                           _Init_Pwm
                        _Init_Timers
                   _Update_StateMchn
 ---------------------------------------------------------------------------------
 (1) _Update_StateMchn                                     2     2      0   13116
                                             27 COMRAM     2     2      0
                       _DECRxAPIxVAL
                    _Debounce_Inputs
                       _Eeprom_Store
                        _GETxAPIxVAL
                          _Green_Led
                       _INCRxAPIxVAL
                            _Red_Led
                        _SETxAPIxVAL
                         _Train_Path
 ---------------------------------------------------------------------------------
 (2) _Train_Path                                           2     1      1    5254
                                             25 COMRAM     2     1      1
                        _GETxAPIxVAL
                           _Junction
        _Left_Mountain_From_The_Left
       _Left_Mountain_From_The_Right
       _Right_Mountain_From_The_Left
      _Right_Mountain_From_The_Right
                          _SetDCPWM1
              _Train_Move_Left_Brake
              _Train_Move_Left_Start
             _Train_Move_Right_Brake
             _Train_Move_Right_Start
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Start                               0     0      0     692
                        _GETxAPIxVAL
                          _SetDCPWM1
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Brake                               0     0      0     692
                        _GETxAPIxVAL
                          _SetDCPWM1
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Start                                0     0      0     692
                        _GETxAPIxVAL
                          _SetDCPWM1
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Brake                                0     0      0     692
                        _GETxAPIxVAL
                          _SetDCPWM1
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Right                        1     1      0     736
                                             24 COMRAM     1     1      0
                        _GETxAPIxVAL
                          _SetDCPWM1
 ---------------------------------------------------------------------------------
 (4) _SetDCPWM1                                            6     4      2     670
                                             18 COMRAM     6     4      2
                        _GETxAPIxVAL (ARG)
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Left                         1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Right                         1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Left                          1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _Junction                                             2     1      1     432
                                             18 COMRAM     2     1      1
                        _GETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Red_Led                                              1     1      0      22
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _INCRxAPIxVAL                                         3     3      0    1983
                                             18 COMRAM     3     3      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Green_Led                                            1     1      0      22
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Store                                         0     0      0      22
                        _GETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Debounce_Inputs                                      2     2      0    1915
                                             18 COMRAM     2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _DECRxAPIxVAL                                         3     3      0    1983
                                             18 COMRAM     3     3      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _SETxAPIxVAL                                          3     1      2    1893
                                             15 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (4) _GETxAPIxVAL                                          3     1      2      22
                                             15 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Init_Timers                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Pwm                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _INIT_TERMINAL                                        2     2      0      30
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Initialize                                   2     2      0      30
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _APIxInitialize                                       2     2      0      90
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _tc_low                                              17    17      0       0
                                              0 BANK2     17    17      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _tc_high                                             14    14      0      44
                                              1 COMRAM    14    14      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                    _UPDATExTERMINAL
 ---------------------------------------------------------------------------------
 (7) _UPDATExTERMINAL                                      0     0      0      44
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (8) _EUSART1_Write                                        1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APIxInitialize
   _EUSART1_Initialize
   _INIT_TERMINAL
   _Init_Pwm
   _Init_Timers
   _Update_StateMchn
     _DECRxAPIxVAL
       _GETxAPIxVAL
       _SETxAPIxVAL
     _Debounce_Inputs
       _GETxAPIxVAL
       _SETxAPIxVAL
     _Eeprom_Store
       _GETxAPIxVAL
     _GETxAPIxVAL
     _Green_Led
     _INCRxAPIxVAL
       _GETxAPIxVAL
       _SETxAPIxVAL
     _Red_Led
     _SETxAPIxVAL
     _Train_Path
       _GETxAPIxVAL
       _Junction
         _GETxAPIxVAL
       _Left_Mountain_From_The_Left
       _Left_Mountain_From_The_Right
       _Right_Mountain_From_The_Left
       _Right_Mountain_From_The_Right
         _GETxAPIxVAL
         _SetDCPWM1
           _GETxAPIxVAL (ARG)
       _SetDCPWM1
         _GETxAPIxVAL (ARG)
       _Train_Move_Left_Brake
         _GETxAPIxVAL
         _SetDCPWM1
           _GETxAPIxVAL (ARG)
       _Train_Move_Left_Start
         _GETxAPIxVAL
         _SetDCPWM1
           _GETxAPIxVAL (ARG)
       _Train_Move_Right_Brake
         _GETxAPIxVAL
         _SetDCPWM1
           _GETxAPIxVAL (ARG)
       _Train_Move_Right_Start
         _GETxAPIxVAL
         _SetDCPWM1
           _GETxAPIxVAL (ARG)

 _tc_low (ROOT)

 _tc_high (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _UPDATExTERMINAL
     _EUSART1_Write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     11      8F       9       55.9%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      FC       7       98.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      94       5       92.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     1D      4D       1       81.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     26C      20        0.0%
DATA                 0      0     26C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Oct 07 23:48:12 2017

                  _eusart1TxBufferRemaining 0028                                          bsr 000FE0  
                               __CFG_BORV$3 000000                                __CFG_CP0$OFF 000000  
                              __CFG_CP1$OFF 000000                                __CFG_CP2$OFF 000000  
                              __CFG_CP3$OFF 000000                                         l511 0F0A  
                                       l520 22D8                                         l426 0B60  
                                       l515 22A8                                         l531 2228  
                                       l524 2304                                         l540 2284  
                                       l460 0CE6                                         l517 22AC  
                                       l533 222C                                         l375 0936  
                                       l536 2258                                         l721 1BCE  
                                       l474 0D78                                         l389 09C8  
                                       l902 202E                                         l911 20A0  
                                       l905 2056                                         l914 20C2  
                                       l770 20D2                                         l739 1DD6  
                                       l908 2078                                         l781 20F0  
                                       l757 1CD0                                         l774 20D8  
                                       l783 20F4                                         l776 20DC  
                                       l689 2220                                         l788 2146  
                                       l789 2156                                         _API 0060  
                                       l988 2546                                __CFG_CPB$OFF 000000  
                              _Stop_Program 0018                                         _PR2 000FCB  
                              __CFG_CPD$OFF 000000                                __CFG_BOR$OFF 000000  
                                       prod 000FF3                                         wreg 000FE8  
                    __size_of_INIT_TERMINAL 0028            Train_Move_Right_Start@Return_Val 00F3  
                              ?_GETxAPIxVAL 003A                             APIxInitialize@i 003A  
                              __CFG_LVP$OFF 000000         __end_of_Left_Mountain_From_The_Left 2618  
               _Left_Mountain_From_The_Left 2612                                __CFG_WDT$OFF 000000  
     __end_of_Right_Mountain_From_The_Right 2224      __size_of_Right_Mountain_From_The_Right 00A0  
             _Right_Mountain_From_The_Right 2184                                        l4200 1E38  
                                      l4130 211C                                        l4122 20F8  
                                      l4202 1E52                                        l5010 17D6  
                                      l4220 1E82                                        l4300 1D04  
                                      l5004 17CE                                        l5020 17E4  
                                      l4118 20E0                                        l4126 2108  
                                      l4214 1E74                                        l4302 1D0A  
                                      l5022 1836                                        l4128 2116  
                                      l4144 216A                                        l4240 1EDA  
                                      l4208 1E5A                                        l4152 1D62  
                                      l5016 17DE                                        l5114 1842  
                                      l4146 217E                                        l4410 221C  
                                      l4322 1B5C                                        l4234 1ED0  
                                      l4218 1E7E                                        l4306 1D36  
                                      l4314 1D40                                        l5202 0246  
                                      l5124 1888                                        l4404 2202  
                                      l4340 1BA8                                        l4332 1B84  
                                      l4236 1ED6                                        l4228 1EAA  
                                      l4260 1F44                                        l4308 1D3C  
                                      l4316 1D5A                                        l4180 1DE0  
                                      l4172 1DBC                                        l4164 1D94  
                                      l5220 02AC                                        l5132 00C4  
                                      l4422 0F22                                        l4350 1BDE  
                                      l4254 1F24                                        l4182 1DE6  
                                      l4158 1D88                                        l5214 028A  
                                      l5150 012A                                        l2664 2530  
                                      l4600 1354                                        l4520 1156  
                                      l4504 10F0                                        l4512 1114  
                                      l4432 0F4E                                        l4248 1F04  
                                      l4280 1CA4                                        l5400 068C  
                                      l5320 04C0                                        l5312 049C  
                                      l5304 0450                                        l5224 02B8  
                                      l5208 0268                                        l5144 0108  
                                      l5128 00B2                                        l4610 1390  
                                      l4602 1364                                        l4530 11A0  
                                      l4522 1166                                        l4514 113A  
                                      l4506 1100                                        l4450 0FBE  
                                      l4434 0F66                                        l4418 0F0E  
                                      l4362 1C34                                        l4338 1BA2  
                                      l4370 1C3E                                        l4258 1F2A  
                                      l4274 1C84                                        l4266 1C60  
                                      l4194 1E2E                                        l5402 0696  
                                      l5330 0500                                        l5314 04A2  
                                      l5306 047A                                        l5242 0338  
                                      l5162 016E                                        l5138 00E6  
                                      l6042 23FA                                        l2668 2540  
                                      l4460 0FEE                                        l4444 0F96  
                                      l4428 0F3E                                        l4364 1C3A  
                                      l4356 1C02                                        l4372 1C58  
                                      l4284 1CAA                                        l4196 1E32  
                                      l4188 1E10                                        l5404 06A0  
                                      l5412 06B6                                        l5332 0506  
                                      l5316 04AC                                        l5252 037A  
                                      l5180 01D2                                        l5156 014C  
                                      l5420 06EC                                        l4470 102A  
                                      l4454 0FD2                                        l4438 0F7A  
                                      l4710 2308                                        l4358 1C08  
                                      l4294 1CE0                                        l5422 0738  
                                      l5414 06E0                                        l5406 06AA  
                                      l5350 056A                                        l5334 0510  
                                      l5342 0526                                        l5318 04B6  
                                      l5326 04CC                                        l5270 03D0  
                                      l5262 03B0                                        l5246 035E  
                                      l5190 0202                                        l5166 017A  
                                      l4632 1404                                        l4640 1428  
                                      l4616 13AC                                        l4624 13D0  
                                      l4608 1378                                        l4552 1222  
                                      l4560 1246                                        l4536 11BC  
                                      l4544 11E0                                        l4528 117A  
                                      l4480 1056                                        l4464 0FFE  
                                      l4448 0FA6                                        l4704 22F4  
                                      l4720 2248                                        l4392 21CA  
                                      l4800 1524                                        l5600 0A10  
                                      l5432 075C                                        l5504 0812  
                                      l5360 05AA                                        l5352 0574  
                                      l5344 0550                                        l5336 051A  
                                      l5328 04F6                                        l5272 03D4  
                                      l5256 0390                                        l5248 0366  
                                      l5184 01E0                                        l4650 146C  
                                      l4642 1440                                        l4634 1414  
                                      l4626 13E8                                        l4618 13BC  
                                      l4570 1298                                        l4562 126C  
                                      l4554 1232                                        l4546 1206  
                                      l4538 11CC                                        l4490 109A  
                                      l4482 106E                                        l4466 1016  
                                      l4730 2274                                        l4714 2230  
                                      l4810 1530                                        l5610 0A4E  
                                      l5602 0A2E                                        l5530 08AC  
                                      l5514 086E                                        l5506 0846  
                                      l5442 0776                                        l5362 05B4  
                                      l5346 055A                                        l5290 042E  
                                      l5274 03D8                                        l5266 03BE  
                                      l5258 0396                                        l4476 1046  
                                      l4724 225C                                        l4388 21B4  
                                      l4396 21D4                                        l4820 1552  
                                      l4812 154C                                        l4740 149C  
                                      l5604 0A32                                        l5532 08B8  
                                      l5452 0790                                        l5428 0750  
                                      l5364 05BE                                        l5348 0564  
                                      l5292 0432                                        l5276 03DC  
                                      l5284 03F2                                        l5196 0224  
                                      l5630 0AA0                                        l5622 0A6E  
                                      l5542 08FA                                        l5526 08A2  
                                      l5518 087A                                        l5462 07AA  
                                      l5390 065A                                        l5366 05C8  
                                      l5374 05DA                                        l5358 0580  
                                      l5382 0610                                        l5294 0436  
                                      l5278 03E6                                        l5286 041C  
                                      l4648 145C                                        l4656 1480  
                                      l4584 12EE                                        l4592 1312  
                                      l4568 1288                                        l4576 12AC  
                                      l4488 108A                                        l4496 10AE  
                                      l4736 2288                                        l4920 16BC  
                                      l5720 0BF6                                        l5616 0A68  
                                      l5608 0A4A                                        l5544 0904  
                                      l5472 07C4                                        l5384 063A  
                                      l5376 0604                                        l5368 05CE  
                                      l5296 043A                                        l4594 1338  
                                      l4586 12FE                                        l4578 12D2  
                                      l4498 10D4                                        l4930 16EA  
                                      l4850 1596                                        l5810 0DB0  
                                      l5706 0BC0                                        l5642 0AD2  
                                      l5634 0AB4                                        l5626 0A7E  
                                      l5562 097A                                        l5554 095C  
                                      l5546 090C                                        l5482 07DE  
                                      l5394 0668                                        l5386 0640  
                                      l5298 0444                                        l4940 1712  
                                      l4932 16EE                                        l4860 15BE  
                                      l4852 159A                                        l4836 155E  
                                      l4828 1558                                        l4780 1500  
                                      l4764 14CC                                        l4756 14B8  
                                      l4748 14AC                                        l5804 0DAA  
                                      l5740 0C52                                        l5732 0C2A  
                                      l5660 0B20                                        l5636 0AB8  
                                      l5628 0A9C                                        l5652 0AE8  
                                      l5556 0960                                        l5548 0910  
                                      l5572 0990                                        l5492 07F8  
                                      l4694 22C8                                        l4934 16FC  
                                      l4926 16D8                                        l4862 15CC  
                                      l4854 15A8                                        l4846 156C  
                                      l4774 14D8                                        l5830 0E18  
                                      l5822 0DFA                                        l5814 0DC0  
                                      l5718 0BDA                                        l5654 0B04  
                                      l5590 09FA                                        l5582 09DC  
                                      l5574 09AE                                        l5398 0682  
                                      l4688 22B0                                        l4960 1762  
                                      l4952 1756                                        l4936 1700  
                                      l4928 16DC                                        l4872 15FC  
                                      l4864 15D0                                        l4856 15AC  
                                      l4848 1588                                        l4792 1510  
                                      l4784 1504                                        l4776 14F4  
                                      l5824 0DFE                                        l5816 0DDE  
                                      l5840 0E2E                                        l5760 0CBC  
                                      l5744 0C5C                                        l5728 0C1E  
                                      l5672 0B54                                        l5648 0AD8  
                                      l5584 09E0                                        l5576 09B2  
                                      l5568 0980                                        l4698 22DC  
                                      l4938 170E                                        l4866 15DE  
                                      l4858 15BA                                        l4946 1734  
                                      l5850 0E68                                        l5842 0E4C  
                                      l5818 0DE2                                        l5770 0D10  
                                      l5762 0CC0                                        l5746 0C68  
                                      l5682 0B80                                        l5666 0B2C  
                                      l4980 17AE                                        l4972 17A2  
                                      l4956 175C                                        l4948 1750  
                                      l4868 15E2                                        l5844 0E50  
                                      l5836 0E1E                                        l5756 0CAA  
                                      l5676 0B68                                        l5596 0A00  
                                      l5668 0B42                                        l4974 17A6  
                                      l4966 1776                                        l5862 0E88  
                                      l5790 0D62                                        l5782 0D30  
                                      l5758 0CB4                                        l5686 0B8C  
                                      l4992 17BE                                        l4968 1792  
                                      l4896 165C                                        l5856 0E82  
                                      l5848 0E64                                        l5776 0D2A  
                                      l5768 0D0C                                        l5696 0BA6  
                                      l5880 0EDC                                        l4986 17B6  
                                      l5874 0ED0                                        l5866 0E98  
                                      l5786 0D40                                        l5868 0EB4  
                                      l5796 0D8C                                        l5788 0D5E  
                                      l5884 0EF2                                        l4998 17C6  
                                      l5798 0D90              Right_Mountain_From_The_Left@rc 002B  
                                      u4210 096C                                        u2710 10B6  
                                      u2630 0F56                                        u2800 11E8  
                                      u2720 10B8                                        u4240 09EC  
                                      u2385 245C                                        u2810 11EA  
                                      u2650 0FAE                                        u2900 131C  
                                      u2740 111C                                        u2636 0F58  
                                      u4500 0D1C                                        u4260 0A5A  
                                      u2830 124E                                        u2750 111E  
                                      u2670 1006                                        u2920 1380  
                                      u2840 1250                                        u2656 0FB0  
                                      u4280 0AC4                                        u2770 1182  
                                      u2690 105E                                        u4530 0D9C  
                                      u2940 13D8                                        u2860 12B4  
                                      u2780 1184                                        u2676 1008  
                                      u2926 1382                                        u2870 12B6  
                                      u4550 0E0A                                        u2960 1430  
                                      u2696 1060                                        u2946 13DA  
                                      u2890 131A                                        u4570 0E74  
                                      u3850 035A                                        u2980 1488  
                                      u2966 1432                                        u2986 148A  
                                      i2l90 1F92                                        i2l95 1FD2  
                              __CFG_WDTPS$1 000000                                __CFG_PWRT$ON 000000  
                    __end_of_APIxInitialize 1B5A              __size_of_Train_Move_Left_Brake 0104  
                             _EUSART1_Write 248C               __end_of_Train_Move_Left_Brake 1C5E  
                                      _main 23A2              __size_of_Train_Move_Left_Start 00F0  
                                      fsr0h 000FEA                                        fsr1h 000FE2  
                                      fsr0l 000FE9                                        fsr2h 000FDA  
                                      fsr1l 000FE1                                        indf2 000FDF  
                                      fsr2l 000FD9                                        btemp 004E  
             __end_of_Train_Move_Left_Start 1F48                                        pclat 000FFA  
                                      prodh 000FF4                                        prodl 000FF3  
                                      start 00A6                               __CFG_IESO$OFF 000000  
               EUSART1_Initialize@baud_rate 003A                          Green_Led@Operation 003A  
                            INIT_TERMINAL@i 003A                               __CFG_MCLRE$ON 000000  
                              ___param_bank 000010                               ??_Init_Timers 003A  
                           __end_of_Red_Led 22A4                               __CFG_PLLDIV$5 000000  
                             ?_INCRxAPIxVAL 002B                              __CFG_CCP2MX$ON 000000  
                   __end_of_UPDATExTERMINAL 2600                                       ?_main 002B  
                                     _EEADR 000FA9                                       _CMCON 000FB4  
                          Red_Led@Operation 003A                                       _T0CON 000FD5  
                                     _T2CON 000FCA                                       i2l973 24F0  
                                     i2l967 249E                                       _TMR0H 000FD7  
                                     _TMR0L 000FD6                                       _SPBRG 000FAF  
                             __CFG_USBDIV$2 000000                                       _TRISA 000F92  
                                     _TRISB 000F93                                       _TRISC 000F94  
                                     _TRISD 000F95                                       _TRISE 000F96  
                             __CFG_WRT0$OFF 000000                               __CFG_WRT1$OFF 000000  
                             __CFG_WRT2$OFF 000000                               __CFG_WRT3$OFF 000000  
                      _EUSART1_Transmit_ISR 24C6                              __CFG_EBTR0$OFF 000000  
                            __CFG_FCMEN$OFF 000000                              __CFG_EBTR1$OFF 000000  
                            __CFG_EBTR2$OFF 000000                              __CFG_EBTR3$OFF 000000  
                             __CFG_WRTB$OFF 000000                               __CFG_WRTC$OFF 000000  
                             __CFG_WRTD$OFF 000000                              __CFG_EBTRB$OFF 000000  
                           __end_of_tc_high 200E                              ?_EUSART1_Write 002B  
                                     tablat 000FF5                             ?_APIxInitialize 002B  
                                     status 000FD8   Train_Move_Left_Brake@Train_Move_Wait_Time 00E0  
                            __CFG_ICPRT$OFF 000000                        __end_of_Eeprom_Store 20CE  
                             _INIT_TERMINAL 2520                             __initialization 2324  
                __end_of_EUSART1_Initialize 2452                                __end_of_main 240A  
                            ??_INCRxAPIxVAL 003D                            __end_of_Init_Pwm 25F8  
                                    ??_main 0048                         __end_of_Init_Timers 25E2  
                             __activetblptr 000002                            __end_of_Junction 2184  
                              _Led1_Counter 00EA                           _Green_Led_Counter 0003  
                     ?_EUSART1_Transmit_ISR 002B                           ?_Update_StateMchn 002B  
                        ??_Update_StateMchn 0046                                      _ADCON1 000FC1  
                                    _EEDATA 000FA8                                      _CCPR1L 000FBE  
                                    _EECON2 000FA7                                      _API_RW 0100  
                        __size_of_Green_Led 0080                       __size_of_DECRxAPIxVAL 0026  
                                    i2l5110 24C2                                      i2l5108 24C0  
                                    i2l6060 1FB2                                      i2l6054 1F94  
                                    i2l5096 248E                                      i2l6072 1FC8  
                                    i2l6066 1FBE                                      _INTCON 000FF2  
                                    i2l5964 251C                                      i2l5956 24FC  
                                    i2l5976 24EC                     ?_Train_Move_Right_Brake 002B  
                                    _RCREG1 000FAE                                      _SPBRGH 000FB0  
                        __size_of_SetDCPWM1 003A                     ?_Train_Move_Right_Start 002B  
                                    _TXREG1 000FAD              ?_Right_Mountain_From_The_Right 002B  
                                 ??_Red_Led 003A                              ?_INIT_TERMINAL 002B  
                            __CFG_XINST$OFF 000000             Train_Move_Left_Brake@Return_Val 00F1  
                            __CFG_STVREN$ON 000000                                      clear_0 232A  
                                    clear_1 2336                                      clear_2 2342  
                                    clear_3 234E                                      _tc_low 0018  
                          ?_UPDATExTERMINAL 002B                                  _Train_Path 1498  
   Right_Mountain_From_The_Right@Return_Val 004B      Left_Mountain_From_The_Right@Return_Val 004A  
                              __pdataCOMRAM 0048                              _Switch_Program 0021  
                              _DECRxAPIxVAL 2548                                   ??_tc_high 002C  
                 _Activate_Controls_Counter 00E8                                      tblptrh 000FF7  
                                    tblptrl 000FF6                                      tblptru 000FF8  
                              ?_SETxAPIxVAL 003A                             ??_EUSART1_Write 002B  
                 _Button_Contact_Counter_LB 0009                   _Button_Contact_Counter_LF 000A  
                 _Button_Contact_Counter_RB 000C                   _Button_Contact_Counter_RF 000D  
            __end_of_Train_Move_Right_Brake 1D60                             _eusart1RxBuffer 0200  
                      __size_of_GETxAPIxVAL 001C                             _eusart1TxBuffer 017E  
            __end_of_Train_Move_Right_Start 1E58                        _Train_Move_Pwm_Count 0048  
                                __accesstop 0060                     __end_of__initialization 2394  
                           __CFG_PBADEN$OFF 000000                               ___rparam_used 000001  
                            __pcstackCOMRAM 002B                                __pidataBANK0 2606  
                               _Init_Timers 25CA                           __end_of_Green_Led 2324  
                         __end_of_SetDCPWM1 248C                             _Red_Led_Counter 0005  
                    ??_EUSART1_Transmit_ISR 002B  Train_Move_Right_Start@Train_Move_Wait_Time 00E6  
                  __size_of_Debounce_Inputs 058C                 __end_of_EUSART1_Receive_ISR 2520  
          Train_Move_Right_Brake@Return_Val 00F2                               _eusart1RxHead 0026  
                             _eusart1TxHead 0029                       __size_of_Eeprom_Store 00C0  
               Junction@Junction_Left_Right 003E                               _eusart1RxTail 0027  
                                __pbssBANK0 0060                                  __pbssBANK1 0100  
                                __pbssBANK2 0200                               _eusart1TxTail 002A  
                      __end_of_INCRxAPIxVAL 2592                                   ?_Init_Pwm 002B  
                           ??_INIT_TERMINAL 003A                            GETxAPIxVAL@index 003C  
                          SETxAPIxVAL@index 003C                                   ?_Junction 003D  
                          SETxAPIxVAL@value 003A        __size_of_Left_Mountain_From_The_Left 0006  
                                   _CCP1CON 000FBD                                     ?_tc_low 002B  
                               ?_Train_Path 0044                                _Eeprom_Store 200E  
                                   _INTCON2 000FF1   Train_Move_Left_Start@Train_Move_Wait_Time 00E2  
                          ??_APIxInitialize 003A                             __CFG_VREGEN$OFF 000000  
                                ??_Init_Pwm 003A                                     _Red_Led 2224  
                     _Train_Move_Left_Brake 1B5A                                  ??_Junction 003E  
                                   __Hparam 0000                       _Train_Move_Left_Start 1E58  
                                   __Lparam 0000                                     __pcinit 2324  
                                   __ramtop 0800                             __size_of_tc_low 008E  
                                   __ptext0 23A2                                     __ptext1 00AA  
                                   __ptext2 1498                                     __ptext3 1D60  
                                   __ptext4 1C5E                                     __ptext5 1E58  
                                   __ptext6 1B5A                                     __ptext7 2184  
                                   __ptext8 2452                                     __ptext9 260C  
                      Train_Path@Return_Val 004D                             _Switch_Main_Old 00EC  
                                   _tc_high 0008                          _EUSART1_Initialize 240A  
                 _Train_Move_Pwm_Fast_Count 0007                              __pintcode_body 1F48  
                      end_of_initialization 2394                             _Switch_Junction 001F  
                         ??_Debounce_Inputs 003D                         ?_EUSART1_Initialize 002B  
                      __size_of_SETxAPIxVAL 001C                               __Lmediumconst 0000  
                                   int_func 1F48                           INCRxAPIxVAL@index 003F  
                 __size_of_Update_StateMchn 0E62                           INCRxAPIxVAL@value 003D  
                       __size_of_Train_Path 03A2                                   _RCSTAbits 000FAB  
                                   postdec1 000FE5                                     postdec2 000FDD  
                                   postinc0 000FEE                                     postinc2 000FDE  
            Left_Mountain_From_The_Right@rc 002B                        ??_EUSART1_Initialize 003A  
                                 _PORTAbits 000F80                                   _PORTBbits 000F81  
                                 _PORTCbits 000F82                                   _PORTDbits 000F83  
                                 _TRISAbits 000F92                                   _TRISBbits 000F93  
                                 _TRISCbits 000F94                                   _TRISDbits 000F95  
                     __size_of_INCRxAPIxVAL 0024                Junction@Junction_Switch_Time 00DE  
                       EUSART1_Write@txData 002B                      ?_Train_Move_Left_Brake 002B  
                                 _TXSTAbits 000FAC                      ?_Train_Move_Left_Start 002B  
                               _Switch_Main 0020                                 _Switch_Init 001E  
                              ?_Init_Timers 002B                          Junction@Return_Val 00EE  
                               _BAUDCONbits 000FB8                               __pidataCOMRAM 2600  
                              _INCRxAPIxVAL 256E                        _Update_State_Machine 0024  
                            __end_of_tc_low 00A6                 _Button_Contact_Counter_Stop 000F  
                                 _Green_Led 22A4                         start_initialization 2324  
                             ??_GETxAPIxVAL 003C                                   _SetDCPWM1 2452  
                           SetDCPWM1@DCycle 0041                    __size_of_UPDATExTERMINAL 0008  
                     __end_of_EUSART1_Write 24C6                ?_Left_Mountain_From_The_Left 002B  
                         __size_of_Init_Pwm 0016                           __size_of_Junction 00B6  
                               __pdataBANK0 00EE                            __CFG_LPT1OSC$OFF 000000  
                                  ??_tc_low 027E                              _eusart1RxCount 0025  
                              ??_Train_Path 0045                                  ?_Green_Led 002B  
                        _Switch_Program_Old 00ED                                 __pbssCOMRAM 0001  
             __size_of_EUSART1_Transmit_ISR 002E                               __pcstackBANK2 027E  
                                ?_SetDCPWM1 003D  Train_Move_Right_Brake@Train_Move_Wait_Time 00E4  
              __size_of_EUSART1_Receive_ISR 002C                         __end_of_GETxAPIxVAL 25CA  
             ??_Left_Mountain_From_The_Left 003A                                    ?_Red_Led 002B  
                          _Update_StateMchn 00AA                       __end_of_INIT_TERMINAL 2548  
    Right_Mountain_From_The_Left@Return_Val 00F0       Left_Mountain_From_The_Left@Return_Val 00EF  
                        __end_of_Train_Path 183A                                   __pintcode 0008  
      __end_of_Left_Mountain_From_The_Right 261C       __size_of_Left_Mountain_From_The_Right 0004  
              _Left_Mountain_From_The_Right 2618                                 __pintcodelo 0018  
                           _Debounce_Inputs 0F0C                    ??_Train_Move_Right_Brake 0043  
                                  ?_tc_high 002B             Right_Mountain_From_The_Right@rc 0043  
                  ??_Train_Move_Right_Start 0043                       Junction@Straight_Bend 003D  
              _Button_Contact_Counter_Start 000E                    _Reed_Contact_LMD_Counter 0012  
                         ??_UPDATExTERMINAL 002C        __end_of_Right_Mountain_From_The_Left 2612  
     __size_of_Right_Mountain_From_The_Left 0006                _Right_Mountain_From_The_Left 260C  
                                  _PIE1bits 000F9D                              _Adjust_Counter 0001  
             Left_Mountain_From_The_Left@rc 002B                                    _PIR1bits 000F9E  
                                  _PIR2bits 000FA1                                    _RCONbits 000FD0  
                            Train_Path@From 0045                        __size_of_Init_Timers 0018  
             ?_Left_Mountain_From_The_Right 002B                                 ??_Green_Led 003A  
                             ?_DECRxAPIxVAL 002B                                 ??_SetDCPWM1 003F  
                               _GETxAPIxVAL 25AE                               ??_SETxAPIxVAL 003C  
                                 copy_data0 2368                                   copy_data1 2388  
                   ??_Train_Move_Left_Brake 0043                    _Reed_Contact_LMU_Counter 0013  
                   ??_Train_Move_Left_Start 0043                          SetDCPWM1@dutycycle 003D  
                                  _Init_Pwm 25E2                                  _EECON1bits 000FA6  
                   __size_of_APIxInitialize 0320                                    __Hrparam 0000  
                                  _Junction 20CE                            __size_of_Red_Led 0080  
             ?_Right_Mountain_From_The_Left 002B                                    __Lrparam 0000  
                  _Reed_Contact_RMD_Counter 0016                     __end_of_Debounce_Inputs 1498  
               __size_of_EUSART1_Initialize 0048                           _Switch_Train_Path 0023  
                         _Switch_Train_Move 0022                            _Switch_Adjust_LB 001A  
                          _Switch_Adjust_LF 001B                            _Switch_Adjust_RB 001C  
                          _Switch_Adjust_RF 001D                              ??_DECRxAPIxVAL 003D  
           __size_of_Train_Move_Right_Brake 0102                            __size_of_tc_high 2006  
           __size_of_Train_Move_Right_Start 00F8                                    __ptext10 2618  
                                  __ptext11 2612                                    __ptext20 25AE  
                                  __ptext12 20CE                                    __ptext21 25CA  
                                  __ptext13 2224                                    __ptext30 24C6  
                                  __ptext22 25E2                                    __ptext14 256E  
                                  __ptext31 24F4                                    __ptext23 2520  
                                  __ptext15 22A4                                    __ptext24 240A  
                                  __ptext16 200E                                    __ptext25 183A  
                                  __ptext17 0F0C                                    __ptext18 2548  
                                  __ptext19 2592                                    __ptext28 25F8  
                                  __ptext29 248C                               __size_of_main 0068  
                       __end_of_SETxAPIxVAL 25AE                     _Reed_Contact_LB_Counter 0010  
                                  int$flags 004E                     _Reed_Contact_LF_Counter 0011  
                         DECRxAPIxVAL@index 003F                           DECRxAPIxVAL@value 003D  
                  _Reed_Contact_RMU_Counter 0017                         _EUSART1_Receive_ISR 24F4  
                     __CFG_CPUDIV$OSC2_PLL3 000000                               ?_Eeprom_Store 002B  
                  __end_of_Update_StateMchn 0F0C                                  _INTCONbits 000FF2  
           ??_Right_Mountain_From_The_Right 0043              ??_Left_Mountain_From_The_Right 003A  
                   _Reed_Contact_RB_Counter 0014                                    intlevel1 0000  
                                  intlevel2 0000                        ?_EUSART1_Receive_ISR 002B  
                                _RCSTA1bits 000FAB                     _Reed_Contact_RF_Counter 0015  
                    _Train_Move_Right_Brake 1C5E                __end_of_EUSART1_Transmit_ISR 24F4  
                    _Train_Move_Right_Start 1D60             Train_Move_Left_Start@Return_Val 004C  
                              Train_Path@To 0044                            ?_Debounce_Inputs 002B  
                  _Switch_Activate_Controls 0019              ??_Right_Mountain_From_The_Left 003A  
                    __size_of_EUSART1_Write 003A                              ??_Eeprom_Store 003D  
                           _UPDATExTERMINAL 25F8                                 _SETxAPIxVAL 2592  
                        __CFG_FOSC$HSPLL_HS 000000                       ??_EUSART1_Receive_ISR 002B  
                            _APIxInitialize 183A               _Button_Contact_Counter_Middle 000B  
                      __end_of_DECRxAPIxVAL 256E  
