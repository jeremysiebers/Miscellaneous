

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Wed Dec 06 23:36:16 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=2
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=2
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=2
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    63                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    64                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    69                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    70  0000                     
    71                           ; Version 1.44
    72                           ; Generated 14/09/2017 GMT
    73                           ; 
    74                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    75                           ; All rights reserved.
    76                           ; 
    77                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    78                           ; 
    79                           ; Redistribution and use in source and binary forms, with or without modification, are
    80                           ; permitted provided that the following conditions are met:
    81                           ; 
    82                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    83                           ;        conditions and the following disclaimer.
    84                           ; 
    85                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    86                           ;        of conditions and the following disclaimer in the documentation and/or other
    87                           ;        materials provided with the distribution.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC18F4550 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     
   106                           	psect	idataCOMRAM
   107  004232                     __pidataCOMRAM:
   108                           	opt stack 0
   109                           
   110                           ;initializer for Right_Mountain_From_The_Left@Return_Val
   111  004232  01                 	db	1
   112                           
   113                           ;initializer for Left_Mountain_From_The_Left@Return_Val
   114  004233  01                 	db	1
   115                           
   116                           ;initializer for Left_Mountain_From_The_Right@Return_Val
   117  004234  01                 	db	1
   118                           
   119                           ;initializer for Right_Mountain_From_The_Right@Return_Val
   120  004235  01                 	db	1
   121                           
   122                           ;initializer for Junction@Return_Val
   123  004236  01                 	db	1
   124                           
   125                           	psect	idataBANK0
   126  00422C                     __pidataBANK0:
   127                           	opt stack 0
   128                           
   129                           ;initializer for Train_Move_Right_Brake@Return_Val
   130  00422C  01                 	db	1
   131                           
   132                           ;initializer for Train_Move_Right_Start@Return_Val
   133  00422D  01                 	db	1
   134                           
   135                           ;initializer for Train_Move_Left_Brake@Return_Val
   136  00422E  01                 	db	1
   137                           
   138                           ;initializer for Train_Move_Left_Start@Return_Val
   139  00422F  01                 	db	1
   140                           
   141                           ;initializer for Train_Path@Return_Val
   142  004230  01                 	db	1
   143                           
   144                           ;initializer for _Switch_Main
   145  004231  01                 	db	1
   146                           
   147                           	psect	smallconst
   148  000800                     __psmallconst:
   149                           	opt stack 0
   150  000800  00                 	db	0
   151  000801                     _ApiList:
   152                           	opt stack 0
   153  000801  0012               	dw	18
   154  000803  0013               	dw	19
   155  000805  0014               	dw	20
   156  000807  0015               	dw	21
   157  000809  0016               	dw	22
   158  00080B  0017               	dw	23
   159  00080D  0018               	dw	24
   160  00080F  0019               	dw	25
   161  000811  001A               	dw	26
   162  000813  001B               	dw	27
   163  000815  002E               	dw	46
   164  000817  002F               	dw	47
   165  000819  0031               	dw	49
   166  00081B  0034               	dw	52
   167  00081D  0035               	dw	53
   168  00081F  0038               	dw	56
   169  000821  003A               	dw	58
   170  000823  003B               	dw	59
   171  000825                     __end_of_ApiList:
   172                           	opt stack 0
   173  000825                     _dpowers:
   174                           	opt stack 0
   175  000825  0001               	dw	1
   176  000827  000A               	dw	10
   177  000829  0064               	dw	100
   178  00082B  03E8               	dw	1000
   179  00082D  2710               	dw	10000
   180  00082F                     __end_of_dpowers:
   181                           	opt stack 0
   182  00082F                     _DataLen:
   183                           	opt stack 0
   184  00082F  0A                 	db	10
   185  000830                     __end_of_DataLen:
   186                           	opt stack 0
   187  0000                     _PORTEbits	set	3972
   188  0000                     _PORTBbits	set	3969
   189  0000                     _PORTCbits	set	3970
   190  0000                     _PIR2bits	set	4001
   191  0000                     _EECON2	set	4007
   192  0000                     _EEDATA	set	4008
   193  0000                     _EEADR	set	4009
   194  0000                     _EECON1bits	set	4006
   195  0000                     _RCREG1	set	4014
   196  0000                     _RCSTA1bits	set	4011
   197  0000                     _TXREG1	set	4013
   198  0000                     _SPBRG	set	4015
   199  0000                     _SPBRGH	set	4016
   200  0000                     _TXSTAbits	set	4012
   201  0000                     _RCSTAbits	set	4011
   202  0000                     _BAUDCONbits	set	4024
   203  0000                     _T2CON	set	4042
   204  0000                     _CCP1CON	set	4029
   205  0000                     _CCPR1L	set	4030
   206  0000                     _PR2	set	4043
   207  0000                     _T0CON	set	4053
   208  0000                     _TMR0L	set	4054
   209  0000                     _TMR0H	set	4055
   210  0000                     _INTCON2	set	4081
   211  0000                     _INTCON	set	4082
   212  0000                     _RCONbits	set	4048
   213  0000                     _PIR1bits	set	3998
   214  0000                     _PIE1bits	set	3997
   215  0000                     _INTCONbits	set	4082
   216  0000                     _TRISBbits	set	3987
   217  0000                     _TRISEbits	set	3990
   218  0000                     _TRISCbits	set	3988
   219  0000                     _PORTDbits	set	3971
   220  0000                     _PORTAbits	set	3968
   221  0000                     _TRISDbits	set	3989
   222  0000                     _TRISAbits	set	3986
   223  0000                     _CMCON	set	4020
   224  0000                     _ADCON1	set	4033
   225  0000                     _TRISE	set	3990
   226  0000                     _TRISD	set	3989
   227  0000                     _TRISC	set	3988
   228  0000                     _TRISB	set	3987
   229  0000                     _TRISA	set	3986
   230  0000                     _TXIF	set	31988
   231  000830                     STR_8:
   232  000830  4D                 	db	77	;'M'
   233  000831  23                 	db	35
   234  000832  25                 	db	37
   235  000833  64                 	db	100	;'d'
   236  000834  20                 	db	32
   237  000835  25                 	db	37
   238  000836  64                 	db	100	;'d'
   239  000837  0D                 	db	13
   240  000838  0A                 	db	10
   241  000839  00                 	db	0
   242  00083A                     STR_1:
   243  00083A  45                 	db	69	;'E'
   244  00083B  23                 	db	35
   245  00083C  31                 	db	49	;'1'
   246  00083D  30                 	db	48	;'0'
   247  00083E  0D                 	db	13
   248  00083F  0A                 	db	10
   249  000840  00                 	db	0
   250  000841                     STR_2:
   251  000841  45                 	db	69	;'E'
   252  000842  23                 	db	35
   253  000843  31                 	db	49	;'1'
   254  000844  31                 	db	49	;'1'
   255  000845  0D                 	db	13
   256  000846  0A                 	db	10
   257  000847  00                 	db	0
   258  000848                     STR_3:
   259  000848  45                 	db	69	;'E'
   260  000849  23                 	db	35
   261  00084A  31                 	db	49	;'1'
   262  00084B  32                 	db	50	;'2'
   263  00084C  0D                 	db	13
   264  00084D  0A                 	db	10
   265  00084E  00                 	db	0
   266  00084F                     STR_4:
   267  00084F  45                 	db	69	;'E'
   268  000850  23                 	db	35
   269  000851  31                 	db	49	;'1'
   270  000852  33                 	db	51	;'3'
   271  000853  0D                 	db	13
   272  000854  0A                 	db	10
   273  000855  00                 	db	0
   274  000856                     STR_5:
   275  000856  45                 	db	69	;'E'
   276  000857  23                 	db	35
   277  000858  31                 	db	49	;'1'
   278  000859  34                 	db	52	;'4'
   279  00085A  0D                 	db	13
   280  00085B  0A                 	db	10
   281  00085C  00                 	db	0
   282  0000                     
   283                           ; #config settings
   284  00085D  00                 	db	0	; dummy byte at the end
   285  0000                     
   286                           	psect	cinit
   287  003AE0                     __pcinit:
   288                           	opt stack 0
   289  003AE0                     start_initialization:
   290                           	opt stack 0
   291  003AE0                     __initialization:
   292                           	opt stack 0
   293                           
   294                           ; Initialize objects allocated to BANK0 (6 bytes)
   295                           ; load TBLPTR registers with __pidataBANK0
   296  003AE0  0E2C               	movlw	low __pidataBANK0
   297  003AE2  6EF6               	movwf	tblptrl,c
   298  003AE4  0E42               	movlw	high __pidataBANK0
   299  003AE6  6EF7               	movwf	tblptrh,c
   300  003AE8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   301  003AEA  6EF8               	movwf	tblptru,c
   302  003AEC  EE00  F0C0         	lfsr	0,__pdataBANK0
   303  003AF0  EE10 F006          	lfsr	1,6
   304  003AF4                     copy_data0:
   305  003AF4  0009               	tblrd		*+
   306  003AF6  CFF5 FFEE          	movff	tablat,postinc0
   307  003AFA  50E5               	movf	postdec1,w,c
   308  003AFC  50E1               	movf	fsr1l,w,c
   309  003AFE  E1FA               	bnz	copy_data0
   310                           
   311                           ; Initialize objects allocated to COMRAM (5 bytes)
   312                           ; load TBLPTR registers with __pidataCOMRAM
   313  003B00  0E32               	movlw	low __pidataCOMRAM
   314  003B02  6EF6               	movwf	tblptrl,c
   315  003B04  0E42               	movlw	high __pidataCOMRAM
   316  003B06  6EF7               	movwf	tblptrh,c
   317  003B08  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   318  003B0A  6EF8               	movwf	tblptru,c
   319  003B0C  EE00  F048         	lfsr	0,__pdataCOMRAM
   320  003B10  EE10 F005          	lfsr	1,5
   321  003B14                     copy_data1:
   322  003B14  0009               	tblrd		*+
   323  003B16  CFF5 FFEE          	movff	tablat,postinc0
   324  003B1A  50E5               	movf	postdec1,w,c
   325  003B1C  50E1               	movf	fsr1l,w,c
   326  003B1E  E1FA               	bnz	copy_data1
   327                           
   328                           ; Clear objects allocated to BIGRAM (760 bytes)
   329  003B20  EE04  F0FC         	lfsr	0,__pbssBIGRAM
   330  003B24  EE12 F0F8          	lfsr	1,760
   331  003B28                     clear_0:
   332  003B28  6AEE               	clrf	postinc0,c
   333  003B2A  50E5               	movf	postdec1,w,c
   334  003B2C  50E1               	movf	fsr1l,w,c
   335  003B2E  E1FC               	bnz	clear_0
   336  003B30  50E2               	movf	fsr1h,w,c
   337  003B32  E1FA               	bnz	clear_0
   338                           
   339                           ; Clear objects allocated to BANK4 (252 bytes)
   340  003B34  EE04  F000         	lfsr	0,__pbssBANK4
   341  003B38  0EFC               	movlw	252
   342  003B3A                     clear_1:
   343  003B3A  6AEE               	clrf	postinc0,c
   344  003B3C  06E8               	decf	wreg,f,c
   345  003B3E  E1FD               	bnz	clear_1
   346                           
   347                           ; Clear objects allocated to BANK3 (182 bytes)
   348  003B40  EE03  F000         	lfsr	0,__pbssBANK3
   349  003B44  0EB6               	movlw	182
   350  003B46                     clear_2:
   351  003B46  6AEE               	clrf	postinc0,c
   352  003B48  06E8               	decf	wreg,f,c
   353  003B4A  E1FD               	bnz	clear_2
   354                           
   355                           ; Clear objects allocated to BANK2 (182 bytes)
   356  003B4C  EE02  F000         	lfsr	0,__pbssBANK2
   357  003B50  0EB6               	movlw	182
   358  003B52                     clear_3:
   359  003B52  6AEE               	clrf	postinc0,c
   360  003B54  06E8               	decf	wreg,f,c
   361  003B56  E1FD               	bnz	clear_3
   362                           
   363                           ; Clear objects allocated to BANK1 (182 bytes)
   364  003B58  EE01  F000         	lfsr	0,__pbssBANK1
   365  003B5C  0EB6               	movlw	182
   366  003B5E                     clear_4:
   367  003B5E  6AEE               	clrf	postinc0,c
   368  003B60  06E8               	decf	wreg,f,c
   369  003B62  E1FD               	bnz	clear_4
   370                           
   371                           ; Clear objects allocated to BANK0 (56 bytes)
   372  003B64  EE00  F060         	lfsr	0,__pbssBANK0
   373  003B68  0E38               	movlw	56
   374  003B6A                     clear_5:
   375  003B6A  6AEE               	clrf	postinc0,c
   376  003B6C  06E8               	decf	wreg,f,c
   377  003B6E  E1FD               	bnz	clear_5
   378                           
   379                           ; Clear objects allocated to COMRAM (34 bytes)
   380  003B70  EE00  F026         	lfsr	0,__pbssCOMRAM
   381  003B74  0E22               	movlw	34
   382  003B76                     clear_6:
   383  003B76  6AEE               	clrf	postinc0,c
   384  003B78  06E8               	decf	wreg,f,c
   385  003B7A  E1FD               	bnz	clear_6
   386  003B7C                     end_of_initialization:
   387                           	opt stack 0
   388  003B7C                     __end_of__initialization:
   389                           	opt stack 0
   390  003B7C  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   391  003B7E  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   392  003B80  0E00               	movlw	low (__Lmediumconst shr (0+16))
   393  003B82  6EF8               	movwf	tblptru,c
   394  003B84  0100               	movlb	0
   395  003B86  EF16  F01E         	goto	_main	;jump to C main() function
   396                           tblptru	equ	0xFF8
   397                           tblptrh	equ	0xFF7
   398                           tblptrl	equ	0xFF6
   399                           tablat	equ	0xFF5
   400                           postinc0	equ	0xFEE
   401                           wreg	equ	0xFE8
   402                           postdec1	equ	0xFE5
   403                           fsr1h	equ	0xFE2
   404                           fsr1l	equ	0xFE1
   405                           
   406                           	psect	bssCOMRAM
   407  000026                     __pbssCOMRAM:
   408                           	opt stack 0
   409  000026                     _Mountain_Delay_Counter:
   410                           	opt stack 0
   411  000026                     	ds	2
   412  000028                     _Red_Led_Counter:
   413                           	opt stack 0
   414  000028                     	ds	2
   415  00002A                     _Green_Led_Counter:
   416                           	opt stack 0
   417  00002A                     	ds	2
   418  00002C                     _Led1_Counter:
   419                           	opt stack 0
   420  00002C                     	ds	2
   421  00002E                     _Switch_Moutain:
   422                           	opt stack 0
   423  00002E                     	ds	1
   424  00002F                     _Switch_Junction:
   425                           	opt stack 0
   426  00002F                     	ds	1
   427  000030                     _Button_Contact_Counter_RF:
   428                           	opt stack 0
   429  000030                     	ds	1
   430  000031                     _Button_Contact_Counter_RB:
   431                           	opt stack 0
   432  000031                     	ds	1
   433  000032                     _Button_Contact_Counter_LF:
   434                           	opt stack 0
   435  000032                     	ds	1
   436  000033                     _Button_Contact_Counter_LB:
   437                           	opt stack 0
   438  000033                     	ds	1
   439  000034                     _Button_Contact_Counter_Middle:
   440                           	opt stack 0
   441  000034                     	ds	1
   442  000035                     _Button_Contact_Counter_Stop:
   443                           	opt stack 0
   444  000035                     	ds	1
   445  000036                     _Button_Contact_Counter_Start:
   446                           	opt stack 0
   447  000036                     	ds	1
   448  000037                     _Reed_Contact_RMD_Counter:
   449                           	opt stack 0
   450  000037                     	ds	1
   451  000038                     _Reed_Contact_RMU_Counter:
   452                           	opt stack 0
   453  000038                     	ds	1
   454  000039                     _Reed_Contact_LMD_Counter:
   455                           	opt stack 0
   456  000039                     	ds	1
   457  00003A                     _Reed_Contact_LMU_Counter:
   458                           	opt stack 0
   459  00003A                     	ds	1
   460  00003B                     _Reed_Contact_RB_Counter:
   461                           	opt stack 0
   462  00003B                     	ds	1
   463  00003C                     _Reed_Contact_RF_Counter:
   464                           	opt stack 0
   465  00003C                     	ds	1
   466  00003D                     _Reed_Contact_LB_Counter:
   467                           	opt stack 0
   468  00003D                     	ds	1
   469  00003E                     _Reed_Contact_LF_Counter:
   470                           	opt stack 0
   471  00003E                     	ds	1
   472  00003F                     _eusart1RxCount:
   473                           	opt stack 0
   474  00003F                     	ds	1
   475  000040                     _eusart1RxTail:
   476                           	opt stack 0
   477  000040                     	ds	1
   478  000041                     _eusart1RxHead:
   479                           	opt stack 0
   480  000041                     	ds	1
   481  000042                     _eusart1TxBufferRemaining:
   482                           	opt stack 0
   483  000042                     	ds	1
   484  000043                     _eusart1TxTail:
   485                           	opt stack 0
   486  000043                     	ds	1
   487  000044                     _eusart1TxHead:
   488                           	opt stack 0
   489  000044                     	ds	1
   490  000045                     _Switch_Adjust_LF:
   491                           	opt stack 0
   492  000045                     	ds	1
   493  000046                     _Switch_Adjust_LB:
   494                           	opt stack 0
   495  000046                     	ds	1
   496  000047                     _Switch_Activate_Controls:
   497                           	opt stack 0
   498  000047                     	ds	1
   499                           tblptru	equ	0xFF8
   500                           tblptrh	equ	0xFF7
   501                           tblptrl	equ	0xFF6
   502                           tablat	equ	0xFF5
   503                           postinc0	equ	0xFEE
   504                           wreg	equ	0xFE8
   505                           postdec1	equ	0xFE5
   506                           fsr1h	equ	0xFE2
   507                           fsr1l	equ	0xFE1
   508                           
   509                           	psect	dataCOMRAM
   510  000048                     __pdataCOMRAM:
   511                           	opt stack 0
   512  000048                     Right_Mountain_From_The_Left@Return_Val:
   513                           	opt stack 0
   514  000048                     	ds	1
   515  000049                     Left_Mountain_From_The_Left@Return_Val:
   516                           	opt stack 0
   517  000049                     	ds	1
   518  00004A                     Left_Mountain_From_The_Right@Return_Val:
   519                           	opt stack 0
   520  00004A                     	ds	1
   521  00004B                     Right_Mountain_From_The_Right@Return_Val:
   522                           	opt stack 0
   523  00004B                     	ds	1
   524  00004C                     Junction@Return_Val:
   525                           	opt stack 0
   526  00004C                     	ds	1
   527                           tblptru	equ	0xFF8
   528                           tblptrh	equ	0xFF7
   529                           tblptrl	equ	0xFF6
   530                           tablat	equ	0xFF5
   531                           postinc0	equ	0xFEE
   532                           wreg	equ	0xFE8
   533                           postdec1	equ	0xFE5
   534                           fsr1h	equ	0xFE2
   535                           fsr1l	equ	0xFE1
   536                           
   537                           	psect	bssBANK0
   538  000060                     __pbssBANK0:
   539                           	opt stack 0
   540  000060                     Train_Move_Right_Brake@Train_Move_Wait_Time:
   541                           	opt stack 0
   542  000060                     	ds	2
   543  000062                     Train_Move_Right_Start@Train_Move_Wait_Time:
   544                           	opt stack 0
   545  000062                     	ds	2
   546  000064                     Train_Move_Left_Brake@Train_Move_Wait_Time:
   547                           	opt stack 0
   548  000064                     	ds	2
   549  000066                     Train_Move_Left_Start@Train_Move_Wait_Time:
   550                           	opt stack 0
   551  000066                     	ds	2
   552  000068                     _Train_Move_Pwm_Fast_Count:
   553                           	opt stack 0
   554  000068                     	ds	2
   555  00006A                     Junction@Junction_Switch_Time:
   556                           	opt stack 0
   557  00006A                     	ds	2
   558  00006C                     _WriteActive:
   559                           	opt stack 0
   560  00006C                     	ds	2
   561  00006E                     _ReadActive:
   562                           	opt stack 0
   563  00006E                     	ds	2
   564  000070                     _DelayCounter:
   565                           	opt stack 0
   566  000070                     	ds	2
   567  000072                     _ReadPointer:
   568                           	opt stack 0
   569  000072                     	ds	2
   570  000074                     _WritePointer:
   571                           	opt stack 0
   572  000074                     	ds	2
   573  000076                     _pLen:
   574                           	opt stack 0
   575  000076                     	ds	2
   576  000078                     _pData:
   577                           	opt stack 0
   578  000078                     	ds	2
   579  00007A                     _Activate_Controls_Counter:
   580                           	opt stack 0
   581  00007A                     	ds	2
   582  00007C                     _Adjust_Counter:
   583                           	opt stack 0
   584  00007C                     	ds	2
   585  00007E                     _Train_Move_Pwm_Count:
   586                           	opt stack 0
   587  00007E                     	ds	2
   588  000080                     _Switch_Train_Move:
   589                           	opt stack 0
   590  000080                     	ds	1
   591  000081                     _TrSwitch:
   592                           	opt stack 0
   593  000081                     	ds	1
   594  000082                     _Message_To_Translate:
   595                           	opt stack 0
   596  000082                     	ds	1
   597  000083                     _RxSwitch:
   598                           	opt stack 0
   599  000083                     	ds	1
   600  000084                     _Received_Data:
   601                           	opt stack 0
   602  000084                     	ds	1
   603  000085                     _Train_Pos2_Temp:
   604                           	opt stack 0
   605  000085                     	ds	1
   606  000086                     _Train_Pos1_Temp:
   607                           	opt stack 0
   608  000086                     	ds	1
   609  000087                     _Stop_Program:
   610                           	opt stack 0
   611  000087                     	ds	1
   612  000088                     _Switch_Train_Path:
   613                           	opt stack 0
   614  000088                     	ds	1
   615  000089                     _Switch_Adjust_RF:
   616                           	opt stack 0
   617  000089                     	ds	1
   618  00008A                     _Switch_Adjust_RB:
   619                           	opt stack 0
   620  00008A                     	ds	1
   621  00008B                     _Switch_Program:
   622                           	opt stack 0
   623  00008B                     	ds	1
   624  00008C                     _Switch_Init:
   625                           	opt stack 0
   626  00008C                     	ds	1
   627  00008D                     _Update_State_Machine:
   628                           	opt stack 0
   629  00008D                     	ds	1
   630  00008E                     _Data:
   631                           	opt stack 0
   632  00008E                     	ds	10
   633                           tblptru	equ	0xFF8
   634                           tblptrh	equ	0xFF7
   635                           tblptrl	equ	0xFF6
   636                           tablat	equ	0xFF5
   637                           postinc0	equ	0xFEE
   638                           wreg	equ	0xFE8
   639                           postdec1	equ	0xFE5
   640                           fsr1h	equ	0xFE2
   641                           fsr1l	equ	0xFE1
   642                           
   643                           	psect	dataBANK0
   644  0000C0                     __pdataBANK0:
   645                           	opt stack 0
   646  0000C0                     Train_Move_Right_Brake@Return_Val:
   647                           	opt stack 0
   648  0000C0                     	ds	1
   649  0000C1                     Train_Move_Right_Start@Return_Val:
   650                           	opt stack 0
   651  0000C1                     	ds	1
   652  0000C2                     Train_Move_Left_Brake@Return_Val:
   653                           	opt stack 0
   654  0000C2                     	ds	1
   655  0000C3                     Train_Move_Left_Start@Return_Val:
   656                           	opt stack 0
   657  0000C3                     	ds	1
   658  0000C4                     Train_Path@Return_Val:
   659                           	opt stack 0
   660  0000C4                     	ds	1
   661  0000C5                     _Switch_Main:
   662                           	opt stack 0
   663  0000C5                     	ds	1
   664                           tblptru	equ	0xFF8
   665                           tblptrh	equ	0xFF7
   666                           tblptrl	equ	0xFF6
   667                           tablat	equ	0xFF5
   668                           postinc0	equ	0xFEE
   669                           wreg	equ	0xFE8
   670                           postdec1	equ	0xFE5
   671                           fsr1h	equ	0xFE2
   672                           fsr1l	equ	0xFE1
   673                           
   674                           	psect	bssBANK1
   675  000100                     __pbssBANK1:
   676                           	opt stack 0
   677  000100                     _API:
   678                           	opt stack 0
   679  000100                     	ds	182
   680                           tblptru	equ	0xFF8
   681                           tblptrh	equ	0xFF7
   682                           tblptrl	equ	0xFF6
   683                           tablat	equ	0xFF5
   684                           postinc0	equ	0xFEE
   685                           wreg	equ	0xFE8
   686                           postdec1	equ	0xFE5
   687                           fsr1h	equ	0xFE2
   688                           fsr1l	equ	0xFE1
   689                           
   690                           	psect	bssBANK2
   691  000200                     __pbssBANK2:
   692                           	opt stack 0
   693  000200                     _API_RW:
   694                           	opt stack 0
   695  000200                     	ds	182
   696                           tblptru	equ	0xFF8
   697                           tblptrh	equ	0xFF7
   698                           tblptrl	equ	0xFF6
   699                           tablat	equ	0xFF5
   700                           postinc0	equ	0xFEE
   701                           wreg	equ	0xFE8
   702                           postdec1	equ	0xFE5
   703                           fsr1h	equ	0xFE2
   704                           fsr1l	equ	0xFE1
   705                           
   706                           	psect	bssBANK3
   707  000300                     __pbssBANK3:
   708                           	opt stack 0
   709  000300                     _API_EEPROM:
   710                           	opt stack 0
   711  000300                     	ds	182
   712                           tblptru	equ	0xFF8
   713                           tblptrh	equ	0xFF7
   714                           tblptrl	equ	0xFF6
   715                           tablat	equ	0xFF5
   716                           postinc0	equ	0xFEE
   717                           wreg	equ	0xFE8
   718                           postdec1	equ	0xFE5
   719                           fsr1h	equ	0xFE2
   720                           fsr1l	equ	0xFE1
   721                           
   722                           	psect	bssBANK4
   723  000400                     __pbssBANK4:
   724                           	opt stack 0
   725  000400                     _eusart1RxBuffer:
   726                           	opt stack 0
   727  000400                     	ds	126
   728  00047E                     _eusart1TxBuffer:
   729                           	opt stack 0
   730  00047E                     	ds	126
   731                           tblptru	equ	0xFF8
   732                           tblptrh	equ	0xFF7
   733                           tblptrl	equ	0xFF6
   734                           tablat	equ	0xFF5
   735                           postinc0	equ	0xFEE
   736                           wreg	equ	0xFE8
   737                           postdec1	equ	0xFE5
   738                           fsr1h	equ	0xFE2
   739                           fsr1l	equ	0xFE1
   740                           
   741                           	psect	bssBIGRAM
   742  0004FC                     __pbssBIGRAM:
   743                           	opt stack 0
   744  0004FC                     _Comm_List:
   745                           	opt stack 0
   746  0004FC                     	ds	760
   747                           tblptru	equ	0xFF8
   748                           tblptrh	equ	0xFF7
   749                           tblptrl	equ	0xFF6
   750                           tablat	equ	0xFF5
   751                           postinc0	equ	0xFEE
   752                           wreg	equ	0xFE8
   753                           postdec1	equ	0xFE5
   754                           fsr1h	equ	0xFE2
   755                           fsr1l	equ	0xFE1
   756                           
   757                           	psect	cstackBANK0
   758  000098                     __pcstackBANK0:
   759                           	opt stack 0
   760  000098                     ??_tc_low:
   761                           
   762                           ; 1 bytes @ 0x0
   763  000098                     	ds	21
   764  0000AD                     ?_printf:
   765                           	opt stack 0
   766  0000AD                     EEPROMxSTORE@api_list:
   767                           	opt stack 0
   768  0000AD                     Right_Mountain_From_The_Right@rc:
   769                           	opt stack 0
   770  0000AD                     Left_Mountain_From_The_Right@rc:
   771                           	opt stack 0
   772  0000AD                     Left_Mountain_From_The_Left@rc:
   773                           	opt stack 0
   774  0000AD                     Right_Mountain_From_The_Left@rc:
   775                           	opt stack 0
   776  0000AD                     printf@f:
   777                           	opt stack 0
   778  0000AD                     _Train_Move_Left_Start$2186:
   779                           	opt stack 0
   780  0000AD                     _Train_Move_Left_Brake$2187:
   781                           	opt stack 0
   782  0000AD                     _Train_Move_Right_Start$2188:
   783                           	opt stack 0
   784  0000AD                     _Train_Move_Right_Brake$2189:
   785                           	opt stack 0
   786                           
   787                           ; 2 bytes @ 0x15
   788  0000AD                     	ds	1
   789  0000AE                     EEPROMxSTORE@i:
   790                           	opt stack 0
   791                           
   792                           ; 1 bytes @ 0x16
   793  0000AE                     	ds	1
   794  0000AF                     Train_Path@To:
   795                           	opt stack 0
   796                           
   797                           ; 1 bytes @ 0x17
   798  0000AF                     	ds	1
   799  0000B0                     Train_Path@From:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x18
   803  0000B0                     	ds	1
   804  0000B1                     ??_Update_StateMchn:
   805                           
   806                           ; 1 bytes @ 0x19
   807  0000B1                     	ds	2
   808  0000B3                     printf@ap:
   809                           	opt stack 0
   810  0000B3                     _Update_StateMchn$2184:
   811                           	opt stack 0
   812                           
   813                           ; 2 bytes @ 0x1B
   814  0000B3                     	ds	2
   815  0000B5                     printf@flag:
   816                           	opt stack 0
   817  0000B5                     _Update_StateMchn$2185:
   818                           	opt stack 0
   819                           
   820                           ; 1 bytes @ 0x1D
   821  0000B5                     	ds	1
   822  0000B6                     printf@prec:
   823                           	opt stack 0
   824                           
   825                           ; 1 bytes @ 0x1E
   826  0000B6                     	ds	1
   827  0000B7                     printf@val:
   828                           	opt stack 0
   829                           
   830                           ; 2 bytes @ 0x1F
   831  0000B7                     	ds	2
   832  0000B9                     printf@c:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x21
   836  0000B9                     	ds	1
   837  0000BA                     ??_READxRECEIVEDxMESSAGE:
   838  0000BA                     SendMessage@index:
   839                           	opt stack 0
   840                           
   841                           ; 2 bytes @ 0x22
   842  0000BA                     	ds	2
   843  0000BC                     SendMessage@value:
   844                           	opt stack 0
   845                           
   846                           ; 2 bytes @ 0x24
   847  0000BC                     	ds	2
   848  0000BE                     ??_main:
   849                           
   850                           ; 1 bytes @ 0x26
   851  0000BE                     	ds	2
   852                           tblptru	equ	0xFF8
   853                           tblptrh	equ	0xFF7
   854                           tblptrl	equ	0xFF6
   855                           tablat	equ	0xFF5
   856                           postinc0	equ	0xFEE
   857                           wreg	equ	0xFE8
   858                           postdec1	equ	0xFE5
   859                           fsr1h	equ	0xFE2
   860                           fsr1l	equ	0xFE1
   861                           
   862                           	psect	cstackCOMRAM
   863  000001                     __pcstackCOMRAM:
   864                           	opt stack 0
   865  000001                     ??_tc_high:
   866  000001                     
   867                           ; 1 bytes @ 0x0
   868  000001                     	ds	18
   869  000013                     ??_isdigit:
   870  000013                     ?_GETxAPIxVAL:
   871                           	opt stack 0
   872  000013                     ?_GETxAPIxRW:
   873                           	opt stack 0
   874  000013                     ?_Eeprom_Read:
   875                           	opt stack 0
   876  000013                     ?___wmul:
   877                           	opt stack 0
   878  000013                     ?___lwdiv:
   879                           	opt stack 0
   880  000013                     EUSART1_Read@readValue:
   881                           	opt stack 0
   882  000013                     putch@data:
   883                           	opt stack 0
   884  000013                     EUSART1_Initialize@baud_rate:
   885                           	opt stack 0
   886  000013                     SENDxMESSAGE@index:
   887                           	opt stack 0
   888  000013                     APIxInitialize@i:
   889                           	opt stack 0
   890  000013                     GETxAPIxRW@index:
   891                           	opt stack 0
   892  000013                     GETxAPIxVAL@index:
   893                           	opt stack 0
   894  000013                     Eeprom_Read@Location:
   895                           	opt stack 0
   896  000013                     Eeprom_Store@Location:
   897                           	opt stack 0
   898  000013                     ___wmul@multiplier:
   899                           	opt stack 0
   900  000013                     ___lwdiv@dividend:
   901                           	opt stack 0
   902                           
   903                           ; 2 bytes @ 0x12
   904  000013                     	ds	1
   905  000014                     _isdigit$1841:
   906                           	opt stack 0
   907                           
   908                           ; 1 bytes @ 0x13
   909  000014                     	ds	1
   910  000015                     isdigit@c:
   911                           	opt stack 0
   912  000015                     SENDxMESSAGE@value:
   913                           	opt stack 0
   914  000015                     SETxAPIxVALxNoxRET@index:
   915                           	opt stack 0
   916  000015                     Eeprom_Read@Location_Low_Byte:
   917                           	opt stack 0
   918  000015                     Eeprom_Store@Value:
   919                           	opt stack 0
   920  000015                     SetDCPWM1@dutycycle:
   921                           	opt stack 0
   922  000015                     ___wmul@multiplicand:
   923                           	opt stack 0
   924  000015                     ___lwdiv@divisor:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x14
   928  000015                     	ds	2
   929  000017                     ??_SENDxMESSAGE:
   930  000017                     ??_SetDCPWM1:
   931  000017                     ___lwdiv@counter:
   932                           	opt stack 0
   933  000017                     SETxAPIxVALxNoxRET@value:
   934                           	opt stack 0
   935  000017                     Eeprom_Read@Location_High_Byte:
   936                           	opt stack 0
   937  000017                     Eeprom_Store@Location_Low_Byte:
   938                           	opt stack 0
   939  000017                     ___wmul@product:
   940                           	opt stack 0
   941                           
   942                           ; 2 bytes @ 0x16
   943  000017                     	ds	1
   944  000018                     ___lwdiv@quotient:
   945                           	opt stack 0
   946                           
   947                           ; 2 bytes @ 0x17
   948  000018                     	ds	1
   949  000019                     ?_atoi:
   950                           	opt stack 0
   951  000019                     SETxAPIxVAL@index:
   952                           	opt stack 0
   953  000019                     Eeprom_Read@Return_Data:
   954                           	opt stack 0
   955  000019                     Eeprom_Store@Location_High_Byte:
   956                           	opt stack 0
   957  000019                     SetDCPWM1@DCycle:
   958                           	opt stack 0
   959  000019                     atoi@s:
   960                           	opt stack 0
   961                           
   962                           ; 2 bytes @ 0x18
   963  000019                     	ds	1
   964  00001A                     ?___lwmod:
   965                           	opt stack 0
   966  00001A                     ___lwmod@dividend:
   967                           	opt stack 0
   968                           
   969                           ; 2 bytes @ 0x19
   970  00001A                     	ds	1
   971  00001B                     ??_atoi:
   972  00001B                     ?_EEPROMxREAD:
   973                           	opt stack 0
   974  00001B                     ?_EEPROMxSTORE:
   975                           	opt stack 0
   976  00001B                     SETxAPIxVAL@value:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0x1A
   980  00001B                     	ds	1
   981  00001C                     ___lwmod@divisor:
   982                           	opt stack 0
   983                           
   984                           ; 2 bytes @ 0x1B
   985  00001C                     	ds	1
   986  00001D                     ??_EEPROMxREAD:
   987  00001D                     ??_EEPROMxSTORE:
   988  00001D                     atoi@sign:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x1C
   992  00001D                     	ds	1
   993  00001E                     ___lwmod@counter:
   994                           	opt stack 0
   995  00001E                     atoi@a:
   996                           	opt stack 0
   997                           
   998                           ; 2 bytes @ 0x1D
   999  00001E                     	ds	1
  1000  00001F                     ??_Debounce_Inputs:
  1001  00001F                     ??_Green_Led:
  1002  00001F                     ??_Red_Led:
  1003  00001F                     ??_printf:
  1004  00001F                     Junction@Straight_Bend:
  1005                           	opt stack 0
  1006  00001F                     EEPROMxREAD@Data:
  1007                           	opt stack 0
  1008  00001F                     SETxPWM@speed:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0x1E
  1012  00001F                     	ds	1
  1013  000020                     ??_DIAGNOSTICxTOxPC:
  1014  000020                     Green_Led@Operation:
  1015                           	opt stack 0
  1016  000020                     Red_Led@Operation:
  1017                           	opt stack 0
  1018  000020                     Junction@Junction_Left_Right:
  1019                           	opt stack 0
  1020  000020                     TranslateMessage@Value:
  1021                           	opt stack 0
  1022                           
  1023                           ; 2 bytes @ 0x1F
  1024  000020                     	ds	1
  1025  000021                     EEPROMxREAD@i:
  1026                           	opt stack 0
  1027  000021                     SETxPWM@direction:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0x20
  1031  000021                     	ds	1
  1032  000022                     ??_SETxPWM:
  1033  000022                     TranslateMessage@Index:
  1034                           	opt stack 0
  1035                           
  1036                           ; 2 bytes @ 0x21
  1037  000022                     	ds	2
  1038  000024                     SETxPWM@pwm_speed:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x23
  1042  000024                     	ds	2
  1043  000026                     tblptru	equ	0xFF8
  1044                           tblptrh	equ	0xFF7
  1045                           tblptrl	equ	0xFF6
  1046                           tablat	equ	0xFF5
  1047                           postinc0	equ	0xFEE
  1048                           wreg	equ	0xFE8
  1049                           postdec1	equ	0xFE5
  1050                           fsr1h	equ	0xFE2
  1051                           fsr1l	equ	0xFE1
  1052                           
  1053                           ; 1 bytes @ 0x25
  1054 ;;
  1055 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1056 ;;
  1057 ;; *************** function _main *****************
  1058 ;; Defined at:
  1059 ;;		line 107 in file "../Main.c"
  1060 ;; Parameters:    Size  Location     Type
  1061 ;;		None
  1062 ;; Auto vars:     Size  Location     Type
  1063 ;;		None
  1064 ;; Return value:  Size  Location     Type
  1065 ;;                  1    wreg      void 
  1066 ;; Registers used:
  1067 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1068 ;; Tracked objects:
  1069 ;;		On entry : 0/0
  1070 ;;		On exit  : 0/0
  1071 ;;		Unchanged: 0/0
  1072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1073 ;;      Params:         0       0       0       0       0       0       0       0       0
  1074 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1075 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1076 ;;      Totals:         0       2       0       0       0       0       0       0       0
  1077 ;;Total ram usage:        2 bytes
  1078 ;; Hardware stack levels required when called:    9
  1079 ;; This function calls:
  1080 ;;		_APIxInitialize
  1081 ;;		_DIAGNOSTICxTOxPC
  1082 ;;		_EEPROMxREAD
  1083 ;;		_EUSART1_Initialize
  1084 ;;		_Init_Pwm
  1085 ;;		_Init_Timers
  1086 ;;		_READxRECEIVEDxMESSAGE
  1087 ;;		_Update_StateMchn
  1088 ;; This function is called by:
  1089 ;;		Startup code after reset
  1090 ;; This function uses a non-reentrant model
  1091 ;;
  1092                           
  1093                           	psect	text0
  1094  003C2C                     __ptext0:
  1095                           	opt stack 0
  1096  003C2C                     _main:
  1097                           	opt stack 22
  1098                           
  1099                           ;Main.c: 109: TRISA = 0xFF;TRISB = 0xFF;TRISC = 0xFF;TRISD = 0xFF;TRISE = 0xFF;
  1100                           
  1101                           ;incstack = 0
  1102  003C2C  6892               	setf	3986,c	;volatile
  1103  003C2E  6893               	setf	3987,c	;volatile
  1104  003C30  6894               	setf	3988,c	;volatile
  1105  003C32  6895               	setf	3989,c	;volatile
  1106  003C34  6896               	setf	3990,c	;volatile
  1107                           
  1108                           ;Main.c: 110: ADCON1=0x0F;
  1109  003C36  0E0F               	movlw	15
  1110  003C38  6EC1               	movwf	4033,c	;volatile
  1111                           
  1112                           ;Main.c: 111: CMCON=0x07;
  1113  003C3A  0E07               	movlw	7
  1114  003C3C  6EB4               	movwf	4020,c	;volatile
  1115                           
  1116                           ;Main.c: 112: TRISAbits.TRISA4=0;TRISDbits.TRISD5=0;TRISDbits.TRISD6=0;;
  1117  003C3E  9892               	bcf	3986,4,c	;volatile
  1118  003C40  9A95               	bcf	3989,5,c	;volatile
  1119  003C42  9C95               	bcf	3989,6,c	;volatile
  1120                           
  1121                           ;Main.c: 113: PORTAbits.RA4 = 0;
  1122  003C44  9880               	bcf	3968,4,c	;volatile
  1123                           
  1124                           ;Main.c: 114: PORTDbits.RD6 = 0;
  1125  003C46  9C83               	bcf	3971,6,c	;volatile
  1126                           
  1127                           ;Main.c: 115: PORTDbits.RD5 = 0;
  1128  003C48  9A83               	bcf	3971,5,c	;volatile
  1129                           
  1130                           ;Main.c: 117: TRISAbits.TRISA0=0;TRISAbits.TRISA1=0;TRISAbits.TRISA2=0;TRISAbits.TRISA3=
      +                          0;;
  1131  003C4A  9092               	bcf	3986,0,c	;volatile
  1132  003C4C  9292               	bcf	3986,1,c	;volatile
  1133  003C4E  9492               	bcf	3986,2,c	;volatile
  1134  003C50  9692               	bcf	3986,3,c	;volatile
  1135                           
  1136                           ;Main.c: 118: PORTAbits.RA3 = 0;
  1137  003C52  9680               	bcf	3968,3,c	;volatile
  1138                           
  1139                           ;Main.c: 119: PORTAbits.RA2 = 0;
  1140  003C54  9480               	bcf	3968,2,c	;volatile
  1141                           
  1142                           ;Main.c: 120: PORTAbits.RA1 = 0;
  1143  003C56  9280               	bcf	3968,1,c	;volatile
  1144                           
  1145                           ;Main.c: 121: PORTAbits.RA0 = 0;
  1146  003C58  9080               	bcf	3968,0,c	;volatile
  1147                           
  1148                           ;Main.c: 123: TRISDbits.TRISD2=1;TRISDbits.TRISD3=1;TRISDbits.TRISD0=1;TRISDbits.TRISD1=
      +                          1;TRISCbits.TRISC1=1;TRISDbits.TRISD4=1;TRISEbits.TRISE0=1;TRISEbits.TRISE1=1;;
  1149  003C5A  8495               	bsf	3989,2,c	;volatile
  1150  003C5C  8695               	bsf	3989,3,c	;volatile
  1151  003C5E  8095               	bsf	3989,0,c	;volatile
  1152  003C60  8295               	bsf	3989,1,c	;volatile
  1153  003C62  8294               	bsf	3988,1,c	;volatile
  1154  003C64  8895               	bsf	3989,4,c	;volatile
  1155  003C66  8096               	bsf	3990,0,c	;volatile
  1156  003C68  8296               	bsf	3990,1,c	;volatile
  1157                           
  1158                           ;Main.c: 124: TRISBbits.TRISB0=1;TRISBbits.TRISB1=1;TRISBbits.TRISB2=1;TRISBbits.TRISB3=
      +                          1;TRISBbits.TRISB4=1;TRISBbits.TRISB5=1;TRISDbits.TRISD7=1;;
  1159  003C6A  8093               	bsf	3987,0,c	;volatile
  1160  003C6C  8293               	bsf	3987,1,c	;volatile
  1161  003C6E  8493               	bsf	3987,2,c	;volatile
  1162  003C70  8693               	bsf	3987,3,c	;volatile
  1163  003C72  8893               	bsf	3987,4,c	;volatile
  1164  003C74  8A93               	bsf	3987,5,c	;volatile
  1165  003C76  8E95               	bsf	3989,7,c	;volatile
  1166                           
  1167                           ;Main.c: 125: APIxInitialize();
  1168  003C78  EC4F  F00F         	call	_APIxInitialize	;wreg free
  1169                           
  1170                           ;Main.c: 126: _delay((unsigned long)((1000)*(24000000/4000.0)));
  1171  003C7C  0E1F               	movlw	31
  1172  003C7E  0100               	movlb	0	; () banked
  1173  003C80  6FBF               	movwf	(??_main+1)& (0+255),b
  1174  003C82  0E71               	movlw	113
  1175  003C84  6FBE               	movwf	??_main& (0+255),b
  1176  003C86  0E1E               	movlw	30
  1177  003C88                     u9647:
  1178  003C88  2EE8               	decfsz	wreg,f,c
  1179  003C8A  D7FE               	bra	u9647
  1180  003C8C  2FBE               	decfsz	??_main& (0+255),f,b
  1181  003C8E  D7FC               	bra	u9647
  1182  003C90  2FBF               	decfsz	(??_main+1)& (0+255),f,b
  1183  003C92  D7FA               	bra	u9647
  1184  003C94  F000               	nop	
  1185  003C96                     
  1186                           ;Main.c: 128: continue;
  1187  003C96  EC4A  F01C         	call	_EEPROMxREAD	;wreg free
  1188  003C9A  501B               	movf	?_EEPROMxREAD,w,c
  1189  003C9C  101C               	iorwf	?_EEPROMxREAD+1,w,c
  1190  003C9E  B4D8               	btfsc	status,2,c
  1191  003CA0  D7FA               	goto	l90
  1192                           
  1193                           ;Main.c: 129: };
  1194                           ;Main.c: 130: Init_Pwm();
  1195  003CA2  ECA2  F020         	call	_Init_Pwm	;wreg free
  1196                           
  1197                           ;Main.c: 131: Init_Timers();
  1198  003CA6  EC04  F021         	call	_Init_Timers	;wreg free
  1199                           
  1200                           ;Main.c: 132: EUSART1_Initialize();
  1201  003CAA  ECDB  F01F         	call	_EUSART1_Initialize	;wreg free
  1202  003CAE                     
  1203                           ;Main.c: 136: {
  1204                           ;Main.c: 137: if (1 == Update_State_Machine)
  1205  003CAE  0100               	movlb	0	; () banked
  1206  003CB0  058D               	decf	_Update_State_Machine& (0+255),w,b	;volatile
  1207  003CB2  A4D8               	btfss	status,2,c
  1208  003CB4  D004               	goto	l93
  1209                           
  1210                           ; BSR set to: 0
  1211                           ;Main.c: 138: {
  1212                           ;Main.c: 139: Update_State_Machine = 0;
  1213  003CB6  0E00               	movlw	0
  1214  003CB8  6F8D               	movwf	_Update_State_Machine& (0+255),b	;volatile
  1215                           
  1216                           ; BSR set to: 0
  1217                           ;Main.c: 140: Update_StateMchn();
  1218  003CBA  EC2F  F004         	call	_Update_StateMchn	;wreg free
  1219  003CBE                     l93:
  1220                           
  1221                           ;Main.c: 141: }
  1222                           ;Main.c: 142: READxRECEIVEDxMESSAGE();
  1223  003CBE  EC3F  F01A         	call	_READxRECEIVEDxMESSAGE	;wreg free
  1224                           
  1225                           ;Main.c: 143: DIAGNOSTICxTOxPC();
  1226  003CC2  ECC5  F01D         	call	_DIAGNOSTICxTOxPC	;wreg free
  1227  003CC6  D7F3               	goto	l92
  1228  003CC8                     __end_of_main:
  1229                           	opt stack 0
  1230                           tblptru	equ	0xFF8
  1231                           tblptrh	equ	0xFF7
  1232                           tblptrl	equ	0xFF6
  1233                           tablat	equ	0xFF5
  1234                           postinc0	equ	0xFEE
  1235                           wreg	equ	0xFE8
  1236                           postdec1	equ	0xFE5
  1237                           fsr1h	equ	0xFE2
  1238                           fsr1l	equ	0xFE1
  1239                           status	equ	0xFD8
  1240                           
  1241 ;; *************** function _Update_StateMchn *****************
  1242 ;; Defined at:
  1243 ;;		line 43 in file "../State_Mchn.c"
  1244 ;; Parameters:    Size  Location     Type
  1245 ;;		None
  1246 ;; Auto vars:     Size  Location     Type
  1247 ;;		None
  1248 ;; Return value:  Size  Location     Type
  1249 ;;                  1    wreg      void 
  1250 ;; Registers used:
  1251 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1252 ;; Tracked objects:
  1253 ;;		On entry : 0/0
  1254 ;;		On exit  : 0/0
  1255 ;;		Unchanged: 0/0
  1256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1257 ;;      Params:         0       0       0       0       0       0       0       0       0
  1258 ;;      Locals:         0       3       0       0       0       0       0       0       0
  1259 ;;      Temps:          0       2       0       0       0       0       0       0       0
  1260 ;;      Totals:         0       5       0       0       0       0       0       0       0
  1261 ;;Total ram usage:        5 bytes
  1262 ;; Hardware stack levels used:    1
  1263 ;; Hardware stack levels required when called:    8
  1264 ;; This function calls:
  1265 ;;		_Debounce_Inputs
  1266 ;;		_EEPROMxSTORE
  1267 ;;		_GETxAPIxVAL
  1268 ;;		_Green_Led
  1269 ;;		_Junction
  1270 ;;		_Red_Led
  1271 ;;		_SETxAPIxVAL
  1272 ;;		_SETxAPIxVALxNoxRET
  1273 ;;		_SETxPWM
  1274 ;;		_Train_Path
  1275 ;; This function is called by:
  1276 ;;		_main
  1277 ;; This function uses a non-reentrant model
  1278 ;;
  1279                           
  1280                           	psect	text1
  1281  00085E                     __ptext1:
  1282                           	opt stack 0
  1283  00085E                     _Update_StateMchn:
  1284                           	opt stack 22
  1285                           
  1286                           ;State_Mchn.c: 45: if (GETxAPIxVAL(72)){
  1287                           
  1288                           ;incstack = 0
  1289  00085E  0E00               	movlw	0
  1290  000860  6E14               	movwf	GETxAPIxVAL@index+1,c
  1291  000862  0E48               	movlw	72
  1292  000864  6E13               	movwf	GETxAPIxVAL@index,c
  1293  000866  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1294  00086A  5013               	movf	?_GETxAPIxVAL,w,c
  1295  00086C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1296  00086E  B4D8               	btfsc	status,2,c
  1297  000870  D00C               	goto	l187
  1298                           
  1299                           ;State_Mchn.c: 46: SETxAPIxVAL(72, 0);
  1300  000872  0E00               	movlw	0
  1301  000874  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1302  000876  0E48               	movlw	72
  1303  000878  6E19               	movwf	SETxAPIxVAL@index,c
  1304  00087A  0E00               	movlw	0
  1305  00087C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1306  00087E  0E00               	movlw	0
  1307  000880  6E1B               	movwf	SETxAPIxVAL@value,c
  1308  000882  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  1309  000886  00FF               	reset		;# 
  1310                           
  1311                           ;State_Mchn.c: 48: }
  1312  000888  D01A               	goto	l190
  1313  00088A                     l187:
  1314                           
  1315                           ;State_Mchn.c: 49: else if (GETxAPIxVAL(87)){
  1316  00088A  0E00               	movlw	0
  1317  00088C  6E14               	movwf	GETxAPIxVAL@index+1,c
  1318  00088E  0E57               	movlw	87
  1319  000890  6E13               	movwf	GETxAPIxVAL@index,c
  1320  000892  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1321  000896  5013               	movf	?_GETxAPIxVAL,w,c
  1322  000898  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1323  00089A  B4D8               	btfsc	status,2,c
  1324  00089C  D010               	goto	l190
  1325                           
  1326                           ;State_Mchn.c: 50: if (EEPROMxSTORE() == 1){
  1327  00089E  ECBA  F014         	call	_EEPROMxSTORE	;wreg free
  1328  0008A2  041B               	decf	?_EEPROMxSTORE,w,c
  1329  0008A4  101C               	iorwf	?_EEPROMxSTORE+1,w,c
  1330  0008A6  A4D8               	btfss	status,2,c
  1331  0008A8  D00A               	goto	l190
  1332                           
  1333                           ;State_Mchn.c: 51: SETxAPIxVAL(87, 0);
  1334  0008AA  0E00               	movlw	0
  1335  0008AC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1336  0008AE  0E57               	movlw	87
  1337  0008B0  6E19               	movwf	SETxAPIxVAL@index,c
  1338  0008B2  0E00               	movlw	0
  1339  0008B4  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1340  0008B6  0E00               	movlw	0
  1341  0008B8  6E1B               	movwf	SETxAPIxVAL@value,c
  1342  0008BA  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  1343  0008BE                     l190:
  1344                           
  1345                           ;State_Mchn.c: 52: }
  1346                           ;State_Mchn.c: 53: }
  1347                           ;State_Mchn.c: 55: Debounce_Inputs();
  1348  0008BE  EC8C  F00B         	call	_Debounce_Inputs	;wreg free
  1349                           
  1350                           ;State_Mchn.c: 57: switch (Switch_Main)
  1351  0008C2  EF6D  F00B         	goto	l191
  1352  0008C6                     
  1353                           ;State_Mchn.c: 60: if (GETxAPIxVAL(74)){
  1354  0008C6  0E00               	movlw	0
  1355  0008C8  6E14               	movwf	GETxAPIxVAL@index+1,c
  1356  0008CA  0E4A               	movlw	74
  1357  0008CC  6E13               	movwf	GETxAPIxVAL@index,c
  1358  0008CE  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1359  0008D2  5013               	movf	?_GETxAPIxVAL,w,c
  1360  0008D4  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1361  0008D6  B4D8               	btfsc	status,2,c
  1362  0008D8  D015               	goto	l193
  1363                           
  1364                           ;State_Mchn.c: 61: if(Junction(0, 1) == 0){
  1365  0008DA  0E01               	movlw	1
  1366  0008DC  6E1F               	movwf	Junction@Straight_Bend,c
  1367  0008DE  0E00               	movlw	0
  1368  0008E0  ECCA  F013         	call	_Junction
  1369  0008E4  0900               	iorlw	0
  1370  0008E6  A4D8               	btfss	status,2,c
  1371  0008E8  EF79  F00B         	goto	l326
  1372                           
  1373                           ;State_Mchn.c: 62: SETxAPIxVALxNoxRET(74, 0);
  1374  0008EC  0E00               	movlw	0
  1375  0008EE  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1376  0008F0  0E4A               	movlw	74
  1377  0008F2  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1378  0008F4  0E00               	movlw	0
  1379  0008F6  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1380  0008F8  0E00               	movlw	0
  1381  0008FA  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1382  0008FC  EC20  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1383                           
  1384                           ;State_Mchn.c: 63: }
  1385                           ;State_Mchn.c: 64: }
  1386  000900  EF79  F00B         	goto	l326
  1387  000904                     l193:
  1388                           
  1389                           ;State_Mchn.c: 65: else if (GETxAPIxVAL(73)){
  1390  000904  0E00               	movlw	0
  1391  000906  6E14               	movwf	GETxAPIxVAL@index+1,c
  1392  000908  0E49               	movlw	73
  1393  00090A  6E13               	movwf	GETxAPIxVAL@index,c
  1394  00090C  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1395  000910  5013               	movf	?_GETxAPIxVAL,w,c
  1396  000912  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1397  000914  B4D8               	btfsc	status,2,c
  1398  000916  D015               	goto	l196
  1399                           
  1400                           ;State_Mchn.c: 66: if(Junction(0, 0) == 0){
  1401  000918  0E00               	movlw	0
  1402  00091A  6E1F               	movwf	Junction@Straight_Bend,c
  1403  00091C  0E00               	movlw	0
  1404  00091E  ECCA  F013         	call	_Junction
  1405  000922  0900               	iorlw	0
  1406  000924  A4D8               	btfss	status,2,c
  1407  000926  EF79  F00B         	goto	l326
  1408                           
  1409                           ;State_Mchn.c: 67: SETxAPIxVALxNoxRET(73, 0);
  1410  00092A  0E00               	movlw	0
  1411  00092C  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1412  00092E  0E49               	movlw	73
  1413  000930  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1414  000932  0E00               	movlw	0
  1415  000934  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1416  000936  0E00               	movlw	0
  1417  000938  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1418  00093A  EC20  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1419                           
  1420                           ;State_Mchn.c: 68: }
  1421                           ;State_Mchn.c: 69: }
  1422  00093E  EF79  F00B         	goto	l326
  1423  000942                     l196:
  1424                           
  1425                           ;State_Mchn.c: 70: else if (GETxAPIxVAL(76)){
  1426  000942  0E00               	movlw	0
  1427  000944  6E14               	movwf	GETxAPIxVAL@index+1,c
  1428  000946  0E4C               	movlw	76
  1429  000948  6E13               	movwf	GETxAPIxVAL@index,c
  1430  00094A  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1431  00094E  5013               	movf	?_GETxAPIxVAL,w,c
  1432  000950  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1433  000952  B4D8               	btfsc	status,2,c
  1434  000954  D015               	goto	l199
  1435                           
  1436                           ;State_Mchn.c: 71: if(Junction(1, 1) == 0){
  1437  000956  0E01               	movlw	1
  1438  000958  6E1F               	movwf	Junction@Straight_Bend,c
  1439  00095A  0E01               	movlw	1
  1440  00095C  ECCA  F013         	call	_Junction
  1441  000960  0900               	iorlw	0
  1442  000962  A4D8               	btfss	status,2,c
  1443  000964  EF79  F00B         	goto	l326
  1444                           
  1445                           ;State_Mchn.c: 72: SETxAPIxVALxNoxRET(76, 0);
  1446  000968  0E00               	movlw	0
  1447  00096A  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1448  00096C  0E4C               	movlw	76
  1449  00096E  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1450  000970  0E00               	movlw	0
  1451  000972  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1452  000974  0E00               	movlw	0
  1453  000976  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1454  000978  EC20  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1455                           
  1456                           ;State_Mchn.c: 73: }
  1457                           ;State_Mchn.c: 74: }
  1458  00097C  EF79  F00B         	goto	l326
  1459  000980                     l199:
  1460                           
  1461                           ;State_Mchn.c: 75: else if (GETxAPIxVAL(75)){
  1462  000980  0E00               	movlw	0
  1463  000982  6E14               	movwf	GETxAPIxVAL@index+1,c
  1464  000984  0E4B               	movlw	75
  1465  000986  6E13               	movwf	GETxAPIxVAL@index,c
  1466  000988  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1467  00098C  5013               	movf	?_GETxAPIxVAL,w,c
  1468  00098E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1469  000990  B4D8               	btfsc	status,2,c
  1470  000992  D015               	goto	l202
  1471                           
  1472                           ;State_Mchn.c: 76: if(Junction(1, 0) == 0){
  1473  000994  0E00               	movlw	0
  1474  000996  6E1F               	movwf	Junction@Straight_Bend,c
  1475  000998  0E01               	movlw	1
  1476  00099A  ECCA  F013         	call	_Junction
  1477  00099E  0900               	iorlw	0
  1478  0009A0  A4D8               	btfss	status,2,c
  1479  0009A2  EF79  F00B         	goto	l326
  1480                           
  1481                           ;State_Mchn.c: 77: SETxAPIxVALxNoxRET(75, 0);
  1482  0009A6  0E00               	movlw	0
  1483  0009A8  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1484  0009AA  0E4B               	movlw	75
  1485  0009AC  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1486  0009AE  0E00               	movlw	0
  1487  0009B0  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1488  0009B2  0E00               	movlw	0
  1489  0009B4  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1490  0009B6  EC20  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1491                           
  1492                           ;State_Mchn.c: 78: }
  1493                           ;State_Mchn.c: 79: }
  1494  0009BA  EF79  F00B         	goto	l326
  1495  0009BE                     l202:
  1496                           
  1497                           ;State_Mchn.c: 80: else if (GETxAPIxVAL(77)){
  1498  0009BE  0E00               	movlw	0
  1499  0009C0  6E14               	movwf	GETxAPIxVAL@index+1,c
  1500  0009C2  0E4D               	movlw	77
  1501  0009C4  6E13               	movwf	GETxAPIxVAL@index,c
  1502  0009C6  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1503  0009CA  5013               	movf	?_GETxAPIxVAL,w,c
  1504  0009CC  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1505  0009CE  B4D8               	btfsc	status,2,c
  1506  0009D0  D016               	goto	l205
  1507                           
  1508                           ;State_Mchn.c: 81: SETxAPIxVAL(69, 1);
  1509  0009D2  0E00               	movlw	0
  1510  0009D4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1511  0009D6  0E45               	movlw	69
  1512  0009D8  6E19               	movwf	SETxAPIxVAL@index,c
  1513  0009DA  0E00               	movlw	0
  1514  0009DC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1515  0009DE  0E01               	movlw	1
  1516  0009E0  6E1B               	movwf	SETxAPIxVAL@value,c
  1517  0009E2  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  1518                           
  1519                           ;State_Mchn.c: 82: SETxAPIxVALxNoxRET(77, 0);
  1520  0009E6  0E00               	movlw	0
  1521  0009E8  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1522  0009EA  0E4D               	movlw	77
  1523  0009EC  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1524  0009EE  0E00               	movlw	0
  1525  0009F0  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1526  0009F2  0E00               	movlw	0
  1527  0009F4  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1528  0009F6  EC20  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1529                           
  1530                           ;State_Mchn.c: 83: }
  1531  0009FA  EF79  F00B         	goto	l326
  1532  0009FE                     l205:
  1533                           
  1534                           ;State_Mchn.c: 84: else if (GETxAPIxVAL(78)){
  1535  0009FE  0E00               	movlw	0
  1536  000A00  6E14               	movwf	GETxAPIxVAL@index+1,c
  1537  000A02  0E4E               	movlw	78
  1538  000A04  6E13               	movwf	GETxAPIxVAL@index,c
  1539  000A06  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1540  000A0A  5013               	movf	?_GETxAPIxVAL,w,c
  1541  000A0C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1542  000A0E  B4D8               	btfsc	status,2,c
  1543  000A10  D016               	goto	l207
  1544                           
  1545                           ;State_Mchn.c: 85: SETxAPIxVAL(69, 0);
  1546  000A12  0E00               	movlw	0
  1547  000A14  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1548  000A16  0E45               	movlw	69
  1549  000A18  6E19               	movwf	SETxAPIxVAL@index,c
  1550  000A1A  0E00               	movlw	0
  1551  000A1C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1552  000A1E  0E00               	movlw	0
  1553  000A20  6E1B               	movwf	SETxAPIxVAL@value,c
  1554  000A22  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  1555                           
  1556                           ;State_Mchn.c: 86: SETxAPIxVALxNoxRET(78, 0);
  1557  000A26  0E00               	movlw	0
  1558  000A28  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1559  000A2A  0E4E               	movlw	78
  1560  000A2C  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1561  000A2E  0E00               	movlw	0
  1562  000A30  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1563  000A32  0E00               	movlw	0
  1564  000A34  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1565  000A36  EC20  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1566                           
  1567                           ;State_Mchn.c: 87: }
  1568  000A3A  EF79  F00B         	goto	l326
  1569  000A3E                     l207:
  1570                           
  1571                           ;State_Mchn.c: 88: else if (GETxAPIxVAL(68) != GETxAPIxVAL(79)){
  1572  000A3E  0E00               	movlw	0
  1573  000A40  6E14               	movwf	GETxAPIxVAL@index+1,c
  1574  000A42  0E44               	movlw	68
  1575  000A44  6E13               	movwf	GETxAPIxVAL@index,c
  1576  000A46  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1577  000A4A  C013  F0B1         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1578  000A4E  C014  F0B2         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1579  000A52  0E00               	movlw	0
  1580  000A54  6E14               	movwf	GETxAPIxVAL@index+1,c
  1581  000A56  0E4F               	movlw	79
  1582  000A58  6E13               	movwf	GETxAPIxVAL@index,c
  1583  000A5A  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1584  000A5E  5013               	movf	?_GETxAPIxVAL,w,c
  1585  000A60  0100               	movlb	0	; () banked
  1586  000A62  19B1               	xorwf	??_Update_StateMchn& (0+255),w,b
  1587  000A64  E104               	bnz	u8720
  1588  000A66  5014               	movf	?_GETxAPIxVAL+1,w,c
  1589  000A68  19B2               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1590  000A6A  B4D8               	btfsc	status,2,c
  1591  000A6C  D02D               	goto	l209
  1592  000A6E                     u8720:
  1593                           
  1594                           ; BSR set to: 0
  1595                           ;State_Mchn.c: 89: SETxAPIxVALxNoxRET(68, GETxAPIxVAL(79));
  1596  000A6E  0E00               	movlw	0
  1597  000A70  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1598  000A72  0E44               	movlw	68
  1599  000A74  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1600  000A76  0E00               	movlw	0
  1601  000A78  6E14               	movwf	GETxAPIxVAL@index+1,c
  1602  000A7A  0E4F               	movlw	79
  1603  000A7C  6E13               	movwf	GETxAPIxVAL@index,c
  1604  000A7E  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1605  000A82  C013  F017         	movff	?_GETxAPIxVAL,SETxAPIxVALxNoxRET@value
  1606  000A86  C014  F018         	movff	?_GETxAPIxVAL+1,SETxAPIxVALxNoxRET@value+1
  1607  000A8A  EC20  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1608                           
  1609                           ;State_Mchn.c: 90: SETxPWM(GETxAPIxVAL(68),GETxAPIxVAL(86));
  1610  000A8E  0E00               	movlw	0
  1611  000A90  6E14               	movwf	GETxAPIxVAL@index+1,c
  1612  000A92  0E44               	movlw	68
  1613  000A94  6E13               	movwf	GETxAPIxVAL@index,c
  1614  000A96  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1615  000A9A  C013  F0B3         	movff	?_GETxAPIxVAL,_Update_StateMchn$2184
  1616  000A9E  C014  F0B4         	movff	?_GETxAPIxVAL+1,_Update_StateMchn$2184+1
  1617                           
  1618                           ;State_Mchn.c: 90: SETxPWM(GETxAPIxVAL(68),GETxAPIxVAL(86));
  1619  000AA2  0E00               	movlw	0
  1620  000AA4  6E14               	movwf	GETxAPIxVAL@index+1,c
  1621  000AA6  0E56               	movlw	86
  1622  000AA8  6E13               	movwf	GETxAPIxVAL@index,c
  1623  000AAA  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1624  000AAE  5013               	movf	?_GETxAPIxVAL,w,c
  1625  000AB0  0100               	movlb	0	; () banked
  1626  000AB2  6FB5               	movwf	_Update_StateMchn$2185& (0+255),b
  1627                           
  1628                           ;State_Mchn.c: 90: SETxPWM(GETxAPIxVAL(68),GETxAPIxVAL(86));
  1629  000AB4  C0B3  F01F         	movff	_Update_StateMchn$2184,SETxPWM@speed
  1630  000AB8  C0B4  F020         	movff	_Update_StateMchn$2184+1,SETxPWM@speed+1
  1631  000ABC  C0B5  F021         	movff	_Update_StateMchn$2185,SETxPWM@direction
  1632  000AC0  EC1A  F01D         	call	_SETxPWM	;wreg free
  1633                           
  1634                           ;State_Mchn.c: 91: }
  1635  000AC4  EF79  F00B         	goto	l326
  1636  000AC8                     l209:
  1637                           
  1638                           ;State_Mchn.c: 92: else if (GETxAPIxVAL(86) != GETxAPIxVAL(81)){
  1639  000AC8  0E00               	movlw	0
  1640  000ACA  6E14               	movwf	GETxAPIxVAL@index+1,c
  1641  000ACC  0E56               	movlw	86
  1642  000ACE  6E13               	movwf	GETxAPIxVAL@index,c
  1643  000AD0  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1644  000AD4  C013  F0B1         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  1645  000AD8  C014  F0B2         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  1646  000ADC  0E00               	movlw	0
  1647  000ADE  6E14               	movwf	GETxAPIxVAL@index+1,c
  1648  000AE0  0E51               	movlw	81
  1649  000AE2  6E13               	movwf	GETxAPIxVAL@index,c
  1650  000AE4  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1651  000AE8  5013               	movf	?_GETxAPIxVAL,w,c
  1652  000AEA  0100               	movlb	0	; () banked
  1653  000AEC  19B1               	xorwf	??_Update_StateMchn& (0+255),w,b
  1654  000AEE  E104               	bnz	u8730
  1655  000AF0  5014               	movf	?_GETxAPIxVAL+1,w,c
  1656  000AF2  19B2               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  1657  000AF4  B4D8               	btfsc	status,2,c
  1658  000AF6  D012               	goto	l211
  1659  000AF8                     u8730:
  1660                           
  1661                           ; BSR set to: 0
  1662                           ;State_Mchn.c: 93: SETxAPIxVALxNoxRET(86, GETxAPIxVAL(81));
  1663  000AF8  0E00               	movlw	0
  1664  000AFA  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1665  000AFC  0E56               	movlw	86
  1666  000AFE  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1667  000B00  0E00               	movlw	0
  1668  000B02  6E14               	movwf	GETxAPIxVAL@index+1,c
  1669  000B04  0E51               	movlw	81
  1670  000B06  6E13               	movwf	GETxAPIxVAL@index,c
  1671  000B08  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1672  000B0C  C013  F017         	movff	?_GETxAPIxVAL,SETxAPIxVALxNoxRET@value
  1673  000B10  C014  F018         	movff	?_GETxAPIxVAL+1,SETxAPIxVALxNoxRET@value+1
  1674  000B14  EC20  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1675                           
  1676                           ;State_Mchn.c: 94: }
  1677  000B18  EF79  F00B         	goto	l326
  1678  000B1C                     l211:
  1679                           
  1680                           ;State_Mchn.c: 95: else if (GETxAPIxVAL(70) && (GETxAPIxVAL(39) == 0 || GETxAPIxVAL(40) 
      +                          == 0)){
  1681  000B1C  0E00               	movlw	0
  1682  000B1E  6E14               	movwf	GETxAPIxVAL@index+1,c
  1683  000B20  0E46               	movlw	70
  1684  000B22  6E13               	movwf	GETxAPIxVAL@index,c
  1685  000B24  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1686  000B28  5013               	movf	?_GETxAPIxVAL,w,c
  1687  000B2A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1688  000B2C  B4D8               	btfsc	status,2,c
  1689  000B2E  EF10  F00A         	goto	l217
  1690  000B32  0E00               	movlw	0
  1691  000B34  6E14               	movwf	GETxAPIxVAL@index+1,c
  1692  000B36  0E27               	movlw	39
  1693  000B38  6E13               	movwf	GETxAPIxVAL@index,c
  1694  000B3A  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1695  000B3E  5013               	movf	?_GETxAPIxVAL,w,c
  1696  000B40  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1697  000B42  B4D8               	btfsc	status,2,c
  1698  000B44  D00B               	goto	u8760
  1699  000B46  0E00               	movlw	0
  1700  000B48  6E14               	movwf	GETxAPIxVAL@index+1,c
  1701  000B4A  0E28               	movlw	40
  1702  000B4C  6E13               	movwf	GETxAPIxVAL@index,c
  1703  000B4E  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1704  000B52  5013               	movf	?_GETxAPIxVAL,w,c
  1705  000B54  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1706  000B56  A4D8               	btfss	status,2,c
  1707  000B58  EF10  F00A         	goto	l217
  1708  000B5C                     u8760:
  1709                           
  1710                           ;State_Mchn.c: 96: SETxAPIxVALxNoxRET(70, 0);
  1711  000B5C  0E00               	movlw	0
  1712  000B5E  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  1713  000B60  0E46               	movlw	70
  1714  000B62  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  1715  000B64  0E00               	movlw	0
  1716  000B66  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  1717  000B68  0E00               	movlw	0
  1718  000B6A  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  1719  000B6C  EC20  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  1720                           
  1721                           ;State_Mchn.c: 97: }
  1722  000B70  EF79  F00B         	goto	l326
  1723  000B74  0E00               	movlw	0
  1724  000B76  ECA9  F01E         	call	_Green_Led
  1725                           
  1726                           ;State_Mchn.c: 103: Red_Led(0);
  1727  000B7A  0E00               	movlw	0
  1728  000B7C  EC64  F01E         	call	_Red_Led
  1729                           
  1730                           ;State_Mchn.c: 104: Switch_Init = 1;
  1731  000B80  0E01               	movlw	1
  1732  000B82  D015               	goto	L1
  1733  000B84                     
  1734                           ; BSR set to: 0
  1735                           
  1736                           ; BSR set to: 0
  1737  000B84  0E00               	movlw	0
  1738  000B86  6E14               	movwf	GETxAPIxVAL@index+1,c
  1739  000B88  0E23               	movlw	35
  1740  000B8A  6E13               	movwf	GETxAPIxVAL@index,c
  1741  000B8C  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1742  000B90  5013               	movf	?_GETxAPIxVAL,w,c
  1743  000B92  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1744  000B94  B4D8               	btfsc	status,2,c
  1745  000B96  D00F               	goto	l221
  1746                           
  1747                           ;State_Mchn.c: 108: {
  1748                           ;State_Mchn.c: 109: SETxAPIxVAL(39, 1);
  1749  000B98  0E00               	movlw	0
  1750  000B9A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1751  000B9C  0E27               	movlw	39
  1752  000B9E  6E19               	movwf	SETxAPIxVAL@index,c
  1753  000BA0  0E00               	movlw	0
  1754  000BA2  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1755  000BA4  0E01               	movlw	1
  1756  000BA6  6E1B               	movwf	SETxAPIxVAL@value,c
  1757  000BA8  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  1758  000BAC  D057               	goto	l8630
  1759  000BAE                     L1:
  1760  000BAE  0100               	movlb	0	; () banked
  1761  000BB0                     L2:
  1762  000BB0  6F8C               	movwf	_Switch_Init& (0+255),b
  1763                           
  1764                           ;State_Mchn.c: 111: break;
  1765  000BB2  EF79  F00B         	goto	l326
  1766  000BB6                     l221:
  1767                           
  1768                           ;State_Mchn.c: 112: }
  1769                           ;State_Mchn.c: 113: if(GETxAPIxVAL(36))
  1770                           
  1771                           ; BSR set to: 0
  1772  000BB6  0E00               	movlw	0
  1773  000BB8  6E14               	movwf	GETxAPIxVAL@index+1,c
  1774  000BBA  0E24               	movlw	36
  1775  000BBC  6E13               	movwf	GETxAPIxVAL@index,c
  1776  000BBE  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1777  000BC2  5013               	movf	?_GETxAPIxVAL,w,c
  1778  000BC4  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1779  000BC6  B4D8               	btfsc	status,2,c
  1780  000BC8  D00B               	goto	l222
  1781                           
  1782                           ;State_Mchn.c: 114: {
  1783                           ;State_Mchn.c: 115: SETxAPIxVAL(39, 2);
  1784  000BCA  0E00               	movlw	0
  1785  000BCC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1786  000BCE  0E27               	movlw	39
  1787  000BD0  6E19               	movwf	SETxAPIxVAL@index,c
  1788  000BD2  0E00               	movlw	0
  1789  000BD4  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1790  000BD6  0E02               	movlw	2
  1791  000BD8  6E1B               	movwf	SETxAPIxVAL@value,c
  1792  000BDA  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  1793  000BDE  D03E               	goto	l8630
  1794  000BE0                     l222:
  1795                           
  1796                           ;State_Mchn.c: 118: }
  1797                           ;State_Mchn.c: 119: if(GETxAPIxVAL(37))
  1798                           
  1799                           ; BSR set to: 0
  1800  000BE0  0E00               	movlw	0
  1801  000BE2  6E14               	movwf	GETxAPIxVAL@index+1,c
  1802  000BE4  0E25               	movlw	37
  1803  000BE6  6E13               	movwf	GETxAPIxVAL@index,c
  1804  000BE8  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1805  000BEC  5013               	movf	?_GETxAPIxVAL,w,c
  1806  000BEE  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1807  000BF0  B4D8               	btfsc	status,2,c
  1808  000BF2  D00B               	goto	l223
  1809                           
  1810                           ;State_Mchn.c: 120: {
  1811                           ;State_Mchn.c: 121: SETxAPIxVAL(39, 3);
  1812  000BF4  0E00               	movlw	0
  1813  000BF6  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1814  000BF8  0E27               	movlw	39
  1815  000BFA  6E19               	movwf	SETxAPIxVAL@index,c
  1816  000BFC  0E00               	movlw	0
  1817  000BFE  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1818  000C00  0E03               	movlw	3
  1819  000C02  6E1B               	movwf	SETxAPIxVAL@value,c
  1820  000C04  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  1821  000C08  D029               	goto	l8630
  1822  000C0A                     l223:
  1823                           
  1824                           ;State_Mchn.c: 124: }
  1825                           ;State_Mchn.c: 125: if(GETxAPIxVAL(38))
  1826                           
  1827                           ; BSR set to: 0
  1828  000C0A  0E00               	movlw	0
  1829  000C0C  6E14               	movwf	GETxAPIxVAL@index+1,c
  1830  000C0E  0E26               	movlw	38
  1831  000C10  6E13               	movwf	GETxAPIxVAL@index,c
  1832  000C12  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1833  000C16  5013               	movf	?_GETxAPIxVAL,w,c
  1834  000C18  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1835  000C1A  B4D8               	btfsc	status,2,c
  1836  000C1C  D00B               	goto	l224
  1837                           
  1838                           ;State_Mchn.c: 126: {
  1839                           ;State_Mchn.c: 127: SETxAPIxVAL(39, 4);
  1840  000C1E  0E00               	movlw	0
  1841  000C20  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1842  000C22  0E27               	movlw	39
  1843  000C24  6E19               	movwf	SETxAPIxVAL@index,c
  1844  000C26  0E00               	movlw	0
  1845  000C28  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1846  000C2A  0E04               	movlw	4
  1847  000C2C  6E1B               	movwf	SETxAPIxVAL@value,c
  1848  000C2E  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  1849  000C32  D014               	goto	l8630
  1850  000C34                     l224:
  1851                           
  1852                           ;State_Mchn.c: 130: }
  1853                           ;State_Mchn.c: 131: if(GETxAPIxVAL(34))
  1854                           
  1855                           ; BSR set to: 0
  1856  000C34  0E00               	movlw	0
  1857  000C36  6E14               	movwf	GETxAPIxVAL@index+1,c
  1858  000C38  0E22               	movlw	34
  1859  000C3A  6E13               	movwf	GETxAPIxVAL@index,c
  1860  000C3C  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1861  000C40  5013               	movf	?_GETxAPIxVAL,w,c
  1862  000C42  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1863  000C44  B4D8               	btfsc	status,2,c
  1864  000C46  D00C               	goto	l225
  1865                           
  1866                           ;State_Mchn.c: 132: {
  1867                           ;State_Mchn.c: 133: SETxAPIxVAL(39, 5);
  1868  000C48  0E00               	movlw	0
  1869  000C4A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  1870  000C4C  0E27               	movlw	39
  1871  000C4E  6E19               	movwf	SETxAPIxVAL@index,c
  1872  000C50  0E00               	movlw	0
  1873  000C52  6E1C               	movwf	SETxAPIxVAL@value+1,c
  1874  000C54  0E05               	movlw	5
  1875  000C56  6E1B               	movwf	SETxAPIxVAL@value,c
  1876  000C58  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  1877  000C5C                     l8630:
  1878                           
  1879                           ;State_Mchn.c: 134: Switch_Init = 2;
  1880  000C5C  0E02               	movlw	2
  1881  000C5E  D7A7               	goto	L1
  1882  000C60                     l225:
  1883                           
  1884                           ;State_Mchn.c: 136: }
  1885                           ;State_Mchn.c: 137: if(GETxAPIxVAL(39) > 0 && GETxAPIxVAL(40) > 0){
  1886                           
  1887                           ; BSR set to: 0
  1888  000C60  0E00               	movlw	0
  1889  000C62  6E14               	movwf	GETxAPIxVAL@index+1,c
  1890  000C64  0E27               	movlw	39
  1891  000C66  6E13               	movwf	GETxAPIxVAL@index,c
  1892  000C68  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1893  000C6C  5013               	movf	?_GETxAPIxVAL,w,c
  1894  000C6E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1895  000C70  B4D8               	btfsc	status,2,c
  1896  000C72  D00A               	goto	l226
  1897  000C74  0E00               	movlw	0
  1898  000C76  6E14               	movwf	GETxAPIxVAL@index+1,c
  1899  000C78  0E28               	movlw	40
  1900  000C7A  6E13               	movwf	GETxAPIxVAL@index,c
  1901  000C7C  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1902  000C80  5013               	movf	?_GETxAPIxVAL,w,c
  1903  000C82  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1904  000C84  A4D8               	btfss	status,2,c
  1905  000C86  D0E1               	goto	u8970
  1906  000C88                     l226:
  1907                           
  1908                           ;State_Mchn.c: 140: }
  1909                           ;State_Mchn.c: 141: Switch_Init = 1;
  1910                           
  1911                           ; BSR set to: 0
  1912  000C88  0E01               	movlw	1
  1913  000C8A  0100               	movlb	0	; () banked
  1914  000C8C  6F8C               	movwf	_Switch_Init& (0+255),b
  1915                           
  1916                           ; BSR set to: 0
  1917                           ;State_Mchn.c: 142: Green_Led(2);
  1918  000C8E  0E02               	movlw	2
  1919  000C90  ECA9  F01E         	call	_Green_Led
  1920                           
  1921                           ;State_Mchn.c: 143: break;
  1922  000C94  EF79  F00B         	goto	l326
  1923  000C98  0E00               	movlw	0
  1924  000C9A  6E14               	movwf	GETxAPIxVAL@index+1,c
  1925  000C9C  0E23               	movlw	35
  1926  000C9E  6E13               	movwf	GETxAPIxVAL@index,c
  1927  000CA0  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1928  000CA4  5013               	movf	?_GETxAPIxVAL,w,c
  1929  000CA6  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1930  000CA8  A4D8               	btfss	status,2,c
  1931  000CAA  D035               	goto	l228
  1932  000CAC  0E00               	movlw	0
  1933  000CAE  6E14               	movwf	GETxAPIxVAL@index+1,c
  1934  000CB0  0E24               	movlw	36
  1935  000CB2  6E13               	movwf	GETxAPIxVAL@index,c
  1936  000CB4  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1937  000CB8  5013               	movf	?_GETxAPIxVAL,w,c
  1938  000CBA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1939  000CBC  A4D8               	btfss	status,2,c
  1940  000CBE  D02B               	goto	l228
  1941  000CC0  0E00               	movlw	0
  1942  000CC2  6E14               	movwf	GETxAPIxVAL@index+1,c
  1943  000CC4  0E25               	movlw	37
  1944  000CC6  6E13               	movwf	GETxAPIxVAL@index,c
  1945  000CC8  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1946  000CCC  5013               	movf	?_GETxAPIxVAL,w,c
  1947  000CCE  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1948  000CD0  A4D8               	btfss	status,2,c
  1949  000CD2  D021               	goto	l228
  1950  000CD4  0E00               	movlw	0
  1951  000CD6  6E14               	movwf	GETxAPIxVAL@index+1,c
  1952  000CD8  0E26               	movlw	38
  1953  000CDA  6E13               	movwf	GETxAPIxVAL@index,c
  1954  000CDC  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1955  000CE0  5013               	movf	?_GETxAPIxVAL,w,c
  1956  000CE2  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1957  000CE4  A4D8               	btfss	status,2,c
  1958  000CE6  D017               	goto	l228
  1959  000CE8  0E00               	movlw	0
  1960  000CEA  6E14               	movwf	GETxAPIxVAL@index+1,c
  1961  000CEC  0E22               	movlw	34
  1962  000CEE  6E13               	movwf	GETxAPIxVAL@index,c
  1963  000CF0  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1964  000CF4  5013               	movf	?_GETxAPIxVAL,w,c
  1965  000CF6  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1966  000CF8  A4D8               	btfss	status,2,c
  1967  000CFA  D00D               	goto	l228
  1968  000CFC  0E00               	movlw	0
  1969  000CFE  6E14               	movwf	GETxAPIxVAL@index+1,c
  1970  000D00  0E20               	movlw	32
  1971  000D02  6E13               	movwf	GETxAPIxVAL@index,c
  1972  000D04  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  1973  000D08  5013               	movf	?_GETxAPIxVAL,w,c
  1974  000D0A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  1975  000D0C  A4D8               	btfss	status,2,c
  1976  000D0E  D003               	goto	l228
  1977                           
  1978                           ;State_Mchn.c: 146: {
  1979                           ;State_Mchn.c: 147: Switch_Init = 3;
  1980  000D10  0E03               	movlw	3
  1981  000D12  0100               	movlb	0	; () banked
  1982  000D14  6F8C               	movwf	_Switch_Init& (0+255),b
  1983  000D16                     l228:
  1984                           
  1985                           ;State_Mchn.c: 148: }
  1986                           ;State_Mchn.c: 149: Red_Led(0);
  1987                           
  1988                           ; BSR set to: 0
  1989  000D16  0E00               	movlw	0
  1990  000D18  EC64  F01E         	call	_Red_Led
  1991                           
  1992                           ;State_Mchn.c: 150: Green_Led(2);
  1993  000D1C  0E02               	movlw	2
  1994  000D1E  ECA9  F01E         	call	_Green_Led
  1995                           
  1996                           ;State_Mchn.c: 151: break;
  1997  000D22  EF79  F00B         	goto	l326
  1998  000D26  0E00               	movlw	0
  1999  000D28  6E14               	movwf	GETxAPIxVAL@index+1,c
  2000  000D2A  0E23               	movlw	35
  2001  000D2C  6E13               	movwf	GETxAPIxVAL@index,c
  2002  000D2E  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2003  000D32  5013               	movf	?_GETxAPIxVAL,w,c
  2004  000D34  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2005  000D36  B4D8               	btfsc	status,2,c
  2006  000D38  D00B               	goto	l230
  2007                           
  2008                           ;State_Mchn.c: 154: {
  2009                           ;State_Mchn.c: 155: SETxAPIxVAL(40, 1);
  2010  000D3A  0E00               	movlw	0
  2011  000D3C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2012  000D3E  0E28               	movlw	40
  2013  000D40  6E19               	movwf	SETxAPIxVAL@index,c
  2014  000D42  0E00               	movlw	0
  2015  000D44  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2016  000D46  0E01               	movlw	1
  2017  000D48  6E1B               	movwf	SETxAPIxVAL@value,c
  2018  000D4A  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  2019  000D4E  D07D               	goto	u8970
  2020  000D50                     l230:
  2021                           
  2022                           ;State_Mchn.c: 158: }
  2023                           ;State_Mchn.c: 159: if(GETxAPIxVAL(36))
  2024                           
  2025                           ; BSR set to: 0
  2026  000D50  0E00               	movlw	0
  2027  000D52  6E14               	movwf	GETxAPIxVAL@index+1,c
  2028  000D54  0E24               	movlw	36
  2029  000D56  6E13               	movwf	GETxAPIxVAL@index,c
  2030  000D58  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2031  000D5C  5013               	movf	?_GETxAPIxVAL,w,c
  2032  000D5E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2033  000D60  B4D8               	btfsc	status,2,c
  2034  000D62  D00B               	goto	l231
  2035                           
  2036                           ;State_Mchn.c: 160: {
  2037                           ;State_Mchn.c: 161: SETxAPIxVAL(40, 2);
  2038  000D64  0E00               	movlw	0
  2039  000D66  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2040  000D68  0E28               	movlw	40
  2041  000D6A  6E19               	movwf	SETxAPIxVAL@index,c
  2042  000D6C  0E00               	movlw	0
  2043  000D6E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2044  000D70  0E02               	movlw	2
  2045  000D72  6E1B               	movwf	SETxAPIxVAL@value,c
  2046  000D74  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  2047  000D78  D068               	goto	u8970
  2048  000D7A                     l231:
  2049                           
  2050                           ;State_Mchn.c: 164: }
  2051                           ;State_Mchn.c: 165: if(GETxAPIxVAL(37))
  2052                           
  2053                           ; BSR set to: 0
  2054  000D7A  0E00               	movlw	0
  2055  000D7C  6E14               	movwf	GETxAPIxVAL@index+1,c
  2056  000D7E  0E25               	movlw	37
  2057  000D80  6E13               	movwf	GETxAPIxVAL@index,c
  2058  000D82  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2059  000D86  5013               	movf	?_GETxAPIxVAL,w,c
  2060  000D88  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2061  000D8A  B4D8               	btfsc	status,2,c
  2062  000D8C  D00B               	goto	l232
  2063                           
  2064                           ;State_Mchn.c: 166: {
  2065                           ;State_Mchn.c: 167: SETxAPIxVAL(40, 3);
  2066  000D8E  0E00               	movlw	0
  2067  000D90  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2068  000D92  0E28               	movlw	40
  2069  000D94  6E19               	movwf	SETxAPIxVAL@index,c
  2070  000D96  0E00               	movlw	0
  2071  000D98  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2072  000D9A  0E03               	movlw	3
  2073  000D9C  6E1B               	movwf	SETxAPIxVAL@value,c
  2074  000D9E  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  2075  000DA2  D053               	goto	u8970
  2076  000DA4                     l232:
  2077                           
  2078                           ;State_Mchn.c: 170: }
  2079                           ;State_Mchn.c: 171: if(GETxAPIxVAL(38))
  2080                           
  2081                           ; BSR set to: 0
  2082  000DA4  0E00               	movlw	0
  2083  000DA6  6E14               	movwf	GETxAPIxVAL@index+1,c
  2084  000DA8  0E26               	movlw	38
  2085  000DAA  6E13               	movwf	GETxAPIxVAL@index,c
  2086  000DAC  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2087  000DB0  5013               	movf	?_GETxAPIxVAL,w,c
  2088  000DB2  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2089  000DB4  B4D8               	btfsc	status,2,c
  2090  000DB6  D00B               	goto	l233
  2091                           
  2092                           ;State_Mchn.c: 172: {
  2093                           ;State_Mchn.c: 173: SETxAPIxVAL(40, 4);
  2094  000DB8  0E00               	movlw	0
  2095  000DBA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2096  000DBC  0E28               	movlw	40
  2097  000DBE  6E19               	movwf	SETxAPIxVAL@index,c
  2098  000DC0  0E00               	movlw	0
  2099  000DC2  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2100  000DC4  0E04               	movlw	4
  2101  000DC6  6E1B               	movwf	SETxAPIxVAL@value,c
  2102  000DC8  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  2103  000DCC  D03E               	goto	u8970
  2104  000DCE                     l233:
  2105                           
  2106                           ;State_Mchn.c: 176: }
  2107                           ;State_Mchn.c: 177: if(GETxAPIxVAL(34))
  2108                           
  2109                           ; BSR set to: 0
  2110  000DCE  0E00               	movlw	0
  2111  000DD0  6E14               	movwf	GETxAPIxVAL@index+1,c
  2112  000DD2  0E22               	movlw	34
  2113  000DD4  6E13               	movwf	GETxAPIxVAL@index,c
  2114  000DD6  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2115  000DDA  5013               	movf	?_GETxAPIxVAL,w,c
  2116  000DDC  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2117  000DDE  B4D8               	btfsc	status,2,c
  2118  000DE0  D00B               	goto	l234
  2119                           
  2120                           ;State_Mchn.c: 178: {
  2121                           ;State_Mchn.c: 179: SETxAPIxVAL(40, 5);
  2122  000DE2  0E00               	movlw	0
  2123  000DE4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2124  000DE6  0E28               	movlw	40
  2125  000DE8  6E19               	movwf	SETxAPIxVAL@index,c
  2126  000DEA  0E00               	movlw	0
  2127  000DEC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2128  000DEE  0E05               	movlw	5
  2129  000DF0  6E1B               	movwf	SETxAPIxVAL@value,c
  2130  000DF2  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  2131  000DF6  D029               	goto	u8970
  2132  000DF8                     l234:
  2133                           
  2134                           ;State_Mchn.c: 182: }
  2135                           ;State_Mchn.c: 183: if(GETxAPIxVAL(32))
  2136                           
  2137                           ; BSR set to: 0
  2138  000DF8  0E00               	movlw	0
  2139  000DFA  6E14               	movwf	GETxAPIxVAL@index+1,c
  2140  000DFC  0E20               	movlw	32
  2141  000DFE  6E13               	movwf	GETxAPIxVAL@index,c
  2142  000E00  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2143  000E04  5013               	movf	?_GETxAPIxVAL,w,c
  2144  000E06  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2145  000E08  B4D8               	btfsc	status,2,c
  2146  000E0A  D00B               	goto	l235
  2147                           
  2148                           ;State_Mchn.c: 184: {
  2149                           ;State_Mchn.c: 185: SETxAPIxVAL(40, 9);
  2150  000E0C  0E00               	movlw	0
  2151  000E0E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2152  000E10  0E28               	movlw	40
  2153  000E12  6E19               	movwf	SETxAPIxVAL@index,c
  2154  000E14  0E00               	movlw	0
  2155  000E16  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2156  000E18  0E09               	movlw	9
  2157  000E1A  6E1B               	movwf	SETxAPIxVAL@value,c
  2158  000E1C  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  2159  000E20  D014               	goto	u8970
  2160  000E22                     l235:
  2161                           
  2162                           ;State_Mchn.c: 188: }
  2163                           ;State_Mchn.c: 189: if(GETxAPIxVAL(39) > 0 && GETxAPIxVAL(40) > 0){
  2164                           
  2165                           ; BSR set to: 0
  2166  000E22  0E00               	movlw	0
  2167  000E24  6E14               	movwf	GETxAPIxVAL@index+1,c
  2168  000E26  0E27               	movlw	39
  2169  000E28  6E13               	movwf	GETxAPIxVAL@index,c
  2170  000E2A  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2171  000E2E  5013               	movf	?_GETxAPIxVAL,w,c
  2172  000E30  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2173  000E32  B4D8               	btfsc	status,2,c
  2174  000E34  D00C               	goto	l236
  2175  000E36  0E00               	movlw	0
  2176  000E38  6E14               	movwf	GETxAPIxVAL@index+1,c
  2177  000E3A  0E28               	movlw	40
  2178  000E3C  6E13               	movwf	GETxAPIxVAL@index,c
  2179  000E3E  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2180  000E42  5013               	movf	?_GETxAPIxVAL,w,c
  2181  000E44  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2182  000E46  B4D8               	btfsc	status,2,c
  2183  000E48  D002               	goto	l236
  2184  000E4A                     u8970:
  2185                           
  2186                           ;State_Mchn.c: 190: Switch_Init = 4;
  2187  000E4A  0E04               	movlw	4
  2188  000E4C  D6B0               	goto	L1
  2189  000E4E                     l236:
  2190                           
  2191                           ;State_Mchn.c: 192: }
  2192                           ;State_Mchn.c: 193: Green_Led(2);
  2193                           
  2194                           ; BSR set to: 0
  2195  000E4E  0E02               	movlw	2
  2196  000E50  ECA9  F01E         	call	_Green_Led
  2197                           
  2198                           ;State_Mchn.c: 194: Switch_Init = 3;
  2199  000E54  0E03               	movlw	3
  2200  000E56  D6AB               	goto	L1
  2201  000E58                     
  2202                           ; BSR set to: 0
  2203                           
  2204                           ; BSR set to: 0
  2205  000E58  0E00               	movlw	0
  2206  000E5A  6E14               	movwf	GETxAPIxVAL@index+1,c
  2207  000E5C  0E23               	movlw	35
  2208  000E5E  6E13               	movwf	GETxAPIxVAL@index,c
  2209  000E60  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2210  000E64  5013               	movf	?_GETxAPIxVAL,w,c
  2211  000E66  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2212  000E68  A4D8               	btfss	status,2,c
  2213  000E6A  D07E               	goto	l240
  2214  000E6C  0E00               	movlw	0
  2215  000E6E  6E14               	movwf	GETxAPIxVAL@index+1,c
  2216  000E70  0E24               	movlw	36
  2217  000E72  6E13               	movwf	GETxAPIxVAL@index,c
  2218  000E74  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2219  000E78  5013               	movf	?_GETxAPIxVAL,w,c
  2220  000E7A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2221  000E7C  A4D8               	btfss	status,2,c
  2222  000E7E  D074               	goto	l240
  2223  000E80  0E00               	movlw	0
  2224  000E82  6E14               	movwf	GETxAPIxVAL@index+1,c
  2225  000E84  0E25               	movlw	37
  2226  000E86  6E13               	movwf	GETxAPIxVAL@index,c
  2227  000E88  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2228  000E8C  5013               	movf	?_GETxAPIxVAL,w,c
  2229  000E8E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2230  000E90  A4D8               	btfss	status,2,c
  2231  000E92  D06A               	goto	l240
  2232  000E94  0E00               	movlw	0
  2233  000E96  6E14               	movwf	GETxAPIxVAL@index+1,c
  2234  000E98  0E26               	movlw	38
  2235  000E9A  6E13               	movwf	GETxAPIxVAL@index,c
  2236  000E9C  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2237  000EA0  5013               	movf	?_GETxAPIxVAL,w,c
  2238  000EA2  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2239  000EA4  A4D8               	btfss	status,2,c
  2240  000EA6  D060               	goto	l240
  2241  000EA8  0E00               	movlw	0
  2242  000EAA  6E14               	movwf	GETxAPIxVAL@index+1,c
  2243  000EAC  0E22               	movlw	34
  2244  000EAE  6E13               	movwf	GETxAPIxVAL@index,c
  2245  000EB0  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2246  000EB4  5013               	movf	?_GETxAPIxVAL,w,c
  2247  000EB6  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2248  000EB8  A4D8               	btfss	status,2,c
  2249  000EBA  D056               	goto	l240
  2250  000EBC  0E00               	movlw	0
  2251  000EBE  6E14               	movwf	GETxAPIxVAL@index+1,c
  2252  000EC0  0E20               	movlw	32
  2253  000EC2  6E13               	movwf	GETxAPIxVAL@index,c
  2254  000EC4  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2255  000EC8  5013               	movf	?_GETxAPIxVAL,w,c
  2256  000ECA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2257  000ECC  A4D8               	btfss	status,2,c
  2258  000ECE  D04C               	goto	l240
  2259                           
  2260                           ;State_Mchn.c: 198: {
  2261                           ;State_Mchn.c: 199: if(GETxAPIxVAL(39) == GETxAPIxVAL(40))
  2262  000ED0  0E00               	movlw	0
  2263  000ED2  6E14               	movwf	GETxAPIxVAL@index+1,c
  2264  000ED4  0E27               	movlw	39
  2265  000ED6  6E13               	movwf	GETxAPIxVAL@index,c
  2266  000ED8  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2267  000EDC  C013  F0B1         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  2268  000EE0  C014  F0B2         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  2269  000EE4  0E00               	movlw	0
  2270  000EE6  6E14               	movwf	GETxAPIxVAL@index+1,c
  2271  000EE8  0E28               	movlw	40
  2272  000EEA  6E13               	movwf	GETxAPIxVAL@index,c
  2273  000EEC  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2274  000EF0  5013               	movf	?_GETxAPIxVAL,w,c
  2275  000EF2  0100               	movlb	0	; () banked
  2276  000EF4  19B1               	xorwf	??_Update_StateMchn& (0+255),w,b
  2277  000EF6  E11E               	bnz	l8724
  2278  000EF8  5014               	movf	?_GETxAPIxVAL+1,w,c
  2279  000EFA  19B2               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  2280  000EFC  A4D8               	btfss	status,2,c
  2281  000EFE  D01A               	goto	l239
  2282                           
  2283                           ; BSR set to: 0
  2284                           ;State_Mchn.c: 200: {
  2285                           ;State_Mchn.c: 201: SETxAPIxVAL(40, 0);
  2286  000F00  0E00               	movlw	0
  2287  000F02  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2288  000F04  0E28               	movlw	40
  2289  000F06  6E19               	movwf	SETxAPIxVAL@index,c
  2290  000F08  0E00               	movlw	0
  2291  000F0A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2292  000F0C  0E00               	movlw	0
  2293  000F0E  6E1B               	movwf	SETxAPIxVAL@value,c
  2294  000F10  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  2295                           
  2296                           ;State_Mchn.c: 202: SETxAPIxVAL(39, 0);
  2297  000F14  0E00               	movlw	0
  2298  000F16  6E1A               	movwf	SETxAPIxVAL@index+1,c
  2299  000F18  0E27               	movlw	39
  2300  000F1A  6E19               	movwf	SETxAPIxVAL@index,c
  2301  000F1C  0E00               	movlw	0
  2302  000F1E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  2303  000F20  0E00               	movlw	0
  2304  000F22  6E1B               	movwf	SETxAPIxVAL@value,c
  2305  000F24  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  2306                           
  2307                           ;State_Mchn.c: 203: Red_Led(1);
  2308  000F28  0E01               	movlw	1
  2309  000F2A  EC64  F01E         	call	_Red_Led
  2310                           
  2311                           ;State_Mchn.c: 204: Switch_Init = 1;
  2312  000F2E  0E01               	movlw	1
  2313  000F30  0100               	movlb	0	; () banked
  2314  000F32  6F8C               	movwf	_Switch_Init& (0+255),b
  2315  000F34                     l239:
  2316  000F34                     l8724:
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;State_Mchn.c: 206: }
  2320                           ;State_Mchn.c: 207: if(GETxAPIxVAL(39) != GETxAPIxVAL(40))
  2321  000F34  0E00               	movlw	0
  2322  000F36  6E14               	movwf	GETxAPIxVAL@index+1,c
  2323  000F38  0E27               	movlw	39
  2324  000F3A  6E13               	movwf	GETxAPIxVAL@index,c
  2325  000F3C  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2326  000F40  C013  F0B1         	movff	?_GETxAPIxVAL,??_Update_StateMchn
  2327  000F44  C014  F0B2         	movff	?_GETxAPIxVAL+1,??_Update_StateMchn+1
  2328  000F48  0E00               	movlw	0
  2329  000F4A  6E14               	movwf	GETxAPIxVAL@index+1,c
  2330  000F4C  0E28               	movlw	40
  2331  000F4E  6E13               	movwf	GETxAPIxVAL@index,c
  2332  000F50  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2333  000F54  5013               	movf	?_GETxAPIxVAL,w,c
  2334  000F56  0100               	movlb	0	; () banked
  2335  000F58  19B1               	xorwf	??_Update_StateMchn& (0+255),w,b
  2336  000F5A  E104               	bnz	u9050
  2337  000F5C  5014               	movf	?_GETxAPIxVAL+1,w,c
  2338  000F5E  19B2               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  2339  000F60  B4D8               	btfsc	status,2,c
  2340  000F62  D002               	goto	l240
  2341  000F64                     u9050:
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;State_Mchn.c: 208: {
  2345                           ;State_Mchn.c: 209: Switch_Init = 5;
  2346  000F64  0E05               	movlw	5
  2347  000F66  6F8C               	movwf	_Switch_Init& (0+255),b
  2348  000F68                     l240:
  2349                           
  2350                           ;State_Mchn.c: 210: }
  2351                           ;State_Mchn.c: 211: }
  2352                           ;State_Mchn.c: 212: Green_Led(2);
  2353                           
  2354                           ; BSR set to: 0
  2355                           
  2356                           ; BSR set to: 0
  2357  000F68  0E02               	movlw	2
  2358  000F6A  ECA9  F01E         	call	_Green_Led
  2359                           
  2360                           ;State_Mchn.c: 213: break;
  2361  000F6E  D3C1               	goto	l326
  2362  000F70  0E00               	movlw	0
  2363  000F72  6E14               	movwf	GETxAPIxVAL@index+1,c
  2364  000F74  0E28               	movlw	40
  2365  000F76  6E13               	movwf	GETxAPIxVAL@index,c
  2366  000F78  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2367  000F7C  0E09               	movlw	9
  2368  000F7E  1813               	xorwf	?_GETxAPIxVAL,w,c
  2369  000F80  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2370  000F82  B4D8               	btfsc	status,2,c
  2371  000F84  D003               	goto	l242
  2372                           
  2373                           ;State_Mchn.c: 216: {
  2374                           ;State_Mchn.c: 217: Switch_Init = 6;
  2375  000F86  0E06               	movlw	6
  2376  000F88  0100               	movlb	0	; () banked
  2377  000F8A  6F8C               	movwf	_Switch_Init& (0+255),b
  2378  000F8C                     l242:
  2379                           
  2380                           ;State_Mchn.c: 218: }
  2381                           ;State_Mchn.c: 219: if(GETxAPIxVAL(40) == 9)
  2382                           
  2383                           ; BSR set to: 0
  2384  000F8C  0E00               	movlw	0
  2385  000F8E  6E14               	movwf	GETxAPIxVAL@index+1,c
  2386  000F90  0E28               	movlw	40
  2387  000F92  6E13               	movwf	GETxAPIxVAL@index,c
  2388  000F94  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2389  000F98  0E09               	movlw	9
  2390  000F9A  1813               	xorwf	?_GETxAPIxVAL,w,c
  2391  000F9C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2392  000F9E  A4D8               	btfss	status,2,c
  2393  000FA0  D3A8               	goto	l326
  2394                           
  2395                           ;State_Mchn.c: 220: {
  2396                           ;State_Mchn.c: 221: Switch_Init = 9;
  2397  000FA2  0E09               	movlw	9
  2398  000FA4  D604               	goto	L1
  2399  000FA6                     
  2400                           ; BSR set to: 0
  2401                           
  2402                           ; BSR set to: 0
  2403  000FA6  0E08               	movlw	8
  2404  000FA8  D603               	goto	L2
  2405  000FAA                     
  2406                           ; BSR set to: 0
  2407                           
  2408                           ; BSR set to: 0
  2409  000FAA  0E00               	movlw	0
  2410  000FAC  6E14               	movwf	GETxAPIxVAL@index+1,c
  2411  000FAE  0E20               	movlw	32
  2412  000FB0  6E13               	movwf	GETxAPIxVAL@index,c
  2413  000FB2  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2414  000FB6  5013               	movf	?_GETxAPIxVAL,w,c
  2415  000FB8  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2416  000FBA  A4D8               	btfss	status,2,c
  2417  000FBC  D00A               	goto	u9090
  2418  000FBE  0E00               	movlw	0
  2419  000FC0  6E14               	movwf	GETxAPIxVAL@index+1,c
  2420  000FC2  0E46               	movlw	70
  2421  000FC4  6E13               	movwf	GETxAPIxVAL@index,c
  2422  000FC6  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2423  000FCA  5013               	movf	?_GETxAPIxVAL,w,c
  2424  000FCC  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2425  000FCE  B4D8               	btfsc	status,2,c
  2426  000FD0  D012               	goto	l246
  2427  000FD2                     u9090:
  2428                           
  2429                           ;State_Mchn.c: 229: {
  2430                           ;State_Mchn.c: 230: Switch_Main = 2;
  2431  000FD2  0E02               	movlw	2
  2432  000FD4  0100               	movlb	0	; () banked
  2433  000FD6  6FC5               	movwf	_Switch_Main& (0+255),b
  2434                           
  2435                           ;State_Mchn.c: 231: Switch_Init = 0;
  2436  000FD8  0E00               	movlw	0
  2437  000FDA  6F8C               	movwf	_Switch_Init& (0+255),b
  2438                           
  2439                           ;State_Mchn.c: 232: Stop_Program = 0;
  2440  000FDC  0E00               	movlw	0
  2441  000FDE  6F87               	movwf	_Stop_Program& (0+255),b
  2442                           
  2443                           ; BSR set to: 0
  2444                           ;State_Mchn.c: 233: SETxAPIxVALxNoxRET(70, 0);
  2445  000FE0  0E00               	movlw	0
  2446  000FE2  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  2447  000FE4  0E46               	movlw	70
  2448  000FE6  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  2449  000FE8  0E00               	movlw	0
  2450  000FEA  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  2451  000FEC  0E00               	movlw	0
  2452  000FEE  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  2453  000FF0  EC20  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  2454                           
  2455                           ;State_Mchn.c: 234: }
  2456  000FF4  D026               	goto	l250
  2457  000FF6                     l246:
  2458                           
  2459                           ;State_Mchn.c: 236: else if (Train_Pos1_Temp != GETxAPIxVAL(39) || Train_Pos1_Temp != GE
      +                          TxAPIxVAL(40)){
  2460  000FF6  0E00               	movlw	0
  2461  000FF8  6E14               	movwf	GETxAPIxVAL@index+1,c
  2462  000FFA  0E27               	movlw	39
  2463  000FFC  6E13               	movwf	GETxAPIxVAL@index,c
  2464  000FFE  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2465  001002  0100               	movlb	0	; () banked
  2466  001004  5186               	movf	_Train_Pos1_Temp& (0+255),w,b
  2467  001006  6FB1               	movwf	??_Update_StateMchn& (0+255),b
  2468  001008  6BB2               	clrf	(??_Update_StateMchn+1)& (0+255),b
  2469  00100A  5013               	movf	?_GETxAPIxVAL,w,c
  2470  00100C  19B1               	xorwf	??_Update_StateMchn& (0+255),w,b
  2471  00100E  E115               	bnz	l8752
  2472  001010  5014               	movf	?_GETxAPIxVAL+1,w,c
  2473  001012  19B2               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  2474  001014  A4D8               	btfss	status,2,c
  2475  001016  D011               	goto	u9110
  2476                           
  2477                           ; BSR set to: 0
  2478  001018  0E00               	movlw	0
  2479  00101A  6E14               	movwf	GETxAPIxVAL@index+1,c
  2480  00101C  0E28               	movlw	40
  2481  00101E  6E13               	movwf	GETxAPIxVAL@index,c
  2482  001020  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2483  001024  0100               	movlb	0	; () banked
  2484  001026  5186               	movf	_Train_Pos1_Temp& (0+255),w,b
  2485  001028  6FB1               	movwf	??_Update_StateMchn& (0+255),b
  2486  00102A  6BB2               	clrf	(??_Update_StateMchn+1)& (0+255),b
  2487  00102C  5013               	movf	?_GETxAPIxVAL,w,c
  2488  00102E  19B1               	xorwf	??_Update_StateMchn& (0+255),w,b
  2489  001030  E104               	bnz	l8752
  2490  001032  5014               	movf	?_GETxAPIxVAL+1,w,c
  2491  001034  19B2               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  2492  001036  B4D8               	btfsc	status,2,c
  2493  001038  D004               	goto	l250
  2494  00103A                     u9110:
  2495  00103A                     l8752:
  2496                           
  2497                           ; BSR set to: 0
  2498                           ;State_Mchn.c: 237: Switch_Main = 1;
  2499  00103A  0E01               	movlw	1
  2500  00103C  6FC5               	movwf	_Switch_Main& (0+255),b
  2501                           
  2502                           ;State_Mchn.c: 238: Switch_Init = 0;
  2503  00103E  0E00               	movlw	0
  2504  001040  6F8C               	movwf	_Switch_Init& (0+255),b
  2505  001042                     l250:
  2506                           
  2507                           ;State_Mchn.c: 239: }
  2508                           ;State_Mchn.c: 240: Green_Led(3);
  2509                           
  2510                           ; BSR set to: 0
  2511                           
  2512                           ; BSR set to: 0
  2513  001042  0E03               	movlw	3
  2514  001044  ECA9  F01E         	call	_Green_Led
  2515                           
  2516                           ;State_Mchn.c: 241: Red_Led(0);
  2517  001048  0E00               	movlw	0
  2518  00104A  EC64  F01E         	call	_Red_Led
  2519                           
  2520                           ;State_Mchn.c: 242: break;
  2521  00104E  D351               	goto	l326
  2522  001050  0E00               	movlw	0
  2523  001052  6E14               	movwf	GETxAPIxVAL@index+1,c
  2524  001054  0E27               	movlw	39
  2525  001056  6E13               	movwf	GETxAPIxVAL@index,c
  2526  001058  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2527  00105C  0E05               	movlw	5
  2528  00105E  1813               	xorwf	?_GETxAPIxVAL,w,c
  2529  001060  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2530  001062  B4D8               	btfsc	status,2,c
  2531  001064  D014               	goto	l255
  2532  001066  D02B               	goto	l257
  2533  001068  0E01               	movlw	1
  2534  00106A  D005               	goto	L5
  2535  00106C                     
  2536                           ; BSR set to: 0
  2537  00106C  0E05               	movlw	5
  2538  00106E  D003               	goto	L5
  2539  001070                     
  2540                           ; BSR set to: 0
  2541  001070  0E02               	movlw	2
  2542  001072  D001               	goto	L5
  2543  001074                     
  2544                           ; BSR set to: 0
  2545  001074  0E03               	movlw	3
  2546  001076                     L5:
  2547  001076  0100               	movlb	0	; () banked
  2548  001078  6F8B               	movwf	_Switch_Program& (0+255),b
  2549                           
  2550                           ;State_Mchn.c: 258: Switch_Init = 7;
  2551  00107A  0E07               	movlw	7
  2552  00107C  6F8C               	movwf	_Switch_Init& (0+255),b
  2553                           
  2554                           ;State_Mchn.c: 259: break;
  2555  00107E  D01F               	goto	l257
  2556  001080                     
  2557                           ; BSR set to: 0
  2558  001080  0E08               	movlw	8
  2559  001082  0100               	movlb	0	; () banked
  2560  001084  6F8C               	movwf	_Switch_Init& (0+255),b
  2561                           
  2562                           ; BSR set to: 0
  2563                           ;State_Mchn.c: 261: Red_Led(1);
  2564  001086  0E01               	movlw	1
  2565  001088  EC64  F01E         	call	_Red_Led
  2566                           
  2567                           ;State_Mchn.c: 263: }
  2568                           
  2569                           ;State_Mchn.c: 262: break;
  2570  00108C  D018               	goto	l257
  2571  00108E                     l255:
  2572  00108E  0E00               	movlw	0
  2573  001090  6E14               	movwf	GETxAPIxVAL@index+1,c
  2574  001092  0E28               	movlw	40
  2575  001094  6E13               	movwf	GETxAPIxVAL@index,c
  2576  001096  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2577                           
  2578                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2579                           ; Switch size 1, requested type "space"
  2580                           ; Number of cases is 1, Range of values is 0 to 0
  2581                           ; switch strategies available:
  2582                           ; Name         Instructions Cycles
  2583                           ; simple_byte            4     3 (average)
  2584                           ;	Chosen strategy is simple_byte
  2585  00109A  5014               	movf	?_GETxAPIxVAL+1,w,c
  2586  00109C  0A00               	xorlw	0	; case 0
  2587  00109E  A4D8               	btfss	status,2,c
  2588  0010A0  D7EF               	goto	l261
  2589                           
  2590                           ; Switch size 1, requested type "space"
  2591                           ; Number of cases is 4, Range of values is 1 to 4
  2592                           ; switch strategies available:
  2593                           ; Name         Instructions Cycles
  2594                           ; simple_byte           13     7 (average)
  2595                           ;	Chosen strategy is simple_byte
  2596  0010A2  5013               	movf	?_GETxAPIxVAL,w,c
  2597  0010A4  0A01               	xorlw	1	; case 1
  2598  0010A6  B4D8               	btfsc	status,2,c
  2599  0010A8  D7DF               	goto	l256
  2600  0010AA  0A03               	xorlw	3	; case 2
  2601  0010AC  B4D8               	btfsc	status,2,c
  2602  0010AE  D7DE               	goto	l258
  2603  0010B0  0A01               	xorlw	1	; case 3
  2604  0010B2  B4D8               	btfsc	status,2,c
  2605  0010B4  D7DD               	goto	l259
  2606  0010B6  0A07               	xorlw	7	; case 4
  2607  0010B8  B4D8               	btfsc	status,2,c
  2608  0010BA  D7DC               	goto	l260
  2609  0010BC  D7E1               	goto	l261
  2610  0010BE                     l257:
  2611                           
  2612                           ;State_Mchn.c: 264: }
  2613                           ;State_Mchn.c: 265: if(GETxAPIxVAL(40) == 5)
  2614  0010BE  0E00               	movlw	0
  2615  0010C0  6E14               	movwf	GETxAPIxVAL@index+1,c
  2616  0010C2  0E28               	movlw	40
  2617  0010C4  6E13               	movwf	GETxAPIxVAL@index,c
  2618  0010C6  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2619  0010CA  0E05               	movlw	5
  2620  0010CC  1813               	xorwf	?_GETxAPIxVAL,w,c
  2621  0010CE  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2622  0010D0  B4D8               	btfsc	status,2,c
  2623  0010D2  D014               	goto	l263
  2624  0010D4  D02B               	goto	l265
  2625  0010D6  0E01               	movlw	1
  2626  0010D8  D005               	goto	L8
  2627  0010DA                     
  2628                           ; BSR set to: 0
  2629  0010DA  0E05               	movlw	5
  2630  0010DC  D003               	goto	L8
  2631  0010DE                     
  2632                           ; BSR set to: 0
  2633  0010DE  0E02               	movlw	2
  2634  0010E0  D001               	goto	L8
  2635  0010E2                     
  2636                           ; BSR set to: 0
  2637  0010E2  0E03               	movlw	3
  2638  0010E4                     L8:
  2639  0010E4  0100               	movlb	0	; () banked
  2640  0010E6  6F8B               	movwf	_Switch_Program& (0+255),b
  2641                           
  2642                           ;State_Mchn.c: 279: Switch_Init = 7;
  2643  0010E8  0E07               	movlw	7
  2644  0010EA  6F8C               	movwf	_Switch_Init& (0+255),b
  2645                           
  2646                           ;State_Mchn.c: 280: break;
  2647  0010EC  D01F               	goto	l265
  2648  0010EE                     
  2649                           ; BSR set to: 0
  2650  0010EE  0E08               	movlw	8
  2651  0010F0  0100               	movlb	0	; () banked
  2652  0010F2  6F8C               	movwf	_Switch_Init& (0+255),b
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;State_Mchn.c: 282: Red_Led(1);
  2656  0010F4  0E01               	movlw	1
  2657  0010F6  EC64  F01E         	call	_Red_Led
  2658                           
  2659                           ;State_Mchn.c: 284: }
  2660                           
  2661                           ;State_Mchn.c: 283: break;
  2662  0010FA  D018               	goto	l265
  2663  0010FC                     l263:
  2664  0010FC  0E00               	movlw	0
  2665  0010FE  6E14               	movwf	GETxAPIxVAL@index+1,c
  2666  001100  0E27               	movlw	39
  2667  001102  6E13               	movwf	GETxAPIxVAL@index,c
  2668  001104  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2669                           
  2670                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2671                           ; Switch size 1, requested type "space"
  2672                           ; Number of cases is 1, Range of values is 0 to 0
  2673                           ; switch strategies available:
  2674                           ; Name         Instructions Cycles
  2675                           ; simple_byte            4     3 (average)
  2676                           ;	Chosen strategy is simple_byte
  2677  001108  5014               	movf	?_GETxAPIxVAL+1,w,c
  2678  00110A  0A00               	xorlw	0	; case 0
  2679  00110C  A4D8               	btfss	status,2,c
  2680  00110E  D7EF               	goto	l269
  2681                           
  2682                           ; Switch size 1, requested type "space"
  2683                           ; Number of cases is 4, Range of values is 1 to 4
  2684                           ; switch strategies available:
  2685                           ; Name         Instructions Cycles
  2686                           ; simple_byte           13     7 (average)
  2687                           ;	Chosen strategy is simple_byte
  2688  001110  5013               	movf	?_GETxAPIxVAL,w,c
  2689  001112  0A01               	xorlw	1	; case 1
  2690  001114  B4D8               	btfsc	status,2,c
  2691  001116  D7DF               	goto	l264
  2692  001118  0A03               	xorlw	3	; case 2
  2693  00111A  B4D8               	btfsc	status,2,c
  2694  00111C  D7DE               	goto	l266
  2695  00111E  0A01               	xorlw	1	; case 3
  2696  001120  B4D8               	btfsc	status,2,c
  2697  001122  D7DD               	goto	l267
  2698  001124  0A07               	xorlw	7	; case 4
  2699  001126  B4D8               	btfsc	status,2,c
  2700  001128  D7DC               	goto	l268
  2701  00112A  D7E1               	goto	l269
  2702  00112C                     l265:
  2703                           
  2704                           ;State_Mchn.c: 285: }
  2705                           ;State_Mchn.c: 286: if((GETxAPIxVAL(39) != 5) && (GETxAPIxVAL(40) != 5))
  2706  00112C  0E00               	movlw	0
  2707  00112E  6E14               	movwf	GETxAPIxVAL@index+1,c
  2708  001130  0E27               	movlw	39
  2709  001132  6E13               	movwf	GETxAPIxVAL@index,c
  2710  001134  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2711  001138  0E05               	movlw	5
  2712  00113A  1813               	xorwf	?_GETxAPIxVAL,w,c
  2713  00113C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2714  00113E  B4D8               	btfsc	status,2,c
  2715  001140  D0BB               	goto	l280
  2716  001142  0E00               	movlw	0
  2717  001144  6E14               	movwf	GETxAPIxVAL@index+1,c
  2718  001146  0E28               	movlw	40
  2719  001148  6E13               	movwf	GETxAPIxVAL@index,c
  2720  00114A  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2721  00114E  0E05               	movlw	5
  2722  001150  1813               	xorwf	?_GETxAPIxVAL,w,c
  2723  001152  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  2724  001154  A4D8               	btfss	status,2,c
  2725  001156  D098               	goto	l271
  2726  001158  D0AF               	goto	l280
  2727  00115A                     
  2728                           ; BSR set to: 0
  2729  00115A  0E01               	movlw	1
  2730  00115C  D068               	goto	L25
  2731  00115E                     L9:
  2732  00115E  6F8C               	movwf	_Switch_Init& (0+255),b
  2733                           
  2734                           ;State_Mchn.c: 296: break;
  2735  001160  D0AB               	goto	l280
  2736  001162                     
  2737                           ; BSR set to: 0
  2738  001162  0E02               	movlw	2
  2739  001164  D064               	goto	L25
  2740  001166                     
  2741                           ; BSR set to: 0
  2742  001166  0E04               	movlw	4
  2743  001168  D062               	goto	L25
  2744  00116A                     
  2745                           ; BSR set to: 0
  2746  00116A  0E08               	movlw	8
  2747  00116C  0100               	movlb	0	; () banked
  2748  00116E  6F8C               	movwf	_Switch_Init& (0+255),b
  2749                           
  2750                           ; BSR set to: 0
  2751                           ;State_Mchn.c: 304: Red_Led(1);
  2752  001170  0E01               	movlw	1
  2753  001172  EC64  F01E         	call	_Red_Led
  2754                           
  2755                           ;State_Mchn.c: 306: }
  2756                           
  2757                           ;State_Mchn.c: 305: break;
  2758  001176  D0A0               	goto	l280
  2759  001178  0E00               	movlw	0
  2760  00117A  6E14               	movwf	GETxAPIxVAL@index+1,c
  2761  00117C  0E28               	movlw	40
  2762  00117E  6E13               	movwf	GETxAPIxVAL@index,c
  2763  001180  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2764                           
  2765                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2766                           ; Switch size 1, requested type "space"
  2767                           ; Number of cases is 1, Range of values is 0 to 0
  2768                           ; switch strategies available:
  2769                           ; Name         Instructions Cycles
  2770                           ; simple_byte            4     3 (average)
  2771                           ;	Chosen strategy is simple_byte
  2772  001184  5014               	movf	?_GETxAPIxVAL+1,w,c
  2773  001186  0A00               	xorlw	0	; case 0
  2774  001188  A4D8               	btfss	status,2,c
  2775  00118A  D7EF               	goto	l279
  2776                           
  2777                           ; Switch size 1, requested type "space"
  2778                           ; Number of cases is 4, Range of values is 1 to 4
  2779                           ; switch strategies available:
  2780                           ; Name         Instructions Cycles
  2781                           ; simple_byte           13     7 (average)
  2782                           ;	Chosen strategy is simple_byte
  2783  00118C  5013               	movf	?_GETxAPIxVAL,w,c
  2784  00118E  0A01               	xorlw	1	; case 1
  2785  001190  B4D8               	btfsc	status,2,c
  2786  001192  D051               	goto	l303
  2787  001194  0A03               	xorlw	3	; case 2
  2788  001196  B4D8               	btfsc	status,2,c
  2789  001198  D7E0               	goto	l276
  2790  00119A  0A01               	xorlw	1	; case 3
  2791  00119C  B4D8               	btfsc	status,2,c
  2792  00119E  D7E1               	goto	l277
  2793  0011A0  0A07               	xorlw	7	; case 4
  2794  0011A2  B4D8               	btfsc	status,2,c
  2795  0011A4  D7E0               	goto	l278
  2796  0011A6  D7E1               	goto	l279
  2797  0011A8                     
  2798                           ; BSR set to: 0
  2799  0011A8  0E00               	movlw	0
  2800  0011AA  D041               	goto	L25
  2801  0011AC                     
  2802                           ; BSR set to: 0
  2803  0011AC  0E08               	movlw	8
  2804  0011AE  0100               	movlb	0	; () banked
  2805  0011B0  6F8C               	movwf	_Switch_Init& (0+255),b
  2806                           
  2807                           ; BSR set to: 0
  2808                           ;State_Mchn.c: 322: Red_Led(1);
  2809  0011B2  0E01               	movlw	1
  2810  0011B4  EC64  F01E         	call	_Red_Led
  2811                           
  2812                           ;State_Mchn.c: 324: }
  2813                           
  2814                           ;State_Mchn.c: 323: break;
  2815  0011B8  D07F               	goto	l280
  2816  0011BA  0E00               	movlw	0
  2817  0011BC  6E14               	movwf	GETxAPIxVAL@index+1,c
  2818  0011BE  0E28               	movlw	40
  2819  0011C0  6E13               	movwf	GETxAPIxVAL@index,c
  2820  0011C2  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2821                           
  2822                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2823                           ; Switch size 1, requested type "space"
  2824                           ; Number of cases is 1, Range of values is 0 to 0
  2825                           ; switch strategies available:
  2826                           ; Name         Instructions Cycles
  2827                           ; simple_byte            4     3 (average)
  2828                           ;	Chosen strategy is simple_byte
  2829  0011C6  5014               	movf	?_GETxAPIxVAL+1,w,c
  2830  0011C8  0A00               	xorlw	0	; case 0
  2831  0011CA  A4D8               	btfss	status,2,c
  2832  0011CC  D7EF               	goto	l288
  2833                           
  2834                           ; Switch size 1, requested type "space"
  2835                           ; Number of cases is 4, Range of values is 1 to 4
  2836                           ; switch strategies available:
  2837                           ; Name         Instructions Cycles
  2838                           ; simple_byte           13     7 (average)
  2839                           ;	Chosen strategy is simple_byte
  2840  0011CE  5013               	movf	?_GETxAPIxVAL,w,c
  2841  0011D0  0A01               	xorlw	1	; case 1
  2842  0011D2  B4D8               	btfsc	status,2,c
  2843  0011D4  D7C2               	goto	l276
  2844  0011D6  0A03               	xorlw	3	; case 2
  2845  0011D8  B4D8               	btfsc	status,2,c
  2846  0011DA  D02D               	goto	l303
  2847  0011DC  0A01               	xorlw	1	; case 3
  2848  0011DE  B4D8               	btfsc	status,2,c
  2849  0011E0  D7E3               	goto	l286
  2850  0011E2  0A07               	xorlw	7	; case 4
  2851  0011E4  B4D8               	btfsc	status,2,c
  2852  0011E6  D020               	goto	l301
  2853  0011E8  D7E1               	goto	l288
  2854  0011EA                     
  2855                           ; BSR set to: 0
  2856  0011EA  0E08               	movlw	8
  2857  0011EC  0100               	movlb	0	; () banked
  2858  0011EE  6F8C               	movwf	_Switch_Init& (0+255),b
  2859                           
  2860                           ; BSR set to: 0
  2861                           ;State_Mchn.c: 340: Red_Led(1);
  2862  0011F0  0E01               	movlw	1
  2863  0011F2  EC64  F01E         	call	_Red_Led
  2864                           
  2865                           ;State_Mchn.c: 342: }
  2866                           
  2867                           ;State_Mchn.c: 341: break;
  2868  0011F6  D060               	goto	l280
  2869  0011F8  0E00               	movlw	0
  2870  0011FA  6E14               	movwf	GETxAPIxVAL@index+1,c
  2871  0011FC  0E28               	movlw	40
  2872  0011FE  6E13               	movwf	GETxAPIxVAL@index,c
  2873  001200  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2874                           
  2875                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2876                           ; Switch size 1, requested type "space"
  2877                           ; Number of cases is 1, Range of values is 0 to 0
  2878                           ; switch strategies available:
  2879                           ; Name         Instructions Cycles
  2880                           ; simple_byte            4     3 (average)
  2881                           ;	Chosen strategy is simple_byte
  2882  001204  5014               	movf	?_GETxAPIxVAL+1,w,c
  2883  001206  0A00               	xorlw	0	; case 0
  2884  001208  A4D8               	btfss	status,2,c
  2885  00120A  D7EF               	goto	l296
  2886                           
  2887                           ; Switch size 1, requested type "space"
  2888                           ; Number of cases is 4, Range of values is 1 to 4
  2889                           ; switch strategies available:
  2890                           ; Name         Instructions Cycles
  2891                           ; simple_byte           13     7 (average)
  2892                           ;	Chosen strategy is simple_byte
  2893  00120C  5013               	movf	?_GETxAPIxVAL,w,c
  2894  00120E  0A01               	xorlw	1	; case 1
  2895  001210  B4D8               	btfsc	status,2,c
  2896  001212  D7A7               	goto	l277
  2897  001214  0A03               	xorlw	3	; case 2
  2898  001216  B4D8               	btfsc	status,2,c
  2899  001218  D7C7               	goto	l286
  2900  00121A  0A01               	xorlw	1	; case 3
  2901  00121C  B4D8               	btfsc	status,2,c
  2902  00121E  D00B               	goto	l303
  2903  001220  0A07               	xorlw	7	; case 4
  2904  001222  B4D8               	btfsc	status,2,c
  2905  001224  D003               	goto	l302
  2906  001226  D7E1               	goto	l296
  2907  001228                     l301:
  2908                           
  2909                           ; BSR set to: 0
  2910  001228  0E06               	movlw	6
  2911  00122A  D001               	goto	L25
  2912  00122C                     l302:
  2913                           
  2914                           ; BSR set to: 0
  2915  00122C  0E03               	movlw	3
  2916  00122E                     L25:
  2917  00122E  0100               	movlb	0	; () banked
  2918  001230  6F8B               	movwf	_Switch_Program& (0+255),b
  2919                           
  2920                           ;State_Mchn.c: 353: Switch_Init = 7;
  2921  001232  0E07               	movlw	7
  2922  001234  D794               	goto	L9
  2923  001236                     l303:
  2924                           
  2925                           ; BSR set to: 0
  2926  001236  0E00               	movlw	0
  2927  001238  0100               	movlb	0	; () banked
  2928  00123A  D791               	goto	L9
  2929  00123C                     
  2930                           ; BSR set to: 0
  2931  00123C  0E08               	movlw	8
  2932  00123E  0100               	movlb	0	; () banked
  2933  001240  6F8C               	movwf	_Switch_Init& (0+255),b
  2934                           
  2935                           ; BSR set to: 0
  2936                           ;State_Mchn.c: 358: Red_Led(1);
  2937  001242  0E01               	movlw	1
  2938  001244  EC64  F01E         	call	_Red_Led
  2939                           
  2940                           ;State_Mchn.c: 360: }
  2941                           
  2942                           ;State_Mchn.c: 359: break;
  2943  001248  D037               	goto	l280
  2944  00124A  0E00               	movlw	0
  2945  00124C  6E14               	movwf	GETxAPIxVAL@index+1,c
  2946  00124E  0E28               	movlw	40
  2947  001250  6E13               	movwf	GETxAPIxVAL@index,c
  2948  001252  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  2949                           
  2950                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2951                           ; Switch size 1, requested type "space"
  2952                           ; Number of cases is 1, Range of values is 0 to 0
  2953                           ; switch strategies available:
  2954                           ; Name         Instructions Cycles
  2955                           ; simple_byte            4     3 (average)
  2956                           ;	Chosen strategy is simple_byte
  2957  001256  5014               	movf	?_GETxAPIxVAL+1,w,c
  2958  001258  0A00               	xorlw	0	; case 0
  2959  00125A  A4D8               	btfss	status,2,c
  2960  00125C  D7EF               	goto	l304
  2961                           
  2962                           ; Switch size 1, requested type "space"
  2963                           ; Number of cases is 4, Range of values is 1 to 4
  2964                           ; switch strategies available:
  2965                           ; Name         Instructions Cycles
  2966                           ; simple_byte           13     7 (average)
  2967                           ;	Chosen strategy is simple_byte
  2968  00125E  5013               	movf	?_GETxAPIxVAL,w,c
  2969  001260  0A01               	xorlw	1	; case 1
  2970  001262  B4D8               	btfsc	status,2,c
  2971  001264  D780               	goto	l278
  2972  001266  0A03               	xorlw	3	; case 2
  2973  001268  B4D8               	btfsc	status,2,c
  2974  00126A  D7DE               	goto	l301
  2975  00126C  0A01               	xorlw	1	; case 3
  2976  00126E  B4D8               	btfsc	status,2,c
  2977  001270  D7DD               	goto	l302
  2978  001272  0A07               	xorlw	7	; case 4
  2979  001274  B4D8               	btfsc	status,2,c
  2980  001276  D7DF               	goto	l303
  2981  001278  D7E1               	goto	l304
  2982  00127A  0E08               	movlw	8
  2983  00127C  0100               	movlb	0	; () banked
  2984  00127E  6F8C               	movwf	_Switch_Init& (0+255),b
  2985                           
  2986                           ; BSR set to: 0
  2987                           ;State_Mchn.c: 363: Red_Led(1);
  2988  001280  0E01               	movlw	1
  2989  001282  EC64  F01E         	call	_Red_Led
  2990                           
  2991                           ;State_Mchn.c: 365: }
  2992                           
  2993                           ;State_Mchn.c: 364: break;
  2994  001286  D018               	goto	l280
  2995  001288                     l271:
  2996  001288  0E00               	movlw	0
  2997  00128A  6E14               	movwf	GETxAPIxVAL@index+1,c
  2998  00128C  0E27               	movlw	39
  2999  00128E  6E13               	movwf	GETxAPIxVAL@index,c
  3000  001290  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  3001                           
  3002                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3003                           ; Switch size 1, requested type "space"
  3004                           ; Number of cases is 1, Range of values is 0 to 0
  3005                           ; switch strategies available:
  3006                           ; Name         Instructions Cycles
  3007                           ; simple_byte            4     3 (average)
  3008                           ;	Chosen strategy is simple_byte
  3009  001294  5014               	movf	?_GETxAPIxVAL+1,w,c
  3010  001296  0A00               	xorlw	0	; case 0
  3011  001298  A4D8               	btfss	status,2,c
  3012  00129A  D7EF               	goto	l305
  3013                           
  3014                           ; Switch size 1, requested type "space"
  3015                           ; Number of cases is 4, Range of values is 1 to 4
  3016                           ; switch strategies available:
  3017                           ; Name         Instructions Cycles
  3018                           ; simple_byte           13     7 (average)
  3019                           ;	Chosen strategy is simple_byte
  3020  00129C  5013               	movf	?_GETxAPIxVAL,w,c
  3021  00129E  0A01               	xorlw	1	; case 1
  3022  0012A0  B4D8               	btfsc	status,2,c
  3023  0012A2  D76A               	goto	l273
  3024  0012A4  0A03               	xorlw	3	; case 2
  3025  0012A6  B4D8               	btfsc	status,2,c
  3026  0012A8  D788               	goto	l282
  3027  0012AA  0A01               	xorlw	1	; case 3
  3028  0012AC  B4D8               	btfsc	status,2,c
  3029  0012AE  D7A4               	goto	l290
  3030  0012B0  0A07               	xorlw	7	; case 4
  3031  0012B2  B4D8               	btfsc	status,2,c
  3032  0012B4  D7CA               	goto	l298
  3033  0012B6  D7E1               	goto	l305
  3034  0012B8                     l280:
  3035                           
  3036                           ;State_Mchn.c: 366: }
  3037                           ;State_Mchn.c: 367: Train_Pos1_Temp = GETxAPIxVAL(39);
  3038  0012B8  0E00               	movlw	0
  3039  0012BA  6E14               	movwf	GETxAPIxVAL@index+1,c
  3040  0012BC  0E27               	movlw	39
  3041  0012BE  6E13               	movwf	GETxAPIxVAL@index,c
  3042  0012C0  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  3043  0012C4  5013               	movf	?_GETxAPIxVAL,w,c
  3044  0012C6  0100               	movlb	0	; () banked
  3045  0012C8  6F86               	movwf	_Train_Pos1_Temp& (0+255),b
  3046                           
  3047                           ;State_Mchn.c: 368: Train_Pos2_Temp = GETxAPIxVAL(40);
  3048  0012CA  0E00               	movlw	0
  3049  0012CC  6E14               	movwf	GETxAPIxVAL@index+1,c
  3050  0012CE  0E28               	movlw	40
  3051  0012D0  6E13               	movwf	GETxAPIxVAL@index,c
  3052  0012D2  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  3053  0012D6  D09A               	goto	L11
  3054  0012D8                     
  3055                           ; BSR set to: 0
  3056                           
  3057                           ; BSR set to: 0
  3058  0012D8  0E0B               	movlw	11
  3059  0012DA  D46A               	goto	L2
  3060  0012DC                     
  3061                           ; BSR set to: 0
  3062                           
  3063                           ; BSR set to: 0
  3064  0012DC  0E00               	movlw	0
  3065  0012DE  6E14               	movwf	GETxAPIxVAL@index+1,c
  3066  0012E0  0E20               	movlw	32
  3067  0012E2  6E13               	movwf	GETxAPIxVAL@index,c
  3068  0012E4  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  3069  0012E8  5013               	movf	?_GETxAPIxVAL,w,c
  3070  0012EA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3071  0012EC  A4D8               	btfss	status,2,c
  3072  0012EE  D00A               	goto	u9170
  3073  0012F0  0E00               	movlw	0
  3074  0012F2  6E14               	movwf	GETxAPIxVAL@index+1,c
  3075  0012F4  0E46               	movlw	70
  3076  0012F6  6E13               	movwf	GETxAPIxVAL@index,c
  3077  0012F8  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  3078  0012FC  5013               	movf	?_GETxAPIxVAL,w,c
  3079  0012FE  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3080  001300  B4D8               	btfsc	status,2,c
  3081  001302  D012               	goto	l308
  3082  001304                     u9170:
  3083                           
  3084                           ;State_Mchn.c: 375: {
  3085                           ;State_Mchn.c: 376: Switch_Main = 3;
  3086  001304  0E03               	movlw	3
  3087  001306  0100               	movlb	0	; () banked
  3088  001308  6FC5               	movwf	_Switch_Main& (0+255),b
  3089                           
  3090                           ;State_Mchn.c: 377: Switch_Init = 0;
  3091  00130A  0E00               	movlw	0
  3092  00130C  6F8C               	movwf	_Switch_Init& (0+255),b
  3093                           
  3094                           ;State_Mchn.c: 378: Stop_Program = 0;
  3095  00130E  0E00               	movlw	0
  3096  001310  6F87               	movwf	_Stop_Program& (0+255),b
  3097                           
  3098                           ; BSR set to: 0
  3099                           ;State_Mchn.c: 379: SETxAPIxVALxNoxRET(70, 0);
  3100  001312  0E00               	movlw	0
  3101  001314  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  3102  001316  0E46               	movlw	70
  3103  001318  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  3104  00131A  0E00               	movlw	0
  3105  00131C  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  3106  00131E  0E00               	movlw	0
  3107  001320  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  3108  001322  EC20  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  3109                           
  3110                           ;State_Mchn.c: 380: }
  3111  001326  D026               	goto	l312
  3112  001328                     l308:
  3113                           
  3114                           ;State_Mchn.c: 381: else if (Train_Pos1_Temp != GETxAPIxVAL(39) || Train_Pos1_Temp != GE
      +                          TxAPIxVAL(40)){
  3115  001328  0E00               	movlw	0
  3116  00132A  6E14               	movwf	GETxAPIxVAL@index+1,c
  3117  00132C  0E27               	movlw	39
  3118  00132E  6E13               	movwf	GETxAPIxVAL@index,c
  3119  001330  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  3120  001334  0100               	movlb	0	; () banked
  3121  001336  5186               	movf	_Train_Pos1_Temp& (0+255),w,b
  3122  001338  6FB1               	movwf	??_Update_StateMchn& (0+255),b
  3123  00133A  6BB2               	clrf	(??_Update_StateMchn+1)& (0+255),b
  3124  00133C  5013               	movf	?_GETxAPIxVAL,w,c
  3125  00133E  19B1               	xorwf	??_Update_StateMchn& (0+255),w,b
  3126  001340  E115               	bnz	l8892
  3127  001342  5014               	movf	?_GETxAPIxVAL+1,w,c
  3128  001344  19B2               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  3129  001346  A4D8               	btfss	status,2,c
  3130  001348  D011               	goto	u9190
  3131                           
  3132                           ; BSR set to: 0
  3133  00134A  0E00               	movlw	0
  3134  00134C  6E14               	movwf	GETxAPIxVAL@index+1,c
  3135  00134E  0E28               	movlw	40
  3136  001350  6E13               	movwf	GETxAPIxVAL@index,c
  3137  001352  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  3138  001356  0100               	movlb	0	; () banked
  3139  001358  5186               	movf	_Train_Pos1_Temp& (0+255),w,b
  3140  00135A  6FB1               	movwf	??_Update_StateMchn& (0+255),b
  3141  00135C  6BB2               	clrf	(??_Update_StateMchn+1)& (0+255),b
  3142  00135E  5013               	movf	?_GETxAPIxVAL,w,c
  3143  001360  19B1               	xorwf	??_Update_StateMchn& (0+255),w,b
  3144  001362  E104               	bnz	l8892
  3145  001364  5014               	movf	?_GETxAPIxVAL+1,w,c
  3146  001366  19B2               	xorwf	(??_Update_StateMchn+1)& (0+255),w,b
  3147  001368  B4D8               	btfsc	status,2,c
  3148  00136A  D004               	goto	l312
  3149  00136C                     u9190:
  3150  00136C                     l8892:
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;State_Mchn.c: 382: Switch_Main = 1;
  3154  00136C  0E01               	movlw	1
  3155  00136E  6FC5               	movwf	_Switch_Main& (0+255),b
  3156                           
  3157                           ;State_Mchn.c: 383: Switch_Init = 0;
  3158  001370  0E00               	movlw	0
  3159  001372  6F8C               	movwf	_Switch_Init& (0+255),b
  3160  001374                     l312:
  3161                           
  3162                           ;State_Mchn.c: 384: }
  3163                           ;State_Mchn.c: 385: Green_Led(3);
  3164                           
  3165                           ; BSR set to: 0
  3166                           
  3167                           ; BSR set to: 0
  3168  001374  0E03               	movlw	3
  3169  001376  ECA9  F01E         	call	_Green_Led
  3170                           
  3171                           ;State_Mchn.c: 386: Red_Led(0);
  3172  00137A  0E00               	movlw	0
  3173  00137C  EC64  F01E         	call	_Red_Led
  3174                           
  3175                           ;State_Mchn.c: 387: break;
  3176  001380  D1B8               	goto	l326
  3177  001382  0E00               	movlw	0
  3178  001384  6E14               	movwf	GETxAPIxVAL@index+1,c
  3179  001386  0E27               	movlw	39
  3180  001388  6E13               	movwf	GETxAPIxVAL@index,c
  3181  00138A  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  3182  00138E  0E05               	movlw	5
  3183  001390  1813               	xorwf	?_GETxAPIxVAL,w,c
  3184  001392  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3185  001394  A4D8               	btfss	status,2,c
  3186  001396  D013               	goto	l318
  3187  001398                     u9200:
  3188                           
  3189                           ;State_Mchn.c: 390: {
  3190                           ;State_Mchn.c: 391: Switch_Program = 0;
  3191  001398  0E00               	movlw	0
  3192  00139A  D005               	goto	L15
  3193  00139C                     
  3194                           ; BSR set to: 0
  3195  00139C  0E01               	movlw	1
  3196  00139E  D003               	goto	L15
  3197  0013A0                     
  3198                           ; BSR set to: 0
  3199  0013A0  0E03               	movlw	3
  3200  0013A2  D001               	goto	L15
  3201  0013A4                     
  3202                           ; BSR set to: 0
  3203  0013A4  0E02               	movlw	2
  3204  0013A6                     L15:
  3205  0013A6  0100               	movlb	0	; () banked
  3206  0013A8  6F8B               	movwf	_Switch_Program& (0+255),b
  3207  0013AA  0E0A               	movlw	10
  3208  0013AC  6F8C               	movwf	_Switch_Init& (0+255),b
  3209  0013AE  D01F               	goto	l320
  3210  0013B0                     
  3211                           ; BSR set to: 0
  3212  0013B0  0E0B               	movlw	11
  3213  0013B2  0100               	movlb	0	; () banked
  3214  0013B4  6F8C               	movwf	_Switch_Init& (0+255),b
  3215                           
  3216                           ; BSR set to: 0
  3217                           ;State_Mchn.c: 401: Red_Led(1);
  3218  0013B6  0E01               	movlw	1
  3219  0013B8  EC64  F01E         	call	_Red_Led
  3220                           
  3221                           ;State_Mchn.c: 403: }
  3222                           
  3223                           ;State_Mchn.c: 402: break;
  3224  0013BC  D018               	goto	l320
  3225  0013BE                     l318:
  3226  0013BE  0E00               	movlw	0
  3227  0013C0  6E14               	movwf	GETxAPIxVAL@index+1,c
  3228  0013C2  0E27               	movlw	39
  3229  0013C4  6E13               	movwf	GETxAPIxVAL@index,c
  3230  0013C6  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  3231                           
  3232                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3233                           ; Switch size 1, requested type "space"
  3234                           ; Number of cases is 1, Range of values is 0 to 0
  3235                           ; switch strategies available:
  3236                           ; Name         Instructions Cycles
  3237                           ; simple_byte            4     3 (average)
  3238                           ;	Chosen strategy is simple_byte
  3239  0013CA  5014               	movf	?_GETxAPIxVAL+1,w,c
  3240  0013CC  0A00               	xorlw	0	; case 0
  3241  0013CE  A4D8               	btfss	status,2,c
  3242  0013D0  D7EF               	goto	l324
  3243                           
  3244                           ; Switch size 1, requested type "space"
  3245                           ; Number of cases is 4, Range of values is 1 to 4
  3246                           ; switch strategies available:
  3247                           ; Name         Instructions Cycles
  3248                           ; simple_byte           13     7 (average)
  3249                           ;	Chosen strategy is simple_byte
  3250  0013D2  5013               	movf	?_GETxAPIxVAL,w,c
  3251  0013D4  0A01               	xorlw	1	; case 1
  3252  0013D6  B4D8               	btfsc	status,2,c
  3253  0013D8  D7E1               	goto	l319
  3254  0013DA  0A03               	xorlw	3	; case 2
  3255  0013DC  B4D8               	btfsc	status,2,c
  3256  0013DE  D7E0               	goto	l321
  3257  0013E0  0A01               	xorlw	1	; case 3
  3258  0013E2  B4D8               	btfsc	status,2,c
  3259  0013E4  D7D9               	goto	u9200
  3260  0013E6  0A07               	xorlw	7	; case 4
  3261  0013E8  B4D8               	btfsc	status,2,c
  3262  0013EA  D7DC               	goto	l323
  3263  0013EC  D7E1               	goto	l324
  3264  0013EE                     l320:
  3265                           
  3266                           ;State_Mchn.c: 404: Train_Pos1_Temp = GETxAPIxVAL(39);
  3267  0013EE  0E00               	movlw	0
  3268  0013F0  6E14               	movwf	GETxAPIxVAL@index+1,c
  3269  0013F2  0E27               	movlw	39
  3270  0013F4  6E13               	movwf	GETxAPIxVAL@index,c
  3271  0013F6  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  3272  0013FA  5013               	movf	?_GETxAPIxVAL,w,c
  3273  0013FC  0100               	movlb	0	; () banked
  3274  0013FE  6F86               	movwf	_Train_Pos1_Temp& (0+255),b
  3275                           
  3276                           ;State_Mchn.c: 405: Train_Pos2_Temp = GETxAPIxVAL(40);
  3277  001400  0E00               	movlw	0
  3278  001402  6E14               	movwf	GETxAPIxVAL@index+1,c
  3279  001404  0E28               	movlw	40
  3280  001406  6E13               	movwf	GETxAPIxVAL@index,c
  3281  001408  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  3282  00140C                     L11:
  3283  00140C  5013               	movf	?_GETxAPIxVAL,w,c
  3284  00140E  0100               	movlb	0	; () banked
  3285  001410  6F85               	movwf	_Train_Pos2_Temp& (0+255),b
  3286                           
  3287                           ;State_Mchn.c: 406: break;
  3288  001412  D16F               	goto	l326
  3289  001414                     
  3290                           ; BSR set to: 0
  3291                           
  3292                           ; BSR set to: 0
  3293  001414  0E00               	movlw	0
  3294  001416  6F8C               	movwf	_Switch_Init& (0+255),b
  3295                           
  3296                           ; BSR set to: 0
  3297                           ;State_Mchn.c: 409: Red_Led(1);
  3298  001418  0E01               	movlw	1
  3299  00141A  EC64  F01E         	call	_Red_Led
  3300                           
  3301                           ;State_Mchn.c: 411: }
  3302                           
  3303                           ;State_Mchn.c: 410: break;
  3304  00141E  D169               	goto	l326
  3305  001420                     l217:
  3306  001420  0100               	movlb	0	; () banked
  3307  001422  518C               	movf	_Switch_Init& (0+255),w,b
  3308                           
  3309                           ; Switch size 1, requested type "space"
  3310                           ; Number of cases is 12, Range of values is 0 to 11
  3311                           ; switch strategies available:
  3312                           ; Name         Instructions Cycles
  3313                           ; simple_byte           37    19 (average)
  3314                           ;	Chosen strategy is simple_byte
  3315  001424  0A00               	xorlw	0	; case 0
  3316  001426  B4D8               	btfsc	status,2,c
  3317  001428  EFBA  F005         	goto	l218
  3318  00142C  0A01               	xorlw	1	; case 1
  3319  00142E  B4D8               	btfsc	status,2,c
  3320  001430  EFC2  F005         	goto	l220
  3321  001434  0A03               	xorlw	3	; case 2
  3322  001436  B4D8               	btfsc	status,2,c
  3323  001438  D42F               	goto	l227
  3324  00143A  0A01               	xorlw	1	; case 3
  3325  00143C  B4D8               	btfsc	status,2,c
  3326  00143E  D473               	goto	l229
  3327  001440  0A07               	xorlw	7	; case 4
  3328  001442  B4D8               	btfsc	status,2,c
  3329  001444  D509               	goto	l237
  3330  001446  0A01               	xorlw	1	; case 5
  3331  001448  B4D8               	btfsc	status,2,c
  3332  00144A  D592               	goto	l241
  3333  00144C  0A03               	xorlw	3	; case 6
  3334  00144E  B4D8               	btfsc	status,2,c
  3335  001450  D5AA               	goto	l244
  3336  001452  0A01               	xorlw	1	; case 7
  3337  001454  B4D8               	btfsc	status,2,c
  3338  001456  D5A9               	goto	l245
  3339  001458  0A0F               	xorlw	15	; case 8
  3340  00145A  B4D8               	btfsc	status,2,c
  3341  00145C  D5F9               	goto	l253
  3342  00145E  0A01               	xorlw	1	; case 9
  3343  001460  B4D8               	btfsc	status,2,c
  3344  001462  D73A               	goto	l306
  3345  001464  0A03               	xorlw	3	; case 10
  3346  001466  B4D8               	btfsc	status,2,c
  3347  001468  D739               	goto	l307
  3348  00146A  0A01               	xorlw	1	; case 11
  3349  00146C  B4D8               	btfsc	status,2,c
  3350  00146E  D789               	goto	l315
  3351  001470  D7D1               	goto	l325
  3352  001472                     
  3353                           ; BSR set to: 0
  3354                           
  3355                           ; BSR set to: 0
  3356  001472  0E01               	movlw	1
  3357  001474  6FAF               	movwf	Train_Path@To& (0+255),b
  3358  001476  0E03               	movlw	3
  3359  001478  ECDD  F011         	call	_Train_Path
  3360  00147C  0900               	iorlw	0
  3361  00147E  A4D8               	btfss	status,2,c
  3362  001480  D087               	goto	l332
  3363                           
  3364                           ;State_Mchn.c: 418: {
  3365                           ;State_Mchn.c: 419: Switch_Program = 1;
  3366  001482  0E01               	movlw	1
  3367  001484  0100               	movlb	0	; () banked
  3368  001486  6F8B               	movwf	_Switch_Program& (0+255),b
  3369                           
  3370                           ; BSR set to: 0
  3371                           ;State_Mchn.c: 420: EEPROMxSTORE();
  3372  001488  ECBA  F014         	call	_EEPROMxSTORE	;wreg free
  3373  00148C                     l8934:
  3374                           
  3375                           ;State_Mchn.c: 421: if(Stop_Program == 1)
  3376  00148C  0100               	movlb	0	; () banked
  3377  00148E  0587               	decf	_Stop_Program& (0+255),w,b
  3378  001490  A4D8               	btfss	status,2,c
  3379  001492  D07E               	goto	l332
  3380                           
  3381                           ; BSR set to: 0
  3382                           ;State_Mchn.c: 422: {
  3383                           ;State_Mchn.c: 423: Switch_Main = 1;
  3384  001494  0E01               	movlw	1
  3385  001496  6FC5               	movwf	_Switch_Main& (0+255),b
  3386                           
  3387                           ; BSR set to: 0
  3388                           ;State_Mchn.c: 425: }
  3389                           ;State_Mchn.c: 426: }
  3390                           ;State_Mchn.c: 427: break;
  3391                           
  3392                           ; BSR set to: 0
  3393  001498  D07B               	goto	l332
  3394  00149A                     
  3395                           ; BSR set to: 0
  3396                           
  3397                           ; BSR set to: 0
  3398  00149A  0E03               	movlw	3
  3399  00149C  6FAF               	movwf	Train_Path@To& (0+255),b
  3400  00149E  0E02               	movlw	2
  3401  0014A0  ECDD  F011         	call	_Train_Path
  3402  0014A4  0900               	iorlw	0
  3403  0014A6  A4D8               	btfss	status,2,c
  3404  0014A8  D073               	goto	l332
  3405                           
  3406                           ;State_Mchn.c: 430: {
  3407                           ;State_Mchn.c: 431: Switch_Program = 2;
  3408  0014AA  0E02               	movlw	2
  3409  0014AC  0100               	movlb	0	; () banked
  3410  0014AE  6F8B               	movwf	_Switch_Program& (0+255),b
  3411                           
  3412                           ; BSR set to: 0
  3413                           ;State_Mchn.c: 432: EEPROMxSTORE();
  3414  0014B0  ECBA  F014         	call	_EEPROMxSTORE	;wreg free
  3415  0014B4  D7EB               	goto	l8934
  3416  0014B6                     
  3417                           ; BSR set to: 0
  3418                           
  3419                           ; BSR set to: 0
  3420  0014B6  0E04               	movlw	4
  3421  0014B8  6FAF               	movwf	Train_Path@To& (0+255),b
  3422  0014BA  0E01               	movlw	1
  3423  0014BC  ECDD  F011         	call	_Train_Path
  3424  0014C0  0900               	iorlw	0
  3425  0014C2  A4D8               	btfss	status,2,c
  3426  0014C4  D065               	goto	l332
  3427                           
  3428                           ;State_Mchn.c: 442: {
  3429                           ;State_Mchn.c: 443: Switch_Program = 3;
  3430  0014C6  0E03               	movlw	3
  3431  0014C8  0100               	movlb	0	; () banked
  3432  0014CA  6F8B               	movwf	_Switch_Program& (0+255),b
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;State_Mchn.c: 444: EEPROMxSTORE();
  3436  0014CC  ECBA  F014         	call	_EEPROMxSTORE	;wreg free
  3437  0014D0  D7DD               	goto	l8934
  3438  0014D2                     
  3439                           ; BSR set to: 0
  3440                           
  3441                           ; BSR set to: 0
  3442  0014D2  0E01               	movlw	1
  3443  0014D4  6FAF               	movwf	Train_Path@To& (0+255),b
  3444  0014D6  0E03               	movlw	3
  3445  0014D8  ECDD  F011         	call	_Train_Path
  3446  0014DC  0900               	iorlw	0
  3447  0014DE  A4D8               	btfss	status,2,c
  3448  0014E0  D057               	goto	l332
  3449                           
  3450                           ;State_Mchn.c: 454: {
  3451                           ;State_Mchn.c: 455: Switch_Program = 4;
  3452  0014E2  0E04               	movlw	4
  3453  0014E4  0100               	movlb	0	; () banked
  3454  0014E6  6F8B               	movwf	_Switch_Program& (0+255),b
  3455                           
  3456                           ; BSR set to: 0
  3457                           ;State_Mchn.c: 456: EEPROMxSTORE();
  3458  0014E8  ECBA  F014         	call	_EEPROMxSTORE	;wreg free
  3459  0014EC  D7CF               	goto	l8934
  3460  0014EE                     
  3461                           ; BSR set to: 0
  3462                           
  3463                           ; BSR set to: 0
  3464  0014EE  0E02               	movlw	2
  3465  0014F0  6FAF               	movwf	Train_Path@To& (0+255),b
  3466  0014F2  0E04               	movlw	4
  3467  0014F4  ECDD  F011         	call	_Train_Path
  3468  0014F8  0900               	iorlw	0
  3469  0014FA  A4D8               	btfss	status,2,c
  3470  0014FC  D049               	goto	l332
  3471                           
  3472                           ;State_Mchn.c: 466: {
  3473                           ;State_Mchn.c: 467: Switch_Program = 5;
  3474  0014FE  0E05               	movlw	5
  3475  001500  0100               	movlb	0	; () banked
  3476  001502  6F8B               	movwf	_Switch_Program& (0+255),b
  3477                           
  3478                           ; BSR set to: 0
  3479                           ;State_Mchn.c: 468: EEPROMxSTORE();
  3480  001504  ECBA  F014         	call	_EEPROMxSTORE	;wreg free
  3481  001508  D7C1               	goto	l8934
  3482  00150A                     
  3483                           ; BSR set to: 0
  3484                           
  3485                           ; BSR set to: 0
  3486  00150A  0E04               	movlw	4
  3487  00150C  6FAF               	movwf	Train_Path@To& (0+255),b
  3488  00150E  0E01               	movlw	1
  3489  001510  ECDD  F011         	call	_Train_Path
  3490  001514  0900               	iorlw	0
  3491  001516  A4D8               	btfss	status,2,c
  3492  001518  D03B               	goto	l332
  3493                           
  3494                           ;State_Mchn.c: 478: {
  3495                           ;State_Mchn.c: 479: Switch_Program = 6;
  3496  00151A  0E06               	movlw	6
  3497  00151C  0100               	movlb	0	; () banked
  3498  00151E  6F8B               	movwf	_Switch_Program& (0+255),b
  3499                           
  3500                           ; BSR set to: 0
  3501                           ;State_Mchn.c: 480: EEPROMxSTORE();
  3502  001520  ECBA  F014         	call	_EEPROMxSTORE	;wreg free
  3503  001524  D7B3               	goto	l8934
  3504  001526                     
  3505                           ; BSR set to: 0
  3506                           
  3507                           ; BSR set to: 0
  3508  001526  0E03               	movlw	3
  3509  001528  6FAF               	movwf	Train_Path@To& (0+255),b
  3510  00152A  0E02               	movlw	2
  3511  00152C  ECDD  F011         	call	_Train_Path
  3512  001530  0900               	iorlw	0
  3513  001532  A4D8               	btfss	status,2,c
  3514  001534  D02D               	goto	l332
  3515                           
  3516                           ;State_Mchn.c: 490: {
  3517                           ;State_Mchn.c: 491: Switch_Program = 7;
  3518  001536  0E07               	movlw	7
  3519  001538  0100               	movlb	0	; () banked
  3520  00153A  6F8B               	movwf	_Switch_Program& (0+255),b
  3521                           
  3522                           ; BSR set to: 0
  3523                           ;State_Mchn.c: 492: EEPROMxSTORE();
  3524  00153C  ECBA  F014         	call	_EEPROMxSTORE	;wreg free
  3525  001540  D7A5               	goto	l8934
  3526  001542                     
  3527                           ; BSR set to: 0
  3528                           
  3529                           ; BSR set to: 0
  3530  001542  0E02               	movlw	2
  3531  001544  6FAF               	movwf	Train_Path@To& (0+255),b
  3532  001546  0E04               	movlw	4
  3533  001548  ECDD  F011         	call	_Train_Path
  3534  00154C  0900               	iorlw	0
  3535  00154E  A4D8               	btfss	status,2,c
  3536  001550  D01F               	goto	l332
  3537                           
  3538                           ;State_Mchn.c: 502: {
  3539                           ;State_Mchn.c: 503: Switch_Program = 0;
  3540  001552  0E00               	movlw	0
  3541  001554  0100               	movlb	0	; () banked
  3542  001556  6F8B               	movwf	_Switch_Program& (0+255),b
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;State_Mchn.c: 504: EEPROMxSTORE();
  3546  001558  ECBA  F014         	call	_EEPROMxSTORE	;wreg free
  3547  00155C  D797               	goto	l8934
  3548  00155E                     
  3549                           ; BSR set to: 0
  3550                           
  3551                           ; BSR set to: 0
  3552  00155E  518B               	movf	_Switch_Program& (0+255),w,b
  3553                           
  3554                           ; Switch size 1, requested type "space"
  3555                           ; Number of cases is 8, Range of values is 0 to 7
  3556                           ; switch strategies available:
  3557                           ; Name         Instructions Cycles
  3558                           ; simple_byte           25    13 (average)
  3559                           ;	Chosen strategy is simple_byte
  3560  001560  0A00               	xorlw	0	; case 0
  3561  001562  B4D8               	btfsc	status,2,c
  3562  001564  D786               	goto	l329
  3563  001566  0A01               	xorlw	1	; case 1
  3564  001568  B4D8               	btfsc	status,2,c
  3565  00156A  D797               	goto	l333
  3566  00156C  0A03               	xorlw	3	; case 2
  3567  00156E  B4D8               	btfsc	status,2,c
  3568  001570  D7A2               	goto	l336
  3569  001572  0A01               	xorlw	1	; case 3
  3570  001574  B4D8               	btfsc	status,2,c
  3571  001576  D7AD               	goto	l339
  3572  001578  0A07               	xorlw	7	; case 4
  3573  00157A  B4D8               	btfsc	status,2,c
  3574  00157C  D7B8               	goto	l342
  3575  00157E  0A01               	xorlw	1	; case 5
  3576  001580  B4D8               	btfsc	status,2,c
  3577  001582  D7C3               	goto	l345
  3578  001584  0A03               	xorlw	3	; case 6
  3579  001586  B4D8               	btfsc	status,2,c
  3580  001588  D7CE               	goto	l348
  3581  00158A  0A01               	xorlw	1	; case 7
  3582  00158C  B4D8               	btfsc	status,2,c
  3583  00158E  D7D9               	goto	l351
  3584  001590                     l332:
  3585                           
  3586                           ;State_Mchn.c: 700: if(GETxAPIxVAL(33) || GETxAPIxVAL(71))
  3587                           
  3588                           ; BSR set to: 0
  3589  001590  0E00               	movlw	0
  3590  001592  6E14               	movwf	GETxAPIxVAL@index+1,c
  3591  001594  0E21               	movlw	33
  3592  001596  6E13               	movwf	GETxAPIxVAL@index,c
  3593  001598  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  3594  00159C  5013               	movf	?_GETxAPIxVAL,w,c
  3595  00159E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3596  0015A0  A4D8               	btfss	status,2,c
  3597  0015A2  D00A               	goto	u9380
  3598  0015A4  0E00               	movlw	0
  3599  0015A6  6E14               	movwf	GETxAPIxVAL@index+1,c
  3600  0015A8  0E47               	movlw	71
  3601  0015AA  6E13               	movwf	GETxAPIxVAL@index,c
  3602  0015AC  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  3603  0015B0  5013               	movf	?_GETxAPIxVAL,w,c
  3604  0015B2  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3605  0015B4  B4D8               	btfsc	status,2,c
  3606  0015B6  D00D               	goto	l355
  3607  0015B8                     u9380:
  3608                           
  3609                           ;State_Mchn.c: 701: {
  3610                           ;State_Mchn.c: 702: Stop_Program = 1;
  3611  0015B8  0E01               	movlw	1
  3612  0015BA  0100               	movlb	0	; () banked
  3613  0015BC  6F87               	movwf	_Stop_Program& (0+255),b
  3614                           
  3615                           ; BSR set to: 0
  3616                           ;State_Mchn.c: 703: SETxAPIxVALxNoxRET(71, 0);
  3617  0015BE  0E00               	movlw	0
  3618  0015C0  6E16               	movwf	SETxAPIxVALxNoxRET@index+1,c
  3619  0015C2  0E47               	movlw	71
  3620  0015C4  6E15               	movwf	SETxAPIxVALxNoxRET@index,c
  3621  0015C6  0E00               	movlw	0
  3622  0015C8  6E18               	movwf	SETxAPIxVALxNoxRET@value+1,c
  3623  0015CA  0E00               	movlw	0
  3624  0015CC  6E17               	movwf	SETxAPIxVALxNoxRET@value,c
  3625  0015CE  EC20  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
  3626  0015D2                     l355:
  3627                           
  3628                           ;State_Mchn.c: 704: }
  3629                           ;State_Mchn.c: 706: if(Stop_Program == 1)
  3630  0015D2  0100               	movlb	0	; () banked
  3631  0015D4  0587               	decf	_Stop_Program& (0+255),w,b
  3632  0015D6  A4D8               	btfss	status,2,c
  3633  0015D8  D003               	goto	l358
  3634                           
  3635                           ; BSR set to: 0
  3636                           ;State_Mchn.c: 707: {
  3637                           ;State_Mchn.c: 708: Red_Led(2);
  3638  0015DA  0E02               	movlw	2
  3639  0015DC  EC64  F01E         	call	_Red_Led
  3640  0015E0                     l358:
  3641                           
  3642                           ;State_Mchn.c: 709: }
  3643                           ;State_Mchn.c: 711: Green_Led(1);
  3644  0015E0  0E01               	movlw	1
  3645  0015E2  ECA9  F01E         	call	_Green_Led
  3646                           
  3647                           ;State_Mchn.c: 713: break;
  3648  0015E6  D085               	goto	l326
  3649  0015E8  0E01               	movlw	1
  3650  0015EA  0100               	movlb	0	; () banked
  3651  0015EC  6FAF               	movwf	Train_Path@To& (0+255),b
  3652  0015EE  0E03               	movlw	3
  3653  0015F0  ECDD  F011         	call	_Train_Path
  3654  0015F4  0900               	iorlw	0
  3655  0015F6  A4D8               	btfss	status,2,c
  3656  0015F8  D044               	goto	l364
  3657                           
  3658                           ;State_Mchn.c: 719: {
  3659                           ;State_Mchn.c: 720: Switch_Program = 1;
  3660  0015FA  0E01               	movlw	1
  3661  0015FC  0100               	movlb	0	; () banked
  3662  0015FE  6F8B               	movwf	_Switch_Program& (0+255),b
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;State_Mchn.c: 721: EEPROMxSTORE();
  3666  001600  ECBA  F014         	call	_EEPROMxSTORE	;wreg free
  3667  001604                     l9030:
  3668                           
  3669                           ;State_Mchn.c: 722: if(Stop_Program == 1)
  3670  001604  0100               	movlb	0	; () banked
  3671  001606  0587               	decf	_Stop_Program& (0+255),w,b
  3672  001608  A4D8               	btfss	status,2,c
  3673  00160A  D03B               	goto	l364
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;State_Mchn.c: 723: {
  3677                           ;State_Mchn.c: 724: Switch_Main = 1;
  3678  00160C  0E01               	movlw	1
  3679  00160E  6FC5               	movwf	_Switch_Main& (0+255),b
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;State_Mchn.c: 726: }
  3683                           ;State_Mchn.c: 727: }
  3684                           ;State_Mchn.c: 728: break;
  3685                           
  3686                           ; BSR set to: 0
  3687  001610  D038               	goto	l364
  3688  001612                     
  3689                           ; BSR set to: 0
  3690                           
  3691                           ; BSR set to: 0
  3692  001612  0E04               	movlw	4
  3693  001614  6FAF               	movwf	Train_Path@To& (0+255),b
  3694  001616  0E01               	movlw	1
  3695  001618  ECDD  F011         	call	_Train_Path
  3696  00161C  0900               	iorlw	0
  3697  00161E  A4D8               	btfss	status,2,c
  3698  001620  D030               	goto	l364
  3699                           
  3700                           ;State_Mchn.c: 731: {
  3701                           ;State_Mchn.c: 732: Switch_Program = 2;
  3702  001622  0E02               	movlw	2
  3703  001624  0100               	movlb	0	; () banked
  3704  001626  6F8B               	movwf	_Switch_Program& (0+255),b
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;State_Mchn.c: 733: EEPROMxSTORE();
  3708  001628  ECBA  F014         	call	_EEPROMxSTORE	;wreg free
  3709  00162C  D7EB               	goto	l9030
  3710  00162E                     
  3711                           ; BSR set to: 0
  3712                           
  3713                           ; BSR set to: 0
  3714  00162E  0E02               	movlw	2
  3715  001630  6FAF               	movwf	Train_Path@To& (0+255),b
  3716  001632  0E04               	movlw	4
  3717  001634  ECDD  F011         	call	_Train_Path
  3718  001638  0900               	iorlw	0
  3719  00163A  A4D8               	btfss	status,2,c
  3720  00163C  D022               	goto	l364
  3721                           
  3722                           ;State_Mchn.c: 743: {
  3723                           ;State_Mchn.c: 744: Switch_Program = 3;
  3724  00163E  0E03               	movlw	3
  3725  001640  0100               	movlb	0	; () banked
  3726  001642  6F8B               	movwf	_Switch_Program& (0+255),b
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;State_Mchn.c: 745: EEPROMxSTORE();
  3730  001644  ECBA  F014         	call	_EEPROMxSTORE	;wreg free
  3731  001648  D7DD               	goto	l9030
  3732  00164A                     
  3733                           ; BSR set to: 0
  3734                           
  3735                           ; BSR set to: 0
  3736  00164A  0E03               	movlw	3
  3737  00164C  6FAF               	movwf	Train_Path@To& (0+255),b
  3738  00164E  0E02               	movlw	2
  3739  001650  ECDD  F011         	call	_Train_Path
  3740  001654  0900               	iorlw	0
  3741  001656  A4D8               	btfss	status,2,c
  3742  001658  D014               	goto	l364
  3743                           
  3744                           ;State_Mchn.c: 755: {
  3745                           ;State_Mchn.c: 756: Switch_Program = 0;
  3746  00165A  0E00               	movlw	0
  3747  00165C  0100               	movlb	0	; () banked
  3748  00165E  6F8B               	movwf	_Switch_Program& (0+255),b
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;State_Mchn.c: 757: EEPROMxSTORE();
  3752  001660  ECBA  F014         	call	_EEPROMxSTORE	;wreg free
  3753  001664  D7CF               	goto	l9030
  3754  001666                     
  3755                           ; BSR set to: 0
  3756  001666  0100               	movlb	0	; () banked
  3757  001668  518B               	movf	_Switch_Program& (0+255),w,b
  3758                           
  3759                           ; Switch size 1, requested type "space"
  3760                           ; Number of cases is 4, Range of values is 0 to 3
  3761                           ; switch strategies available:
  3762                           ; Name         Instructions Cycles
  3763                           ; simple_byte           13     7 (average)
  3764                           ;	Chosen strategy is simple_byte
  3765  00166A  0A00               	xorlw	0	; case 0
  3766  00166C  B4D8               	btfsc	status,2,c
  3767  00166E  D7BC               	goto	l361
  3768  001670  0A01               	xorlw	1	; case 1
  3769  001672  B4D8               	btfsc	status,2,c
  3770  001674  D7CE               	goto	l365
  3771  001676  0A03               	xorlw	3	; case 2
  3772  001678  B4D8               	btfsc	status,2,c
  3773  00167A  D7D9               	goto	l368
  3774  00167C  0A01               	xorlw	1	; case 3
  3775  00167E  B4D8               	btfsc	status,2,c
  3776  001680  D7E4               	goto	l371
  3777  001682                     l364:
  3778                           
  3779                           ;State_Mchn.c: 951: if(GETxAPIxVAL(33) || GETxAPIxVAL(71))
  3780                           
  3781                           ; BSR set to: 0
  3782  001682  0E00               	movlw	0
  3783  001684  6E14               	movwf	GETxAPIxVAL@index+1,c
  3784  001686  0E21               	movlw	33
  3785  001688  6E13               	movwf	GETxAPIxVAL@index,c
  3786  00168A  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  3787  00168E  5013               	movf	?_GETxAPIxVAL,w,c
  3788  001690  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3789  001692  A4D8               	btfss	status,2,c
  3790  001694  D00A               	goto	u9490
  3791  001696  0E00               	movlw	0
  3792  001698  6E14               	movwf	GETxAPIxVAL@index+1,c
  3793  00169A  0E47               	movlw	71
  3794  00169C  6E13               	movwf	GETxAPIxVAL@index,c
  3795  00169E  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  3796  0016A2  5013               	movf	?_GETxAPIxVAL,w,c
  3797  0016A4  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  3798  0016A6  B4D8               	btfsc	status,2,c
  3799  0016A8  D00D               	goto	l375
  3800  0016AA                     u9490:
  3801                           
  3802                           ;State_Mchn.c: 952: {
  3803                           ;State_Mchn.c: 953: Stop_Program = 1;
  3804  0016AA  0E01               	movlw	1
  3805  0016AC  0100               	movlb	0	; () banked
  3806  0016AE  6F87               	movwf	_Stop_Program& (0+255),b
  3807                           
  3808                           ; BSR set to: 0
  3809                           ;State_Mchn.c: 954: SETxAPIxVAL(71, 0);
  3810  0016B0  0E00               	movlw	0
  3811  0016B2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3812  0016B4  0E47               	movlw	71
  3813  0016B6  6E19               	movwf	SETxAPIxVAL@index,c
  3814  0016B8  0E00               	movlw	0
  3815  0016BA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  3816  0016BC  0E00               	movlw	0
  3817  0016BE  6E1B               	movwf	SETxAPIxVAL@value,c
  3818  0016C0  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  3819  0016C4                     l375:
  3820                           
  3821                           ;State_Mchn.c: 955: }
  3822                           ;State_Mchn.c: 957: if(Stop_Program == 1)
  3823  0016C4  0100               	movlb	0	; () banked
  3824  0016C6  0587               	decf	_Stop_Program& (0+255),w,b
  3825  0016C8  A4D8               	btfss	status,2,c
  3826  0016CA  D003               	goto	l378
  3827                           
  3828                           ; BSR set to: 0
  3829                           ;State_Mchn.c: 958: {
  3830                           ;State_Mchn.c: 959: Red_Led(2);
  3831  0016CC  0E02               	movlw	2
  3832  0016CE  EC64  F01E         	call	_Red_Led
  3833  0016D2                     l378:
  3834                           
  3835                           ;State_Mchn.c: 960: }
  3836                           ;State_Mchn.c: 962: Green_Led(1);
  3837  0016D2  0E01               	movlw	1
  3838  0016D4  ECA9  F01E         	call	_Green_Led
  3839                           
  3840                           ;State_Mchn.c: 967: }
  3841                           
  3842                           ;State_Mchn.c: 966: default : break;
  3843                           
  3844                           ;State_Mchn.c: 964: break;
  3845  0016D8  D00C               	goto	l326
  3846  0016DA                     l191:
  3847  0016DA  0100               	movlb	0	; () banked
  3848  0016DC  51C5               	movf	_Switch_Main& (0+255),w,b
  3849                           
  3850                           ; Switch size 1, requested type "space"
  3851                           ; Number of cases is 3, Range of values is 1 to 3
  3852                           ; switch strategies available:
  3853                           ; Name         Instructions Cycles
  3854                           ; simple_byte           10     6 (average)
  3855                           ;	Chosen strategy is simple_byte
  3856  0016DE  0A01               	xorlw	1	; case 1
  3857  0016E0  B4D8               	btfsc	status,2,c
  3858  0016E2  EF63  F004         	goto	l192
  3859  0016E6  0A03               	xorlw	3	; case 2
  3860  0016E8  B4D8               	btfsc	status,2,c
  3861  0016EA  D739               	goto	l328
  3862  0016EC  0A01               	xorlw	1	; case 3
  3863  0016EE  B4D8               	btfsc	status,2,c
  3864  0016F0  D7BA               	goto	l360
  3865  0016F2                     l326:
  3866                           
  3867                           ;State_Mchn.c: 968: SETxAPIxVAL(63, Switch_Main);
  3868                           
  3869                           ; BSR set to: 0
  3870  0016F2  0E00               	movlw	0
  3871  0016F4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3872  0016F6  0E3F               	movlw	63
  3873  0016F8  6E19               	movwf	SETxAPIxVAL@index,c
  3874  0016FA  C0C5  F01B         	movff	_Switch_Main,SETxAPIxVAL@value
  3875  0016FE  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3876  001700  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  3877                           
  3878                           ;State_Mchn.c: 969: SETxAPIxVAL(80, Switch_Program);
  3879  001704  0E00               	movlw	0
  3880  001706  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3881  001708  0E50               	movlw	80
  3882  00170A  6E19               	movwf	SETxAPIxVAL@index,c
  3883  00170C  C08B  F01B         	movff	_Switch_Program,SETxAPIxVAL@value
  3884  001710  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3885  001712  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  3886  001716  0012               	return		;funcret
  3887  001718                     __end_of_Update_StateMchn:
  3888                           	opt stack 0
  3889                           tblptru	equ	0xFF8
  3890                           tblptrh	equ	0xFF7
  3891                           tblptrl	equ	0xFF6
  3892                           tablat	equ	0xFF5
  3893                           postinc0	equ	0xFEE
  3894                           wreg	equ	0xFE8
  3895                           postdec1	equ	0xFE5
  3896                           fsr1h	equ	0xFE2
  3897                           fsr1l	equ	0xFE1
  3898                           status	equ	0xFD8
  3899                           
  3900 ;; *************** function _Train_Path *****************
  3901 ;; Defined at:
  3902 ;;		line 987 in file "../State_Mchn.c"
  3903 ;; Parameters:    Size  Location     Type
  3904 ;;  From            1    wreg     unsigned char 
  3905 ;;  To              1   23[BANK0 ] unsigned char 
  3906 ;; Auto vars:     Size  Location     Type
  3907 ;;  From            1   24[BANK0 ] unsigned char 
  3908 ;; Return value:  Size  Location     Type
  3909 ;;                  1    wreg      unsigned char 
  3910 ;; Registers used:
  3911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3912 ;; Tracked objects:
  3913 ;;		On entry : 0/0
  3914 ;;		On exit  : 0/0
  3915 ;;		Unchanged: 0/0
  3916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3917 ;;      Params:         0       1       0       0       0       0       0       0       0
  3918 ;;      Locals:         0       1       0       0       0       0       0       0       0
  3919 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3920 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3921 ;;Total ram usage:        2 bytes
  3922 ;; Hardware stack levels used:    1
  3923 ;; Hardware stack levels required when called:    7
  3924 ;; This function calls:
  3925 ;;		_GETxAPIxVAL
  3926 ;;		_Junction
  3927 ;;		_Left_Mountain_From_The_Left
  3928 ;;		_Left_Mountain_From_The_Right
  3929 ;;		_Right_Mountain_From_The_Left
  3930 ;;		_Right_Mountain_From_The_Right
  3931 ;;		_SETxAPIxVAL
  3932 ;;		_Train_Move_Left_Brake
  3933 ;;		_Train_Move_Left_Start
  3934 ;;		_Train_Move_Right_Brake
  3935 ;;		_Train_Move_Right_Start
  3936 ;; This function is called by:
  3937 ;;		_Update_StateMchn
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           	psect	text2
  3942  0023BA                     __ptext2:
  3943                           	opt stack 0
  3944  0023BA                     _Train_Path:
  3945                           	opt stack 22
  3946                           
  3947                           ;incstack = 0
  3948                           ;Train_Path@From stored from wreg
  3949  0023BA  0100               	movlb	0	; () banked
  3950  0023BC  6FB0               	movwf	Train_Path@From& (0+255),b
  3951                           
  3952                           ;State_Mchn.c: 989: static char Return_Val = 1;
  3953                           ;State_Mchn.c: 991: SETxAPIxVAL(61, From);
  3954  0023BE  0E00               	movlw	0
  3955  0023C0  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3956  0023C2  0E3D               	movlw	61
  3957  0023C4  6E19               	movwf	SETxAPIxVAL@index,c
  3958  0023C6  C0B0  F01B         	movff	Train_Path@From,SETxAPIxVAL@value
  3959  0023CA  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3960  0023CC  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  3961                           
  3962                           ;State_Mchn.c: 992: SETxAPIxVAL(62, To);
  3963  0023D0  0E00               	movlw	0
  3964  0023D2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  3965  0023D4  0E3E               	movlw	62
  3966  0023D6  6E19               	movwf	SETxAPIxVAL@index,c
  3967  0023D8  C0AF  F01B         	movff	Train_Path@To,SETxAPIxVAL@value
  3968  0023DC  6A1C               	clrf	SETxAPIxVAL@value+1,c
  3969  0023DE  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  3970                           
  3971                           ;State_Mchn.c: 994: switch(Switch_Train_Path)
  3972  0023E2  D1AC               	goto	l385
  3973  0023E4  0E00               	movlw	0
  3974  0023E6  6E1F               	movwf	Junction@Straight_Bend,c
  3975  0023E8  0E01               	movlw	1
  3976  0023EA  ECCA  F013         	call	_Junction
  3977  0023EE  0900               	iorlw	0
  3978  0023F0  B4D8               	btfsc	status,2,c
  3979  0023F2  D018               	goto	u8100
  3980  0023F4                     l389:
  3981                           
  3982                           ;State_Mchn.c: 1002: }
  3983                           ;State_Mchn.c: 1003: Return_Val = 1;
  3984  0023F4  0E01               	movlw	1
  3985  0023F6  0100               	movlb	0	; () banked
  3986  0023F8                     L42:
  3987  0023F8  6FC4               	movwf	Train_Path@Return_Val& (0+255),b
  3988                           
  3989                           ;State_Mchn.c: 1004: break;
  3990  0023FA  D1CA               	goto	l398
  3991  0023FC                     
  3992                           ; BSR set to: 0
  3993                           
  3994                           ; BSR set to: 0
  3995  0023FC  0E01               	movlw	1
  3996  0023FE  6E1F               	movwf	Junction@Straight_Bend,c
  3997  002400  0E01               	movlw	1
  3998  002402  ECCA  F013         	call	_Junction
  3999  002406  D7F3               	goto	L59
  4000  002408                     
  4001                           ; BSR set to: 0
  4002                           
  4003                           ; BSR set to: 0
  4004  002408  0E01               	movlw	1
  4005  00240A  6E1F               	movwf	Junction@Straight_Bend,c
  4006  00240C  0E00               	movlw	0
  4007  00240E  ECCA  F013         	call	_Junction
  4008  002412  D7ED               	goto	L59
  4009  002414                     
  4010                           ; BSR set to: 0
  4011                           
  4012                           ; BSR set to: 0
  4013  002414  0E00               	movlw	0
  4014  002416  6E1F               	movwf	Junction@Straight_Bend,c
  4015  002418  0E00               	movlw	0
  4016  00241A  ECCA  F013         	call	_Junction
  4017  00241E  0900               	iorlw	0
  4018  002420  A4D8               	btfss	status,2,c
  4019  002422  D7E8               	goto	l389
  4020  002424                     u8100:
  4021                           
  4022                           ;State_Mchn.c: 1020: {
  4023                           ;State_Mchn.c: 1021: Switch_Train_Path = 1;
  4024  002424  0E01               	movlw	1
  4025  002426  D015               	goto	L43
  4026  002428                     
  4027                           ; BSR set to: 0
  4028  002428  0100               	movlb	0	; () banked
  4029  00242A  51B0               	movf	Train_Path@From& (0+255),w,b
  4030                           
  4031                           ; Switch size 1, requested type "space"
  4032                           ; Number of cases is 4, Range of values is 1 to 4
  4033                           ; switch strategies available:
  4034                           ; Name         Instructions Cycles
  4035                           ; simple_byte           13     7 (average)
  4036                           ;	Chosen strategy is simple_byte
  4037  00242C  0A01               	xorlw	1	; case 1
  4038  00242E  B4D8               	btfsc	status,2,c
  4039  002430  D7EB               	goto	l393
  4040  002432  0A03               	xorlw	3	; case 2
  4041  002434  B4D8               	btfsc	status,2,c
  4042  002436  D7EE               	goto	l395
  4043  002438  0A01               	xorlw	1	; case 3
  4044  00243A  B4D8               	btfsc	status,2,c
  4045  00243C  D7D3               	goto	l388
  4046  00243E  0A07               	xorlw	7	; case 4
  4047  002440  B4D8               	btfsc	status,2,c
  4048  002442  D7DC               	goto	l391
  4049                           
  4050                           ; BSR set to: 0
  4051                           ;State_Mchn.c: 1028: break;
  4052  002444  D1A5               	goto	l398
  4053  002446                     
  4054                           ; BSR set to: 0
  4055                           
  4056                           ; BSR set to: 0
  4057  002446  0E00               	movlw	0
  4058  002448  6E1F               	movwf	Junction@Straight_Bend,c
  4059  00244A  0E01               	movlw	1
  4060  00244C  ECCA  F013         	call	_Junction
  4061  002450  D016               	goto	L45
  4062  002452                     L43:
  4063  002452  0100               	movlb	0	; () banked
  4064  002454  6F88               	movwf	_Switch_Train_Path& (0+255),b
  4065                           
  4066                           ;State_Mchn.c: 1035: Return_Val = 1;
  4067  002456  0E01               	movlw	1
  4068  002458  6FC4               	movwf	Train_Path@Return_Val& (0+255),b
  4069  00245A  D7CC               	goto	l389
  4070  00245C                     
  4071                           ; BSR set to: 0
  4072                           
  4073                           ; BSR set to: 0
  4074  00245C  0E01               	movlw	1
  4075  00245E  6E1F               	movwf	Junction@Straight_Bend,c
  4076  002460  0E01               	movlw	1
  4077  002462  ECCA  F013         	call	_Junction
  4078  002466  D00B               	goto	L45
  4079  002468                     
  4080                           ; BSR set to: 0
  4081                           
  4082                           ; BSR set to: 0
  4083  002468  0E01               	movlw	1
  4084  00246A  6E1F               	movwf	Junction@Straight_Bend,c
  4085  00246C  0E00               	movlw	0
  4086  00246E  ECCA  F013         	call	_Junction
  4087  002472  D005               	goto	L45
  4088  002474                     
  4089                           ; BSR set to: 0
  4090                           
  4091                           ; BSR set to: 0
  4092  002474  0E00               	movlw	0
  4093  002476  6E1F               	movwf	Junction@Straight_Bend,c
  4094  002478  0E00               	movlw	0
  4095  00247A  ECCA  F013         	call	_Junction
  4096  00247E                     L45:
  4097  00247E  0900               	iorlw	0
  4098  002480  A4D8               	btfss	status,2,c
  4099  002482  D7B8               	goto	l389
  4100                           
  4101                           ;State_Mchn.c: 1054: {
  4102                           ;State_Mchn.c: 1055: Switch_Train_Path = 2;
  4103  002484  0E02               	movlw	2
  4104  002486  D7E5               	goto	L43
  4105  002488                     
  4106                           ; BSR set to: 0
  4107                           
  4108                           ; BSR set to: 0
  4109  002488  51AF               	movf	Train_Path@To& (0+255),w,b
  4110                           
  4111                           ; Switch size 1, requested type "space"
  4112                           ; Number of cases is 4, Range of values is 1 to 4
  4113                           ; switch strategies available:
  4114                           ; Name         Instructions Cycles
  4115                           ; simple_byte           13     7 (average)
  4116                           ;	Chosen strategy is simple_byte
  4117  00248A  0A01               	xorlw	1	; case 1
  4118  00248C  B4D8               	btfsc	status,2,c
  4119  00248E  D7EC               	goto	l406
  4120  002490  0A03               	xorlw	3	; case 2
  4121  002492  B4D8               	btfsc	status,2,c
  4122  002494  D7EF               	goto	l408
  4123  002496  0A01               	xorlw	1	; case 3
  4124  002498  B4D8               	btfsc	status,2,c
  4125  00249A  D7D5               	goto	l401
  4126  00249C  0A07               	xorlw	7	; case 4
  4127  00249E  B4D8               	btfsc	status,2,c
  4128  0024A0  D7DD               	goto	l404
  4129                           
  4130                           ; BSR set to: 0
  4131                           ;State_Mchn.c: 1062: break;
  4132  0024A2  D176               	goto	l398
  4133  0024A4                     
  4134                           ; BSR set to: 0
  4135                           
  4136                           ; BSR set to: 0
  4137  0024A4  ECFB  F017         	call	_Train_Move_Right_Start	;wreg free
  4138  0024A8  D008               	goto	L48
  4139  0024AA                     
  4140                           ; BSR set to: 0
  4141                           
  4142                           ; BSR set to: 0
  4143  0024AA  ECFB  F017         	call	_Train_Move_Right_Start	;wreg free
  4144  0024AE  D005               	goto	L48
  4145  0024B0                     
  4146                           ; BSR set to: 0
  4147                           
  4148                           ; BSR set to: 0
  4149  0024B0  EC5F  F017         	call	_Train_Move_Left_Start	;wreg free
  4150  0024B4  D002               	goto	L48
  4151  0024B6                     
  4152                           ; BSR set to: 0
  4153                           
  4154                           ; BSR set to: 0
  4155  0024B6  EC5F  F017         	call	_Train_Move_Left_Start	;wreg free
  4156  0024BA                     L48:
  4157  0024BA  0900               	iorlw	0
  4158  0024BC  A4D8               	btfss	status,2,c
  4159  0024BE  D79A               	goto	l389
  4160                           
  4161                           ;State_Mchn.c: 1088: {
  4162                           ;State_Mchn.c: 1089: Switch_Train_Path = 3;
  4163  0024C0  0E03               	movlw	3
  4164  0024C2  D7C7               	goto	L43
  4165  0024C4                     
  4166                           ; BSR set to: 0
  4167                           
  4168                           ; BSR set to: 0
  4169  0024C4  51AF               	movf	Train_Path@To& (0+255),w,b
  4170                           
  4171                           ; Switch size 1, requested type "space"
  4172                           ; Number of cases is 4, Range of values is 1 to 4
  4173                           ; switch strategies available:
  4174                           ; Name         Instructions Cycles
  4175                           ; simple_byte           13     7 (average)
  4176                           ;	Chosen strategy is simple_byte
  4177  0024C6  0A01               	xorlw	1	; case 1
  4178  0024C8  B4D8               	btfsc	status,2,c
  4179  0024CA  D7F2               	goto	l418
  4180  0024CC  0A03               	xorlw	3	; case 2
  4181  0024CE  B4D8               	btfsc	status,2,c
  4182  0024D0  D7F2               	goto	l420
  4183  0024D2  0A01               	xorlw	1	; case 3
  4184  0024D4  B4D8               	btfsc	status,2,c
  4185  0024D6  D7E6               	goto	l413
  4186  0024D8  0A07               	xorlw	7	; case 4
  4187  0024DA  B4D8               	btfsc	status,2,c
  4188  0024DC  D7E6               	goto	l416
  4189                           
  4190                           ; BSR set to: 0
  4191                           ;State_Mchn.c: 1096: break;
  4192  0024DE  D158               	goto	l398
  4193  0024E0                     
  4194                           ; BSR set to: 0
  4195                           
  4196                           ; BSR set to: 0
  4197  0024E0  0E00               	movlw	0
  4198  0024E2  6E14               	movwf	GETxAPIxVAL@index+1,c
  4199  0024E4  0E1C               	movlw	28
  4200  0024E6  6E13               	movwf	GETxAPIxVAL@index,c
  4201  0024E8  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4202  0024EC  0413               	decf	?_GETxAPIxVAL,w,c
  4203  0024EE  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4204  0024F0  B4D8               	btfsc	status,2,c
  4205  0024F2  D09B               	goto	u8340
  4206                           
  4207                           ;State_Mchn.c: 1103: else if(GETxAPIxVAL(41) == 1){
  4208                           
  4209                           ; BSR set to: 0
  4210                           
  4211                           ;State_Mchn.c: 1102: }
  4212                           
  4213                           ;State_Mchn.c: 1101: Switch_Train_Path = 4;
  4214  0024F4  0E00               	movlw	0
  4215  0024F6  6E14               	movwf	GETxAPIxVAL@index+1,c
  4216  0024F8  0E29               	movlw	41
  4217  0024FA  6E13               	movwf	GETxAPIxVAL@index,c
  4218  0024FC  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4219  002500  0413               	decf	?_GETxAPIxVAL,w,c
  4220  002502  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4221  002504  B4D8               	btfsc	status,2,c
  4222  002506  D032               	goto	u8250
  4223                           
  4224                           ;State_Mchn.c: 1106: else if(GETxAPIxVAL(42) == 1){
  4225                           
  4226                           ; BSR set to: 0
  4227                           
  4228                           ;State_Mchn.c: 1105: }
  4229                           
  4230                           ;State_Mchn.c: 1104: Switch_Train_Path = 5;
  4231  002508  0E00               	movlw	0
  4232  00250A  6E14               	movwf	GETxAPIxVAL@index+1,c
  4233  00250C  0E2A               	movlw	42
  4234  00250E  6E13               	movwf	GETxAPIxVAL@index,c
  4235  002510  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4236  002514  0413               	decf	?_GETxAPIxVAL,w,c
  4237  002516  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4238  002518  B4D8               	btfsc	status,2,c
  4239  00251A  D034               	goto	u8260
  4240                           
  4241                           ;State_Mchn.c: 1109: else if(GETxAPIxVAL(44) == 1){
  4242                           
  4243                           ; BSR set to: 0
  4244                           
  4245                           ;State_Mchn.c: 1108: }
  4246                           
  4247                           ;State_Mchn.c: 1107: Switch_Train_Path = 6;
  4248  00251C  0E00               	movlw	0
  4249  00251E  6E14               	movwf	GETxAPIxVAL@index+1,c
  4250  002520  0E2C               	movlw	44
  4251  002522  6E13               	movwf	GETxAPIxVAL@index,c
  4252  002524  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4253  002528  0413               	decf	?_GETxAPIxVAL,w,c
  4254  00252A  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4255  00252C  B4D8               	btfsc	status,2,c
  4256  00252E  D036               	goto	u8270
  4257                           
  4258                           ;State_Mchn.c: 1112: else if(GETxAPIxVAL(43) == 1){
  4259                           
  4260                           ; BSR set to: 0
  4261                           
  4262                           ;State_Mchn.c: 1111: }
  4263                           
  4264                           ;State_Mchn.c: 1110: Switch_Train_Path = 7;
  4265  002530  0E00               	movlw	0
  4266  002532  6E14               	movwf	GETxAPIxVAL@index+1,c
  4267  002534  0E2B               	movlw	43
  4268  002536  6E13               	movwf	GETxAPIxVAL@index,c
  4269  002538  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4270  00253C  D037               	goto	L96
  4271  00253E                     L29:
  4272  00253E  0100               	movlb	0	; () banked
  4273  002540  6F88               	movwf	_Switch_Train_Path& (0+255),b
  4274                           
  4275                           ; BSR set to: 0
  4276                           
  4277                           ; BSR set to: 0
  4278                           
  4279                           ; BSR set to: 0
  4280                           
  4281                           ; BSR set to: 0
  4282  002542  D758               	goto	l389
  4283  002544                     
  4284                           ; BSR set to: 0
  4285                           
  4286                           ; BSR set to: 0
  4287  002544  0E00               	movlw	0
  4288  002546  6E14               	movwf	GETxAPIxVAL@index+1,c
  4289  002548  0E1D               	movlw	29
  4290  00254A  6E13               	movwf	GETxAPIxVAL@index,c
  4291  00254C  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4292  002550  0413               	decf	?_GETxAPIxVAL,w,c
  4293  002552  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4294  002554  B4D8               	btfsc	status,2,c
  4295  002556  D069               	goto	u8340
  4296                           
  4297                           ;State_Mchn.c: 1120: else if(GETxAPIxVAL(41) == 1){
  4298                           
  4299                           ; BSR set to: 0
  4300                           
  4301                           ;State_Mchn.c: 1119: }
  4302                           
  4303                           ;State_Mchn.c: 1118: Switch_Train_Path = 4;
  4304  002558  0E00               	movlw	0
  4305  00255A  6E14               	movwf	GETxAPIxVAL@index+1,c
  4306  00255C  0E29               	movlw	41
  4307  00255E  6E13               	movwf	GETxAPIxVAL@index,c
  4308  002560  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4309  002564  0413               	decf	?_GETxAPIxVAL,w,c
  4310  002566  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4311  002568  A4D8               	btfss	status,2,c
  4312  00256A  D002               	goto	l439
  4313  00256C                     u8250:
  4314                           
  4315                           ;State_Mchn.c: 1121: Switch_Train_Path = 5;
  4316  00256C  0E05               	movlw	5
  4317  00256E  D7E7               	goto	L29
  4318  002570                     l439:
  4319                           
  4320                           ;State_Mchn.c: 1123: else if(GETxAPIxVAL(42) == 1){
  4321                           
  4322                           ; BSR set to: 0
  4323  002570  0E00               	movlw	0
  4324  002572  6E14               	movwf	GETxAPIxVAL@index+1,c
  4325  002574  0E2A               	movlw	42
  4326  002576  6E13               	movwf	GETxAPIxVAL@index,c
  4327  002578  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4328  00257C  0413               	decf	?_GETxAPIxVAL,w,c
  4329  00257E  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4330  002580  A4D8               	btfss	status,2,c
  4331  002582  D002               	goto	l441
  4332  002584                     u8260:
  4333                           
  4334                           ;State_Mchn.c: 1124: Switch_Train_Path = 6;
  4335  002584  0E06               	movlw	6
  4336  002586  D7DB               	goto	L29
  4337  002588                     l441:
  4338                           
  4339                           ;State_Mchn.c: 1126: else if(GETxAPIxVAL(44) == 1){
  4340                           
  4341                           ; BSR set to: 0
  4342  002588  0E00               	movlw	0
  4343  00258A  6E14               	movwf	GETxAPIxVAL@index+1,c
  4344  00258C  0E2C               	movlw	44
  4345  00258E  6E13               	movwf	GETxAPIxVAL@index,c
  4346  002590  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4347  002594  0413               	decf	?_GETxAPIxVAL,w,c
  4348  002596  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4349  002598  A4D8               	btfss	status,2,c
  4350  00259A  D002               	goto	l443
  4351  00259C                     u8270:
  4352                           
  4353                           ;State_Mchn.c: 1127: Switch_Train_Path = 7;
  4354  00259C  0E07               	movlw	7
  4355  00259E  D7CF               	goto	L29
  4356  0025A0                     l443:
  4357                           
  4358                           ;State_Mchn.c: 1129: else if(GETxAPIxVAL(43) == 1){
  4359                           
  4360                           ; BSR set to: 0
  4361  0025A0  0E00               	movlw	0
  4362  0025A2  6E14               	movwf	GETxAPIxVAL@index+1,c
  4363  0025A4  0E2B               	movlw	43
  4364  0025A6  6E13               	movwf	GETxAPIxVAL@index,c
  4365  0025A8  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4366  0025AC                     L96:
  4367  0025AC  0413               	decf	?_GETxAPIxVAL,w,c
  4368  0025AE  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4369  0025B0  A4D8               	btfss	status,2,c
  4370  0025B2  D720               	goto	l389
  4371                           
  4372                           ;State_Mchn.c: 1130: Switch_Train_Path = 8;
  4373  0025B4  0E08               	movlw	8
  4374  0025B6  D7C3               	goto	L29
  4375  0025B8                     
  4376                           ; BSR set to: 0
  4377                           
  4378                           ; BSR set to: 0
  4379  0025B8  0E00               	movlw	0
  4380  0025BA  6E14               	movwf	GETxAPIxVAL@index+1,c
  4381  0025BC  0E1E               	movlw	30
  4382  0025BE  6E13               	movwf	GETxAPIxVAL@index,c
  4383  0025C0  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4384  0025C4  0413               	decf	?_GETxAPIxVAL,w,c
  4385  0025C6  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4386  0025C8  B4D8               	btfsc	status,2,c
  4387  0025CA  D02F               	goto	u8340
  4388                           
  4389                           ;State_Mchn.c: 1138: else if(GETxAPIxVAL(41) == 1){
  4390                           
  4391                           ; BSR set to: 0
  4392                           
  4393                           ;State_Mchn.c: 1137: }
  4394                           
  4395                           ;State_Mchn.c: 1135: {
  4396                           ;State_Mchn.c: 1136: Switch_Train_Path = 4;
  4397  0025CC  0E00               	movlw	0
  4398  0025CE  6E14               	movwf	GETxAPIxVAL@index+1,c
  4399  0025D0  0E29               	movlw	41
  4400  0025D2  6E13               	movwf	GETxAPIxVAL@index,c
  4401  0025D4  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4402  0025D8  0413               	decf	?_GETxAPIxVAL,w,c
  4403  0025DA  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4404  0025DC  B4D8               	btfsc	status,2,c
  4405  0025DE  D031               	goto	u8350
  4406                           
  4407                           ;State_Mchn.c: 1141: else if(GETxAPIxVAL(42) == 1){
  4408                           
  4409                           ; BSR set to: 0
  4410                           
  4411                           ;State_Mchn.c: 1140: }
  4412                           
  4413                           ;State_Mchn.c: 1139: Switch_Train_Path = 12;
  4414  0025E0  0E00               	movlw	0
  4415  0025E2  6E14               	movwf	GETxAPIxVAL@index+1,c
  4416  0025E4  0E2A               	movlw	42
  4417  0025E6  6E13               	movwf	GETxAPIxVAL@index,c
  4418  0025E8  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4419  0025EC  0413               	decf	?_GETxAPIxVAL,w,c
  4420  0025EE  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4421  0025F0  B4D8               	btfsc	status,2,c
  4422  0025F2  D033               	goto	u8360
  4423                           
  4424                           ;State_Mchn.c: 1144: else if(GETxAPIxVAL(44) == 1){
  4425                           
  4426                           ; BSR set to: 0
  4427                           
  4428                           ;State_Mchn.c: 1143: }
  4429                           
  4430                           ;State_Mchn.c: 1142: Switch_Train_Path = 11;
  4431  0025F4  0E00               	movlw	0
  4432  0025F6  6E14               	movwf	GETxAPIxVAL@index+1,c
  4433  0025F8  0E2C               	movlw	44
  4434  0025FA  6E13               	movwf	GETxAPIxVAL@index,c
  4435  0025FC  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4436  002600  0413               	decf	?_GETxAPIxVAL,w,c
  4437  002602  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4438  002604  B4D8               	btfsc	status,2,c
  4439  002606  D035               	goto	u8370
  4440                           
  4441                           ;State_Mchn.c: 1147: else if(GETxAPIxVAL(43) == 1){
  4442                           
  4443                           ; BSR set to: 0
  4444                           
  4445                           ;State_Mchn.c: 1146: }
  4446                           
  4447                           ;State_Mchn.c: 1145: Switch_Train_Path = 10;
  4448  002608  0E00               	movlw	0
  4449  00260A  6E14               	movwf	GETxAPIxVAL@index+1,c
  4450  00260C  0E2B               	movlw	43
  4451  00260E  6E13               	movwf	GETxAPIxVAL@index,c
  4452  002610  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4453  002614  D036               	goto	L97
  4454  002616                     
  4455                           ; BSR set to: 0
  4456                           
  4457                           ; BSR set to: 0
  4458  002616  0E00               	movlw	0
  4459  002618  6E14               	movwf	GETxAPIxVAL@index+1,c
  4460  00261A  0E1F               	movlw	31
  4461  00261C  6E13               	movwf	GETxAPIxVAL@index,c
  4462  00261E  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4463  002622  0413               	decf	?_GETxAPIxVAL,w,c
  4464  002624  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4465  002626  A4D8               	btfss	status,2,c
  4466  002628  D002               	goto	l457
  4467  00262A                     u8340:
  4468                           
  4469                           ;State_Mchn.c: 1153: {
  4470                           ;State_Mchn.c: 1154: Switch_Train_Path = 4;
  4471  00262A  0E04               	movlw	4
  4472  00262C  D788               	goto	L29
  4473  00262E                     l457:
  4474                           
  4475                           ;State_Mchn.c: 1156: else if(GETxAPIxVAL(41) == 1){
  4476                           
  4477                           ; BSR set to: 0
  4478  00262E  0E00               	movlw	0
  4479  002630  6E14               	movwf	GETxAPIxVAL@index+1,c
  4480  002632  0E29               	movlw	41
  4481  002634  6E13               	movwf	GETxAPIxVAL@index,c
  4482  002636  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4483  00263A  0413               	decf	?_GETxAPIxVAL,w,c
  4484  00263C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4485  00263E  A4D8               	btfss	status,2,c
  4486  002640  D002               	goto	l459
  4487  002642                     u8350:
  4488                           
  4489                           ;State_Mchn.c: 1157: Switch_Train_Path = 12;
  4490  002642  0E0C               	movlw	12
  4491  002644  D77C               	goto	L29
  4492  002646                     l459:
  4493                           
  4494                           ;State_Mchn.c: 1159: else if(GETxAPIxVAL(42) == 1){
  4495                           
  4496                           ; BSR set to: 0
  4497  002646  0E00               	movlw	0
  4498  002648  6E14               	movwf	GETxAPIxVAL@index+1,c
  4499  00264A  0E2A               	movlw	42
  4500  00264C  6E13               	movwf	GETxAPIxVAL@index,c
  4501  00264E  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4502  002652  0413               	decf	?_GETxAPIxVAL,w,c
  4503  002654  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4504  002656  A4D8               	btfss	status,2,c
  4505  002658  D002               	goto	l461
  4506  00265A                     u8360:
  4507                           
  4508                           ;State_Mchn.c: 1160: Switch_Train_Path = 11;
  4509  00265A  0E0B               	movlw	11
  4510  00265C  D770               	goto	L29
  4511  00265E                     l461:
  4512                           
  4513                           ;State_Mchn.c: 1162: else if(GETxAPIxVAL(44) == 1){
  4514                           
  4515                           ; BSR set to: 0
  4516  00265E  0E00               	movlw	0
  4517  002660  6E14               	movwf	GETxAPIxVAL@index+1,c
  4518  002662  0E2C               	movlw	44
  4519  002664  6E13               	movwf	GETxAPIxVAL@index,c
  4520  002666  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4521  00266A  0413               	decf	?_GETxAPIxVAL,w,c
  4522  00266C  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4523  00266E  A4D8               	btfss	status,2,c
  4524  002670  D002               	goto	l463
  4525  002672                     u8370:
  4526                           
  4527                           ;State_Mchn.c: 1163: Switch_Train_Path = 10;
  4528  002672  0E0A               	movlw	10
  4529  002674  D764               	goto	L29
  4530  002676                     l463:
  4531                           
  4532                           ;State_Mchn.c: 1165: else if(GETxAPIxVAL(43) == 1){
  4533                           
  4534                           ; BSR set to: 0
  4535  002676  0E00               	movlw	0
  4536  002678  6E14               	movwf	GETxAPIxVAL@index+1,c
  4537  00267A  0E2B               	movlw	43
  4538  00267C  6E13               	movwf	GETxAPIxVAL@index,c
  4539  00267E  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4540  002682                     L97:
  4541  002682  0413               	decf	?_GETxAPIxVAL,w,c
  4542  002684  1014               	iorwf	?_GETxAPIxVAL+1,w,c
  4543  002686  A4D8               	btfss	status,2,c
  4544  002688  D6B5               	goto	l389
  4545                           
  4546                           ;State_Mchn.c: 1166: Switch_Train_Path = 9;
  4547  00268A  0E09               	movlw	9
  4548  00268C  D758               	goto	L29
  4549  00268E                     
  4550                           ; BSR set to: 0
  4551                           
  4552                           ; BSR set to: 0
  4553  00268E  51AF               	movf	Train_Path@To& (0+255),w,b
  4554                           
  4555                           ; Switch size 1, requested type "space"
  4556                           ; Number of cases is 4, Range of values is 1 to 4
  4557                           ; switch strategies available:
  4558                           ; Name         Instructions Cycles
  4559                           ; simple_byte           13     7 (average)
  4560                           ;	Chosen strategy is simple_byte
  4561  002690  0A01               	xorlw	1	; case 1
  4562  002692  B4D8               	btfsc	status,2,c
  4563  002694  D791               	goto	l446
  4564  002696  0A03               	xorlw	3	; case 2
  4565  002698  B4D8               	btfsc	status,2,c
  4566  00269A  D7BD               	goto	l456
  4567  00269C  0A01               	xorlw	1	; case 3
  4568  00269E  B4D8               	btfsc	status,2,c
  4569  0026A0  D71F               	goto	l425
  4570  0026A2  0A07               	xorlw	7	; case 4
  4571  0026A4  B4D8               	btfsc	status,2,c
  4572  0026A6  D74E               	goto	l436
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;State_Mchn.c: 1172: break;
  4576  0026A8  D073               	goto	l398
  4577  0026AA                     
  4578                           ; BSR set to: 0
  4579                           
  4580                           ; BSR set to: 0
  4581  0026AA  ECBF  F016         	call	_Train_Move_Right_Brake	;wreg free
  4582  0026AE  D008               	goto	L98
  4583  0026B0                     
  4584                           ; BSR set to: 0
  4585                           
  4586                           ; BSR set to: 0
  4587  0026B0  ECBF  F016         	call	_Train_Move_Right_Brake	;wreg free
  4588  0026B4  D005               	goto	L98
  4589  0026B6                     
  4590                           ; BSR set to: 0
  4591                           
  4592                           ; BSR set to: 0
  4593  0026B6  EC1C  F016         	call	_Train_Move_Left_Brake	;wreg free
  4594  0026BA  D002               	goto	L98
  4595  0026BC                     
  4596                           ; BSR set to: 0
  4597                           
  4598                           ; BSR set to: 0
  4599  0026BC  EC1C  F016         	call	_Train_Move_Left_Brake	;wreg free
  4600  0026C0                     L98:
  4601  0026C0  0900               	iorlw	0
  4602  0026C2  A4D8               	btfss	status,2,c
  4603  0026C4  D697               	goto	l389
  4604                           
  4605                           ;State_Mchn.c: 1201: {
  4606                           ;State_Mchn.c: 1202: Switch_Train_Path = 0;
  4607  0026C6  0E00               	movlw	0
  4608  0026C8  0100               	movlb	0	; () banked
  4609  0026CA  6F88               	movwf	_Switch_Train_Path& (0+255),b
  4610                           
  4611                           ;State_Mchn.c: 1203: Return_Val = 0;
  4612  0026CC  0E00               	movlw	0
  4613  0026CE  D694               	goto	L42
  4614  0026D0                     
  4615                           ; BSR set to: 0
  4616                           
  4617                           ; BSR set to: 0
  4618  0026D0  51AF               	movf	Train_Path@To& (0+255),w,b
  4619                           
  4620                           ; Switch size 1, requested type "space"
  4621                           ; Number of cases is 4, Range of values is 1 to 4
  4622                           ; switch strategies available:
  4623                           ; Name         Instructions Cycles
  4624                           ; simple_byte           13     7 (average)
  4625                           ;	Chosen strategy is simple_byte
  4626  0026D2  0A01               	xorlw	1	; case 1
  4627  0026D4  B4D8               	btfsc	status,2,c
  4628  0026D6  D7EF               	goto	l474
  4629  0026D8  0A03               	xorlw	3	; case 2
  4630  0026DA  B4D8               	btfsc	status,2,c
  4631  0026DC  D7EF               	goto	l476
  4632  0026DE  0A01               	xorlw	1	; case 3
  4633  0026E0  B4D8               	btfsc	status,2,c
  4634  0026E2  D7E3               	goto	l469
  4635  0026E4  0A07               	xorlw	7	; case 4
  4636  0026E6  B4D8               	btfsc	status,2,c
  4637  0026E8  D7E3               	goto	l472
  4638                           
  4639                           ; BSR set to: 0
  4640                           ;State_Mchn.c: 1210: break;
  4641  0026EA  D052               	goto	l398
  4642  0026EC                     
  4643                           ; BSR set to: 0
  4644                           ;State_Mchn.c: 1213: if(Left_Mountain_From_The_Left(1) == 0){
  4645                           
  4646                           ; BSR set to: 0
  4647  0026EC  0E01               	movlw	1
  4648  0026EE  ECC9  F01A         	call	_Left_Mountain_From_The_Left
  4649  0026F2  D01B               	goto	L55
  4650  0026F4                     
  4651                           ; BSR set to: 0
  4652                           ;State_Mchn.c: 1220: if(Left_Mountain_From_The_Left(2) == 0){
  4653                           
  4654                           ; BSR set to: 0
  4655  0026F4  0E02               	movlw	2
  4656  0026F6  ECC9  F01A         	call	_Left_Mountain_From_The_Left
  4657  0026FA  D017               	goto	L55
  4658  0026FC                     
  4659                           ; BSR set to: 0
  4660                           ;State_Mchn.c: 1227: if(Right_Mountain_From_The_Left(3) == 0){
  4661                           
  4662                           ; BSR set to: 0
  4663  0026FC  0E03               	movlw	3
  4664  0026FE  ECB5  F019         	call	_Right_Mountain_From_The_Left
  4665  002702  D013               	goto	L55
  4666  002704                     
  4667                           ; BSR set to: 0
  4668                           ;State_Mchn.c: 1234: if(Right_Mountain_From_The_Left(4) == 0){
  4669                           
  4670                           ; BSR set to: 0
  4671  002704  0E04               	movlw	4
  4672  002706  ECB5  F019         	call	_Right_Mountain_From_The_Left
  4673  00270A  D00F               	goto	L55
  4674  00270C                     
  4675                           ; BSR set to: 0
  4676                           ;State_Mchn.c: 1241: if(Right_Mountain_From_The_Right(4) == 0){
  4677                           
  4678                           ; BSR set to: 0
  4679  00270C  0E04               	movlw	4
  4680  00270E  EC2B  F019         	call	_Right_Mountain_From_The_Right
  4681  002712  D00B               	goto	L55
  4682  002714                     
  4683                           ; BSR set to: 0
  4684                           ;State_Mchn.c: 1248: if(Right_Mountain_From_The_Right(3) == 0){
  4685                           
  4686                           ; BSR set to: 0
  4687  002714  0E03               	movlw	3
  4688  002716  EC2B  F019         	call	_Right_Mountain_From_The_Right
  4689  00271A  D007               	goto	L55
  4690  00271C                     
  4691                           ; BSR set to: 0
  4692                           ;State_Mchn.c: 1255: if(Left_Mountain_From_The_Right(2) == 0){
  4693                           
  4694                           ; BSR set to: 0
  4695  00271C  0E02               	movlw	2
  4696  00271E  EC52  F01B         	call	_Left_Mountain_From_The_Right
  4697  002722  D003               	goto	L55
  4698  002724                     
  4699                           ; BSR set to: 0
  4700                           ;State_Mchn.c: 1262: if(Left_Mountain_From_The_Right(1) == 0){
  4701                           
  4702                           ; BSR set to: 0
  4703  002724  0E01               	movlw	1
  4704  002726  EC52  F01B         	call	_Left_Mountain_From_The_Right
  4705  00272A                     L55:
  4706  00272A  0900               	iorlw	0
  4707  00272C  A4D8               	btfss	status,2,c
  4708  00272E  D662               	goto	l389
  4709                           
  4710                           ;State_Mchn.c: 1263: Switch_Train_Path = 3;
  4711  002730  0E03               	movlw	3
  4712  002732  D705               	goto	L29
  4713  002734                     
  4714                           ; BSR set to: 0
  4715                           
  4716                           ; BSR set to: 0
  4717  002734  0E00               	movlw	0
  4718  002736  6F88               	movwf	_Switch_Train_Path& (0+255),b
  4719  002738  0E01               	movlw	1
  4720  00273A  D65E               	goto	L42
  4721  00273C                     l385:
  4722                           
  4723                           ; BSR set to: 0
  4724  00273C  0100               	movlb	0	; () banked
  4725  00273E  5188               	movf	_Switch_Train_Path& (0+255),w,b
  4726                           
  4727                           ; Switch size 1, requested type "space"
  4728                           ; Number of cases is 13, Range of values is 0 to 12
  4729                           ; switch strategies available:
  4730                           ; Name         Instructions Cycles
  4731                           ; simple_byte           40    21 (average)
  4732                           ;	Chosen strategy is simple_byte
  4733  002740  0A00               	xorlw	0	; case 0
  4734  002742  B4D8               	btfsc	status,2,c
  4735  002744  D671               	goto	l387
  4736  002746  0A01               	xorlw	1	; case 1
  4737  002748  B4D8               	btfsc	status,2,c
  4738  00274A  D69E               	goto	l400
  4739  00274C  0A03               	xorlw	3	; case 2
  4740  00274E  B4D8               	btfsc	status,2,c
  4741  002750  D6B9               	goto	l412
  4742  002752  0A01               	xorlw	1	; case 3
  4743  002754  B4D8               	btfsc	status,2,c
  4744  002756  D79B               	goto	l424
  4745  002758  0A07               	xorlw	7	; case 4
  4746  00275A  B4D8               	btfsc	status,2,c
  4747  00275C  D7B9               	goto	l468
  4748  00275E  0A01               	xorlw	1	; case 5
  4749  002760  B4D8               	btfsc	status,2,c
  4750  002762  D7C4               	goto	l479
  4751  002764  0A03               	xorlw	3	; case 6
  4752  002766  B4D8               	btfsc	status,2,c
  4753  002768  D7C5               	goto	l481
  4754  00276A  0A01               	xorlw	1	; case 7
  4755  00276C  B4D8               	btfsc	status,2,c
  4756  00276E  D7C6               	goto	l483
  4757  002770  0A0F               	xorlw	15	; case 8
  4758  002772  B4D8               	btfsc	status,2,c
  4759  002774  D7C7               	goto	l485
  4760  002776  0A01               	xorlw	1	; case 9
  4761  002778  B4D8               	btfsc	status,2,c
  4762  00277A  D7C8               	goto	l487
  4763  00277C  0A03               	xorlw	3	; case 10
  4764  00277E  B4D8               	btfsc	status,2,c
  4765  002780  D7C9               	goto	l489
  4766  002782  0A01               	xorlw	1	; case 11
  4767  002784  B4D8               	btfsc	status,2,c
  4768  002786  D7CA               	goto	l491
  4769  002788  0A07               	xorlw	7	; case 12
  4770  00278A  B4D8               	btfsc	status,2,c
  4771  00278C  D7CB               	goto	l493
  4772  00278E  D7D2               	goto	l495
  4773  002790                     l398:
  4774                           
  4775                           ; BSR set to: 0
  4776                           ;State_Mchn.c: 1271: return(Return_Val);
  4777                           
  4778                           ; BSR set to: 0
  4779  002790  51C4               	movf	Train_Path@Return_Val& (0+255),w,b
  4780  002792  0012               	return	
  4781  002794                     __end_of_Train_Path:
  4782                           	opt stack 0
  4783                           tblptru	equ	0xFF8
  4784                           tblptrh	equ	0xFF7
  4785                           tblptrl	equ	0xFF6
  4786                           tablat	equ	0xFF5
  4787                           postinc0	equ	0xFEE
  4788                           wreg	equ	0xFE8
  4789                           postdec1	equ	0xFE5
  4790                           fsr1h	equ	0xFE2
  4791                           fsr1l	equ	0xFE1
  4792                           status	equ	0xFD8
  4793                           
  4794 ;; *************** function _Train_Move_Right_Start *****************
  4795 ;; Defined at:
  4796 ;;		line 27 in file "../train_move_right.c"
  4797 ;; Parameters:    Size  Location     Type
  4798 ;;		None
  4799 ;; Auto vars:     Size  Location     Type
  4800 ;;		None
  4801 ;; Return value:  Size  Location     Type
  4802 ;;                  1    wreg      unsigned char 
  4803 ;; Registers used:
  4804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4805 ;; Tracked objects:
  4806 ;;		On entry : 0/0
  4807 ;;		On exit  : 0/0
  4808 ;;		Unchanged: 0/0
  4809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4810 ;;      Params:         0       0       0       0       0       0       0       0       0
  4811 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4812 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4813 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4814 ;;Total ram usage:        2 bytes
  4815 ;; Hardware stack levels used:    1
  4816 ;; Hardware stack levels required when called:    6
  4817 ;; This function calls:
  4818 ;;		_GETxAPIxVAL
  4819 ;;		_SETxAPIxVAL
  4820 ;;		_SETxPWM
  4821 ;; This function is called by:
  4822 ;;		_Train_Path
  4823 ;; This function uses a non-reentrant model
  4824 ;;
  4825                           
  4826                           	psect	text3
  4827  002FF6                     __ptext3:
  4828                           	opt stack 0
  4829  002FF6                     _Train_Move_Right_Start:
  4830                           	opt stack 22
  4831                           
  4832                           ;train_move_right.c: 29: static char Return_Val = 1;
  4833                           ;train_move_right.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  4834                           ;train_move_right.c: 32: switch(Switch_Train_Move)
  4835                           
  4836                           ; BSR set to: 0
  4837                           ;incstack = 0
  4838  002FF6  D08A               	goto	l1156
  4839  002FF8  0E00               	movlw	0
  4840  002FFA  6E14               	movwf	GETxAPIxVAL@index+1,c
  4841  002FFC  0E14               	movlw	20
  4842  002FFE  6E13               	movwf	GETxAPIxVAL@index,c
  4843  003000  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4844  003004  5013               	movf	?_GETxAPIxVAL,w,c
  4845  003006  0100               	movlb	0	; () banked
  4846  003008  5D62               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  4847  00300A  5014               	movf	?_GETxAPIxVAL+1,w,c
  4848  00300C  5963               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4849  00300E  A0D8               	btfss	status,0,c
  4850  003010  D002               	goto	l1158
  4851                           
  4852                           ; BSR set to: 0
  4853                           ;train_move_right.c: 37: {
  4854                           ;train_move_right.c: 38: Switch_Train_Move = 1;
  4855  003012  0E01               	movlw	1
  4856  003014  D03D               	goto	L63
  4857  003016                     l1158:
  4858                           
  4859                           ; BSR set to: 0
  4860                           ;train_move_right.c: 42: }
  4861                           ;train_move_right.c: 43: Train_Move_Wait_Time++;
  4862                           
  4863                           ; BSR set to: 0
  4864  003016  4B62               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  4865  003018  2B63               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4866                           
  4867                           ; BSR set to: 0
  4868                           ;train_move_right.c: 44: Switch_Train_Move = 0;
  4869  00301A  0E00               	movlw	0
  4870  00301C  6F80               	movwf	_Switch_Train_Move& (0+255),b
  4871  00301E  D073               	goto	L64
  4872  003020                     
  4873                           ; BSR set to: 0
  4874                           
  4875                           ; BSR set to: 0
  4876  003020  0E00               	movlw	0
  4877  003022  6E14               	movwf	GETxAPIxVAL@index+1,c
  4878  003024  0E16               	movlw	22
  4879  003026  6E13               	movwf	GETxAPIxVAL@index,c
  4880  003028  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4881  00302C  C013  F0AD         	movff	?_GETxAPIxVAL,_Train_Move_Right_Start$2188
  4882  003030  C014  F0AE         	movff	?_GETxAPIxVAL+1,_Train_Move_Right_Start$2188+1
  4883  003034  C0AD  F01F         	movff	_Train_Move_Right_Start$2188,SETxPWM@speed
  4884  003038  C0AE  F020         	movff	_Train_Move_Right_Start$2188+1,SETxPWM@speed+1
  4885  00303C  0E01               	movlw	1
  4886  00303E  6E21               	movwf	SETxPWM@direction,c
  4887  003040  EC1A  F01D         	call	_SETxPWM	;wreg free
  4888                           
  4889                           ;train_move_right.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(22);
  4890  003044  0E00               	movlw	0
  4891  003046  6E14               	movwf	GETxAPIxVAL@index+1,c
  4892  003048  0E16               	movlw	22
  4893  00304A  6E13               	movwf	GETxAPIxVAL@index,c
  4894  00304C  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4895  003050  C013  F07E         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  4896  003054  C014  F07F         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  4897                           
  4898                           ;train_move_right.c: 50: SETxAPIxVAL(69, 0);;
  4899  003058  0E00               	movlw	0
  4900  00305A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  4901  00305C  0E45               	movlw	69
  4902  00305E  6E19               	movwf	SETxAPIxVAL@index,c
  4903  003060  0E00               	movlw	0
  4904  003062  6E1C               	movwf	SETxAPIxVAL@value+1,c
  4905  003064  0E00               	movlw	0
  4906  003066  6E1B               	movwf	SETxAPIxVAL@value,c
  4907  003068  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  4908                           
  4909                           ;train_move_right.c: 51: Return_Val = 1;
  4910  00306C  0E01               	movlw	1
  4911  00306E  0100               	movlb	0	; () banked
  4912  003070  6FC1               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4913  003072  D018               	goto	l7338
  4914  003074                     
  4915                           ; BSR set to: 0
  4916                           
  4917                           ; BSR set to: 0
  4918  003074  0E00               	movlw	0
  4919  003076  6E14               	movwf	GETxAPIxVAL@index+1,c
  4920  003078  0E12               	movlw	18
  4921  00307A  6E13               	movwf	GETxAPIxVAL@index,c
  4922  00307C  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4923  003080  5013               	movf	?_GETxAPIxVAL,w,c
  4924  003082  0100               	movlb	0	; () banked
  4925  003084  5D62               	subwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),w,b
  4926  003086  5014               	movf	?_GETxAPIxVAL+1,w,c
  4927  003088  5963               	subwfb	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  4928  00308A  A0D8               	btfss	status,0,c
  4929  00308C  D007               	goto	l1162
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;train_move_right.c: 56: {
  4933                           ;train_move_right.c: 57: Switch_Train_Move = 3;
  4934  00308E  0E03               	movlw	3
  4935  003090                     L63:
  4936  003090  6F80               	movwf	_Switch_Train_Move& (0+255),b
  4937                           
  4938                           ;train_move_right.c: 58: Train_Move_Wait_Time = 0;
  4939  003092  0E00               	movlw	0
  4940  003094  6F63               	movwf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),b
  4941  003096  0E00               	movlw	0
  4942  003098  6F62               	movwf	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),b
  4943  00309A  D035               	goto	L64
  4944  00309C                     l1162:
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;train_move_right.c: 61: }
  4948                           ;train_move_right.c: 62: Return_Val = 1;
  4949                           
  4950                           ; BSR set to: 0
  4951  00309C  0E01               	movlw	1
  4952  00309E  6FC1               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  4953                           
  4954                           ; BSR set to: 0
  4955                           ;train_move_right.c: 63: Train_Move_Wait_Time++;
  4956  0030A0  4B62               	infsnz	Train_Move_Right_Start@Train_Move_Wait_Time& (0+255),f,b
  4957  0030A2  2B63               	incf	(Train_Move_Right_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  4958  0030A4                     l7338:
  4959                           
  4960                           ; BSR set to: 0
  4961                           ;train_move_right.c: 64: Switch_Train_Move = 2;
  4962  0030A4  0E02               	movlw	2
  4963  0030A6  6F80               	movwf	_Switch_Train_Move& (0+255),b
  4964                           
  4965                           ;train_move_right.c: 65: break;
  4966  0030A8  D03F               	goto	l1159
  4967  0030AA                     
  4968                           ; BSR set to: 0
  4969                           
  4970                           ; BSR set to: 0
  4971  0030AA  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  4972  0030AE  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  4973  0030B2  0E01               	movlw	1
  4974  0030B4  6E21               	movwf	SETxPWM@direction,c
  4975  0030B6  EC1A  F01D         	call	_SETxPWM	;wreg free
  4976                           
  4977                           ;train_move_right.c: 68: if (Train_Move_Pwm_Count >= GETxAPIxVAL(23))
  4978  0030BA  0E00               	movlw	0
  4979  0030BC  6E14               	movwf	GETxAPIxVAL@index+1,c
  4980  0030BE  0E17               	movlw	23
  4981  0030C0  6E13               	movwf	GETxAPIxVAL@index,c
  4982  0030C2  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  4983  0030C6  5013               	movf	?_GETxAPIxVAL,w,c
  4984  0030C8  0100               	movlb	0	; () banked
  4985  0030CA  5D7E               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  4986  0030CC  5014               	movf	?_GETxAPIxVAL+1,w,c
  4987  0030CE  597F               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  4988  0030D0  A0D8               	btfss	status,0,c
  4989  0030D2  D004               	goto	l1164
  4990                           
  4991                           ; BSR set to: 0
  4992                           ;train_move_right.c: 69: {
  4993                           ;train_move_right.c: 70: Switch_Train_Move = 0;
  4994  0030D4  0E00               	movlw	0
  4995  0030D6  6F80               	movwf	_Switch_Train_Move& (0+255),b
  4996                           
  4997                           ;train_move_right.c: 71: Return_Val = 0;
  4998  0030D8  0E00               	movlw	0
  4999  0030DA  D016               	goto	L62
  5000  0030DC                     l1164:
  5001                           
  5002                           ; BSR set to: 0
  5003                           ;train_move_right.c: 73: }
  5004                           ;train_move_right.c: 74: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5005                           
  5006                           ; BSR set to: 0
  5007  0030DC  0E00               	movlw	0
  5008  0030DE  6E14               	movwf	GETxAPIxVAL@index+1,c
  5009  0030E0  0E1A               	movlw	26
  5010  0030E2  6E13               	movwf	GETxAPIxVAL@index,c
  5011  0030E4  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  5012  0030E8  5013               	movf	?_GETxAPIxVAL,w,c
  5013  0030EA  0100               	movlb	0	; () banked
  5014  0030EC  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5015  0030EE  5014               	movf	?_GETxAPIxVAL+1,w,c
  5016  0030F0  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5017  0030F2  A0D8               	btfss	status,0,c
  5018  0030F4  D006               	goto	l1165
  5019                           
  5020                           ; BSR set to: 0
  5021                           ;train_move_right.c: 75: {
  5022                           ;train_move_right.c: 76: Train_Move_Pwm_Count++;
  5023  0030F6  4B7E               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  5024  0030F8  2B7F               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;train_move_right.c: 77: Train_Move_Pwm_Fast_Count = 0;
  5028  0030FA  0E00               	movlw	0
  5029  0030FC  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5030  0030FE  0E00               	movlw	0
  5031  003100  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5032  003102                     l1165:
  5033                           
  5034                           ; BSR set to: 0
  5035                           ;train_move_right.c: 78: }
  5036                           ;train_move_right.c: 79: Train_Move_Pwm_Fast_Count++;
  5037                           
  5038                           ; BSR set to: 0
  5039  003102  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5040  003104  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5041  003106                     L64:
  5042                           
  5043                           ;train_move_right.c: 80: Return_Val = 1;
  5044  003106  0E01               	movlw	1
  5045  003108                     L62:
  5046  003108  6FC1               	movwf	Train_Move_Right_Start@Return_Val& (0+255),b
  5047                           
  5048                           ; BSR set to: 0
  5049                           ;train_move_right.c: 84: }
  5050                           
  5051                           ; BSR set to: 0
  5052                           
  5053                           ;train_move_right.c: 83: default : break;
  5054                           
  5055                           ;train_move_right.c: 81: break;
  5056  00310A  D00E               	goto	l1159
  5057  00310C                     l1156:
  5058                           
  5059                           ; BSR set to: 0
  5060  00310C  0100               	movlb	0	; () banked
  5061  00310E  5180               	movf	_Switch_Train_Move& (0+255),w,b
  5062                           
  5063                           ; Switch size 1, requested type "space"
  5064                           ; Number of cases is 4, Range of values is 0 to 3
  5065                           ; switch strategies available:
  5066                           ; Name         Instructions Cycles
  5067                           ; simple_byte           13     7 (average)
  5068                           ;	Chosen strategy is simple_byte
  5069  003110  0A00               	xorlw	0	; case 0
  5070  003112  B4D8               	btfsc	status,2,c
  5071  003114  D771               	goto	l1157
  5072  003116  0A01               	xorlw	1	; case 1
  5073  003118  B4D8               	btfsc	status,2,c
  5074  00311A  D782               	goto	l1160
  5075  00311C  0A03               	xorlw	3	; case 2
  5076  00311E  B4D8               	btfsc	status,2,c
  5077  003120  D7A9               	goto	l1161
  5078  003122  0A01               	xorlw	1	; case 3
  5079  003124  B4D8               	btfsc	status,2,c
  5080  003126  D7C1               	goto	l1163
  5081  003128                     l1159:
  5082                           
  5083                           ; BSR set to: 0
  5084                           ;train_move_right.c: 86: return(Return_Val);
  5085                           
  5086                           ; BSR set to: 0
  5087  003128  51C1               	movf	Train_Move_Right_Start@Return_Val& (0+255),w,b
  5088  00312A  0012               	return	
  5089  00312C                     __end_of_Train_Move_Right_Start:
  5090                           	opt stack 0
  5091                           tblptru	equ	0xFF8
  5092                           tblptrh	equ	0xFF7
  5093                           tblptrl	equ	0xFF6
  5094                           tablat	equ	0xFF5
  5095                           postinc0	equ	0xFEE
  5096                           wreg	equ	0xFE8
  5097                           postdec1	equ	0xFE5
  5098                           fsr1h	equ	0xFE2
  5099                           fsr1l	equ	0xFE1
  5100                           status	equ	0xFD8
  5101                           
  5102 ;; *************** function _Train_Move_Right_Brake *****************
  5103 ;; Defined at:
  5104 ;;		line 254 in file "../train_move_right.c"
  5105 ;; Parameters:    Size  Location     Type
  5106 ;;		None
  5107 ;; Auto vars:     Size  Location     Type
  5108 ;;		None
  5109 ;; Return value:  Size  Location     Type
  5110 ;;                  1    wreg      unsigned char 
  5111 ;; Registers used:
  5112 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5113 ;; Tracked objects:
  5114 ;;		On entry : 0/0
  5115 ;;		On exit  : 0/0
  5116 ;;		Unchanged: 0/0
  5117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5118 ;;      Params:         0       0       0       0       0       0       0       0       0
  5119 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5120 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5121 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5122 ;;Total ram usage:        2 bytes
  5123 ;; Hardware stack levels used:    1
  5124 ;; Hardware stack levels required when called:    6
  5125 ;; This function calls:
  5126 ;;		_GETxAPIxVAL
  5127 ;;		_SETxAPIxVAL
  5128 ;;		_SETxPWM
  5129 ;; This function is called by:
  5130 ;;		_Train_Path
  5131 ;; This function uses a non-reentrant model
  5132 ;;
  5133                           
  5134                           	psect	text4
  5135  002D7E                     __ptext4:
  5136                           	opt stack 0
  5137  002D7E                     _Train_Move_Right_Brake:
  5138                           	opt stack 22
  5139                           
  5140                           ;train_move_right.c: 256: static char Return_Val = 1;
  5141                           ;train_move_right.c: 257: static unsigned int Train_Move_Wait_Time = 0;
  5142                           ;train_move_right.c: 259: switch(Switch_Train_Move)
  5143                           
  5144                           ; BSR set to: 0
  5145                           ;incstack = 0
  5146  002D7E  D08F               	goto	l1224
  5147  002D80  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5148  002D84  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5149  002D88  0E01               	movlw	1
  5150  002D8A  6E21               	movwf	SETxPWM@direction,c
  5151  002D8C  EC1A  F01D         	call	_SETxPWM	;wreg free
  5152                           
  5153                           ;train_move_right.c: 262: if (Train_Move_Pwm_Count <= GETxAPIxVAL(22))
  5154  002D90  0E00               	movlw	0
  5155  002D92  6E14               	movwf	GETxAPIxVAL@index+1,c
  5156  002D94  0E16               	movlw	22
  5157  002D96  6E13               	movwf	GETxAPIxVAL@index,c
  5158  002D98  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  5159  002D9C  0100               	movlb	0	; () banked
  5160  002D9E  517E               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  5161  002DA0  5C13               	subwf	?_GETxAPIxVAL,w,c
  5162  002DA2  517F               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5163  002DA4  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  5164  002DA6  A0D8               	btfss	status,0,c
  5165  002DA8  D002               	goto	l1226
  5166                           
  5167                           ; BSR set to: 0
  5168                           ;train_move_right.c: 263: {
  5169                           ;train_move_right.c: 264: Switch_Train_Move = 1;
  5170  002DAA  0E01               	movlw	1
  5171  002DAC  D074               	goto	L69
  5172  002DAE                     l1226:
  5173                           
  5174                           ; BSR set to: 0
  5175                           ;train_move_right.c: 267: }
  5176                           ;train_move_right.c: 268: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(25))
  5177                           
  5178                           ; BSR set to: 0
  5179  002DAE  0E00               	movlw	0
  5180  002DB0  6E14               	movwf	GETxAPIxVAL@index+1,c
  5181  002DB2  0E19               	movlw	25
  5182  002DB4  6E13               	movwf	GETxAPIxVAL@index,c
  5183  002DB6  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  5184  002DBA  5013               	movf	?_GETxAPIxVAL,w,c
  5185  002DBC  0100               	movlb	0	; () banked
  5186  002DBE  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5187  002DC0  5014               	movf	?_GETxAPIxVAL+1,w,c
  5188  002DC2  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5189  002DC4  A0D8               	btfss	status,0,c
  5190  002DC6  D008               	goto	l1228
  5191                           
  5192                           ; BSR set to: 0
  5193                           ;train_move_right.c: 269: {
  5194                           ;train_move_right.c: 270: Train_Move_Pwm_Count--;
  5195  002DC8  077E               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  5196  002DCA  A0D8               	btfss	status,0,c
  5197  002DCC  077F               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5198                           
  5199                           ; BSR set to: 0
  5200                           ;train_move_right.c: 271: Train_Move_Pwm_Fast_Count = 0;
  5201  002DCE  0E00               	movlw	0
  5202  002DD0  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5203  002DD2  0E00               	movlw	0
  5204  002DD4  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5205                           
  5206                           ;train_move_right.c: 272: }
  5207  002DD6  D060               	goto	l7454
  5208  002DD8                     l1228:
  5209                           
  5210                           ; BSR set to: 0
  5211                           ;train_move_right.c: 273: else{Train_Move_Pwm_Fast_Count++;}
  5212                           
  5213                           ; BSR set to: 0
  5214  002DD8  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5215  002DDA  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5216                           
  5217                           ; BSR set to: 0
  5218  002DDC  D05D               	goto	l7454
  5219  002DDE                     
  5220                           ; BSR set to: 0
  5221                           
  5222                           ; BSR set to: 0
  5223  002DDE  0E00               	movlw	0
  5224  002DE0  6E14               	movwf	GETxAPIxVAL@index+1,c
  5225  002DE2  0E12               	movlw	18
  5226  002DE4  6E13               	movwf	GETxAPIxVAL@index,c
  5227  002DE6  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  5228  002DEA  5013               	movf	?_GETxAPIxVAL,w,c
  5229  002DEC  0100               	movlb	0	; () banked
  5230  002DEE  5D60               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  5231  002DF0  5014               	movf	?_GETxAPIxVAL+1,w,c
  5232  002DF2  5961               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5233  002DF4  A0D8               	btfss	status,0,c
  5234  002DF6  D007               	goto	l1231
  5235                           
  5236                           ; BSR set to: 0
  5237                           ;train_move_right.c: 278: {
  5238                           ;train_move_right.c: 279: Switch_Train_Move = 2;
  5239  002DF8  0E02               	movlw	2
  5240  002DFA  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5241                           
  5242                           ;train_move_right.c: 280: Train_Move_Wait_Time = 0;
  5243  002DFC  0E00               	movlw	0
  5244  002DFE  6F61               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5245  002E00  0E00               	movlw	0
  5246  002E02  6F60               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  5247  002E04  D049               	goto	l7454
  5248  002E06                     l1231:
  5249                           
  5250                           ; BSR set to: 0
  5251                           ;train_move_right.c: 283: }
  5252                           ;train_move_right.c: 284: Return_Val = 1;
  5253                           
  5254                           ; BSR set to: 0
  5255  002E06  0E01               	movlw	1
  5256  002E08  6FC0               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  5257                           
  5258                           ; BSR set to: 0
  5259                           ;train_move_right.c: 285: Train_Move_Wait_Time++;
  5260  002E0A  4B60               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  5261  002E0C  2B61               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5262                           
  5263                           ; BSR set to: 0
  5264                           ;train_move_right.c: 286: Switch_Train_Move = 1;
  5265  002E0E  0E01               	movlw	1
  5266  002E10  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5267                           
  5268                           ;train_move_right.c: 287: break;
  5269  002E12  D053               	goto	l1227
  5270  002E14                     
  5271                           ; BSR set to: 0
  5272                           
  5273                           ; BSR set to: 0
  5274  002E14  0E00               	movlw	0
  5275  002E16  6E14               	movwf	GETxAPIxVAL@index+1,c
  5276  002E18  0E16               	movlw	22
  5277  002E1A  6E13               	movwf	GETxAPIxVAL@index,c
  5278  002E1C  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  5279  002E20  C013  F0AD         	movff	?_GETxAPIxVAL,_Train_Move_Right_Brake$2189
  5280  002E24  C014  F0AE         	movff	?_GETxAPIxVAL+1,_Train_Move_Right_Brake$2189+1
  5281  002E28  C0AD  F01F         	movff	_Train_Move_Right_Brake$2189,SETxPWM@speed
  5282  002E2C  C0AE  F020         	movff	_Train_Move_Right_Brake$2189+1,SETxPWM@speed+1
  5283  002E30  0E01               	movlw	1
  5284  002E32  6E21               	movwf	SETxPWM@direction,c
  5285  002E34  EC1A  F01D         	call	_SETxPWM	;wreg free
  5286                           
  5287                           ;train_move_right.c: 290: SETxAPIxVAL(69, 1);;
  5288  002E38  0E00               	movlw	0
  5289  002E3A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  5290  002E3C  0E45               	movlw	69
  5291  002E3E  6E19               	movwf	SETxAPIxVAL@index,c
  5292  002E40  0E00               	movlw	0
  5293  002E42  6E1C               	movwf	SETxAPIxVAL@value+1,c
  5294  002E44  0E01               	movlw	1
  5295  002E46  6E1B               	movwf	SETxAPIxVAL@value,c
  5296  002E48  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  5297                           
  5298                           ;train_move_right.c: 291: Train_Move_Pwm_Count = GETxAPIxVAL(22);
  5299  002E4C  0E00               	movlw	0
  5300  002E4E  6E14               	movwf	GETxAPIxVAL@index+1,c
  5301  002E50  0E16               	movlw	22
  5302  002E52  6E13               	movwf	GETxAPIxVAL@index,c
  5303  002E54  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  5304  002E58  C013  F07E         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5305  002E5C  C014  F07F         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5306                           
  5307                           ;train_move_right.c: 292: Switch_Train_Move = 3;
  5308  002E60  0E03               	movlw	3
  5309  002E62  0100               	movlb	0	; () banked
  5310  002E64  D018               	goto	L69
  5311  002E66                     
  5312                           ; BSR set to: 0
  5313                           
  5314                           ; BSR set to: 0
  5315  002E66  0E00               	movlw	0
  5316  002E68  6E14               	movwf	GETxAPIxVAL@index+1,c
  5317  002E6A  0E14               	movlw	20
  5318  002E6C  6E13               	movwf	GETxAPIxVAL@index,c
  5319  002E6E  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  5320  002E72  5013               	movf	?_GETxAPIxVAL,w,c
  5321  002E74  0100               	movlb	0	; () banked
  5322  002E76  5D60               	subwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),w,b
  5323  002E78  5014               	movf	?_GETxAPIxVAL+1,w,c
  5324  002E7A  5961               	subwfb	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5325  002E7C  A0D8               	btfss	status,0,c
  5326  002E7E  D008               	goto	l1234
  5327                           
  5328                           ; BSR set to: 0
  5329                           ;train_move_right.c: 297: {
  5330                           ;train_move_right.c: 298: Switch_Train_Move = 0;
  5331  002E80  0E00               	movlw	0
  5332  002E82  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5333                           
  5334                           ;train_move_right.c: 299: Train_Move_Wait_Time = 0;
  5335  002E84  0E00               	movlw	0
  5336  002E86  6F61               	movwf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5337  002E88  0E00               	movlw	0
  5338  002E8A  6F60               	movwf	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),b
  5339                           
  5340                           ;train_move_right.c: 300: Return_Val = 0;
  5341  002E8C  0E00               	movlw	0
  5342  002E8E  D005               	goto	L67
  5343  002E90                     l1234:
  5344                           
  5345                           ; BSR set to: 0
  5346                           ;train_move_right.c: 302: }
  5347                           ;train_move_right.c: 303: Train_Move_Wait_Time++;
  5348                           
  5349                           ; BSR set to: 0
  5350  002E90  4B60               	infsnz	Train_Move_Right_Brake@Train_Move_Wait_Time& (0+255),f,b
  5351  002E92  2B61               	incf	(Train_Move_Right_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5352                           
  5353                           ; BSR set to: 0
  5354                           ;train_move_right.c: 304: Switch_Train_Move = 3;
  5355  002E94  0E03               	movlw	3
  5356  002E96                     L69:
  5357  002E96  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5358  002E98                     l7454:
  5359                           
  5360                           ; BSR set to: 0
  5361                           ;train_move_right.c: 305: Return_Val = 1;
  5362  002E98  0E01               	movlw	1
  5363  002E9A                     L67:
  5364  002E9A  6FC0               	movwf	Train_Move_Right_Brake@Return_Val& (0+255),b
  5365                           
  5366                           ; BSR set to: 0
  5367                           ;train_move_right.c: 309: }
  5368                           
  5369                           ; BSR set to: 0
  5370                           
  5371                           ;train_move_right.c: 308: default : break;
  5372                           
  5373                           ;train_move_right.c: 306: break;
  5374  002E9C  D00E               	goto	l1227
  5375  002E9E                     l1224:
  5376                           
  5377                           ; BSR set to: 0
  5378  002E9E  0100               	movlb	0	; () banked
  5379  002EA0  5180               	movf	_Switch_Train_Move& (0+255),w,b
  5380                           
  5381                           ; Switch size 1, requested type "space"
  5382                           ; Number of cases is 4, Range of values is 0 to 3
  5383                           ; switch strategies available:
  5384                           ; Name         Instructions Cycles
  5385                           ; simple_byte           13     7 (average)
  5386                           ;	Chosen strategy is simple_byte
  5387  002EA2  0A00               	xorlw	0	; case 0
  5388  002EA4  B4D8               	btfsc	status,2,c
  5389  002EA6  D76C               	goto	l1225
  5390  002EA8  0A01               	xorlw	1	; case 1
  5391  002EAA  B4D8               	btfsc	status,2,c
  5392  002EAC  D798               	goto	l1230
  5393  002EAE  0A03               	xorlw	3	; case 2
  5394  002EB0  B4D8               	btfsc	status,2,c
  5395  002EB2  D7B0               	goto	l1232
  5396  002EB4  0A01               	xorlw	1	; case 3
  5397  002EB6  B4D8               	btfsc	status,2,c
  5398  002EB8  D7D6               	goto	l1233
  5399  002EBA                     l1227:
  5400                           
  5401                           ; BSR set to: 0
  5402                           ;train_move_right.c: 311: return(Return_Val);
  5403                           
  5404                           ; BSR set to: 0
  5405  002EBA  51C0               	movf	Train_Move_Right_Brake@Return_Val& (0+255),w,b
  5406  002EBC  0012               	return	
  5407  002EBE                     __end_of_Train_Move_Right_Brake:
  5408                           	opt stack 0
  5409                           tblptru	equ	0xFF8
  5410                           tblptrh	equ	0xFF7
  5411                           tblptrl	equ	0xFF6
  5412                           tablat	equ	0xFF5
  5413                           postinc0	equ	0xFEE
  5414                           wreg	equ	0xFE8
  5415                           postdec1	equ	0xFE5
  5416                           fsr1h	equ	0xFE2
  5417                           fsr1l	equ	0xFE1
  5418                           status	equ	0xFD8
  5419                           
  5420 ;; *************** function _Train_Move_Left_Start *****************
  5421 ;; Defined at:
  5422 ;;		line 27 in file "../train_move_left.c"
  5423 ;; Parameters:    Size  Location     Type
  5424 ;;		None
  5425 ;; Auto vars:     Size  Location     Type
  5426 ;;		None
  5427 ;; Return value:  Size  Location     Type
  5428 ;;                  1    wreg      unsigned char 
  5429 ;; Registers used:
  5430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5431 ;; Tracked objects:
  5432 ;;		On entry : 0/0
  5433 ;;		On exit  : 0/0
  5434 ;;		Unchanged: 0/0
  5435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5436 ;;      Params:         0       0       0       0       0       0       0       0       0
  5437 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5438 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5439 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5440 ;;Total ram usage:        2 bytes
  5441 ;; Hardware stack levels used:    1
  5442 ;; Hardware stack levels required when called:    6
  5443 ;; This function calls:
  5444 ;;		_GETxAPIxVAL
  5445 ;;		_SETxAPIxVAL
  5446 ;;		_SETxPWM
  5447 ;; This function is called by:
  5448 ;;		_Train_Path
  5449 ;; This function uses a non-reentrant model
  5450 ;;
  5451                           
  5452                           	psect	text5
  5453  002EBE                     __ptext5:
  5454                           	opt stack 0
  5455  002EBE                     _Train_Move_Left_Start:
  5456                           	opt stack 22
  5457                           
  5458                           ;train_move_left.c: 29: static char Return_Val = 1;
  5459                           ;train_move_left.c: 30: static unsigned int Train_Move_Wait_Time = 0;
  5460                           ;train_move_left.c: 32: switch(Switch_Train_Move)
  5461                           
  5462                           ; BSR set to: 0
  5463                           ;incstack = 0
  5464  002EBE  D08B               	goto	l1051
  5465  002EC0  0E00               	movlw	0
  5466  002EC2  6E14               	movwf	GETxAPIxVAL@index+1,c
  5467  002EC4  0E14               	movlw	20
  5468  002EC6  6E13               	movwf	GETxAPIxVAL@index,c
  5469  002EC8  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  5470  002ECC  5013               	movf	?_GETxAPIxVAL,w,c
  5471  002ECE  0100               	movlb	0	; () banked
  5472  002ED0  5D66               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  5473  002ED2  5014               	movf	?_GETxAPIxVAL+1,w,c
  5474  002ED4  5967               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5475  002ED6  A0D8               	btfss	status,0,c
  5476  002ED8  D002               	goto	l1053
  5477                           
  5478                           ; BSR set to: 0
  5479                           ;train_move_left.c: 37: {
  5480                           ;train_move_left.c: 38: Switch_Train_Move = 1;
  5481  002EDA  0E01               	movlw	1
  5482  002EDC  D03E               	goto	L72
  5483  002EDE                     l1053:
  5484                           
  5485                           ; BSR set to: 0
  5486                           ;train_move_left.c: 42: }
  5487                           ;train_move_left.c: 43: Train_Move_Wait_Time++;
  5488                           
  5489                           ; BSR set to: 0
  5490  002EDE  4B66               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  5491  002EE0  2B67               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5492                           
  5493                           ; BSR set to: 0
  5494                           ;train_move_left.c: 44: Switch_Train_Move = 0;
  5495  002EE2  0E00               	movlw	0
  5496  002EE4  D043               	goto	L73
  5497  002EE6                     l7370:
  5498                           
  5499                           ; BSR set to: 0
  5500                           ;train_move_left.c: 45: Return_Val = 1;
  5501  002EE6  0E01               	movlw	1
  5502  002EE8  6FC3               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  5503                           
  5504                           ;train_move_left.c: 46: break;
  5505  002EEA  D083               	goto	l1054
  5506  002EEC                     
  5507                           ; BSR set to: 0
  5508                           
  5509                           ; BSR set to: 0
  5510  002EEC  0E00               	movlw	0
  5511  002EEE  6E14               	movwf	GETxAPIxVAL@index+1,c
  5512  002EF0  0E15               	movlw	21
  5513  002EF2  6E13               	movwf	GETxAPIxVAL@index,c
  5514  002EF4  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  5515  002EF8  C013  F0AD         	movff	?_GETxAPIxVAL,_Train_Move_Left_Start$2186
  5516  002EFC  C014  F0AE         	movff	?_GETxAPIxVAL+1,_Train_Move_Left_Start$2186+1
  5517  002F00  C0AD  F01F         	movff	_Train_Move_Left_Start$2186,SETxPWM@speed
  5518  002F04  C0AE  F020         	movff	_Train_Move_Left_Start$2186+1,SETxPWM@speed+1
  5519  002F08  0E00               	movlw	0
  5520  002F0A  6E21               	movwf	SETxPWM@direction,c
  5521  002F0C  EC1A  F01D         	call	_SETxPWM	;wreg free
  5522                           
  5523                           ;train_move_left.c: 49: Train_Move_Pwm_Count = GETxAPIxVAL(21);
  5524  002F10  0E00               	movlw	0
  5525  002F12  6E14               	movwf	GETxAPIxVAL@index+1,c
  5526  002F14  0E15               	movlw	21
  5527  002F16  6E13               	movwf	GETxAPIxVAL@index,c
  5528  002F18  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  5529  002F1C  C013  F07E         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5530  002F20  C014  F07F         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5531                           
  5532                           ;train_move_left.c: 50: SETxAPIxVAL(69, 0);
  5533  002F24  0E00               	movlw	0
  5534  002F26  6E1A               	movwf	SETxAPIxVAL@index+1,c
  5535  002F28  0E45               	movlw	69
  5536  002F2A  6E19               	movwf	SETxAPIxVAL@index,c
  5537  002F2C  0E00               	movlw	0
  5538  002F2E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  5539  002F30  0E00               	movlw	0
  5540  002F32  6E1B               	movwf	SETxAPIxVAL@value,c
  5541  002F34  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  5542                           
  5543                           ;train_move_left.c: 51: Switch_Train_Move = 2;
  5544  002F38  0E02               	movlw	2
  5545  002F3A  0100               	movlb	0	; () banked
  5546  002F3C  D017               	goto	L73
  5547  002F3E                     
  5548                           ; BSR set to: 0
  5549                           
  5550                           ; BSR set to: 0
  5551  002F3E  0E00               	movlw	0
  5552  002F40  6E14               	movwf	GETxAPIxVAL@index+1,c
  5553  002F42  0E12               	movlw	18
  5554  002F44  6E13               	movwf	GETxAPIxVAL@index,c
  5555  002F46  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  5556  002F4A  5013               	movf	?_GETxAPIxVAL,w,c
  5557  002F4C  0100               	movlb	0	; () banked
  5558  002F4E  5D66               	subwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),w,b
  5559  002F50  5014               	movf	?_GETxAPIxVAL+1,w,c
  5560  002F52  5967               	subwfb	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),w,b
  5561  002F54  A0D8               	btfss	status,0,c
  5562  002F56  D007               	goto	l1057
  5563                           
  5564                           ; BSR set to: 0
  5565                           ;train_move_left.c: 56: {
  5566                           ;train_move_left.c: 57: Switch_Train_Move = 3;
  5567  002F58  0E03               	movlw	3
  5568  002F5A                     L72:
  5569  002F5A  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5570                           
  5571                           ;train_move_left.c: 58: Train_Move_Wait_Time = 0;
  5572  002F5C  0E00               	movlw	0
  5573  002F5E  6F67               	movwf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),b
  5574  002F60  0E00               	movlw	0
  5575  002F62  6F66               	movwf	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),b
  5576  002F64  D7C0               	goto	l7370
  5577  002F66                     l1057:
  5578                           
  5579                           ; BSR set to: 0
  5580                           ;train_move_left.c: 61: }
  5581                           ;train_move_left.c: 62: Train_Move_Wait_Time++;
  5582                           
  5583                           ; BSR set to: 0
  5584  002F66  4B66               	infsnz	Train_Move_Left_Start@Train_Move_Wait_Time& (0+255),f,b
  5585  002F68  2B67               	incf	(Train_Move_Left_Start@Train_Move_Wait_Time+1)& (0+255),f,b
  5586                           
  5587                           ; BSR set to: 0
  5588                           ;train_move_left.c: 63: Switch_Train_Move = 2;
  5589  002F6A  0E02               	movlw	2
  5590  002F6C                     L73:
  5591  002F6C  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5592  002F6E  D7BB               	goto	l7370
  5593  002F70                     
  5594                           ; BSR set to: 0
  5595                           
  5596                           ; BSR set to: 0
  5597  002F70  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5598  002F74  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5599  002F78  0E00               	movlw	0
  5600  002F7A  6E21               	movwf	SETxPWM@direction,c
  5601  002F7C  EC1A  F01D         	call	_SETxPWM	;wreg free
  5602                           
  5603                           ;train_move_left.c: 68: Return_Val = 1;
  5604  002F80  0E01               	movlw	1
  5605  002F82  0100               	movlb	0	; () banked
  5606  002F84  6FC3               	movwf	Train_Move_Left_Start@Return_Val& (0+255),b
  5607                           
  5608                           ; BSR set to: 0
  5609                           ;train_move_left.c: 69: if (Train_Move_Pwm_Count >= GETxAPIxVAL(24))
  5610  002F86  0E00               	movlw	0
  5611  002F88  6E14               	movwf	GETxAPIxVAL@index+1,c
  5612  002F8A  0E18               	movlw	24
  5613  002F8C  6E13               	movwf	GETxAPIxVAL@index,c
  5614  002F8E  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  5615  002F92  5013               	movf	?_GETxAPIxVAL,w,c
  5616  002F94  0100               	movlb	0	; () banked
  5617  002F96  5D7E               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  5618  002F98  5014               	movf	?_GETxAPIxVAL+1,w,c
  5619  002F9A  597F               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5620  002F9C  A0D8               	btfss	status,0,c
  5621  002F9E  D004               	goto	l1059
  5622                           
  5623                           ; BSR set to: 0
  5624                           ;train_move_left.c: 70: {
  5625                           ;train_move_left.c: 71: Switch_Train_Move = 0;
  5626  002FA0  0E00               	movlw	0
  5627  002FA2  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5628                           
  5629                           ;train_move_left.c: 72: Return_Val = 0;
  5630  002FA4  0E00               	movlw	0
  5631  002FA6  D7A0               	goto	L71
  5632  002FA8                     l1059:
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;train_move_left.c: 75: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  5636                           
  5637                           ; BSR set to: 0
  5638  002FA8  0E00               	movlw	0
  5639  002FAA  6E14               	movwf	GETxAPIxVAL@index+1,c
  5640  002FAC  0E1A               	movlw	26
  5641  002FAE  6E13               	movwf	GETxAPIxVAL@index,c
  5642  002FB0  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  5643  002FB4  5013               	movf	?_GETxAPIxVAL,w,c
  5644  002FB6  0100               	movlb	0	; () banked
  5645  002FB8  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5646  002FBA  5014               	movf	?_GETxAPIxVAL+1,w,c
  5647  002FBC  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5648  002FBE  A0D8               	btfss	status,0,c
  5649  002FC0  D007               	goto	l1061
  5650                           
  5651                           ; BSR set to: 0
  5652                           ;train_move_left.c: 76: {
  5653                           ;train_move_left.c: 77: Train_Move_Pwm_Count++;
  5654  002FC2  4B7E               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  5655  002FC4  2B7F               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5656                           
  5657                           ; BSR set to: 0
  5658                           ;train_move_left.c: 78: Train_Move_Pwm_Fast_Count = 0;
  5659  002FC6  0E00               	movlw	0
  5660  002FC8  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5661  002FCA  0E00               	movlw	0
  5662  002FCC  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5663                           
  5664                           ;train_move_left.c: 79: }
  5665  002FCE  D011               	goto	l1054
  5666  002FD0                     l1061:
  5667                           
  5668                           ; BSR set to: 0
  5669                           ;train_move_left.c: 80: else{Train_Move_Pwm_Fast_Count++;}
  5670                           
  5671                           ; BSR set to: 0
  5672  002FD0  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5673  002FD2  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;train_move_left.c: 83: }
  5677                           
  5678                           ; BSR set to: 0
  5679                           
  5680                           ;train_move_left.c: 82: default : break;
  5681                           
  5682                           ; BSR set to: 0
  5683                           ;train_move_left.c: 81: break;
  5684                           
  5685                           ; BSR set to: 0
  5686  002FD4  D00E               	goto	l1054
  5687  002FD6                     l1051:
  5688                           
  5689                           ; BSR set to: 0
  5690  002FD6  0100               	movlb	0	; () banked
  5691  002FD8  5180               	movf	_Switch_Train_Move& (0+255),w,b
  5692                           
  5693                           ; Switch size 1, requested type "space"
  5694                           ; Number of cases is 4, Range of values is 0 to 3
  5695                           ; switch strategies available:
  5696                           ; Name         Instructions Cycles
  5697                           ; simple_byte           13     7 (average)
  5698                           ;	Chosen strategy is simple_byte
  5699  002FDA  0A00               	xorlw	0	; case 0
  5700  002FDC  B4D8               	btfsc	status,2,c
  5701  002FDE  D770               	goto	l1052
  5702  002FE0  0A01               	xorlw	1	; case 1
  5703  002FE2  B4D8               	btfsc	status,2,c
  5704  002FE4  D783               	goto	l1055
  5705  002FE6  0A03               	xorlw	3	; case 2
  5706  002FE8  B4D8               	btfsc	status,2,c
  5707  002FEA  D7A9               	goto	l1056
  5708  002FEC  0A01               	xorlw	1	; case 3
  5709  002FEE  B4D8               	btfsc	status,2,c
  5710  002FF0  D7BF               	goto	l1058
  5711  002FF2                     l1054:
  5712                           
  5713                           ; BSR set to: 0
  5714                           ;train_move_left.c: 85: return(Return_Val);
  5715                           
  5716                           ; BSR set to: 0
  5717  002FF2  51C3               	movf	Train_Move_Left_Start@Return_Val& (0+255),w,b
  5718  002FF4  0012               	return	
  5719  002FF6                     __end_of_Train_Move_Left_Start:
  5720                           	opt stack 0
  5721                           tblptru	equ	0xFF8
  5722                           tblptrh	equ	0xFF7
  5723                           tblptrl	equ	0xFF6
  5724                           tablat	equ	0xFF5
  5725                           postinc0	equ	0xFEE
  5726                           wreg	equ	0xFE8
  5727                           postdec1	equ	0xFE5
  5728                           fsr1h	equ	0xFE2
  5729                           fsr1l	equ	0xFE1
  5730                           status	equ	0xFD8
  5731                           
  5732 ;; *************** function _Train_Move_Left_Brake *****************
  5733 ;; Defined at:
  5734 ;;		line 256 in file "../train_move_left.c"
  5735 ;; Parameters:    Size  Location     Type
  5736 ;;		None
  5737 ;; Auto vars:     Size  Location     Type
  5738 ;;		None
  5739 ;; Return value:  Size  Location     Type
  5740 ;;                  1    wreg      unsigned char 
  5741 ;; Registers used:
  5742 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5743 ;; Tracked objects:
  5744 ;;		On entry : 0/0
  5745 ;;		On exit  : 0/0
  5746 ;;		Unchanged: 0/0
  5747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5748 ;;      Params:         0       0       0       0       0       0       0       0       0
  5749 ;;      Locals:         0       2       0       0       0       0       0       0       0
  5750 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5751 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5752 ;;Total ram usage:        2 bytes
  5753 ;; Hardware stack levels used:    1
  5754 ;; Hardware stack levels required when called:    6
  5755 ;; This function calls:
  5756 ;;		_GETxAPIxVAL
  5757 ;;		_SETxAPIxVAL
  5758 ;;		_SETxPWM
  5759 ;; This function is called by:
  5760 ;;		_Train_Path
  5761 ;; This function uses a non-reentrant model
  5762 ;;
  5763                           
  5764                           	psect	text6
  5765  002C38                     __ptext6:
  5766                           	opt stack 0
  5767  002C38                     _Train_Move_Left_Brake:
  5768                           	opt stack 22
  5769                           
  5770                           ;train_move_left.c: 258: static char Return_Val = 1;
  5771                           ;train_move_left.c: 259: static unsigned int Train_Move_Wait_Time = 0;
  5772                           ;train_move_left.c: 261: switch(Switch_Train_Move)
  5773                           
  5774                           ; BSR set to: 0
  5775                           ;incstack = 0
  5776  002C38  D092               	goto	l1121
  5777  002C3A  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  5778  002C3E  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  5779  002C42  0E00               	movlw	0
  5780  002C44  6E21               	movwf	SETxPWM@direction,c
  5781  002C46  EC1A  F01D         	call	_SETxPWM	;wreg free
  5782                           
  5783                           ;train_move_left.c: 264: Return_Val = 1;
  5784  002C4A  0E01               	movlw	1
  5785  002C4C  0100               	movlb	0	; () banked
  5786  002C4E  6FC2               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5787                           
  5788                           ; BSR set to: 0
  5789                           ;train_move_left.c: 265: if (Train_Move_Pwm_Count <= GETxAPIxVAL(21))
  5790  002C50  0E00               	movlw	0
  5791  002C52  6E14               	movwf	GETxAPIxVAL@index+1,c
  5792  002C54  0E15               	movlw	21
  5793  002C56  6E13               	movwf	GETxAPIxVAL@index,c
  5794  002C58  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  5795  002C5C  0100               	movlb	0	; () banked
  5796  002C5E  517E               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  5797  002C60  5C13               	subwf	?_GETxAPIxVAL,w,c
  5798  002C62  517F               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  5799  002C64  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  5800  002C66  A0D8               	btfss	status,0,c
  5801  002C68  D002               	goto	l1123
  5802                           
  5803                           ; BSR set to: 0
  5804                           ;train_move_left.c: 266: {
  5805                           ;train_move_left.c: 267: Switch_Train_Move = 1;
  5806  002C6A  0E01               	movlw	1
  5807  002C6C  D074               	goto	L99
  5808  002C6E                     l1123:
  5809                           
  5810                           ; BSR set to: 0
  5811                           ;train_move_left.c: 270: }
  5812                           ;train_move_left.c: 271: if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(25))
  5813                           
  5814                           ; BSR set to: 0
  5815  002C6E  0E00               	movlw	0
  5816  002C70  6E14               	movwf	GETxAPIxVAL@index+1,c
  5817  002C72  0E19               	movlw	25
  5818  002C74  6E13               	movwf	GETxAPIxVAL@index,c
  5819  002C76  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  5820  002C7A  5013               	movf	?_GETxAPIxVAL,w,c
  5821  002C7C  0100               	movlb	0	; () banked
  5822  002C7E  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  5823  002C80  5014               	movf	?_GETxAPIxVAL+1,w,c
  5824  002C82  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  5825  002C84  A0D8               	btfss	status,0,c
  5826  002C86  D008               	goto	l1125
  5827                           
  5828                           ; BSR set to: 0
  5829                           ;train_move_left.c: 272: {
  5830                           ;train_move_left.c: 273: Train_Move_Pwm_Count--;
  5831  002C88  077E               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  5832  002C8A  A0D8               	btfss	status,0,c
  5833  002C8C  077F               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  5834                           
  5835                           ; BSR set to: 0
  5836                           ;train_move_left.c: 274: Train_Move_Pwm_Fast_Count = 0;
  5837  002C8E  0E00               	movlw	0
  5838  002C90  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  5839  002C92  0E00               	movlw	0
  5840  002C94  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  5841                           
  5842                           ;train_move_left.c: 275: }
  5843  002C96  D071               	goto	l1124
  5844  002C98                     l1125:
  5845                           
  5846                           ; BSR set to: 0
  5847                           ;train_move_left.c: 276: else{Train_Move_Pwm_Fast_Count++;}
  5848                           
  5849                           ; BSR set to: 0
  5850  002C98  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  5851  002C9A  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  5852                           
  5853                           ; BSR set to: 0
  5854                           ;train_move_left.c: 277: break;
  5855  002C9C  D06E               	goto	l1124
  5856  002C9E                     
  5857                           ; BSR set to: 0
  5858                           
  5859                           ; BSR set to: 0
  5860  002C9E  0E00               	movlw	0
  5861  002CA0  6E14               	movwf	GETxAPIxVAL@index+1,c
  5862  002CA2  0E12               	movlw	18
  5863  002CA4  6E13               	movwf	GETxAPIxVAL@index,c
  5864  002CA6  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  5865  002CAA  5013               	movf	?_GETxAPIxVAL,w,c
  5866  002CAC  0100               	movlb	0	; () banked
  5867  002CAE  5D64               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5868  002CB0  5014               	movf	?_GETxAPIxVAL+1,w,c
  5869  002CB2  5965               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5870  002CB4  A0D8               	btfss	status,0,c
  5871  002CB6  D007               	goto	l1128
  5872                           
  5873                           ; BSR set to: 0
  5874                           ;train_move_left.c: 280: {
  5875                           ;train_move_left.c: 281: Switch_Train_Move = 2;
  5876  002CB8  0E02               	movlw	2
  5877  002CBA  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5878                           
  5879                           ;train_move_left.c: 282: Train_Move_Wait_Time = 0;
  5880  002CBC  0E00               	movlw	0
  5881  002CBE  6F65               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5882  002CC0  0E00               	movlw	0
  5883  002CC2  6F64               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5884  002CC4  D049               	goto	l7506
  5885  002CC6                     l1128:
  5886                           
  5887                           ; BSR set to: 0
  5888                           ;train_move_left.c: 285: }
  5889                           ;train_move_left.c: 286: Return_Val = 1;
  5890                           
  5891                           ; BSR set to: 0
  5892  002CC6  0E01               	movlw	1
  5893  002CC8  6FC2               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  5894                           
  5895                           ; BSR set to: 0
  5896                           ;train_move_left.c: 287: Train_Move_Wait_Time++;
  5897  002CCA  4B64               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  5898  002CCC  2B65               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5899                           
  5900                           ; BSR set to: 0
  5901                           ;train_move_left.c: 288: Switch_Train_Move = 1;
  5902  002CCE  0E01               	movlw	1
  5903  002CD0  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5904                           
  5905                           ;train_move_left.c: 289: break;
  5906  002CD2  D053               	goto	l1124
  5907  002CD4                     
  5908                           ; BSR set to: 0
  5909                           
  5910                           ; BSR set to: 0
  5911  002CD4  0E00               	movlw	0
  5912  002CD6  6E14               	movwf	GETxAPIxVAL@index+1,c
  5913  002CD8  0E15               	movlw	21
  5914  002CDA  6E13               	movwf	GETxAPIxVAL@index,c
  5915  002CDC  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  5916  002CE0  C013  F0AD         	movff	?_GETxAPIxVAL,_Train_Move_Left_Brake$2187
  5917  002CE4  C014  F0AE         	movff	?_GETxAPIxVAL+1,_Train_Move_Left_Brake$2187+1
  5918  002CE8  C0AD  F01F         	movff	_Train_Move_Left_Brake$2187,SETxPWM@speed
  5919  002CEC  C0AE  F020         	movff	_Train_Move_Left_Brake$2187+1,SETxPWM@speed+1
  5920  002CF0  0E00               	movlw	0
  5921  002CF2  6E21               	movwf	SETxPWM@direction,c
  5922  002CF4  EC1A  F01D         	call	_SETxPWM	;wreg free
  5923                           
  5924                           ;train_move_left.c: 292: SETxAPIxVAL(69, 1);;
  5925  002CF8  0E00               	movlw	0
  5926  002CFA  6E1A               	movwf	SETxAPIxVAL@index+1,c
  5927  002CFC  0E45               	movlw	69
  5928  002CFE  6E19               	movwf	SETxAPIxVAL@index,c
  5929  002D00  0E00               	movlw	0
  5930  002D02  6E1C               	movwf	SETxAPIxVAL@value+1,c
  5931  002D04  0E01               	movlw	1
  5932  002D06  6E1B               	movwf	SETxAPIxVAL@value,c
  5933  002D08  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  5934                           
  5935                           ;train_move_left.c: 293: Train_Move_Pwm_Count = GETxAPIxVAL(21);
  5936  002D0C  0E00               	movlw	0
  5937  002D0E  6E14               	movwf	GETxAPIxVAL@index+1,c
  5938  002D10  0E15               	movlw	21
  5939  002D12  6E13               	movwf	GETxAPIxVAL@index,c
  5940  002D14  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  5941  002D18  C013  F07E         	movff	?_GETxAPIxVAL,_Train_Move_Pwm_Count
  5942  002D1C  C014  F07F         	movff	?_GETxAPIxVAL+1,_Train_Move_Pwm_Count+1
  5943                           
  5944                           ;train_move_left.c: 294: Switch_Train_Move = 3;
  5945  002D20  0E03               	movlw	3
  5946  002D22  0100               	movlb	0	; () banked
  5947  002D24  D018               	goto	L99
  5948  002D26                     
  5949                           ; BSR set to: 0
  5950                           
  5951                           ; BSR set to: 0
  5952  002D26  0E00               	movlw	0
  5953  002D28  6E14               	movwf	GETxAPIxVAL@index+1,c
  5954  002D2A  0E14               	movlw	20
  5955  002D2C  6E13               	movwf	GETxAPIxVAL@index,c
  5956  002D2E  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  5957  002D32  5013               	movf	?_GETxAPIxVAL,w,c
  5958  002D34  0100               	movlb	0	; () banked
  5959  002D36  5D64               	subwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),w,b
  5960  002D38  5014               	movf	?_GETxAPIxVAL+1,w,c
  5961  002D3A  5965               	subwfb	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),w,b
  5962  002D3C  A0D8               	btfss	status,0,c
  5963  002D3E  D008               	goto	l1131
  5964                           
  5965                           ; BSR set to: 0
  5966                           ;train_move_left.c: 299: {
  5967                           ;train_move_left.c: 300: Switch_Train_Move = 0;
  5968  002D40  0E00               	movlw	0
  5969  002D42  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5970                           
  5971                           ;train_move_left.c: 301: Train_Move_Wait_Time = 0;
  5972  002D44  0E00               	movlw	0
  5973  002D46  6F65               	movwf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),b
  5974  002D48  0E00               	movlw	0
  5975  002D4A  6F64               	movwf	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),b
  5976                           
  5977                           ;train_move_left.c: 302: Return_Val = 0;
  5978  002D4C  0E00               	movlw	0
  5979  002D4E  D005               	goto	L76
  5980  002D50                     l1131:
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;train_move_left.c: 304: }
  5984                           ;train_move_left.c: 305: Train_Move_Wait_Time++;
  5985                           
  5986                           ; BSR set to: 0
  5987  002D50  4B64               	infsnz	Train_Move_Left_Brake@Train_Move_Wait_Time& (0+255),f,b
  5988  002D52  2B65               	incf	(Train_Move_Left_Brake@Train_Move_Wait_Time+1)& (0+255),f,b
  5989                           
  5990                           ; BSR set to: 0
  5991                           ;train_move_left.c: 306: Switch_Train_Move = 3;
  5992  002D54  0E03               	movlw	3
  5993  002D56                     L99:
  5994  002D56  6F80               	movwf	_Switch_Train_Move& (0+255),b
  5995  002D58                     l7506:
  5996                           
  5997                           ; BSR set to: 0
  5998                           ;train_move_left.c: 307: Return_Val = 1;
  5999  002D58  0E01               	movlw	1
  6000  002D5A                     L76:
  6001  002D5A  6FC2               	movwf	Train_Move_Left_Brake@Return_Val& (0+255),b
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;train_move_left.c: 311: }
  6005                           
  6006                           ; BSR set to: 0
  6007                           
  6008                           ;train_move_left.c: 310: default : break;
  6009                           
  6010                           ;train_move_left.c: 308: break;
  6011  002D5C  D00E               	goto	l1124
  6012  002D5E                     l1121:
  6013                           
  6014                           ; BSR set to: 0
  6015  002D5E  0100               	movlb	0	; () banked
  6016  002D60  5180               	movf	_Switch_Train_Move& (0+255),w,b
  6017                           
  6018                           ; Switch size 1, requested type "space"
  6019                           ; Number of cases is 4, Range of values is 0 to 3
  6020                           ; switch strategies available:
  6021                           ; Name         Instructions Cycles
  6022                           ; simple_byte           13     7 (average)
  6023                           ;	Chosen strategy is simple_byte
  6024  002D62  0A00               	xorlw	0	; case 0
  6025  002D64  B4D8               	btfsc	status,2,c
  6026  002D66  D769               	goto	l1122
  6027  002D68  0A01               	xorlw	1	; case 1
  6028  002D6A  B4D8               	btfsc	status,2,c
  6029  002D6C  D798               	goto	l1127
  6030  002D6E  0A03               	xorlw	3	; case 2
  6031  002D70  B4D8               	btfsc	status,2,c
  6032  002D72  D7B0               	goto	l1129
  6033  002D74  0A01               	xorlw	1	; case 3
  6034  002D76  B4D8               	btfsc	status,2,c
  6035  002D78  D7D6               	goto	l1130
  6036  002D7A                     l1124:
  6037                           
  6038                           ; BSR set to: 0
  6039                           ;train_move_left.c: 313: return(Return_Val);
  6040                           
  6041                           ; BSR set to: 0
  6042  002D7A  51C2               	movf	Train_Move_Left_Brake@Return_Val& (0+255),w,b
  6043  002D7C  0012               	return	
  6044  002D7E                     __end_of_Train_Move_Left_Brake:
  6045                           	opt stack 0
  6046                           tblptru	equ	0xFF8
  6047                           tblptrh	equ	0xFF7
  6048                           tblptrl	equ	0xFF6
  6049                           tablat	equ	0xFF5
  6050                           postinc0	equ	0xFEE
  6051                           wreg	equ	0xFE8
  6052                           postdec1	equ	0xFE5
  6053                           fsr1h	equ	0xFE2
  6054                           fsr1l	equ	0xFE1
  6055                           status	equ	0xFD8
  6056                           
  6057 ;; *************** function _Right_Mountain_From_The_Right *****************
  6058 ;; Defined at:
  6059 ;;		line 103 in file "../train_move_left.c"
  6060 ;; Parameters:    Size  Location     Type
  6061 ;;  rc              1    wreg     unsigned char 
  6062 ;; Auto vars:     Size  Location     Type
  6063 ;;  rc              1   21[BANK0 ] unsigned char 
  6064 ;; Return value:  Size  Location     Type
  6065 ;;                  1    wreg      unsigned char 
  6066 ;; Registers used:
  6067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6068 ;; Tracked objects:
  6069 ;;		On entry : 0/0
  6070 ;;		On exit  : 0/0
  6071 ;;		Unchanged: 0/0
  6072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6073 ;;      Params:         0       0       0       0       0       0       0       0       0
  6074 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6075 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6076 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6077 ;;Total ram usage:        1 bytes
  6078 ;; Hardware stack levels used:    1
  6079 ;; Hardware stack levels required when called:    6
  6080 ;; This function calls:
  6081 ;;		_GETxAPIxVAL
  6082 ;;		_SETxPWM
  6083 ;; This function is called by:
  6084 ;;		_Train_Path
  6085 ;; This function uses a non-reentrant model
  6086 ;;
  6087                           
  6088                           	psect	text7
  6089  003256                     __ptext7:
  6090                           	opt stack 0
  6091  003256                     _Right_Mountain_From_The_Right:
  6092                           	opt stack 22
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;incstack = 0
  6096                           ;Right_Mountain_From_The_Right@rc stored from wreg
  6097  003256  0100               	movlb	0	; () banked
  6098  003258  6FAD               	movwf	Right_Mountain_From_The_Right@rc& (0+255),b
  6099                           
  6100                           ;train_move_left.c: 105: static char Return_Val = 1;
  6101                           ;train_move_left.c: 107: switch (Switch_Moutain){
  6102  00325A  D07E               	goto	l1069
  6103  00325C  0E03               	movlw	3
  6104  00325E  0100               	movlb	0	; () banked
  6105  003260  19AD               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  6106  003262  B4D8               	btfsc	status,2,c
  6107  003264  D00C               	goto	u7080
  6108                           
  6109                           ; BSR set to: 0
  6110                           ;train_move_left.c: 112: else if(Mountain_Delay_Counter >= GETxAPIxVAL(53)){
  6111                           
  6112                           ; BSR set to: 0
  6113                           
  6114                           ;train_move_left.c: 111: }
  6115                           
  6116                           ;train_move_left.c: 110: Mountain_Delay_Counter = 0;
  6117                           
  6118                           ; BSR set to: 0
  6119                           ;train_move_left.c: 109: Switch_Moutain = 1;
  6120  003266  0E00               	movlw	0
  6121  003268  6E14               	movwf	GETxAPIxVAL@index+1,c
  6122  00326A  0E35               	movlw	53
  6123  00326C  6E13               	movwf	GETxAPIxVAL@index,c
  6124  00326E  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  6125  003272  5013               	movf	?_GETxAPIxVAL,w,c
  6126  003274  5C26               	subwf	_Mountain_Delay_Counter,w,c
  6127  003276  5014               	movf	?_GETxAPIxVAL+1,w,c
  6128  003278  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  6129  00327A  A0D8               	btfss	status,0,c
  6130  00327C  D007               	goto	l1073
  6131  00327E                     u7080:
  6132                           
  6133                           ;train_move_left.c: 114: Switch_Moutain = 1;
  6134  00327E  0E01               	movlw	1
  6135  003280  6E2E               	movwf	_Switch_Moutain,c
  6136                           
  6137                           ;train_move_left.c: 115: Mountain_Delay_Counter = 0;
  6138  003282  0E00               	movlw	0
  6139  003284  6E27               	movwf	_Mountain_Delay_Counter+1,c
  6140  003286  0E00               	movlw	0
  6141  003288  6E26               	movwf	_Mountain_Delay_Counter,c
  6142                           
  6143                           ;train_move_left.c: 116: }
  6144  00328A  D063               	goto	l1087
  6145  00328C                     l1073:
  6146                           
  6147                           ;train_move_left.c: 117: else{
  6148                           ;train_move_left.c: 118: Mountain_Delay_Counter++;
  6149  00328C  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  6150  00328E  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  6151  003290  D060               	goto	l1087
  6152  003292  0E04               	movlw	4
  6153  003294  0100               	movlb	0	; () banked
  6154  003296  19AD               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  6155  003298  A4D8               	btfss	status,2,c
  6156  00329A  D026               	goto	l1077
  6157                           
  6158                           ; BSR set to: 0
  6159                           ;train_move_left.c: 125: SETxPWM(Train_Move_Pwm_Count, 0);
  6160  00329C  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6161  0032A0  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6162  0032A4  0E00               	movlw	0
  6163  0032A6  6E21               	movwf	SETxPWM@direction,c
  6164  0032A8  EC1A  F01D         	call	_SETxPWM	;wreg free
  6165                           
  6166                           ;train_move_left.c: 126: if (Train_Move_Pwm_Count <= GETxAPIxVAL(46))
  6167  0032AC  0E00               	movlw	0
  6168  0032AE  6E14               	movwf	GETxAPIxVAL@index+1,c
  6169  0032B0  0E2E               	movlw	46
  6170  0032B2  6E13               	movwf	GETxAPIxVAL@index,c
  6171  0032B4  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  6172  0032B8  0100               	movlb	0	; () banked
  6173  0032BA  517E               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6174  0032BC  5C13               	subwf	?_GETxAPIxVAL,w,c
  6175  0032BE  517F               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6176  0032C0  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  6177  0032C2  B0D8               	btfsc	status,0,c
  6178  0032C4  D02A               	goto	u7130
  6179                           
  6180                           ; BSR set to: 0
  6181                           ;train_move_left.c: 133: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6182                           
  6183                           ; BSR set to: 0
  6184                           
  6185                           ; BSR set to: 0
  6186                           ;train_move_left.c: 132: }
  6187                           
  6188                           ;train_move_left.c: 131: break;
  6189                           
  6190                           ;train_move_left.c: 130: Return_Val = 0;
  6191                           
  6192                           ;train_move_left.c: 129: Switch_Moutain = 0;
  6193                           
  6194                           ; BSR set to: 0
  6195                           ;train_move_left.c: 127: {
  6196                           ;train_move_left.c: 128: Switch_Train_Move = 0;
  6197  0032C6  0E00               	movlw	0
  6198  0032C8  6E14               	movwf	GETxAPIxVAL@index+1,c
  6199  0032CA  0E1A               	movlw	26
  6200  0032CC  6E13               	movwf	GETxAPIxVAL@index,c
  6201  0032CE  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  6202  0032D2  5013               	movf	?_GETxAPIxVAL,w,c
  6203  0032D4  0100               	movlb	0	; () banked
  6204  0032D6  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6205  0032D8  5014               	movf	?_GETxAPIxVAL+1,w,c
  6206  0032DA  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6207  0032DC  A0D8               	btfss	status,0,c
  6208  0032DE  D037               	goto	l1086
  6209                           
  6210                           ; BSR set to: 0
  6211                           ;train_move_left.c: 134: {
  6212                           ;train_move_left.c: 135: Train_Move_Pwm_Count--;
  6213  0032E0  077E               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6214  0032E2  A0D8               	btfss	status,0,c
  6215  0032E4  077F               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6216  0032E6  D02E               	goto	l7670
  6217  0032E8                     l1077:
  6218                           
  6219                           ; BSR set to: 0
  6220                           ;train_move_left.c: 140: else if (rc == 3){
  6221                           
  6222                           ; BSR set to: 0
  6223  0032E8  0E03               	movlw	3
  6224  0032EA  19AD               	xorwf	Right_Mountain_From_The_Right@rc& (0+255),w,b
  6225  0032EC  A4D8               	btfss	status,2,c
  6226  0032EE  D031               	goto	l1087
  6227                           
  6228                           ; BSR set to: 0
  6229                           ;train_move_left.c: 141: SETxPWM(Train_Move_Pwm_Count, 0);
  6230  0032F0  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6231  0032F4  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6232  0032F8  0E00               	movlw	0
  6233  0032FA  6E21               	movwf	SETxPWM@direction,c
  6234  0032FC  EC1A  F01D         	call	_SETxPWM	;wreg free
  6235                           
  6236                           ;train_move_left.c: 142: if (Train_Move_Pwm_Count >= GETxAPIxVAL(24))
  6237  003300  0E00               	movlw	0
  6238  003302  6E14               	movwf	GETxAPIxVAL@index+1,c
  6239  003304  0E18               	movlw	24
  6240  003306  6E13               	movwf	GETxAPIxVAL@index,c
  6241  003308  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  6242  00330C  5013               	movf	?_GETxAPIxVAL,w,c
  6243  00330E  0100               	movlb	0	; () banked
  6244  003310  5D7E               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6245  003312  5014               	movf	?_GETxAPIxVAL+1,w,c
  6246  003314  597F               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6247  003316  A0D8               	btfss	status,0,c
  6248  003318  D006               	goto	l1084
  6249  00331A                     u7130:
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;train_move_left.c: 143: {
  6253                           ;train_move_left.c: 144: Switch_Train_Move = 0;
  6254  00331A  0E00               	movlw	0
  6255  00331C  6F80               	movwf	_Switch_Train_Move& (0+255),b
  6256                           
  6257                           ;train_move_left.c: 145: Switch_Moutain = 0;
  6258  00331E  0E00               	movlw	0
  6259  003320  6E2E               	movwf	_Switch_Moutain,c
  6260                           
  6261                           ;train_move_left.c: 146: Return_Val = 0;
  6262  003322  0E00               	movlw	0
  6263  003324  D017               	goto	L80
  6264  003326                     l1084:
  6265                           
  6266                           ; BSR set to: 0
  6267                           ;train_move_left.c: 149: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6268                           
  6269                           ; BSR set to: 0
  6270  003326  0E00               	movlw	0
  6271  003328  6E14               	movwf	GETxAPIxVAL@index+1,c
  6272  00332A  0E1A               	movlw	26
  6273  00332C  6E13               	movwf	GETxAPIxVAL@index,c
  6274  00332E  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  6275  003332  5013               	movf	?_GETxAPIxVAL,w,c
  6276  003334  0100               	movlb	0	; () banked
  6277  003336  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6278  003338  5014               	movf	?_GETxAPIxVAL+1,w,c
  6279  00333A  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6280  00333C  A0D8               	btfss	status,0,c
  6281  00333E  D007               	goto	l1086
  6282                           
  6283                           ; BSR set to: 0
  6284                           ;train_move_left.c: 150: {
  6285                           ;train_move_left.c: 151: Train_Move_Pwm_Count++;
  6286  003340  4B7E               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6287  003342  2B7F               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6288  003344                     l7670:
  6289                           
  6290                           ; BSR set to: 0
  6291                           ;train_move_left.c: 152: Train_Move_Pwm_Fast_Count = 0;
  6292  003344  0E00               	movlw	0
  6293  003346  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6294  003348  0E00               	movlw	0
  6295  00334A  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6296                           
  6297                           ;train_move_left.c: 153: }
  6298  00334C  D002               	goto	l1087
  6299  00334E                     l1086:
  6300                           
  6301                           ; BSR set to: 0
  6302                           ;train_move_left.c: 154: else{Train_Move_Pwm_Fast_Count++;}
  6303                           
  6304                           ; BSR set to: 0
  6305  00334E  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6306  003350  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6307  003352                     l1087:
  6308                           
  6309                           ; BSR set to: 0
  6310                           ;train_move_left.c: 155: }
  6311                           ;train_move_left.c: 156: Return_Val = 1;
  6312                           
  6313                           ; BSR set to: 0
  6314                           
  6315                           ; BSR set to: 0
  6316                           
  6317                           ; BSR set to: 0
  6318                           
  6319                           ; BSR set to: 0
  6320  003352  0E01               	movlw	1
  6321  003354                     L80:
  6322  003354  6E4B               	movwf	Right_Mountain_From_The_Right@Return_Val,c
  6323                           
  6324                           ; BSR set to: 0
  6325                           ;train_move_left.c: 161: }
  6326                           
  6327                           ; BSR set to: 0
  6328                           ;train_move_left.c: 160: break;
  6329                           
  6330                           ;train_move_left.c: 159: default:
  6331                           
  6332                           ;train_move_left.c: 157: break;
  6333  003356  D007               	goto	l1075
  6334  003358                     l1069:
  6335                           
  6336                           ; BSR set to: 0
  6337  003358  502E               	movf	_Switch_Moutain,w,c
  6338                           
  6339                           ; Switch size 1, requested type "space"
  6340                           ; Number of cases is 2, Range of values is 0 to 1
  6341                           ; switch strategies available:
  6342                           ; Name         Instructions Cycles
  6343                           ; simple_byte            7     4 (average)
  6344                           ;	Chosen strategy is simple_byte
  6345  00335A  0A00               	xorlw	0	; case 0
  6346  00335C  B4D8               	btfsc	status,2,c
  6347  00335E  D77E               	goto	l1070
  6348  003360  0A01               	xorlw	1	; case 1
  6349  003362  B4D8               	btfsc	status,2,c
  6350  003364  D796               	goto	l1076
  6351  003366                     l1075:
  6352                           
  6353                           ;train_move_left.c: 163: return(Return_Val);
  6354  003366  504B               	movf	Right_Mountain_From_The_Right@Return_Val,w,c
  6355  003368  0012               	return	
  6356  00336A                     __end_of_Right_Mountain_From_The_Right:
  6357                           	opt stack 0
  6358                           tblptru	equ	0xFF8
  6359                           tblptrh	equ	0xFF7
  6360                           tblptrl	equ	0xFF6
  6361                           tablat	equ	0xFF5
  6362                           postinc0	equ	0xFEE
  6363                           wreg	equ	0xFE8
  6364                           postdec1	equ	0xFE5
  6365                           fsr1h	equ	0xFE2
  6366                           fsr1l	equ	0xFE1
  6367                           status	equ	0xFD8
  6368                           
  6369 ;; *************** function _Right_Mountain_From_The_Left *****************
  6370 ;; Defined at:
  6371 ;;		line 179 in file "../train_move_right.c"
  6372 ;; Parameters:    Size  Location     Type
  6373 ;;  rc              1    wreg     unsigned char 
  6374 ;; Auto vars:     Size  Location     Type
  6375 ;;  rc              1   21[BANK0 ] unsigned char 
  6376 ;; Return value:  Size  Location     Type
  6377 ;;                  1    wreg      unsigned char 
  6378 ;; Registers used:
  6379 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6380 ;; Tracked objects:
  6381 ;;		On entry : 0/0
  6382 ;;		On exit  : 0/0
  6383 ;;		Unchanged: 0/0
  6384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6385 ;;      Params:         0       0       0       0       0       0       0       0       0
  6386 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6387 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6388 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6389 ;;Total ram usage:        1 bytes
  6390 ;; Hardware stack levels used:    1
  6391 ;; Hardware stack levels required when called:    6
  6392 ;; This function calls:
  6393 ;;		_GETxAPIxVAL
  6394 ;;		_SETxPWM
  6395 ;; This function is called by:
  6396 ;;		_Train_Path
  6397 ;; This function uses a non-reentrant model
  6398 ;;
  6399                           
  6400                           	psect	text8
  6401  00336A                     __ptext8:
  6402                           	opt stack 0
  6403  00336A                     _Right_Mountain_From_The_Left:
  6404                           	opt stack 22
  6405                           
  6406                           ;incstack = 0
  6407                           ;Right_Mountain_From_The_Left@rc stored from wreg
  6408  00336A  0100               	movlb	0	; () banked
  6409  00336C  6FAD               	movwf	Right_Mountain_From_The_Left@rc& (0+255),b
  6410                           
  6411                           ;train_move_right.c: 181: static char Return_Val = 1;
  6412                           ;train_move_right.c: 183: switch (Switch_Moutain){
  6413  00336E  D07E               	goto	l1197
  6414  003370  0E04               	movlw	4
  6415  003372  0100               	movlb	0	; () banked
  6416  003374  19AD               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6417  003376  B4D8               	btfsc	status,2,c
  6418  003378  D00C               	goto	u7000
  6419                           
  6420                           ; BSR set to: 0
  6421                           ;train_move_right.c: 188: else if(Mountain_Delay_Counter >= GETxAPIxVAL(56)){
  6422                           
  6423                           ; BSR set to: 0
  6424                           
  6425                           ;train_move_right.c: 187: }
  6426                           
  6427                           ;train_move_right.c: 186: Mountain_Delay_Counter = 0;
  6428                           
  6429                           ; BSR set to: 0
  6430                           ;train_move_right.c: 185: Switch_Moutain = 1;
  6431  00337A  0E00               	movlw	0
  6432  00337C  6E14               	movwf	GETxAPIxVAL@index+1,c
  6433  00337E  0E38               	movlw	56
  6434  003380  6E13               	movwf	GETxAPIxVAL@index,c
  6435  003382  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  6436  003386  5013               	movf	?_GETxAPIxVAL,w,c
  6437  003388  5C26               	subwf	_Mountain_Delay_Counter,w,c
  6438  00338A  5014               	movf	?_GETxAPIxVAL+1,w,c
  6439  00338C  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  6440  00338E  A0D8               	btfss	status,0,c
  6441  003390  D007               	goto	l1201
  6442  003392                     u7000:
  6443                           
  6444                           ;train_move_right.c: 189: Switch_Moutain = 1;
  6445  003392  0E01               	movlw	1
  6446  003394  6E2E               	movwf	_Switch_Moutain,c
  6447                           
  6448                           ;train_move_right.c: 190: Mountain_Delay_Counter = 0;
  6449  003396  0E00               	movlw	0
  6450  003398  6E27               	movwf	_Mountain_Delay_Counter+1,c
  6451  00339A  0E00               	movlw	0
  6452  00339C  6E26               	movwf	_Mountain_Delay_Counter,c
  6453                           
  6454                           ;train_move_right.c: 191: }
  6455  00339E  D063               	goto	l1215
  6456  0033A0                     l1201:
  6457                           
  6458                           ;train_move_right.c: 192: else{
  6459                           ;train_move_right.c: 193: Mountain_Delay_Counter++;
  6460  0033A0  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  6461  0033A2  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  6462  0033A4  D060               	goto	l1215
  6463  0033A6  0E03               	movlw	3
  6464  0033A8  0100               	movlb	0	; () banked
  6465  0033AA  19AD               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6466  0033AC  A4D8               	btfss	status,2,c
  6467  0033AE  D025               	goto	l1205
  6468                           
  6469                           ; BSR set to: 0
  6470                           ;train_move_right.c: 199: SETxPWM(Train_Move_Pwm_Count, 1);
  6471  0033B0  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6472  0033B4  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6473  0033B8  0E01               	movlw	1
  6474  0033BA  6E21               	movwf	SETxPWM@direction,c
  6475  0033BC  EC1A  F01D         	call	_SETxPWM	;wreg free
  6476                           
  6477                           ;train_move_right.c: 200: if (Train_Move_Pwm_Count >= GETxAPIxVAL(47))
  6478  0033C0  0E00               	movlw	0
  6479  0033C2  6E14               	movwf	GETxAPIxVAL@index+1,c
  6480  0033C4  0E2F               	movlw	47
  6481  0033C6  6E13               	movwf	GETxAPIxVAL@index,c
  6482  0033C8  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  6483  0033CC  5013               	movf	?_GETxAPIxVAL,w,c
  6484  0033CE  0100               	movlb	0	; () banked
  6485  0033D0  5D7E               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6486  0033D2  5014               	movf	?_GETxAPIxVAL+1,w,c
  6487  0033D4  597F               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6488  0033D6  B0D8               	btfsc	status,0,c
  6489  0033D8  D029               	goto	u7050
  6490                           
  6491                           ; BSR set to: 0
  6492                           ;train_move_right.c: 207: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6493                           
  6494                           ; BSR set to: 0
  6495                           
  6496                           ; BSR set to: 0
  6497                           ;train_move_right.c: 206: }
  6498                           
  6499                           ;train_move_right.c: 205: break;
  6500                           
  6501                           ;train_move_right.c: 204: Return_Val = 0;
  6502                           
  6503                           ;train_move_right.c: 203: Switch_Moutain = 0;
  6504                           
  6505                           ; BSR set to: 0
  6506                           ;train_move_right.c: 201: {
  6507                           ;train_move_right.c: 202: Switch_Train_Move = 0;
  6508  0033DA  0E00               	movlw	0
  6509  0033DC  6E14               	movwf	GETxAPIxVAL@index+1,c
  6510  0033DE  0E1A               	movlw	26
  6511  0033E0  6E13               	movwf	GETxAPIxVAL@index,c
  6512  0033E2  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  6513  0033E6  5013               	movf	?_GETxAPIxVAL,w,c
  6514  0033E8  0100               	movlb	0	; () banked
  6515  0033EA  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6516  0033EC  5014               	movf	?_GETxAPIxVAL+1,w,c
  6517  0033EE  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6518  0033F0  A0D8               	btfss	status,0,c
  6519  0033F2  D037               	goto	l1214
  6520                           
  6521                           ; BSR set to: 0
  6522                           ;train_move_right.c: 208: {
  6523                           ;train_move_right.c: 209: Train_Move_Pwm_Count++;
  6524  0033F4  4B7E               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6525  0033F6  2B7F               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6526  0033F8  D02F               	goto	l7614
  6527  0033FA                     l1205:
  6528                           
  6529                           ; BSR set to: 0
  6530                           ;train_move_right.c: 214: else if (rc == 4){
  6531                           
  6532                           ; BSR set to: 0
  6533  0033FA  0E04               	movlw	4
  6534  0033FC  19AD               	xorwf	Right_Mountain_From_The_Left@rc& (0+255),w,b
  6535  0033FE  A4D8               	btfss	status,2,c
  6536  003400  D032               	goto	l1215
  6537                           
  6538                           ; BSR set to: 0
  6539                           ;train_move_right.c: 215: SETxPWM(Train_Move_Pwm_Count, 1);
  6540  003402  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6541  003406  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6542  00340A  0E01               	movlw	1
  6543  00340C  6E21               	movwf	SETxPWM@direction,c
  6544  00340E  EC1A  F01D         	call	_SETxPWM	;wreg free
  6545                           
  6546                           ;train_move_right.c: 216: if (Train_Move_Pwm_Count <= GETxAPIxVAL(23))
  6547  003412  0E00               	movlw	0
  6548  003414  6E14               	movwf	GETxAPIxVAL@index+1,c
  6549  003416  0E17               	movlw	23
  6550  003418  6E13               	movwf	GETxAPIxVAL@index,c
  6551  00341A  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  6552  00341E  0100               	movlb	0	; () banked
  6553  003420  517E               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6554  003422  5C13               	subwf	?_GETxAPIxVAL,w,c
  6555  003424  517F               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6556  003426  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  6557  003428  A0D8               	btfss	status,0,c
  6558  00342A  D006               	goto	l1212
  6559  00342C                     u7050:
  6560                           
  6561                           ; BSR set to: 0
  6562                           ;train_move_right.c: 217: {
  6563                           ;train_move_right.c: 218: Switch_Train_Move = 0;
  6564  00342C  0E00               	movlw	0
  6565  00342E  6F80               	movwf	_Switch_Train_Move& (0+255),b
  6566                           
  6567                           ;train_move_right.c: 219: Switch_Moutain = 0;
  6568  003430  0E00               	movlw	0
  6569  003432  6E2E               	movwf	_Switch_Moutain,c
  6570                           
  6571                           ;train_move_right.c: 220: Return_Val = 0;
  6572  003434  0E00               	movlw	0
  6573  003436  D018               	goto	L83
  6574  003438                     l1212:
  6575                           
  6576                           ; BSR set to: 0
  6577                           ;train_move_right.c: 223: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6578                           
  6579                           ; BSR set to: 0
  6580  003438  0E00               	movlw	0
  6581  00343A  6E14               	movwf	GETxAPIxVAL@index+1,c
  6582  00343C  0E1A               	movlw	26
  6583  00343E  6E13               	movwf	GETxAPIxVAL@index,c
  6584  003440  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  6585  003444  5013               	movf	?_GETxAPIxVAL,w,c
  6586  003446  0100               	movlb	0	; () banked
  6587  003448  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6588  00344A  5014               	movf	?_GETxAPIxVAL+1,w,c
  6589  00344C  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6590  00344E  A0D8               	btfss	status,0,c
  6591  003450  D008               	goto	l1214
  6592                           
  6593                           ; BSR set to: 0
  6594                           ;train_move_right.c: 224: {
  6595                           ;train_move_right.c: 225: Train_Move_Pwm_Count--;
  6596  003452  077E               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6597  003454  A0D8               	btfss	status,0,c
  6598  003456  077F               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6599  003458                     l7614:
  6600                           
  6601                           ; BSR set to: 0
  6602                           ;train_move_right.c: 226: Train_Move_Pwm_Fast_Count = 0;
  6603  003458  0E00               	movlw	0
  6604  00345A  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6605  00345C  0E00               	movlw	0
  6606  00345E  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6607                           
  6608                           ;train_move_right.c: 227: }
  6609  003460  D002               	goto	l1215
  6610  003462                     l1214:
  6611                           
  6612                           ; BSR set to: 0
  6613                           ;train_move_right.c: 228: else{Train_Move_Pwm_Fast_Count++;}
  6614                           
  6615                           ; BSR set to: 0
  6616  003462  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6617  003464  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6618  003466                     l1215:
  6619                           
  6620                           ; BSR set to: 0
  6621                           ;train_move_right.c: 229: }
  6622                           ;train_move_right.c: 230: Return_Val = 1;
  6623                           
  6624                           ; BSR set to: 0
  6625                           
  6626                           ; BSR set to: 0
  6627                           
  6628                           ; BSR set to: 0
  6629                           
  6630                           ; BSR set to: 0
  6631  003466  0E01               	movlw	1
  6632  003468                     L83:
  6633  003468  6E48               	movwf	Right_Mountain_From_The_Left@Return_Val,c
  6634                           
  6635                           ; BSR set to: 0
  6636                           ;train_move_right.c: 235: }
  6637                           
  6638                           ; BSR set to: 0
  6639                           ;train_move_right.c: 234: break;
  6640                           
  6641                           ;train_move_right.c: 233: default:
  6642                           
  6643                           ;train_move_right.c: 231: break;
  6644  00346A  D007               	goto	l1203
  6645  00346C                     l1197:
  6646                           
  6647                           ; BSR set to: 0
  6648  00346C  502E               	movf	_Switch_Moutain,w,c
  6649                           
  6650                           ; Switch size 1, requested type "space"
  6651                           ; Number of cases is 2, Range of values is 0 to 1
  6652                           ; switch strategies available:
  6653                           ; Name         Instructions Cycles
  6654                           ; simple_byte            7     4 (average)
  6655                           ;	Chosen strategy is simple_byte
  6656  00346E  0A00               	xorlw	0	; case 0
  6657  003470  B4D8               	btfsc	status,2,c
  6658  003472  D77E               	goto	l1198
  6659  003474  0A01               	xorlw	1	; case 1
  6660  003476  B4D8               	btfsc	status,2,c
  6661  003478  D796               	goto	l1204
  6662  00347A                     l1203:
  6663                           
  6664                           ;train_move_right.c: 237: return(Return_Val);
  6665  00347A  5048               	movf	Right_Mountain_From_The_Left@Return_Val,w,c
  6666  00347C  0012               	return	
  6667  00347E                     __end_of_Right_Mountain_From_The_Left:
  6668                           	opt stack 0
  6669                           tblptru	equ	0xFF8
  6670                           tblptrh	equ	0xFF7
  6671                           tblptrl	equ	0xFF6
  6672                           tablat	equ	0xFF5
  6673                           postinc0	equ	0xFEE
  6674                           wreg	equ	0xFE8
  6675                           postdec1	equ	0xFE5
  6676                           fsr1h	equ	0xFE2
  6677                           fsr1l	equ	0xFE1
  6678                           status	equ	0xFD8
  6679                           
  6680 ;; *************** function _Left_Mountain_From_The_Right *****************
  6681 ;; Defined at:
  6682 ;;		line 180 in file "../train_move_left.c"
  6683 ;; Parameters:    Size  Location     Type
  6684 ;;  rc              1    wreg     unsigned char 
  6685 ;; Auto vars:     Size  Location     Type
  6686 ;;  rc              1   21[BANK0 ] unsigned char 
  6687 ;; Return value:  Size  Location     Type
  6688 ;;                  1    wreg      unsigned char 
  6689 ;; Registers used:
  6690 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6691 ;; Tracked objects:
  6692 ;;		On entry : 0/0
  6693 ;;		On exit  : 0/0
  6694 ;;		Unchanged: 0/0
  6695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6696 ;;      Params:         0       0       0       0       0       0       0       0       0
  6697 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6698 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6699 ;;      Totals:         0       1       0       0       0       0       0       0       0
  6700 ;;Total ram usage:        1 bytes
  6701 ;; Hardware stack levels used:    1
  6702 ;; Hardware stack levels required when called:    6
  6703 ;; This function calls:
  6704 ;;		_GETxAPIxVAL
  6705 ;;		_SETxPWM
  6706 ;; This function is called by:
  6707 ;;		_Train_Path
  6708 ;; This function uses a non-reentrant model
  6709 ;;
  6710                           
  6711                           	psect	text9
  6712  0036A4                     __ptext9:
  6713                           	opt stack 0
  6714  0036A4                     _Left_Mountain_From_The_Right:
  6715                           	opt stack 22
  6716                           
  6717                           ;incstack = 0
  6718                           ;Left_Mountain_From_The_Right@rc stored from wreg
  6719  0036A4  0100               	movlb	0	; () banked
  6720  0036A6  6FAD               	movwf	Left_Mountain_From_The_Right@rc& (0+255),b
  6721                           
  6722                           ;train_move_left.c: 182: static char Return_Val = 1;
  6723                           ;train_move_left.c: 184: switch (Switch_Moutain){
  6724  0036A8  D07C               	goto	l1094
  6725  0036AA  0100               	movlb	0	; () banked
  6726  0036AC  05AD               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6727  0036AE  B4D8               	btfsc	status,2,c
  6728  0036B0  D00C               	goto	u7160
  6729                           
  6730                           ; BSR set to: 0
  6731                           ;train_move_left.c: 189: else if(Mountain_Delay_Counter >= GETxAPIxVAL(58)){
  6732                           
  6733                           ; BSR set to: 0
  6734                           
  6735                           ;train_move_left.c: 188: }
  6736                           
  6737                           ;train_move_left.c: 187: Mountain_Delay_Counter = 0;
  6738                           
  6739                           ; BSR set to: 0
  6740                           ;train_move_left.c: 186: Switch_Moutain = 1;
  6741  0036B2  0E00               	movlw	0
  6742  0036B4  6E14               	movwf	GETxAPIxVAL@index+1,c
  6743  0036B6  0E3A               	movlw	58
  6744  0036B8  6E13               	movwf	GETxAPIxVAL@index,c
  6745  0036BA  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  6746  0036BE  5013               	movf	?_GETxAPIxVAL,w,c
  6747  0036C0  5C26               	subwf	_Mountain_Delay_Counter,w,c
  6748  0036C2  5014               	movf	?_GETxAPIxVAL+1,w,c
  6749  0036C4  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  6750  0036C6  A0D8               	btfss	status,0,c
  6751  0036C8  D007               	goto	l1098
  6752  0036CA                     u7160:
  6753                           
  6754                           ;train_move_left.c: 190: Switch_Moutain = 1;
  6755  0036CA  0E01               	movlw	1
  6756  0036CC  6E2E               	movwf	_Switch_Moutain,c
  6757                           
  6758                           ;train_move_left.c: 191: Mountain_Delay_Counter = 0;
  6759  0036CE  0E00               	movlw	0
  6760  0036D0  6E27               	movwf	_Mountain_Delay_Counter+1,c
  6761  0036D2  0E00               	movlw	0
  6762  0036D4  6E26               	movwf	_Mountain_Delay_Counter,c
  6763                           
  6764                           ;train_move_left.c: 192: }
  6765  0036D6  D062               	goto	l1112
  6766  0036D8                     l1098:
  6767                           
  6768                           ;train_move_left.c: 193: else{
  6769                           ;train_move_left.c: 194: Mountain_Delay_Counter++;
  6770  0036D8  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  6771  0036DA  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  6772  0036DC  D05F               	goto	l1112
  6773  0036DE  0E02               	movlw	2
  6774  0036E0  0100               	movlb	0	; () banked
  6775  0036E2  19AD               	xorwf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6776  0036E4  A4D8               	btfss	status,2,c
  6777  0036E6  D025               	goto	l1102
  6778                           
  6779                           ; BSR set to: 0
  6780                           ;train_move_left.c: 200: SETxPWM(Train_Move_Pwm_Count, 0);
  6781  0036E8  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6782  0036EC  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6783  0036F0  0E00               	movlw	0
  6784  0036F2  6E21               	movwf	SETxPWM@direction,c
  6785  0036F4  EC1A  F01D         	call	_SETxPWM	;wreg free
  6786                           
  6787                           ;train_move_left.c: 201: if (Train_Move_Pwm_Count >= GETxAPIxVAL(52))
  6788  0036F8  0E00               	movlw	0
  6789  0036FA  6E14               	movwf	GETxAPIxVAL@index+1,c
  6790  0036FC  0E34               	movlw	52
  6791  0036FE  6E13               	movwf	GETxAPIxVAL@index,c
  6792  003700  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  6793  003704  5013               	movf	?_GETxAPIxVAL,w,c
  6794  003706  0100               	movlb	0	; () banked
  6795  003708  5D7E               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  6796  00370A  5014               	movf	?_GETxAPIxVAL+1,w,c
  6797  00370C  597F               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6798  00370E  B0D8               	btfsc	status,0,c
  6799  003710  D028               	goto	u7210
  6800                           
  6801                           ; BSR set to: 0
  6802                           ;train_move_left.c: 208: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6803                           
  6804                           ; BSR set to: 0
  6805                           
  6806                           ; BSR set to: 0
  6807                           ;train_move_left.c: 207: }
  6808                           
  6809                           ;train_move_left.c: 206: break;
  6810                           
  6811                           ;train_move_left.c: 205: Return_Val = 0;
  6812                           
  6813                           ;train_move_left.c: 204: Switch_Moutain = 0;
  6814                           
  6815                           ; BSR set to: 0
  6816                           ;train_move_left.c: 202: {
  6817                           ;train_move_left.c: 203: Switch_Train_Move = 0;
  6818  003712  0E00               	movlw	0
  6819  003714  6E14               	movwf	GETxAPIxVAL@index+1,c
  6820  003716  0E1A               	movlw	26
  6821  003718  6E13               	movwf	GETxAPIxVAL@index,c
  6822  00371A  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  6823  00371E  5013               	movf	?_GETxAPIxVAL,w,c
  6824  003720  0100               	movlb	0	; () banked
  6825  003722  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6826  003724  5014               	movf	?_GETxAPIxVAL+1,w,c
  6827  003726  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6828  003728  A0D8               	btfss	status,0,c
  6829  00372A  D036               	goto	l1111
  6830                           
  6831                           ; BSR set to: 0
  6832                           ;train_move_left.c: 209: {
  6833                           ;train_move_left.c: 210: Train_Move_Pwm_Count++;
  6834  00372C  4B7E               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  6835  00372E  2B7F               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6836  003730  D02E               	goto	l7726
  6837  003732                     l1102:
  6838                           
  6839                           ; BSR set to: 0
  6840                           ;train_move_left.c: 215: else if (rc == 1){
  6841                           
  6842                           ; BSR set to: 0
  6843  003732  05AD               	decf	Left_Mountain_From_The_Right@rc& (0+255),w,b
  6844  003734  A4D8               	btfss	status,2,c
  6845  003736  D032               	goto	l1112
  6846                           
  6847                           ; BSR set to: 0
  6848                           ;train_move_left.c: 216: SETxPWM(Train_Move_Pwm_Count, 0);
  6849  003738  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  6850  00373C  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  6851  003740  0E00               	movlw	0
  6852  003742  6E21               	movwf	SETxPWM@direction,c
  6853  003744  EC1A  F01D         	call	_SETxPWM	;wreg free
  6854                           
  6855                           ;train_move_left.c: 217: if (Train_Move_Pwm_Count <= GETxAPIxVAL(24))
  6856  003748  0E00               	movlw	0
  6857  00374A  6E14               	movwf	GETxAPIxVAL@index+1,c
  6858  00374C  0E18               	movlw	24
  6859  00374E  6E13               	movwf	GETxAPIxVAL@index,c
  6860  003750  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  6861  003754  0100               	movlb	0	; () banked
  6862  003756  517E               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  6863  003758  5C13               	subwf	?_GETxAPIxVAL,w,c
  6864  00375A  517F               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  6865  00375C  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  6866  00375E  A0D8               	btfss	status,0,c
  6867  003760  D006               	goto	l1109
  6868  003762                     u7210:
  6869                           
  6870                           ; BSR set to: 0
  6871                           ;train_move_left.c: 218: {
  6872                           ;train_move_left.c: 219: Switch_Train_Move = 0;
  6873  003762  0E00               	movlw	0
  6874  003764  6F80               	movwf	_Switch_Train_Move& (0+255),b
  6875                           
  6876                           ;train_move_left.c: 220: Switch_Moutain = 0;
  6877  003766  0E00               	movlw	0
  6878  003768  6E2E               	movwf	_Switch_Moutain,c
  6879                           
  6880                           ;train_move_left.c: 221: Return_Val = 0;
  6881  00376A  0E00               	movlw	0
  6882  00376C  D018               	goto	L86
  6883  00376E                     l1109:
  6884                           
  6885                           ; BSR set to: 0
  6886                           ;train_move_left.c: 224: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  6887                           
  6888                           ; BSR set to: 0
  6889  00376E  0E00               	movlw	0
  6890  003770  6E14               	movwf	GETxAPIxVAL@index+1,c
  6891  003772  0E1A               	movlw	26
  6892  003774  6E13               	movwf	GETxAPIxVAL@index,c
  6893  003776  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  6894  00377A  5013               	movf	?_GETxAPIxVAL,w,c
  6895  00377C  0100               	movlb	0	; () banked
  6896  00377E  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  6897  003780  5014               	movf	?_GETxAPIxVAL+1,w,c
  6898  003782  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  6899  003784  A0D8               	btfss	status,0,c
  6900  003786  D008               	goto	l1111
  6901                           
  6902                           ; BSR set to: 0
  6903                           ;train_move_left.c: 225: {
  6904                           ;train_move_left.c: 226: Train_Move_Pwm_Count--;
  6905  003788  077E               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  6906  00378A  A0D8               	btfss	status,0,c
  6907  00378C  077F               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  6908  00378E                     l7726:
  6909                           
  6910                           ; BSR set to: 0
  6911                           ;train_move_left.c: 227: Train_Move_Pwm_Fast_Count = 0;
  6912  00378E  0E00               	movlw	0
  6913  003790  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  6914  003792  0E00               	movlw	0
  6915  003794  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  6916                           
  6917                           ;train_move_left.c: 228: }
  6918  003796  D002               	goto	l1112
  6919  003798                     l1111:
  6920                           
  6921                           ; BSR set to: 0
  6922                           ;train_move_left.c: 229: else{Train_Move_Pwm_Fast_Count++;}
  6923                           
  6924                           ; BSR set to: 0
  6925  003798  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  6926  00379A  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  6927  00379C                     l1112:
  6928                           
  6929                           ; BSR set to: 0
  6930                           ;train_move_left.c: 230: }
  6931                           ;train_move_left.c: 231: Return_Val = 1;
  6932                           
  6933                           ; BSR set to: 0
  6934                           
  6935                           ; BSR set to: 0
  6936                           
  6937                           ; BSR set to: 0
  6938                           
  6939                           ; BSR set to: 0
  6940  00379C  0E01               	movlw	1
  6941  00379E                     L86:
  6942  00379E  6E4A               	movwf	Left_Mountain_From_The_Right@Return_Val,c
  6943                           
  6944                           ; BSR set to: 0
  6945                           ;train_move_left.c: 236: }
  6946                           
  6947                           ; BSR set to: 0
  6948                           ;train_move_left.c: 235: break;
  6949                           
  6950                           ;train_move_left.c: 234: default:
  6951                           
  6952                           ;train_move_left.c: 232: break;
  6953  0037A0  D007               	goto	l1100
  6954  0037A2                     l1094:
  6955                           
  6956                           ; BSR set to: 0
  6957  0037A2  502E               	movf	_Switch_Moutain,w,c
  6958                           
  6959                           ; Switch size 1, requested type "space"
  6960                           ; Number of cases is 2, Range of values is 0 to 1
  6961                           ; switch strategies available:
  6962                           ; Name         Instructions Cycles
  6963                           ; simple_byte            7     4 (average)
  6964                           ;	Chosen strategy is simple_byte
  6965  0037A4  0A00               	xorlw	0	; case 0
  6966  0037A6  B4D8               	btfsc	status,2,c
  6967  0037A8  D780               	goto	l1095
  6968  0037AA  0A01               	xorlw	1	; case 1
  6969  0037AC  B4D8               	btfsc	status,2,c
  6970  0037AE  D797               	goto	l1101
  6971  0037B0                     l1100:
  6972                           
  6973                           ;train_move_left.c: 238: return(Return_Val);
  6974  0037B0  504A               	movf	Left_Mountain_From_The_Right@Return_Val,w,c
  6975  0037B2  0012               	return	
  6976  0037B4                     __end_of_Left_Mountain_From_The_Right:
  6977                           	opt stack 0
  6978                           tblptru	equ	0xFF8
  6979                           tblptrh	equ	0xFF7
  6980                           tblptrl	equ	0xFF6
  6981                           tablat	equ	0xFF5
  6982                           postinc0	equ	0xFEE
  6983                           wreg	equ	0xFE8
  6984                           postdec1	equ	0xFE5
  6985                           fsr1h	equ	0xFE2
  6986                           fsr1l	equ	0xFE1
  6987                           status	equ	0xFD8
  6988                           
  6989 ;; *************** function _Left_Mountain_From_The_Left *****************
  6990 ;; Defined at:
  6991 ;;		line 104 in file "../train_move_right.c"
  6992 ;; Parameters:    Size  Location     Type
  6993 ;;  rc              1    wreg     unsigned char 
  6994 ;; Auto vars:     Size  Location     Type
  6995 ;;  rc              1   21[BANK0 ] unsigned char 
  6996 ;; Return value:  Size  Location     Type
  6997 ;;                  1    wreg      unsigned char 
  6998 ;; Registers used:
  6999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7000 ;; Tracked objects:
  7001 ;;		On entry : 0/0
  7002 ;;		On exit  : 0/0
  7003 ;;		Unchanged: 0/0
  7004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7005 ;;      Params:         0       0       0       0       0       0       0       0       0
  7006 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7007 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7008 ;;      Totals:         0       1       0       0       0       0       0       0       0
  7009 ;;Total ram usage:        1 bytes
  7010 ;; Hardware stack levels used:    1
  7011 ;; Hardware stack levels required when called:    6
  7012 ;; This function calls:
  7013 ;;		_GETxAPIxVAL
  7014 ;;		_SETxPWM
  7015 ;; This function is called by:
  7016 ;;		_Train_Path
  7017 ;; This function uses a non-reentrant model
  7018 ;;
  7019                           
  7020                           	psect	text10
  7021  003592                     __ptext10:
  7022                           	opt stack 0
  7023  003592                     _Left_Mountain_From_The_Left:
  7024                           	opt stack 22
  7025                           
  7026                           ;incstack = 0
  7027                           ;Left_Mountain_From_The_Left@rc stored from wreg
  7028  003592  0100               	movlb	0	; () banked
  7029  003594  6FAD               	movwf	Left_Mountain_From_The_Left@rc& (0+255),b
  7030                           
  7031                           ;train_move_right.c: 106: static char Return_Val = 1;
  7032                           ;train_move_right.c: 108: switch (Switch_Moutain){
  7033  003596  D07D               	goto	l1172
  7034  003598  0E02               	movlw	2
  7035  00359A  0100               	movlb	0	; () banked
  7036  00359C  19AD               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  7037  00359E  B4D8               	btfsc	status,2,c
  7038  0035A0  D00C               	goto	u6920
  7039                           
  7040                           ; BSR set to: 0
  7041                           ;train_move_right.c: 113: else if(Mountain_Delay_Counter >= GETxAPIxVAL(59)){
  7042                           
  7043                           ; BSR set to: 0
  7044                           
  7045                           ;train_move_right.c: 112: }
  7046                           
  7047                           ;train_move_right.c: 111: Mountain_Delay_Counter = 0;
  7048                           
  7049                           ; BSR set to: 0
  7050                           ;train_move_right.c: 110: Switch_Moutain = 1;
  7051  0035A2  0E00               	movlw	0
  7052  0035A4  6E14               	movwf	GETxAPIxVAL@index+1,c
  7053  0035A6  0E3B               	movlw	59
  7054  0035A8  6E13               	movwf	GETxAPIxVAL@index,c
  7055  0035AA  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  7056  0035AE  5013               	movf	?_GETxAPIxVAL,w,c
  7057  0035B0  5C26               	subwf	_Mountain_Delay_Counter,w,c
  7058  0035B2  5014               	movf	?_GETxAPIxVAL+1,w,c
  7059  0035B4  5827               	subwfb	_Mountain_Delay_Counter+1,w,c
  7060  0035B6  A0D8               	btfss	status,0,c
  7061  0035B8  D007               	goto	l1176
  7062  0035BA                     u6920:
  7063                           
  7064                           ;train_move_right.c: 114: Switch_Moutain = 1;
  7065  0035BA  0E01               	movlw	1
  7066  0035BC  6E2E               	movwf	_Switch_Moutain,c
  7067                           
  7068                           ;train_move_right.c: 115: Mountain_Delay_Counter = 0;
  7069  0035BE  0E00               	movlw	0
  7070  0035C0  6E27               	movwf	_Mountain_Delay_Counter+1,c
  7071  0035C2  0E00               	movlw	0
  7072  0035C4  6E26               	movwf	_Mountain_Delay_Counter,c
  7073                           
  7074                           ;train_move_right.c: 116: }
  7075  0035C6  D062               	goto	l1190
  7076  0035C8                     l1176:
  7077                           
  7078                           ;train_move_right.c: 117: else{
  7079                           ;train_move_right.c: 118: Mountain_Delay_Counter++;
  7080  0035C8  4A26               	infsnz	_Mountain_Delay_Counter,f,c
  7081  0035CA  2A27               	incf	_Mountain_Delay_Counter+1,f,c
  7082  0035CC  D05F               	goto	l1190
  7083  0035CE  0100               	movlb	0	; () banked
  7084  0035D0  05AD               	decf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  7085  0035D2  A4D8               	btfss	status,2,c
  7086  0035D4  D026               	goto	l1180
  7087                           
  7088                           ; BSR set to: 0
  7089                           ;train_move_right.c: 124: SETxPWM(Train_Move_Pwm_Count, 1);
  7090  0035D6  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  7091  0035DA  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  7092  0035DE  0E01               	movlw	1
  7093  0035E0  6E21               	movwf	SETxPWM@direction,c
  7094  0035E2  EC1A  F01D         	call	_SETxPWM	;wreg free
  7095                           
  7096                           ;train_move_right.c: 125: if (Train_Move_Pwm_Count <= GETxAPIxVAL(49))
  7097  0035E6  0E00               	movlw	0
  7098  0035E8  6E14               	movwf	GETxAPIxVAL@index+1,c
  7099  0035EA  0E31               	movlw	49
  7100  0035EC  6E13               	movwf	GETxAPIxVAL@index,c
  7101  0035EE  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  7102  0035F2  0100               	movlb	0	; () banked
  7103  0035F4  517E               	movf	_Train_Move_Pwm_Count& (0+255),w,b
  7104  0035F6  5C13               	subwf	?_GETxAPIxVAL,w,c
  7105  0035F8  517F               	movf	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  7106  0035FA  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  7107  0035FC  B0D8               	btfsc	status,0,c
  7108  0035FE  D02A               	goto	u6970
  7109                           
  7110                           ; BSR set to: 0
  7111                           ;train_move_right.c: 132: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  7112                           
  7113                           ; BSR set to: 0
  7114                           
  7115                           ; BSR set to: 0
  7116                           ;train_move_right.c: 131: }
  7117                           
  7118                           ;train_move_right.c: 130: break;
  7119                           
  7120                           ;train_move_right.c: 129: Return_Val = 0;
  7121                           
  7122                           ;train_move_right.c: 128: Switch_Moutain = 0;
  7123                           
  7124                           ; BSR set to: 0
  7125                           ;train_move_right.c: 126: {
  7126                           ;train_move_right.c: 127: Switch_Train_Move = 0;
  7127  003600  0E00               	movlw	0
  7128  003602  6E14               	movwf	GETxAPIxVAL@index+1,c
  7129  003604  0E1A               	movlw	26
  7130  003606  6E13               	movwf	GETxAPIxVAL@index,c
  7131  003608  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  7132  00360C  5013               	movf	?_GETxAPIxVAL,w,c
  7133  00360E  0100               	movlb	0	; () banked
  7134  003610  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  7135  003612  5014               	movf	?_GETxAPIxVAL+1,w,c
  7136  003614  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  7137  003616  A0D8               	btfss	status,0,c
  7138  003618  D037               	goto	l1189
  7139                           
  7140                           ; BSR set to: 0
  7141                           ;train_move_right.c: 133: {
  7142                           ;train_move_right.c: 134: Train_Move_Pwm_Count--;
  7143  00361A  077E               	decf	_Train_Move_Pwm_Count& (0+255),f,b
  7144  00361C  A0D8               	btfss	status,0,c
  7145  00361E  077F               	decf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  7146  003620  D02E               	goto	l7558
  7147  003622                     l1180:
  7148                           
  7149                           ; BSR set to: 0
  7150                           ;train_move_right.c: 139: else if (rc == 2){
  7151                           
  7152                           ; BSR set to: 0
  7153  003622  0E02               	movlw	2
  7154  003624  19AD               	xorwf	Left_Mountain_From_The_Left@rc& (0+255),w,b
  7155  003626  A4D8               	btfss	status,2,c
  7156  003628  D031               	goto	l1190
  7157                           
  7158                           ; BSR set to: 0
  7159                           ;train_move_right.c: 140: SETxPWM(Train_Move_Pwm_Count, 1);
  7160  00362A  C07E  F01F         	movff	_Train_Move_Pwm_Count,SETxPWM@speed
  7161  00362E  C07F  F020         	movff	_Train_Move_Pwm_Count+1,SETxPWM@speed+1
  7162  003632  0E01               	movlw	1
  7163  003634  6E21               	movwf	SETxPWM@direction,c
  7164  003636  EC1A  F01D         	call	_SETxPWM	;wreg free
  7165                           
  7166                           ;train_move_right.c: 141: if (Train_Move_Pwm_Count >= GETxAPIxVAL(23))
  7167  00363A  0E00               	movlw	0
  7168  00363C  6E14               	movwf	GETxAPIxVAL@index+1,c
  7169  00363E  0E17               	movlw	23
  7170  003640  6E13               	movwf	GETxAPIxVAL@index,c
  7171  003642  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  7172  003646  5013               	movf	?_GETxAPIxVAL,w,c
  7173  003648  0100               	movlb	0	; () banked
  7174  00364A  5D7E               	subwf	_Train_Move_Pwm_Count& (0+255),w,b
  7175  00364C  5014               	movf	?_GETxAPIxVAL+1,w,c
  7176  00364E  597F               	subwfb	(_Train_Move_Pwm_Count+1)& (0+255),w,b
  7177  003650  A0D8               	btfss	status,0,c
  7178  003652  D006               	goto	l1187
  7179  003654                     u6970:
  7180                           
  7181                           ; BSR set to: 0
  7182                           ;train_move_right.c: 142: {
  7183                           ;train_move_right.c: 143: Switch_Train_Move = 0;
  7184  003654  0E00               	movlw	0
  7185  003656  6F80               	movwf	_Switch_Train_Move& (0+255),b
  7186                           
  7187                           ;train_move_right.c: 144: Switch_Moutain = 0;
  7188  003658  0E00               	movlw	0
  7189  00365A  6E2E               	movwf	_Switch_Moutain,c
  7190                           
  7191                           ;train_move_right.c: 145: Return_Val = 0;
  7192  00365C  0E00               	movlw	0
  7193  00365E  D017               	goto	L89
  7194  003660                     l1187:
  7195                           
  7196                           ; BSR set to: 0
  7197                           ;train_move_right.c: 148: else if (Train_Move_Pwm_Fast_Count >= GETxAPIxVAL(26))
  7198                           
  7199                           ; BSR set to: 0
  7200  003660  0E00               	movlw	0
  7201  003662  6E14               	movwf	GETxAPIxVAL@index+1,c
  7202  003664  0E1A               	movlw	26
  7203  003666  6E13               	movwf	GETxAPIxVAL@index,c
  7204  003668  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  7205  00366C  5013               	movf	?_GETxAPIxVAL,w,c
  7206  00366E  0100               	movlb	0	; () banked
  7207  003670  5D68               	subwf	_Train_Move_Pwm_Fast_Count& (0+255),w,b
  7208  003672  5014               	movf	?_GETxAPIxVAL+1,w,c
  7209  003674  5969               	subwfb	(_Train_Move_Pwm_Fast_Count+1)& (0+255),w,b
  7210  003676  A0D8               	btfss	status,0,c
  7211  003678  D007               	goto	l1189
  7212                           
  7213                           ; BSR set to: 0
  7214                           ;train_move_right.c: 149: {
  7215                           ;train_move_right.c: 150: Train_Move_Pwm_Count++;
  7216  00367A  4B7E               	infsnz	_Train_Move_Pwm_Count& (0+255),f,b
  7217  00367C  2B7F               	incf	(_Train_Move_Pwm_Count+1)& (0+255),f,b
  7218  00367E                     l7558:
  7219                           
  7220                           ; BSR set to: 0
  7221                           ;train_move_right.c: 151: Train_Move_Pwm_Fast_Count = 0;
  7222  00367E  0E00               	movlw	0
  7223  003680  6F69               	movwf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),b
  7224  003682  0E00               	movlw	0
  7225  003684  6F68               	movwf	_Train_Move_Pwm_Fast_Count& (0+255),b
  7226                           
  7227                           ;train_move_right.c: 152: }
  7228  003686  D002               	goto	l1190
  7229  003688                     l1189:
  7230                           
  7231                           ; BSR set to: 0
  7232                           ;train_move_right.c: 153: else {Train_Move_Pwm_Fast_Count++;}
  7233                           
  7234                           ; BSR set to: 0
  7235  003688  4B68               	infsnz	_Train_Move_Pwm_Fast_Count& (0+255),f,b
  7236  00368A  2B69               	incf	(_Train_Move_Pwm_Fast_Count+1)& (0+255),f,b
  7237  00368C                     l1190:
  7238                           
  7239                           ; BSR set to: 0
  7240                           ;train_move_right.c: 154: }
  7241                           ;train_move_right.c: 155: Return_Val = 1;
  7242                           
  7243                           ; BSR set to: 0
  7244                           
  7245                           ; BSR set to: 0
  7246                           
  7247                           ; BSR set to: 0
  7248                           
  7249                           ; BSR set to: 0
  7250  00368C  0E01               	movlw	1
  7251  00368E                     L89:
  7252  00368E  6E49               	movwf	Left_Mountain_From_The_Left@Return_Val,c
  7253                           
  7254                           ; BSR set to: 0
  7255                           ;train_move_right.c: 160: }
  7256                           
  7257                           ; BSR set to: 0
  7258                           ;train_move_right.c: 159: break;
  7259                           
  7260                           ;train_move_right.c: 158: default:
  7261                           
  7262                           ;train_move_right.c: 156: break;
  7263  003690  D007               	goto	l1178
  7264  003692                     l1172:
  7265                           
  7266                           ; BSR set to: 0
  7267  003692  502E               	movf	_Switch_Moutain,w,c
  7268                           
  7269                           ; Switch size 1, requested type "space"
  7270                           ; Number of cases is 2, Range of values is 0 to 1
  7271                           ; switch strategies available:
  7272                           ; Name         Instructions Cycles
  7273                           ; simple_byte            7     4 (average)
  7274                           ;	Chosen strategy is simple_byte
  7275  003694  0A00               	xorlw	0	; case 0
  7276  003696  B4D8               	btfsc	status,2,c
  7277  003698  D77F               	goto	l1173
  7278  00369A  0A01               	xorlw	1	; case 1
  7279  00369C  B4D8               	btfsc	status,2,c
  7280  00369E  D797               	goto	l1179
  7281  0036A0                     l1178:
  7282                           
  7283                           ;train_move_right.c: 162: return(Return_Val);
  7284  0036A0  5049               	movf	Left_Mountain_From_The_Left@Return_Val,w,c
  7285  0036A2  0012               	return	
  7286  0036A4                     __end_of_Left_Mountain_From_The_Left:
  7287                           	opt stack 0
  7288                           tblptru	equ	0xFF8
  7289                           tblptrh	equ	0xFF7
  7290                           tblptrl	equ	0xFF6
  7291                           tablat	equ	0xFF5
  7292                           postinc0	equ	0xFEE
  7293                           wreg	equ	0xFE8
  7294                           postdec1	equ	0xFE5
  7295                           fsr1h	equ	0xFE2
  7296                           fsr1l	equ	0xFE1
  7297                           status	equ	0xFD8
  7298                           
  7299 ;; *************** function _SETxPWM *****************
  7300 ;; Defined at:
  7301 ;;		line 20 in file "../set_pwm.c"
  7302 ;; Parameters:    Size  Location     Type
  7303 ;;  speed           2   30[COMRAM] unsigned int 
  7304 ;;  direction       1   32[COMRAM] unsigned char 
  7305 ;; Auto vars:     Size  Location     Type
  7306 ;;  pwm_speed       2   35[COMRAM] unsigned int 
  7307 ;; Return value:  Size  Location     Type
  7308 ;;                  1    wreg      void 
  7309 ;; Registers used:
  7310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7311 ;; Tracked objects:
  7312 ;;		On entry : 0/0
  7313 ;;		On exit  : 0/0
  7314 ;;		Unchanged: 0/0
  7315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7316 ;;      Params:         3       0       0       0       0       0       0       0       0
  7317 ;;      Locals:         2       0       0       0       0       0       0       0       0
  7318 ;;      Temps:          2       0       0       0       0       0       0       0       0
  7319 ;;      Totals:         7       0       0       0       0       0       0       0       0
  7320 ;;Total ram usage:        7 bytes
  7321 ;; Hardware stack levels used:    1
  7322 ;; Hardware stack levels required when called:    5
  7323 ;; This function calls:
  7324 ;;		_GETxAPIxVAL
  7325 ;;		_SETxAPIxVAL
  7326 ;; This function is called by:
  7327 ;;		_Update_StateMchn
  7328 ;;		_Train_Move_Left_Start
  7329 ;;		_Right_Mountain_From_The_Right
  7330 ;;		_Left_Mountain_From_The_Right
  7331 ;;		_Train_Move_Left_Brake
  7332 ;;		_Train_Move_Right_Start
  7333 ;;		_Left_Mountain_From_The_Left
  7334 ;;		_Right_Mountain_From_The_Left
  7335 ;;		_Train_Move_Right_Brake
  7336 ;; This function uses a non-reentrant model
  7337 ;;
  7338                           
  7339                           	psect	text11
  7340  003A34                     __ptext11:
  7341                           	opt stack 0
  7342  003A34                     _SETxPWM:
  7343                           	opt stack 22
  7344                           
  7345                           ;set_pwm.c: 22: unsigned int pwm_speed = 511;
  7346                           
  7347                           ;incstack = 0
  7348  003A34  0E01               	movlw	1
  7349  003A36  6E25               	movwf	SETxPWM@pwm_speed+1,c
  7350  003A38  6824               	setf	SETxPWM@pwm_speed,c
  7351                           
  7352                           ;set_pwm.c: 24: if (GETxAPIxVAL(86) != direction){
  7353  003A3A  5021               	movf	SETxPWM@direction,w,c
  7354  003A3C  6E22               	movwf	??_SETxPWM& (0+255),c
  7355  003A3E  6A23               	clrf	(??_SETxPWM+1)& (0+255),c
  7356  003A40  0E00               	movlw	0
  7357  003A42  6E14               	movwf	GETxAPIxVAL@index+1,c
  7358  003A44  0E56               	movlw	86
  7359  003A46  6E13               	movwf	GETxAPIxVAL@index,c
  7360  003A48  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  7361  003A4C  5022               	movf	??_SETxPWM,w,c
  7362  003A4E  1813               	xorwf	?_GETxAPIxVAL,w,c
  7363  003A50  E104               	bnz	u6610
  7364  003A52  5023               	movf	??_SETxPWM+1,w,c
  7365  003A54  1814               	xorwf	?_GETxAPIxVAL+1,w,c
  7366  003A56  B4D8               	btfsc	status,2,c
  7367  003A58  D009               	goto	l1245
  7368  003A5A                     u6610:
  7369                           
  7370                           ;set_pwm.c: 25: SETxAPIxVAL(86, direction);
  7371  003A5A  0E00               	movlw	0
  7372  003A5C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7373  003A5E  0E56               	movlw	86
  7374  003A60  6E19               	movwf	SETxAPIxVAL@index,c
  7375  003A62  C021  F01B         	movff	SETxPWM@direction,SETxAPIxVAL@value
  7376  003A66  6A1C               	clrf	SETxAPIxVAL@value+1,c
  7377  003A68  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  7378  003A6C                     l1245:
  7379                           
  7380                           ;set_pwm.c: 26: }
  7381                           ;set_pwm.c: 28: if (direction == 0){
  7382  003A6C  5021               	movf	SETxPWM@direction,w,c
  7383  003A6E  A4D8               	btfss	status,2,c
  7384  003A70  D01C               	goto	l1246
  7385                           
  7386                           ;set_pwm.c: 29: pwm_speed = 511 - (speed * 2);
  7387  003A72  C01F  F022         	movff	SETxPWM@speed,??_SETxPWM
  7388  003A76  C020  F023         	movff	SETxPWM@speed+1,??_SETxPWM+1
  7389  003A7A  90D8               	bcf	status,0,c
  7390  003A7C  3622               	rlcf	??_SETxPWM,f,c
  7391  003A7E  3623               	rlcf	??_SETxPWM+1,f,c
  7392  003A80  1E22               	comf	??_SETxPWM,f,c
  7393  003A82  1E23               	comf	??_SETxPWM+1,f,c
  7394  003A84  4A22               	infsnz	??_SETxPWM,f,c
  7395  003A86  2A23               	incf	??_SETxPWM+1,f,c
  7396  003A88  0EFF               	movlw	255
  7397  003A8A  2422               	addwf	??_SETxPWM,w,c
  7398  003A8C  6E24               	movwf	SETxPWM@pwm_speed,c
  7399  003A8E  0E01               	movlw	1
  7400  003A90  2023               	addwfc	??_SETxPWM+1,w,c
  7401  003A92  6E25               	movwf	SETxPWM@pwm_speed+1,c
  7402                           
  7403                           ;set_pwm.c: 30: SETxAPIxVAL(88, pwm_speed);
  7404  003A94  0E00               	movlw	0
  7405  003A96  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7406  003A98  0E58               	movlw	88
  7407  003A9A  6E19               	movwf	SETxAPIxVAL@index,c
  7408  003A9C  C024  F01B         	movff	SETxPWM@pwm_speed,SETxAPIxVAL@value
  7409  003AA0  C025  F01C         	movff	SETxPWM@pwm_speed+1,SETxAPIxVAL@value+1
  7410  003AA4  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  7411                           
  7412                           ;set_pwm.c: 31: }
  7413  003AA8  0012               	return	
  7414  003AAA                     l1246:
  7415                           
  7416                           ;set_pwm.c: 32: else if (direction == 1){
  7417  003AAA  0421               	decf	SETxPWM@direction,w,c
  7418  003AAC  A4D8               	btfss	status,2,c
  7419  003AAE  0012               	return	
  7420                           
  7421                           ;set_pwm.c: 33: pwm_speed = 511 + (speed * 2);
  7422  003AB0  C01F  F022         	movff	SETxPWM@speed,??_SETxPWM
  7423  003AB4  C020  F023         	movff	SETxPWM@speed+1,??_SETxPWM+1
  7424  003AB8  90D8               	bcf	status,0,c
  7425  003ABA  3622               	rlcf	??_SETxPWM,f,c
  7426  003ABC  3623               	rlcf	??_SETxPWM+1,f,c
  7427  003ABE  0EFF               	movlw	255
  7428  003AC0  2422               	addwf	??_SETxPWM,w,c
  7429  003AC2  6E24               	movwf	SETxPWM@pwm_speed,c
  7430  003AC4  0E01               	movlw	1
  7431  003AC6  2023               	addwfc	??_SETxPWM+1,w,c
  7432  003AC8  6E25               	movwf	SETxPWM@pwm_speed+1,c
  7433                           
  7434                           ;set_pwm.c: 34: SETxAPIxVAL(88, pwm_speed);
  7435  003ACA  0E00               	movlw	0
  7436  003ACC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7437  003ACE  0E58               	movlw	88
  7438  003AD0  6E19               	movwf	SETxAPIxVAL@index,c
  7439  003AD2  C024  F01B         	movff	SETxPWM@pwm_speed,SETxAPIxVAL@value
  7440  003AD6  C025  F01C         	movff	SETxPWM@pwm_speed+1,SETxAPIxVAL@value+1
  7441  003ADA  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  7442  003ADE  0012               	return	
  7443  003AE0                     __end_of_SETxPWM:
  7444                           	opt stack 0
  7445                           tblptru	equ	0xFF8
  7446                           tblptrh	equ	0xFF7
  7447                           tblptrl	equ	0xFF6
  7448                           tablat	equ	0xFF5
  7449                           postinc0	equ	0xFEE
  7450                           wreg	equ	0xFE8
  7451                           postdec1	equ	0xFE5
  7452                           fsr1h	equ	0xFE2
  7453                           fsr1l	equ	0xFE1
  7454                           status	equ	0xFD8
  7455                           
  7456 ;; *************** function _Junction *****************
  7457 ;; Defined at:
  7458 ;;		line 26 in file "../junction.c"
  7459 ;; Parameters:    Size  Location     Type
  7460 ;;  Junction_Lef    1    wreg     unsigned char 
  7461 ;;  Straight_Ben    1   30[COMRAM] unsigned char 
  7462 ;; Auto vars:     Size  Location     Type
  7463 ;;  Junction_Lef    1   31[COMRAM] unsigned char 
  7464 ;; Return value:  Size  Location     Type
  7465 ;;                  1    wreg      unsigned char 
  7466 ;; Registers used:
  7467 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7468 ;; Tracked objects:
  7469 ;;		On entry : 0/0
  7470 ;;		On exit  : 0/0
  7471 ;;		Unchanged: 0/0
  7472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7473 ;;      Params:         1       0       0       0       0       0       0       0       0
  7474 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7475 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7476 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7477 ;;Total ram usage:        2 bytes
  7478 ;; Hardware stack levels used:    1
  7479 ;; Hardware stack levels required when called:    5
  7480 ;; This function calls:
  7481 ;;		_GETxAPIxVAL
  7482 ;;		_SETxAPIxVAL
  7483 ;; This function is called by:
  7484 ;;		_Update_StateMchn
  7485 ;;		_Train_Path
  7486 ;; This function uses a non-reentrant model
  7487 ;;
  7488                           
  7489                           	psect	text12
  7490  002794                     __ptext12:
  7491                           	opt stack 0
  7492  002794                     _Junction:
  7493                           	opt stack 23
  7494                           
  7495                           ;incstack = 0
  7496                           ;Junction@Junction_Left_Right stored from wreg
  7497  002794  6E20               	movwf	Junction@Junction_Left_Right,c
  7498                           
  7499                           ;junction.c: 28: static char Return_Val = 1;
  7500                           ;junction.c: 29: static unsigned int Junction_Switch_Time = 0;
  7501                           ;junction.c: 31: switch (Switch_Junction)
  7502  002796  D0E2               	goto	l1006
  7503  002798  0E01               	movlw	1
  7504  00279A  6E4C               	movwf	Junction@Return_Val,c
  7505                           
  7506                           ;junction.c: 34: switch (Junction_Left_Right)
  7507  00279C  D08C               	goto	l1008
  7508  00279E  0E00               	movlw	0
  7509  0027A0  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7510  0027A2  0E40               	movlw	64
  7511  0027A4  6E19               	movwf	SETxAPIxVAL@index,c
  7512  0027A6  0E00               	movlw	0
  7513  0027A8  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7514  0027AA  0E01               	movlw	1
  7515  0027AC  6E1B               	movwf	SETxAPIxVAL@value,c
  7516  0027AE  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  7517                           
  7518                           ;junction.c: 39: SETxAPIxVAL(82, 1);
  7519  0027B2  0E00               	movlw	0
  7520  0027B4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7521  0027B6  0E52               	movlw	82
  7522  0027B8  6E19               	movwf	SETxAPIxVAL@index,c
  7523  0027BA  0E00               	movlw	0
  7524  0027BC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7525  0027BE  0E01               	movlw	1
  7526  0027C0  6E1B               	movwf	SETxAPIxVAL@value,c
  7527  0027C2  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  7528                           
  7529                           ;junction.c: 40: SETxAPIxVAL(83, 0);
  7530  0027C6  0E00               	movlw	0
  7531  0027C8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7532  0027CA  0E53               	movlw	83
  7533  0027CC  6E19               	movwf	SETxAPIxVAL@index,c
  7534  0027CE  0E00               	movlw	0
  7535  0027D0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7536  0027D2  0E00               	movlw	0
  7537  0027D4  6E1B               	movwf	SETxAPIxVAL@value,c
  7538  0027D6  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  7539                           
  7540                           ;junction.c: 41: break;
  7541  0027DA  D074               	goto	l1015
  7542  0027DC  0E00               	movlw	0
  7543  0027DE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7544  0027E0  0E41               	movlw	65
  7545  0027E2  6E19               	movwf	SETxAPIxVAL@index,c
  7546  0027E4  0E00               	movlw	0
  7547  0027E6  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7548  0027E8  0E01               	movlw	1
  7549  0027EA  6E1B               	movwf	SETxAPIxVAL@value,c
  7550  0027EC  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  7551                           
  7552                           ;junction.c: 43: SETxAPIxVAL(82, 0);
  7553  0027F0  0E00               	movlw	0
  7554  0027F2  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7555  0027F4  0E52               	movlw	82
  7556  0027F6  6E19               	movwf	SETxAPIxVAL@index,c
  7557  0027F8  0E00               	movlw	0
  7558  0027FA  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7559  0027FC  0E00               	movlw	0
  7560  0027FE  6E1B               	movwf	SETxAPIxVAL@value,c
  7561  002800  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  7562                           
  7563                           ;junction.c: 44: SETxAPIxVAL(83, 1);
  7564  002804  0E00               	movlw	0
  7565  002806  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7566  002808  0E53               	movlw	83
  7567  00280A  6E19               	movwf	SETxAPIxVAL@index,c
  7568  00280C  0E00               	movlw	0
  7569  00280E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7570  002810  0E01               	movlw	1
  7571  002812  6E1B               	movwf	SETxAPIxVAL@value,c
  7572  002814  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  7573                           
  7574                           ;junction.c: 47: }
  7575                           
  7576                           ;junction.c: 46: default : break;
  7577                           
  7578                           ;junction.c: 45: break;
  7579  002818  D055               	goto	l1015
  7580  00281A  501F               	movf	Junction@Straight_Bend,w,c
  7581                           
  7582                           ; Switch size 1, requested type "space"
  7583                           ; Number of cases is 2, Range of values is 0 to 1
  7584                           ; switch strategies available:
  7585                           ; Name         Instructions Cycles
  7586                           ; simple_byte            7     4 (average)
  7587                           ;	Chosen strategy is simple_byte
  7588  00281C  0A00               	xorlw	0	; case 0
  7589  00281E  B4D8               	btfsc	status,2,c
  7590  002820  D7BE               	goto	l1011
  7591  002822  0A01               	xorlw	1	; case 1
  7592  002824  B4D8               	btfsc	status,2,c
  7593  002826  D7DA               	goto	l1013
  7594                           
  7595                           ;junction.c: 48: break;
  7596  002828  D04D               	goto	l1015
  7597  00282A  0E00               	movlw	0
  7598  00282C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7599  00282E  0E42               	movlw	66
  7600  002830  6E19               	movwf	SETxAPIxVAL@index,c
  7601  002832  0E00               	movlw	0
  7602  002834  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7603  002836  0E01               	movlw	1
  7604  002838  6E1B               	movwf	SETxAPIxVAL@value,c
  7605  00283A  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  7606                           
  7607                           ;junction.c: 53: SETxAPIxVAL(84, 1);
  7608  00283E  0E00               	movlw	0
  7609  002840  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7610  002842  0E54               	movlw	84
  7611  002844  6E19               	movwf	SETxAPIxVAL@index,c
  7612  002846  0E00               	movlw	0
  7613  002848  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7614  00284A  0E01               	movlw	1
  7615  00284C  6E1B               	movwf	SETxAPIxVAL@value,c
  7616  00284E  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  7617                           
  7618                           ;junction.c: 54: SETxAPIxVAL(85, 0);
  7619  002852  0E00               	movlw	0
  7620  002854  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7621  002856  0E55               	movlw	85
  7622  002858  6E19               	movwf	SETxAPIxVAL@index,c
  7623  00285A  0E00               	movlw	0
  7624  00285C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7625  00285E  0E00               	movlw	0
  7626  002860  6E1B               	movwf	SETxAPIxVAL@value,c
  7627  002862  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  7628                           
  7629                           ;junction.c: 55: break;
  7630  002866  D02E               	goto	l1015
  7631  002868  0E00               	movlw	0
  7632  00286A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7633  00286C  0E43               	movlw	67
  7634  00286E  6E19               	movwf	SETxAPIxVAL@index,c
  7635  002870  0E00               	movlw	0
  7636  002872  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7637  002874  0E01               	movlw	1
  7638  002876  6E1B               	movwf	SETxAPIxVAL@value,c
  7639  002878  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  7640                           
  7641                           ;junction.c: 57: SETxAPIxVAL(84, 0);
  7642  00287C  0E00               	movlw	0
  7643  00287E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7644  002880  0E54               	movlw	84
  7645  002882  6E19               	movwf	SETxAPIxVAL@index,c
  7646  002884  0E00               	movlw	0
  7647  002886  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7648  002888  0E00               	movlw	0
  7649  00288A  6E1B               	movwf	SETxAPIxVAL@value,c
  7650  00288C  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  7651                           
  7652                           ;junction.c: 58: SETxAPIxVAL(85, 1);
  7653  002890  0E00               	movlw	0
  7654  002892  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7655  002894  0E55               	movlw	85
  7656  002896  6E19               	movwf	SETxAPIxVAL@index,c
  7657  002898  0E00               	movlw	0
  7658  00289A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7659  00289C  0E01               	movlw	1
  7660  00289E  6E1B               	movwf	SETxAPIxVAL@value,c
  7661  0028A0  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  7662                           
  7663                           ;junction.c: 61: }
  7664                           
  7665                           ;junction.c: 60: default : break;
  7666                           
  7667                           ;junction.c: 59: break;
  7668  0028A4  D00F               	goto	l1015
  7669  0028A6  501F               	movf	Junction@Straight_Bend,w,c
  7670                           
  7671                           ; Switch size 1, requested type "space"
  7672                           ; Number of cases is 2, Range of values is 0 to 1
  7673                           ; switch strategies available:
  7674                           ; Name         Instructions Cycles
  7675                           ; simple_byte            7     4 (average)
  7676                           ;	Chosen strategy is simple_byte
  7677  0028A8  0A00               	xorlw	0	; case 0
  7678  0028AA  B4D8               	btfsc	status,2,c
  7679  0028AC  D7BE               	goto	l1018
  7680  0028AE  0A01               	xorlw	1	; case 1
  7681  0028B0  B4D8               	btfsc	status,2,c
  7682  0028B2  D7DA               	goto	l1020
  7683                           
  7684                           ;junction.c: 65: }
  7685                           
  7686                           ;junction.c: 64: default : break;
  7687                           
  7688                           ;junction.c: 62: break;
  7689  0028B4  D007               	goto	l1015
  7690  0028B6                     l1008:
  7691  0028B6  5020               	movf	Junction@Junction_Left_Right,w,c
  7692                           
  7693                           ; Switch size 1, requested type "space"
  7694                           ; Number of cases is 2, Range of values is 0 to 1
  7695                           ; switch strategies available:
  7696                           ; Name         Instructions Cycles
  7697                           ; simple_byte            7     4 (average)
  7698                           ;	Chosen strategy is simple_byte
  7699  0028B8  0A00               	xorlw	0	; case 0
  7700  0028BA  B4D8               	btfsc	status,2,c
  7701  0028BC  D7AE               	goto	l1010
  7702  0028BE  0A01               	xorlw	1	; case 1
  7703  0028C0  B4D8               	btfsc	status,2,c
  7704  0028C2  D7F1               	goto	l1017
  7705  0028C4                     l1015:
  7706                           
  7707                           ;junction.c: 66: Switch_Junction = 1;
  7708  0028C4  0E01               	movlw	1
  7709  0028C6  6E2F               	movwf	_Switch_Junction,c
  7710                           
  7711                           ;junction.c: 67: break;
  7712  0028C8  D053               	goto	l1023
  7713  0028CA  0E00               	movlw	0
  7714  0028CC  6E14               	movwf	GETxAPIxVAL@index+1,c
  7715  0028CE  0E13               	movlw	19
  7716  0028D0  6E13               	movwf	GETxAPIxVAL@index,c
  7717  0028D2  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  7718  0028D6  5013               	movf	?_GETxAPIxVAL,w,c
  7719  0028D8  0100               	movlb	0	; () banked
  7720  0028DA  5D6A               	subwf	Junction@Junction_Switch_Time& (0+255),w,b
  7721  0028DC  5014               	movf	?_GETxAPIxVAL+1,w,c
  7722  0028DE  596B               	subwfb	(Junction@Junction_Switch_Time+1)& (0+255),w,b
  7723  0028E0  A0D8               	btfss	status,0,c
  7724  0028E2  D008               	goto	l1025
  7725                           
  7726                           ; BSR set to: 0
  7727                           ;junction.c: 70: {
  7728                           ;junction.c: 71: Switch_Junction = 2;
  7729  0028E4  0E02               	movlw	2
  7730  0028E6  6E2F               	movwf	_Switch_Junction,c
  7731                           
  7732                           ;junction.c: 72: Junction_Switch_Time = 0;
  7733  0028E8  0E00               	movlw	0
  7734  0028EA  6F6B               	movwf	(Junction@Junction_Switch_Time+1)& (0+255),b
  7735  0028EC  0E00               	movlw	0
  7736  0028EE  6F6A               	movwf	Junction@Junction_Switch_Time& (0+255),b
  7737                           
  7738                           ;junction.c: 73: Return_Val = 1;
  7739  0028F0  0E01               	movlw	1
  7740  0028F2  D032               	goto	L90
  7741  0028F4                     l1025:
  7742                           
  7743                           ; BSR set to: 0
  7744                           ;junction.c: 75: }
  7745                           ;junction.c: 76: Return_Val = 1;
  7746                           
  7747                           ; BSR set to: 0
  7748  0028F4  0E01               	movlw	1
  7749  0028F6  6E4C               	movwf	Junction@Return_Val,c
  7750                           
  7751                           ;junction.c: 77: Switch_Junction = 1;
  7752  0028F8  0E01               	movlw	1
  7753  0028FA  6E2F               	movwf	_Switch_Junction,c
  7754                           
  7755                           ; BSR set to: 0
  7756                           ;junction.c: 78: Junction_Switch_Time++;
  7757  0028FC  4B6A               	infsnz	Junction@Junction_Switch_Time& (0+255),f,b
  7758  0028FE  2B6B               	incf	(Junction@Junction_Switch_Time+1)& (0+255),f,b
  7759                           
  7760                           ;junction.c: 79: break;
  7761  002900  D037               	goto	l1023
  7762  002902                     
  7763                           ; BSR set to: 0
  7764  002902  0E00               	movlw	0
  7765  002904  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7766  002906  0E40               	movlw	64
  7767  002908  6E19               	movwf	SETxAPIxVAL@index,c
  7768  00290A  0E00               	movlw	0
  7769  00290C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7770  00290E  0E00               	movlw	0
  7771  002910  6E1B               	movwf	SETxAPIxVAL@value,c
  7772  002912  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  7773                           
  7774                           ;junction.c: 82: SETxAPIxVAL(65, 0);
  7775  002916  0E00               	movlw	0
  7776  002918  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7777  00291A  0E41               	movlw	65
  7778  00291C  6E19               	movwf	SETxAPIxVAL@index,c
  7779  00291E  0E00               	movlw	0
  7780  002920  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7781  002922  0E00               	movlw	0
  7782  002924  6E1B               	movwf	SETxAPIxVAL@value,c
  7783  002926  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  7784                           
  7785                           ;junction.c: 83: SETxAPIxVAL(66,0);
  7786  00292A  0E00               	movlw	0
  7787  00292C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7788  00292E  0E42               	movlw	66
  7789  002930  6E19               	movwf	SETxAPIxVAL@index,c
  7790  002932  0E00               	movlw	0
  7791  002934  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7792  002936  0E00               	movlw	0
  7793  002938  6E1B               	movwf	SETxAPIxVAL@value,c
  7794  00293A  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  7795                           
  7796                           ;junction.c: 84: SETxAPIxVAL(67,0);
  7797  00293E  0E00               	movlw	0
  7798  002940  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7799  002942  0E43               	movlw	67
  7800  002944  6E19               	movwf	SETxAPIxVAL@index,c
  7801  002946  0E00               	movlw	0
  7802  002948  6E1C               	movwf	SETxAPIxVAL@value+1,c
  7803  00294A  0E00               	movlw	0
  7804  00294C  6E1B               	movwf	SETxAPIxVAL@value,c
  7805  00294E  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  7806                           
  7807                           ;junction.c: 85: Switch_Junction = 0;
  7808  002952  0E00               	movlw	0
  7809  002954  6E2F               	movwf	_Switch_Junction,c
  7810                           
  7811                           ;junction.c: 86: Return_Val = 0;
  7812  002956  0E00               	movlw	0
  7813  002958                     L90:
  7814  002958  6E4C               	movwf	Junction@Return_Val,c
  7815                           
  7816                           ;junction.c: 90: }
  7817                           
  7818                           ;junction.c: 89: default : break;
  7819                           
  7820                           ;junction.c: 87: break;
  7821  00295A  D00A               	goto	l1023
  7822  00295C                     l1006:
  7823  00295C  502F               	movf	_Switch_Junction,w,c
  7824                           
  7825                           ; Switch size 1, requested type "space"
  7826                           ; Number of cases is 3, Range of values is 0 to 2
  7827                           ; switch strategies available:
  7828                           ; Name         Instructions Cycles
  7829                           ; simple_byte           10     6 (average)
  7830                           ;	Chosen strategy is simple_byte
  7831  00295E  0A00               	xorlw	0	; case 0
  7832  002960  B4D8               	btfsc	status,2,c
  7833  002962  D71A               	goto	l1007
  7834  002964  0A01               	xorlw	1	; case 1
  7835  002966  B4D8               	btfsc	status,2,c
  7836  002968  D7B0               	goto	l1024
  7837  00296A  0A03               	xorlw	3	; case 2
  7838  00296C  B4D8               	btfsc	status,2,c
  7839  00296E  D7C9               	goto	l1026
  7840  002970                     l1023:
  7841                           
  7842                           ;junction.c: 92: return (Return_Val);
  7843  002970  504C               	movf	Junction@Return_Val,w,c
  7844  002972  0012               	return	
  7845  002974                     __end_of_Junction:
  7846                           	opt stack 0
  7847                           tblptru	equ	0xFF8
  7848                           tblptrh	equ	0xFF7
  7849                           tblptrl	equ	0xFF6
  7850                           tablat	equ	0xFF5
  7851                           postinc0	equ	0xFEE
  7852                           wreg	equ	0xFE8
  7853                           postdec1	equ	0xFE5
  7854                           fsr1h	equ	0xFE2
  7855                           fsr1l	equ	0xFE1
  7856                           status	equ	0xFD8
  7857                           
  7858 ;; *************** function _Red_Led *****************
  7859 ;; Defined at:
  7860 ;;		line 98 in file "../io.c"
  7861 ;; Parameters:    Size  Location     Type
  7862 ;;  Operation       1    wreg     unsigned char 
  7863 ;; Auto vars:     Size  Location     Type
  7864 ;;  Operation       1   31[COMRAM] unsigned char 
  7865 ;; Return value:  Size  Location     Type
  7866 ;;                  1    wreg      void 
  7867 ;; Registers used:
  7868 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7869 ;; Tracked objects:
  7870 ;;		On entry : 0/0
  7871 ;;		On exit  : 0/0
  7872 ;;		Unchanged: 0/0
  7873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7874 ;;      Params:         0       0       0       0       0       0       0       0       0
  7875 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7876 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7877 ;;      Totals:         2       0       0       0       0       0       0       0       0
  7878 ;;Total ram usage:        2 bytes
  7879 ;; Hardware stack levels used:    1
  7880 ;; Hardware stack levels required when called:    5
  7881 ;; This function calls:
  7882 ;;		_SETxAPIxVAL
  7883 ;; This function is called by:
  7884 ;;		_Update_StateMchn
  7885 ;; This function uses a non-reentrant model
  7886 ;;
  7887                           
  7888                           	psect	text13
  7889  003CC8                     __ptext13:
  7890                           	opt stack 0
  7891  003CC8                     _Red_Led:
  7892                           	opt stack 24
  7893                           
  7894                           ;incstack = 0
  7895                           ;Red_Led@Operation stored from wreg
  7896  003CC8  6E20               	movwf	Red_Led@Operation,c
  7897                           
  7898                           ;io.c: 100: switch(Operation)
  7899  003CCA  D026               	goto	l840
  7900  003CCC  4A28               	infsnz	_Red_Led_Counter,f,c
  7901  003CCE  2A29               	incf	_Red_Led_Counter+1,f,c
  7902                           
  7903                           ;io.c: 107: if(Red_Led_Counter >= 3000)
  7904  003CD0  0EB8               	movlw	184
  7905  003CD2  5C28               	subwf	_Red_Led_Counter,w,c
  7906  003CD4  0E0B               	movlw	11
  7907  003CD6  5829               	subwfb	_Red_Led_Counter+1,w,c
  7908  003CD8  A0D8               	btfss	status,0,c
  7909  003CDA  D004               	goto	l845
  7910                           
  7911                           ;io.c: 108: {
  7912                           ;io.c: 109: Red_Led_Counter = 0;
  7913  003CDC  0E00               	movlw	0
  7914  003CDE  6E29               	movwf	_Red_Led_Counter+1,c
  7915  003CE0  0E00               	movlw	0
  7916  003CE2  6E28               	movwf	_Red_Led_Counter,c
  7917  003CE4                     l845:
  7918                           
  7919                           ;io.c: 110: }
  7920                           ;io.c: 111: if(Red_Led_Counter >= 3000/2)
  7921  003CE4  0EDC               	movlw	220
  7922  003CE6  5C28               	subwf	_Red_Led_Counter,w,c
  7923  003CE8  0E05               	movlw	5
  7924  003CEA  D00F               	goto	L100
  7925  003CEC  4A28               	infsnz	_Red_Led_Counter,f,c
  7926  003CEE  2A29               	incf	_Red_Led_Counter+1,f,c
  7927                           
  7928                           ;io.c: 119: if(Red_Led_Counter >= 30000)
  7929  003CF0  0E30               	movlw	48
  7930  003CF2  5C28               	subwf	_Red_Led_Counter,w,c
  7931  003CF4  0E75               	movlw	117
  7932  003CF6  5829               	subwfb	_Red_Led_Counter+1,w,c
  7933  003CF8  A0D8               	btfss	status,0,c
  7934  003CFA  D004               	goto	l849
  7935                           
  7936                           ;io.c: 120: {
  7937                           ;io.c: 121: Red_Led_Counter = 0;
  7938  003CFC  0E00               	movlw	0
  7939  003CFE  6E29               	movwf	_Red_Led_Counter+1,c
  7940  003D00  0E00               	movlw	0
  7941  003D02  6E28               	movwf	_Red_Led_Counter,c
  7942  003D04                     l849:
  7943                           
  7944                           ;io.c: 122: }
  7945                           ;io.c: 123: if(Red_Led_Counter >= 30000/2)
  7946  003D04  0E98               	movlw	152
  7947  003D06  5C28               	subwf	_Red_Led_Counter,w,c
  7948  003D08  0E3A               	movlw	58
  7949  003D0A                     L100:
  7950  003D0A  5829               	subwfb	_Red_Led_Counter+1,w,c
  7951  003D0C  A0D8               	btfss	status,0,c
  7952  003D0E  D002               	goto	l850
  7953  003D10                     u8050:
  7954                           
  7955                           ;io.c: 124: {
  7956                           ;io.c: 125: PORTDbits.RD5 = 1;
  7957  003D10  8A83               	bsf	3971,5,c	;volatile
  7958                           
  7959                           ;io.c: 126: }
  7960  003D12  D00F               	goto	l842
  7961  003D14                     l850:
  7962                           
  7963                           ;io.c: 127: else {PORTDbits.RD5 = 0;}
  7964  003D14  9A83               	bcf	3971,5,c	;volatile
  7965                           
  7966                           ;io.c: 131: }
  7967                           
  7968                           ;io.c: 130: default : break;
  7969                           
  7970                           ;io.c: 128: break;
  7971  003D16  D00D               	goto	l842
  7972  003D18                     l840:
  7973  003D18  5020               	movf	Red_Led@Operation,w,c
  7974                           
  7975                           ; Switch size 1, requested type "space"
  7976                           ; Number of cases is 4, Range of values is 0 to 3
  7977                           ; switch strategies available:
  7978                           ; Name         Instructions Cycles
  7979                           ; simple_byte           13     7 (average)
  7980                           ;	Chosen strategy is simple_byte
  7981  003D1A  0A00               	xorlw	0	; case 0
  7982  003D1C  B4D8               	btfsc	status,2,c
  7983  003D1E  D7FA               	goto	l850
  7984  003D20  0A01               	xorlw	1	; case 1
  7985  003D22  B4D8               	btfsc	status,2,c
  7986  003D24  D7F5               	goto	u8050
  7987  003D26  0A03               	xorlw	3	; case 2
  7988  003D28  B4D8               	btfsc	status,2,c
  7989  003D2A  D7D0               	goto	l844
  7990  003D2C  0A01               	xorlw	1	; case 3
  7991  003D2E  B4D8               	btfsc	status,2,c
  7992  003D30  D7DD               	goto	l848
  7993  003D32                     l842:
  7994                           
  7995                           ;io.c: 132: SETxAPIxVAL(90, PORTDbits.RD5);
  7996  003D32  0E00               	movlw	0
  7997  003D34  6E1A               	movwf	SETxAPIxVAL@index+1,c
  7998  003D36  0E5A               	movlw	90
  7999  003D38  6E19               	movwf	SETxAPIxVAL@index,c
  8000  003D3A  AA83               	btfss	3971,5,c	;volatile
  8001  003D3C  D003               	goto	u8060
  8002  003D3E  6A1F               	clrf	??_Red_Led& (0+255),c
  8003  003D40  2A1F               	incf	??_Red_Led& (0+255),f,c
  8004  003D42  D001               	goto	u8068
  8005  003D44                     u8060:
  8006  003D44  6A1F               	clrf	??_Red_Led& (0+255),c
  8007  003D46                     u8068:
  8008  003D46  501F               	movf	??_Red_Led,w,c
  8009  003D48  6E1B               	movwf	SETxAPIxVAL@value,c
  8010  003D4A  6A1C               	clrf	SETxAPIxVAL@value+1,c
  8011  003D4C  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  8012  003D50  0012               	return		;funcret
  8013  003D52                     __end_of_Red_Led:
  8014                           	opt stack 0
  8015                           tblptru	equ	0xFF8
  8016                           tblptrh	equ	0xFF7
  8017                           tblptrl	equ	0xFF6
  8018                           tablat	equ	0xFF5
  8019                           postinc0	equ	0xFEE
  8020                           wreg	equ	0xFE8
  8021                           postdec1	equ	0xFE5
  8022                           fsr1h	equ	0xFE2
  8023                           fsr1l	equ	0xFE1
  8024                           status	equ	0xFD8
  8025                           
  8026 ;; *************** function _Green_Led *****************
  8027 ;; Defined at:
  8028 ;;		line 47 in file "../io.c"
  8029 ;; Parameters:    Size  Location     Type
  8030 ;;  Operation       1    wreg     unsigned char 
  8031 ;; Auto vars:     Size  Location     Type
  8032 ;;  Operation       1   31[COMRAM] unsigned char 
  8033 ;; Return value:  Size  Location     Type
  8034 ;;                  1    wreg      void 
  8035 ;; Registers used:
  8036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8037 ;; Tracked objects:
  8038 ;;		On entry : 0/0
  8039 ;;		On exit  : 0/0
  8040 ;;		Unchanged: 0/0
  8041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8042 ;;      Params:         0       0       0       0       0       0       0       0       0
  8043 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8044 ;;      Temps:          1       0       0       0       0       0       0       0       0
  8045 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8046 ;;Total ram usage:        2 bytes
  8047 ;; Hardware stack levels used:    1
  8048 ;; Hardware stack levels required when called:    5
  8049 ;; This function calls:
  8050 ;;		_SETxAPIxVAL
  8051 ;; This function is called by:
  8052 ;;		_Update_StateMchn
  8053 ;; This function uses a non-reentrant model
  8054 ;;
  8055                           
  8056                           	psect	text14
  8057  003D52                     __ptext14:
  8058                           	opt stack 0
  8059  003D52                     _Green_Led:
  8060                           	opt stack 24
  8061                           
  8062                           ;incstack = 0
  8063                           ;Green_Led@Operation stored from wreg
  8064  003D52  6E20               	movwf	Green_Led@Operation,c
  8065                           
  8066                           ;io.c: 49: switch(Operation)
  8067  003D54  D026               	goto	l824
  8068  003D56  4A2A               	infsnz	_Green_Led_Counter,f,c
  8069  003D58  2A2B               	incf	_Green_Led_Counter+1,f,c
  8070                           
  8071                           ;io.c: 56: if(Green_Led_Counter > 3000)
  8072  003D5A  0EB9               	movlw	185
  8073  003D5C  5C2A               	subwf	_Green_Led_Counter,w,c
  8074  003D5E  0E0B               	movlw	11
  8075  003D60  582B               	subwfb	_Green_Led_Counter+1,w,c
  8076  003D62  A0D8               	btfss	status,0,c
  8077  003D64  D004               	goto	l829
  8078                           
  8079                           ;io.c: 57: {
  8080                           ;io.c: 58: Green_Led_Counter = 0;
  8081  003D66  0E00               	movlw	0
  8082  003D68  6E2B               	movwf	_Green_Led_Counter+1,c
  8083  003D6A  0E00               	movlw	0
  8084  003D6C  6E2A               	movwf	_Green_Led_Counter,c
  8085  003D6E                     l829:
  8086                           
  8087                           ;io.c: 59: }
  8088                           ;io.c: 60: if(Green_Led_Counter > 3000/2)
  8089  003D6E  0EDD               	movlw	221
  8090  003D70  5C2A               	subwf	_Green_Led_Counter,w,c
  8091  003D72  0E05               	movlw	5
  8092  003D74  D00F               	goto	L101
  8093  003D76  4A2A               	infsnz	_Green_Led_Counter,f,c
  8094  003D78  2A2B               	incf	_Green_Led_Counter+1,f,c
  8095                           
  8096                           ;io.c: 68: if(Green_Led_Counter > 30000)
  8097  003D7A  0E31               	movlw	49
  8098  003D7C  5C2A               	subwf	_Green_Led_Counter,w,c
  8099  003D7E  0E75               	movlw	117
  8100  003D80  582B               	subwfb	_Green_Led_Counter+1,w,c
  8101  003D82  A0D8               	btfss	status,0,c
  8102  003D84  D004               	goto	l833
  8103                           
  8104                           ;io.c: 69: {
  8105                           ;io.c: 70: Green_Led_Counter = 0;
  8106  003D86  0E00               	movlw	0
  8107  003D88  6E2B               	movwf	_Green_Led_Counter+1,c
  8108  003D8A  0E00               	movlw	0
  8109  003D8C  6E2A               	movwf	_Green_Led_Counter,c
  8110  003D8E                     l833:
  8111                           
  8112                           ;io.c: 71: }
  8113                           ;io.c: 72: if(Green_Led_Counter > 30000/2)
  8114  003D8E  0E99               	movlw	153
  8115  003D90  5C2A               	subwf	_Green_Led_Counter,w,c
  8116  003D92  0E3A               	movlw	58
  8117  003D94                     L101:
  8118  003D94  582B               	subwfb	_Green_Led_Counter+1,w,c
  8119  003D96  A0D8               	btfss	status,0,c
  8120  003D98  D002               	goto	l834
  8121  003D9A                     u8000:
  8122                           
  8123                           ;io.c: 73: {
  8124                           ;io.c: 74: PORTDbits.RD6 = 1;
  8125  003D9A  8C83               	bsf	3971,6,c	;volatile
  8126                           
  8127                           ;io.c: 75: }
  8128  003D9C  D00F               	goto	l826
  8129  003D9E                     l834:
  8130                           
  8131                           ;io.c: 76: else {PORTDbits.RD6 = 0;}
  8132  003D9E  9C83               	bcf	3971,6,c	;volatile
  8133                           
  8134                           ;io.c: 80: }
  8135                           
  8136                           ;io.c: 79: default : break;
  8137                           
  8138                           ;io.c: 77: break;
  8139  003DA0  D00D               	goto	l826
  8140  003DA2                     l824:
  8141  003DA2  5020               	movf	Green_Led@Operation,w,c
  8142                           
  8143                           ; Switch size 1, requested type "space"
  8144                           ; Number of cases is 4, Range of values is 0 to 3
  8145                           ; switch strategies available:
  8146                           ; Name         Instructions Cycles
  8147                           ; simple_byte           13     7 (average)
  8148                           ;	Chosen strategy is simple_byte
  8149  003DA4  0A00               	xorlw	0	; case 0
  8150  003DA6  B4D8               	btfsc	status,2,c
  8151  003DA8  D7FA               	goto	l834
  8152  003DAA  0A01               	xorlw	1	; case 1
  8153  003DAC  B4D8               	btfsc	status,2,c
  8154  003DAE  D7F5               	goto	u8000
  8155  003DB0  0A03               	xorlw	3	; case 2
  8156  003DB2  B4D8               	btfsc	status,2,c
  8157  003DB4  D7D0               	goto	l828
  8158  003DB6  0A01               	xorlw	1	; case 3
  8159  003DB8  B4D8               	btfsc	status,2,c
  8160  003DBA  D7DD               	goto	l832
  8161  003DBC                     l826:
  8162                           
  8163                           ;io.c: 81: SETxAPIxVAL(89, PORTDbits.RD6);
  8164  003DBC  0E00               	movlw	0
  8165  003DBE  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8166  003DC0  0E59               	movlw	89
  8167  003DC2  6E19               	movwf	SETxAPIxVAL@index,c
  8168  003DC4  AC83               	btfss	3971,6,c	;volatile
  8169  003DC6  D003               	goto	u8010
  8170  003DC8  6A1F               	clrf	??_Green_Led& (0+255),c
  8171  003DCA  2A1F               	incf	??_Green_Led& (0+255),f,c
  8172  003DCC  D001               	goto	u8018
  8173  003DCE                     u8010:
  8174  003DCE  6A1F               	clrf	??_Green_Led& (0+255),c
  8175  003DD0                     u8018:
  8176  003DD0  501F               	movf	??_Green_Led,w,c
  8177  003DD2  6E1B               	movwf	SETxAPIxVAL@value,c
  8178  003DD4  6A1C               	clrf	SETxAPIxVAL@value+1,c
  8179  003DD6  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  8180  003DDA  0012               	return		;funcret
  8181  003DDC                     __end_of_Green_Led:
  8182                           	opt stack 0
  8183                           tblptru	equ	0xFF8
  8184                           tblptrh	equ	0xFF7
  8185                           tblptrl	equ	0xFF6
  8186                           tablat	equ	0xFF5
  8187                           postinc0	equ	0xFEE
  8188                           wreg	equ	0xFE8
  8189                           postdec1	equ	0xFE5
  8190                           fsr1h	equ	0xFE2
  8191                           fsr1l	equ	0xFE1
  8192                           status	equ	0xFD8
  8193                           
  8194 ;; *************** function _EEPROMxSTORE *****************
  8195 ;; Defined at:
  8196 ;;		line 157 in file "../eeprom_settings.c"
  8197 ;; Parameters:    Size  Location     Type
  8198 ;;		None
  8199 ;; Auto vars:     Size  Location     Type
  8200 ;;  i               1   22[BANK0 ] unsigned char 
  8201 ;;  api_list        1   21[BANK0 ] unsigned char 
  8202 ;; Return value:  Size  Location     Type
  8203 ;;                  2   26[COMRAM] unsigned int 
  8204 ;; Registers used:
  8205 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8206 ;; Tracked objects:
  8207 ;;		On entry : 0/0
  8208 ;;		On exit  : 0/0
  8209 ;;		Unchanged: 0/0
  8210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8211 ;;      Params:         2       0       0       0       0       0       0       0       0
  8212 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8213 ;;      Temps:          8       0       0       0       0       0       0       0       0
  8214 ;;      Totals:        10       2       0       0       0       0       0       0       0
  8215 ;;Total ram usage:       12 bytes
  8216 ;; Hardware stack levels used:    1
  8217 ;; Hardware stack levels required when called:    4
  8218 ;; This function calls:
  8219 ;;		_Eeprom_Store
  8220 ;; This function is called by:
  8221 ;;		_Update_StateMchn
  8222 ;; This function uses a non-reentrant model
  8223 ;;
  8224                           
  8225                           	psect	text15
  8226  002974                     __ptext15:
  8227                           	opt stack 0
  8228  002974                     _EEPROMxSTORE:
  8229                           	opt stack 25
  8230                           
  8231                           ;eeprom_settings.c: 159: unsigned char i, api_list;
  8232                           ;eeprom_settings.c: 161: if (!ReadActive){
  8233                           
  8234                           ;incstack = 0
  8235  002974  0100               	movlb	0	; () banked
  8236  002976  516E               	movf	_ReadActive& (0+255),w,b
  8237  002978  116F               	iorwf	(_ReadActive+1)& (0+255),w,b
  8238  00297A  A4D8               	btfss	status,2,c
  8239  00297C  D0AC               	goto	l751
  8240                           
  8241                           ; BSR set to: 0
  8242                           ;eeprom_settings.c: 162: WriteActive = 1;
  8243  00297E  0E00               	movlw	0
  8244  002980  6F6D               	movwf	(_WriteActive+1)& (0+255),b
  8245  002982  0E01               	movlw	1
  8246  002984  6F6C               	movwf	_WriteActive& (0+255),b
  8247                           
  8248                           ;eeprom_settings.c: 163: INTCON = 0x00;
  8249  002986  0E00               	movlw	0
  8250  002988  6EF2               	movwf	intcon,c	;volatile
  8251                           
  8252                           ;eeprom_settings.c: 165: for(i = 0; i < 18; i++ )
  8253  00298A  0E00               	movlw	0
  8254  00298C  6FAE               	movwf	EEPROMxSTORE@i& (0+255),b
  8255  00298E                     l7854:
  8256                           
  8257                           ; BSR set to: 0
  8258  00298E  0E11               	movlw	17
  8259  002990  65AE               	cpfsgt	EEPROMxSTORE@i& (0+255),b
  8260  002992  D001               	goto	l752
  8261  002994  D095               	goto	u7440
  8262  002996                     l752:
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;eeprom_settings.c: 166: {
  8266                           ;eeprom_settings.c: 167: api_list = ApiList[i];
  8267                           
  8268                           ; BSR set to: 0
  8269  002996  51AE               	movf	EEPROMxSTORE@i& (0+255),w,b
  8270  002998  0D02               	mullw	2
  8271  00299A  0E01               	movlw	low _ApiList
  8272  00299C  24F3               	addwf	prodl,w,c
  8273  00299E  6EF6               	movwf	tblptrl,c
  8274  0029A0  0E08               	movlw	high _ApiList
  8275  0029A2  20F4               	addwfc	prodh,w,c
  8276  0029A4  6EF7               	movwf	tblptrh,c
  8277  0029A6                     	if	0	;There are less than 3 active tblptr bytes
  8278  0029A6                     	endif
  8279  0029A6  0008               	tblrd		*
  8280  0029A8  CFF5 F0AD          	movff	tablat,EEPROMxSTORE@api_list
  8281                           
  8282                           ; BSR set to: 0
  8283                           ;eeprom_settings.c: 173: if (API[ApiList[i]] != API_EEPROM[ApiList[i]])
  8284  0029AC  51AE               	movf	EEPROMxSTORE@i& (0+255),w,b
  8285  0029AE  0D02               	mullw	2
  8286  0029B0  0E01               	movlw	low _ApiList
  8287  0029B2  24F3               	addwf	prodl,w,c
  8288  0029B4  6EF6               	movwf	tblptrl,c
  8289  0029B6  0E08               	movlw	high _ApiList
  8290  0029B8  20F4               	addwfc	prodh,w,c
  8291  0029BA  6EF7               	movwf	tblptrh,c
  8292  0029BC                     	if	0	;There are less than 3 active tblptr bytes
  8293  0029BC                     	endif
  8294  0029BC  0009               	tblrd		*+
  8295  0029BE  CFF5 F01D          	movff	tablat,??_EEPROMxSTORE
  8296  0029C2  0009               	tblrd		*+
  8297  0029C4  CFF5 F01E          	movff	tablat,??_EEPROMxSTORE+1
  8298  0029C8  90D8               	bcf	status,0,c
  8299  0029CA  361D               	rlcf	??_EEPROMxSTORE,f,c
  8300  0029CC  361E               	rlcf	??_EEPROMxSTORE+1,f,c
  8301  0029CE  0E00               	movlw	low _API_EEPROM
  8302  0029D0  241D               	addwf	??_EEPROMxSTORE,w,c
  8303  0029D2  6ED9               	movwf	fsr2l,c
  8304  0029D4  0E03               	movlw	high _API_EEPROM
  8305  0029D6  201E               	addwfc	??_EEPROMxSTORE+1,w,c
  8306  0029D8  6EDA               	movwf	fsr2h,c
  8307  0029DA  51AE               	movf	EEPROMxSTORE@i& (0+255),w,b
  8308  0029DC  0D02               	mullw	2
  8309  0029DE  0E01               	movlw	low _ApiList
  8310  0029E0  24F3               	addwf	prodl,w,c
  8311  0029E2  6EF6               	movwf	tblptrl,c
  8312  0029E4  0E08               	movlw	high _ApiList
  8313  0029E6  20F4               	addwfc	prodh,w,c
  8314  0029E8  6EF7               	movwf	tblptrh,c
  8315  0029EA                     	if	0	;There are less than 3 active tblptr bytes
  8316  0029EA                     	endif
  8317  0029EA  0009               	tblrd		*+
  8318  0029EC  CFF5 F021          	movff	tablat,??_EEPROMxSTORE+4
  8319  0029F0  0009               	tblrd		*+
  8320  0029F2  CFF5 F022          	movff	tablat,??_EEPROMxSTORE+5
  8321  0029F6  90D8               	bcf	status,0,c
  8322  0029F8  3621               	rlcf	??_EEPROMxSTORE+4,f,c
  8323  0029FA  3622               	rlcf	??_EEPROMxSTORE+5,f,c
  8324  0029FC  0E00               	movlw	low _API
  8325  0029FE  2421               	addwf	??_EEPROMxSTORE+4,w,c
  8326  002A00  6EE1               	movwf	fsr1l,c
  8327  002A02  0E01               	movlw	high _API
  8328  002A04  2022               	addwfc	??_EEPROMxSTORE+5,w,c
  8329  002A06  6EE2               	movwf	fsr1h,c
  8330  002A08  50DE               	movf	postinc2,w,c
  8331  002A0A  18E6               	xorwf	postinc1,w,c
  8332  002A0C  E104               	bnz	u7430
  8333  002A0E  50DE               	movf	postinc2,w,c
  8334  002A10  18E6               	xorwf	postinc1,w,c
  8335  002A12  B4D8               	btfsc	status,2,c
  8336  002A14  D053               	goto	l754
  8337  002A16                     u7430:
  8338                           
  8339                           ; BSR set to: 0
  8340                           ;eeprom_settings.c: 174: {
  8341                           ;eeprom_settings.c: 179: Eeprom_Store(i, API[ApiList[i]]);
  8342  002A16  C0AE  F013         	movff	EEPROMxSTORE@i,Eeprom_Store@Location
  8343  002A1A  6A14               	clrf	Eeprom_Store@Location+1,c
  8344  002A1C  51AE               	movf	EEPROMxSTORE@i& (0+255),w,b
  8345  002A1E  0D02               	mullw	2
  8346  002A20  0E01               	movlw	low _ApiList
  8347  002A22  24F3               	addwf	prodl,w,c
  8348  002A24  6EF6               	movwf	tblptrl,c
  8349  002A26  0E08               	movlw	high _ApiList
  8350  002A28  20F4               	addwfc	prodh,w,c
  8351  002A2A  6EF7               	movwf	tblptrh,c
  8352  002A2C                     	if	0	;There are less than 3 active tblptr bytes
  8353  002A2C                     	endif
  8354  002A2C  0009               	tblrd		*+
  8355  002A2E  CFF5 F01D          	movff	tablat,??_EEPROMxSTORE
  8356  002A32  0009               	tblrd		*+
  8357  002A34  CFF5 F01E          	movff	tablat,??_EEPROMxSTORE+1
  8358  002A38  90D8               	bcf	status,0,c
  8359  002A3A  361D               	rlcf	??_EEPROMxSTORE,f,c
  8360  002A3C  361E               	rlcf	??_EEPROMxSTORE+1,f,c
  8361  002A3E  0E00               	movlw	low _API
  8362  002A40  241D               	addwf	??_EEPROMxSTORE,w,c
  8363  002A42  6ED9               	movwf	fsr2l,c
  8364  002A44  0E01               	movlw	high _API
  8365  002A46  201E               	addwfc	??_EEPROMxSTORE+1,w,c
  8366  002A48  6EDA               	movwf	fsr2h,c
  8367  002A4A  CFDE F015          	movff	postinc2,Eeprom_Store@Value
  8368  002A4E  CFDD F016          	movff	postdec2,Eeprom_Store@Value+1
  8369  002A52  EC28  F01F         	call	_Eeprom_Store	;wreg free
  8370                           
  8371                           ;eeprom_settings.c: 180: API_EEPROM[ApiList[i]] = API[ApiList[i]];
  8372  002A56  0100               	movlb	0	; () banked
  8373  002A58  51AE               	movf	EEPROMxSTORE@i& (0+255),w,b
  8374  002A5A  0D02               	mullw	2
  8375  002A5C  0E01               	movlw	low _ApiList
  8376  002A5E  24F3               	addwf	prodl,w,c
  8377  002A60  6EF6               	movwf	tblptrl,c
  8378  002A62  0E08               	movlw	high _ApiList
  8379  002A64  20F4               	addwfc	prodh,w,c
  8380  002A66  6EF7               	movwf	tblptrh,c
  8381  002A68                     	if	0	;There are less than 3 active tblptr bytes
  8382  002A68                     	endif
  8383  002A68  0009               	tblrd		*+
  8384  002A6A  CFF5 F01D          	movff	tablat,??_EEPROMxSTORE
  8385  002A6E  0009               	tblrd		*+
  8386  002A70  CFF5 F01E          	movff	tablat,??_EEPROMxSTORE+1
  8387  002A74  90D8               	bcf	status,0,c
  8388  002A76  361D               	rlcf	??_EEPROMxSTORE,f,c
  8389  002A78  361E               	rlcf	??_EEPROMxSTORE+1,f,c
  8390  002A7A  0E00               	movlw	low _API
  8391  002A7C  241D               	addwf	??_EEPROMxSTORE,w,c
  8392  002A7E  6ED9               	movwf	fsr2l,c
  8393  002A80  0E01               	movlw	high _API
  8394  002A82  201E               	addwfc	??_EEPROMxSTORE+1,w,c
  8395  002A84  6EDA               	movwf	fsr2h,c
  8396  002A86  51AE               	movf	EEPROMxSTORE@i& (0+255),w,b
  8397  002A88  0D02               	mullw	2
  8398  002A8A  0E01               	movlw	low _ApiList
  8399  002A8C  24F3               	addwf	prodl,w,c
  8400  002A8E  6EF6               	movwf	tblptrl,c
  8401  002A90  0E08               	movlw	high _ApiList
  8402  002A92  20F4               	addwfc	prodh,w,c
  8403  002A94  6EF7               	movwf	tblptrh,c
  8404  002A96                     	if	0	;There are less than 3 active tblptr bytes
  8405  002A96                     	endif
  8406  002A96  0009               	tblrd		*+
  8407  002A98  CFF5 F01F          	movff	tablat,??_EEPROMxSTORE+2
  8408  002A9C  0009               	tblrd		*+
  8409  002A9E  CFF5 F020          	movff	tablat,??_EEPROMxSTORE+3
  8410  002AA2  90D8               	bcf	status,0,c
  8411  002AA4  361F               	rlcf	??_EEPROMxSTORE+2,f,c
  8412  002AA6  3620               	rlcf	??_EEPROMxSTORE+3,f,c
  8413  002AA8  0E00               	movlw	low _API_EEPROM
  8414  002AAA  241F               	addwf	??_EEPROMxSTORE+2,w,c
  8415  002AAC  6EE1               	movwf	fsr1l,c
  8416  002AAE  0E03               	movlw	high _API_EEPROM
  8417  002AB0  2020               	addwfc	??_EEPROMxSTORE+3,w,c
  8418  002AB2  6EE2               	movwf	fsr1h,c
  8419  002AB4  CFDE FFE6          	movff	postinc2,postinc1
  8420  002AB8  CFDD FFE5          	movff	postdec2,postdec1
  8421  002ABC                     l754:
  8422                           
  8423                           ; BSR set to: 0
  8424                           
  8425                           ; BSR set to: 0
  8426  002ABC  2BAE               	incf	EEPROMxSTORE@i& (0+255),f,b
  8427  002ABE  D767               	goto	l7854
  8428  002AC0                     u7440:
  8429                           
  8430                           ; BSR set to: 0
  8431                           ;eeprom_settings.c: 181: }
  8432                           ;eeprom_settings.c: 182: }
  8433                           ;eeprom_settings.c: 184: INTCON = 0xA0;
  8434                           
  8435                           ; BSR set to: 0
  8436  002AC0  0EA0               	movlw	160
  8437  002AC2  6EF2               	movwf	intcon,c	;volatile
  8438                           
  8439                           ;eeprom_settings.c: 185: WriteActive = 0;
  8440  002AC4  0E00               	movlw	0
  8441  002AC6  6F6D               	movwf	(_WriteActive+1)& (0+255),b
  8442  002AC8  0E00               	movlw	0
  8443  002ACA  6F6C               	movwf	_WriteActive& (0+255),b
  8444                           
  8445                           ;eeprom_settings.c: 186: return (1);
  8446  002ACC  0E00               	movlw	0
  8447  002ACE  6E1C               	movwf	?_EEPROMxSTORE+1,c
  8448  002AD0  0E01               	movlw	1
  8449  002AD2  6E1B               	movwf	?_EEPROMxSTORE,c
  8450                           
  8451                           ; BSR set to: 0
  8452                           ;eeprom_settings.c: 187: }
  8453                           
  8454                           ; BSR set to: 0
  8455  002AD4  0012               	return	
  8456  002AD6                     l751:
  8457                           
  8458                           ; BSR set to: 0
  8459                           ;eeprom_settings.c: 188: else{
  8460                           ;eeprom_settings.c: 189: return (0);
  8461                           
  8462                           ; BSR set to: 0
  8463  002AD6  0E00               	movlw	0
  8464  002AD8  6E1C               	movwf	?_EEPROMxSTORE+1,c
  8465  002ADA  0E00               	movlw	0
  8466  002ADC  6E1B               	movwf	?_EEPROMxSTORE,c
  8467                           
  8468                           ; BSR set to: 0
  8469  002ADE  0012               	return	
  8470  002AE0                     __end_of_EEPROMxSTORE:
  8471                           	opt stack 0
  8472                           tblptru	equ	0xFF8
  8473                           tblptrh	equ	0xFF7
  8474                           tblptrl	equ	0xFF6
  8475                           tablat	equ	0xFF5
  8476                           prodh	equ	0xFF4
  8477                           prodl	equ	0xFF3
  8478                           intcon	equ	0xFF2
  8479                           postinc0	equ	0xFEE
  8480                           wreg	equ	0xFE8
  8481                           postinc1	equ	0xFE6
  8482                           postdec1	equ	0xFE5
  8483                           fsr1h	equ	0xFE2
  8484                           fsr1l	equ	0xFE1
  8485                           postinc2	equ	0xFDE
  8486                           postdec2	equ	0xFDD
  8487                           fsr2h	equ	0xFDA
  8488                           fsr2l	equ	0xFD9
  8489                           status	equ	0xFD8
  8490                           
  8491 ;; *************** function _Eeprom_Store *****************
  8492 ;; Defined at:
  8493 ;;		line 207 in file "../eeprom_settings.c"
  8494 ;; Parameters:    Size  Location     Type
  8495 ;;  Location        2   18[COMRAM] unsigned int 
  8496 ;;  Value           2   20[COMRAM] unsigned int 
  8497 ;; Auto vars:     Size  Location     Type
  8498 ;;  Location_Hig    2   24[COMRAM] unsigned int 
  8499 ;;  Location_Low    2   22[COMRAM] unsigned int 
  8500 ;; Return value:  Size  Location     Type
  8501 ;;                  1    wreg      void 
  8502 ;; Registers used:
  8503 ;;		wreg, status,2, status,0
  8504 ;; Tracked objects:
  8505 ;;		On entry : 0/0
  8506 ;;		On exit  : 0/0
  8507 ;;		Unchanged: 0/0
  8508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8509 ;;      Params:         4       0       0       0       0       0       0       0       0
  8510 ;;      Locals:         4       0       0       0       0       0       0       0       0
  8511 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8512 ;;      Totals:         8       0       0       0       0       0       0       0       0
  8513 ;;Total ram usage:        8 bytes
  8514 ;; Hardware stack levels used:    1
  8515 ;; Hardware stack levels required when called:    3
  8516 ;; This function calls:
  8517 ;;		Nothing
  8518 ;; This function is called by:
  8519 ;;		_EEPROMxSTORE
  8520 ;; This function uses a non-reentrant model
  8521 ;;
  8522                           
  8523                           	psect	text16
  8524  003E50                     __ptext16:
  8525                           	opt stack 0
  8526  003E50                     _Eeprom_Store:
  8527                           	opt stack 25
  8528                           
  8529                           ;eeprom_settings.c: 209: unsigned int Location_High_Byte = Location * 2;
  8530                           
  8531                           ; BSR set to: 0
  8532                           ;incstack = 0
  8533  003E50  90D8               	bcf	status,0,c
  8534  003E52  3413               	rlcf	Eeprom_Store@Location,w,c
  8535  003E54  6E19               	movwf	Eeprom_Store@Location_High_Byte,c
  8536  003E56  3414               	rlcf	Eeprom_Store@Location+1,w,c
  8537  003E58  6E1A               	movwf	Eeprom_Store@Location_High_Byte+1,c
  8538                           
  8539                           ;eeprom_settings.c: 210: unsigned int Location_Low_Byte = Location_High_Byte + 1;
  8540  003E5A  0E01               	movlw	1
  8541  003E5C  2419               	addwf	Eeprom_Store@Location_High_Byte,w,c
  8542  003E5E  6E17               	movwf	Eeprom_Store@Location_Low_Byte,c
  8543  003E60  0E00               	movlw	0
  8544  003E62  201A               	addwfc	Eeprom_Store@Location_High_Byte+1,w,c
  8545  003E64  6E18               	movwf	Eeprom_Store@Location_Low_Byte+1,c
  8546                           
  8547                           ;eeprom_settings.c: 214: EECON1bits.WRERR = 0;
  8548  003E66  96A6               	bcf	4006,3,c	;volsfr
  8549                           
  8550                           ;eeprom_settings.c: 215: EEADR = (unsigned char)Location_High_Byte;
  8551  003E68  C019  FFA9         	movff	Eeprom_Store@Location_High_Byte,4009	;volatile
  8552                           
  8553                           ;eeprom_settings.c: 216: EEDATA = (unsigned char)(Value >> 8);
  8554  003E6C  5016               	movf	Eeprom_Store@Value+1,w,c
  8555  003E6E  6EA8               	movwf	4008,c	;volatile
  8556                           
  8557                           ;eeprom_settings.c: 217: EECON1bits.EEPGD = 0;
  8558  003E70  9EA6               	bcf	4006,7,c	;volsfr
  8559                           
  8560                           ;eeprom_settings.c: 218: EECON1bits.CFGS = 0;
  8561  003E72  9CA6               	bcf	4006,6,c	;volsfr
  8562                           
  8563                           ;eeprom_settings.c: 219: EECON1bits.WREN = 1;
  8564  003E74  84A6               	bsf	4006,2,c	;volsfr
  8565                           
  8566                           ;eeprom_settings.c: 220: EECON2 = 0x55;
  8567  003E76  0E55               	movlw	85
  8568  003E78  6EA7               	movwf	4007,c	;volsfr
  8569                           
  8570                           ;eeprom_settings.c: 221: EECON2 = 0xAA;
  8571  003E7A  0EAA               	movlw	170
  8572  003E7C  6EA7               	movwf	4007,c	;volsfr
  8573                           
  8574                           ;eeprom_settings.c: 222: EECON1bits.WR = 1;
  8575  003E7E  82A6               	bsf	4006,1,c	;volsfr
  8576  003E80                     
  8577                           ;eeprom_settings.c: 224: continue;
  8578  003E80  A2A6               	btfss	4006,1,c	;volsfr
  8579  003E82  D002               	goto	u7380
  8580  003E84  A8A1               	btfss	4001,4,c	;volatile
  8581  003E86  D7FC               	goto	l760
  8582  003E88                     u7380:
  8583                           
  8584                           ;eeprom_settings.c: 225: }
  8585                           ;eeprom_settings.c: 226: PIR2bits.EEIF = 0;
  8586  003E88  98A1               	bcf	4001,4,c	;volatile
  8587                           
  8588                           ;eeprom_settings.c: 236: EECON1bits.WRERR = 0;
  8589  003E8A  96A6               	bcf	4006,3,c	;volsfr
  8590                           
  8591                           ;eeprom_settings.c: 237: EEADR = (unsigned char)Location_Low_Byte;
  8592  003E8C  C017  FFA9         	movff	Eeprom_Store@Location_Low_Byte,4009	;volatile
  8593                           
  8594                           ;eeprom_settings.c: 238: EEDATA = (unsigned char)Value;
  8595  003E90  C015  FFA8         	movff	Eeprom_Store@Value,4008	;volatile
  8596                           
  8597                           ;eeprom_settings.c: 239: EECON1bits.EEPGD = 0;
  8598  003E94  9EA6               	bcf	4006,7,c	;volsfr
  8599                           
  8600                           ;eeprom_settings.c: 240: EECON1bits.CFGS = 0;
  8601  003E96  9CA6               	bcf	4006,6,c	;volsfr
  8602                           
  8603                           ;eeprom_settings.c: 241: EECON1bits.WREN = 1;
  8604  003E98  84A6               	bsf	4006,2,c	;volsfr
  8605                           
  8606                           ;eeprom_settings.c: 242: INTCON = 0x00;
  8607  003E9A  0E00               	movlw	0
  8608  003E9C  6EF2               	movwf	intcon,c	;volatile
  8609                           
  8610                           ;eeprom_settings.c: 243: EECON2 = 0x55;
  8611  003E9E  0E55               	movlw	85
  8612  003EA0  6EA7               	movwf	4007,c	;volsfr
  8613                           
  8614                           ;eeprom_settings.c: 244: EECON2 = 0xAA;
  8615  003EA2  0EAA               	movlw	170
  8616  003EA4  6EA7               	movwf	4007,c	;volsfr
  8617                           
  8618                           ;eeprom_settings.c: 245: EECON1bits.WR = 1;
  8619  003EA6  82A6               	bsf	4006,1,c	;volsfr
  8620  003EA8                     
  8621                           ;eeprom_settings.c: 247: continue;
  8622  003EA8  A2A6               	btfss	4006,1,c	;volsfr
  8623  003EAA  D002               	goto	u7400
  8624  003EAC  A8A1               	btfss	4001,4,c	;volatile
  8625  003EAE  D7FC               	goto	l765
  8626  003EB0                     u7400:
  8627                           
  8628                           ;eeprom_settings.c: 248: }
  8629                           ;eeprom_settings.c: 249: PIR2bits.EEIF = 0;
  8630  003EB0  98A1               	bcf	4001,4,c	;volatile
  8631                           
  8632                           ;eeprom_settings.c: 259: EECON1bits.WREN = 0;
  8633  003EB2  94A6               	bcf	4006,2,c	;volsfr
  8634                           
  8635                           ;eeprom_settings.c: 261: EEADR = 0xFF;
  8636  003EB4  68A9               	setf	4009,c	;volatile
  8637  003EB6  0012               	return		;funcret
  8638  003EB8                     __end_of_Eeprom_Store:
  8639                           	opt stack 0
  8640                           tblptru	equ	0xFF8
  8641                           tblptrh	equ	0xFF7
  8642                           tblptrl	equ	0xFF6
  8643                           tablat	equ	0xFF5
  8644                           prodh	equ	0xFF4
  8645                           prodl	equ	0xFF3
  8646                           intcon	equ	0xFF2
  8647                           postinc0	equ	0xFEE
  8648                           wreg	equ	0xFE8
  8649                           postinc1	equ	0xFE6
  8650                           postdec1	equ	0xFE5
  8651                           fsr1h	equ	0xFE2
  8652                           fsr1l	equ	0xFE1
  8653                           postinc2	equ	0xFDE
  8654                           postdec2	equ	0xFDD
  8655                           fsr2h	equ	0xFDA
  8656                           fsr2l	equ	0xFD9
  8657                           status	equ	0xFD8
  8658                           
  8659 ;; *************** function _Debounce_Inputs *****************
  8660 ;; Defined at:
  8661 ;;		line 150 in file "../io.c"
  8662 ;; Parameters:    Size  Location     Type
  8663 ;;		None
  8664 ;; Auto vars:     Size  Location     Type
  8665 ;;		None
  8666 ;; Return value:  Size  Location     Type
  8667 ;;                  1    wreg      void 
  8668 ;; Registers used:
  8669 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8670 ;; Tracked objects:
  8671 ;;		On entry : 0/0
  8672 ;;		On exit  : 0/0
  8673 ;;		Unchanged: 0/0
  8674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8675 ;;      Params:         0       0       0       0       0       0       0       0       0
  8676 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8677 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8678 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8679 ;;Total ram usage:        2 bytes
  8680 ;; Hardware stack levels used:    1
  8681 ;; Hardware stack levels required when called:    5
  8682 ;; This function calls:
  8683 ;;		_GETxAPIxVAL
  8684 ;;		_SETxAPIxVAL
  8685 ;;		_SetDCPWM1
  8686 ;; This function is called by:
  8687 ;;		_Update_StateMchn
  8688 ;; This function uses a non-reentrant model
  8689 ;;
  8690                           
  8691                           	psect	text17
  8692  001718                     __ptext17:
  8693                           	opt stack 0
  8694  001718                     _Debounce_Inputs:
  8695                           	opt stack 24
  8696                           
  8697                           ;io.c: 152: PORTAbits.RA3 = GETxAPIxVAL(64);
  8698                           
  8699                           ;incstack = 0
  8700  001718  0E00               	movlw	0
  8701  00171A  6E14               	movwf	GETxAPIxVAL@index+1,c
  8702  00171C  0E40               	movlw	64
  8703  00171E  6E13               	movwf	GETxAPIxVAL@index,c
  8704  001720  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  8705  001724  4613               	rlncf	?_GETxAPIxVAL,f,c
  8706  001726  4613               	rlncf	?_GETxAPIxVAL,f,c
  8707  001728  4613               	rlncf	?_GETxAPIxVAL,f,c
  8708  00172A  5080               	movf	3968,w,c	;volatile
  8709  00172C  1813               	xorwf	?_GETxAPIxVAL,w,c
  8710  00172E  0BF7               	andlw	-9
  8711  001730  1813               	xorwf	?_GETxAPIxVAL,w,c
  8712  001732  6E80               	movwf	3968,c	;volatile
  8713                           
  8714                           ;io.c: 153: PORTAbits.RA2 = GETxAPIxVAL(65);
  8715  001734  0E00               	movlw	0
  8716  001736  6E14               	movwf	GETxAPIxVAL@index+1,c
  8717  001738  0E41               	movlw	65
  8718  00173A  6E13               	movwf	GETxAPIxVAL@index,c
  8719  00173C  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  8720  001740  4613               	rlncf	?_GETxAPIxVAL,f,c
  8721  001742  4613               	rlncf	?_GETxAPIxVAL,f,c
  8722  001744  5080               	movf	3968,w,c	;volatile
  8723  001746  1813               	xorwf	?_GETxAPIxVAL,w,c
  8724  001748  0BFB               	andlw	-5
  8725  00174A  1813               	xorwf	?_GETxAPIxVAL,w,c
  8726  00174C  6E80               	movwf	3968,c	;volatile
  8727                           
  8728                           ;io.c: 154: PORTAbits.RA1 = GETxAPIxVAL(66);
  8729  00174E  0E00               	movlw	0
  8730  001750  6E14               	movwf	GETxAPIxVAL@index+1,c
  8731  001752  0E42               	movlw	66
  8732  001754  6E13               	movwf	GETxAPIxVAL@index,c
  8733  001756  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  8734  00175A  4613               	rlncf	?_GETxAPIxVAL,f,c
  8735  00175C  5080               	movf	3968,w,c	;volatile
  8736  00175E  1813               	xorwf	?_GETxAPIxVAL,w,c
  8737  001760  0BFD               	andlw	-3
  8738  001762  1813               	xorwf	?_GETxAPIxVAL,w,c
  8739  001764  6E80               	movwf	3968,c	;volatile
  8740                           
  8741                           ;io.c: 155: PORTAbits.RA0 = GETxAPIxVAL(67);
  8742  001766  0E00               	movlw	0
  8743  001768  6E14               	movwf	GETxAPIxVAL@index+1,c
  8744  00176A  0E43               	movlw	67
  8745  00176C  6E13               	movwf	GETxAPIxVAL@index,c
  8746  00176E  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  8747  001772  5080               	movf	3968,w,c	;volatile
  8748  001774  1813               	xorwf	?_GETxAPIxVAL,w,c
  8749  001776  0BFE               	andlw	-2
  8750  001778  1813               	xorwf	?_GETxAPIxVAL,w,c
  8751  00177A  6E80               	movwf	3968,c	;volatile
  8752                           
  8753                           ;io.c: 156: PORTCbits.RC0 = GETxAPIxVAL(69);
  8754  00177C  0E00               	movlw	0
  8755  00177E  6E14               	movwf	GETxAPIxVAL@index+1,c
  8756  001780  0E45               	movlw	69
  8757  001782  6E13               	movwf	GETxAPIxVAL@index,c
  8758  001784  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  8759  001788  5082               	movf	3970,w,c	;volatile
  8760  00178A  1813               	xorwf	?_GETxAPIxVAL,w,c
  8761  00178C  0BFE               	andlw	-2
  8762  00178E  1813               	xorwf	?_GETxAPIxVAL,w,c
  8763  001790  6E82               	movwf	3970,c	;volatile
  8764                           
  8765                           ;io.c: 157: SetDCPWM1(GETxAPIxVAL(88));
  8766  001792  0E00               	movlw	0
  8767  001794  6E14               	movwf	GETxAPIxVAL@index+1,c
  8768  001796  0E58               	movlw	88
  8769  001798  6E13               	movwf	GETxAPIxVAL@index,c
  8770  00179A  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  8771  00179E  C013  F015         	movff	?_GETxAPIxVAL,SetDCPWM1@dutycycle
  8772  0017A2  C014  F016         	movff	?_GETxAPIxVAL+1,SetDCPWM1@dutycycle+1
  8773  0017A6  EC3E  F020         	call	_SetDCPWM1	;wreg free
  8774                           
  8775                           ;io.c: 159: switch(PORTDbits.RD1)
  8776  0017AA  D02C               	goto	l856
  8777  0017AC  503E               	movf	_Reed_Contact_LF_Counter,w,c
  8778  0017AE  B4D8               	btfsc	status,2,c
  8779  0017B0  D002               	goto	l858
  8780                           
  8781                           ;io.c: 162: {
  8782                           ;io.c: 163: Reed_Contact_LF_Counter--;
  8783  0017B2  063E               	decf	_Reed_Contact_LF_Counter,f,c
  8784                           
  8785                           ;io.c: 165: }
  8786                           
  8787                           ;io.c: 164: break;
  8788  0017B4  D05F               	goto	l865
  8789  0017B6                     l858:
  8790                           
  8791                           ;io.c: 166: else {SETxAPIxVAL(31, 0);}
  8792  0017B6  0E00               	movlw	0
  8793  0017B8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8794  0017BA  0E1F               	movlw	31
  8795  0017BC  6E19               	movwf	SETxAPIxVAL@index,c
  8796  0017BE  0E00               	movlw	0
  8797  0017C0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8798  0017C2  0E00               	movlw	0
  8799  0017C4  6E1B               	movwf	SETxAPIxVAL@value,c
  8800  0017C6  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  8801                           
  8802                           ;io.c: 167: break;
  8803  0017CA  D054               	goto	l865
  8804  0017CC  503E               	movf	_Reed_Contact_LF_Counter,w,c
  8805  0017CE  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8806  0017D0  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8807  0017D2  0E00               	movlw	0
  8808  0017D4  6E14               	movwf	GETxAPIxVAL@index+1,c
  8809  0017D6  0E1B               	movlw	27
  8810  0017D8  6E13               	movwf	GETxAPIxVAL@index,c
  8811  0017DA  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  8812  0017DE  501F               	movf	??_Debounce_Inputs,w,c
  8813  0017E0  5C13               	subwf	?_GETxAPIxVAL,w,c
  8814  0017E2  5020               	movf	??_Debounce_Inputs+1,w,c
  8815  0017E4  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8816  0017E6  A0D8               	btfss	status,0,c
  8817  0017E8  D002               	goto	l862
  8818                           
  8819                           ;io.c: 170: {
  8820                           ;io.c: 171: Reed_Contact_LF_Counter++;
  8821  0017EA  2A3E               	incf	_Reed_Contact_LF_Counter,f,c
  8822                           
  8823                           ;io.c: 173: }
  8824                           
  8825                           ;io.c: 172: break;
  8826  0017EC  D043               	goto	l865
  8827  0017EE                     l862:
  8828                           
  8829                           ;io.c: 174: else {SETxAPIxVAL(31, 1);}
  8830  0017EE  0E00               	movlw	0
  8831  0017F0  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8832  0017F2  0E1F               	movlw	31
  8833  0017F4  6E19               	movwf	SETxAPIxVAL@index,c
  8834  0017F6  0E00               	movlw	0
  8835  0017F8  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8836  0017FA  0E01               	movlw	1
  8837  0017FC  6E1B               	movwf	SETxAPIxVAL@value,c
  8838  0017FE  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  8839                           
  8840                           ;io.c: 178: }
  8841                           
  8842                           ;io.c: 177: default : break;
  8843                           
  8844                           ;io.c: 175: break;
  8845  001802  D038               	goto	l865
  8846  001804                     l856:
  8847  001804  A283               	btfss	3971,1,c	;volatile
  8848  001806  D002               	goto	u7470
  8849  001808  0E01               	movlw	1
  8850  00180A  D001               	goto	u7476
  8851  00180C                     u7470:
  8852  00180C  0E00               	movlw	0
  8853  00180E                     u7476:
  8854                           
  8855                           ; Switch size 1, requested type "space"
  8856                           ; Number of cases is 2, Range of values is 0 to 1
  8857                           ; switch strategies available:
  8858                           ; Name         Instructions Cycles
  8859                           ; simple_byte            7     4 (average)
  8860                           ;	Chosen strategy is simple_byte
  8861  00180E  0A00               	xorlw	0	; case 0
  8862  001810  B4D8               	btfsc	status,2,c
  8863  001812  D7DC               	goto	l861
  8864  001814  0A01               	xorlw	1	; case 1
  8865  001816  B4D8               	btfsc	status,2,c
  8866  001818  D7C9               	goto	l857
  8867                           
  8868                           ;io.c: 181: switch(PORTDbits.RD0)
  8869  00181A  D02C               	goto	l865
  8870  00181C  503D               	movf	_Reed_Contact_LB_Counter,w,c
  8871  00181E  B4D8               	btfsc	status,2,c
  8872  001820  D002               	goto	l867
  8873                           
  8874                           ;io.c: 184: {
  8875                           ;io.c: 185: Reed_Contact_LB_Counter--;
  8876  001822  063D               	decf	_Reed_Contact_LB_Counter,f,c
  8877                           
  8878                           ;io.c: 187: }
  8879                           
  8880                           ;io.c: 186: break;
  8881  001824  D05F               	goto	l874
  8882  001826                     l867:
  8883                           
  8884                           ;io.c: 188: else {SETxAPIxVAL(30, 0);}
  8885  001826  0E00               	movlw	0
  8886  001828  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8887  00182A  0E1E               	movlw	30
  8888  00182C  6E19               	movwf	SETxAPIxVAL@index,c
  8889  00182E  0E00               	movlw	0
  8890  001830  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8891  001832  0E00               	movlw	0
  8892  001834  6E1B               	movwf	SETxAPIxVAL@value,c
  8893  001836  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  8894                           
  8895                           ;io.c: 189: break;
  8896  00183A  D054               	goto	l874
  8897  00183C  503D               	movf	_Reed_Contact_LB_Counter,w,c
  8898  00183E  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8899  001840  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8900  001842  0E00               	movlw	0
  8901  001844  6E14               	movwf	GETxAPIxVAL@index+1,c
  8902  001846  0E1B               	movlw	27
  8903  001848  6E13               	movwf	GETxAPIxVAL@index,c
  8904  00184A  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  8905  00184E  501F               	movf	??_Debounce_Inputs,w,c
  8906  001850  5C13               	subwf	?_GETxAPIxVAL,w,c
  8907  001852  5020               	movf	??_Debounce_Inputs+1,w,c
  8908  001854  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  8909  001856  A0D8               	btfss	status,0,c
  8910  001858  D002               	goto	l871
  8911                           
  8912                           ;io.c: 192: {
  8913                           ;io.c: 193: Reed_Contact_LB_Counter++;
  8914  00185A  2A3D               	incf	_Reed_Contact_LB_Counter,f,c
  8915                           
  8916                           ;io.c: 195: }
  8917                           
  8918                           ;io.c: 194: break;
  8919  00185C  D043               	goto	l874
  8920  00185E                     l871:
  8921                           
  8922                           ;io.c: 196: else {SETxAPIxVAL(30, 1);}
  8923  00185E  0E00               	movlw	0
  8924  001860  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8925  001862  0E1E               	movlw	30
  8926  001864  6E19               	movwf	SETxAPIxVAL@index,c
  8927  001866  0E00               	movlw	0
  8928  001868  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8929  00186A  0E01               	movlw	1
  8930  00186C  6E1B               	movwf	SETxAPIxVAL@value,c
  8931  00186E  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  8932                           
  8933                           ;io.c: 200: }
  8934                           
  8935                           ;io.c: 199: default : break;
  8936                           
  8937                           ;io.c: 197: break;
  8938  001872  D038               	goto	l874
  8939  001874                     l865:
  8940  001874  A083               	btfss	3971,0,c	;volatile
  8941  001876  D002               	goto	u7500
  8942  001878  0E01               	movlw	1
  8943  00187A  D001               	goto	u7506
  8944  00187C                     u7500:
  8945  00187C  0E00               	movlw	0
  8946  00187E                     u7506:
  8947                           
  8948                           ; Switch size 1, requested type "space"
  8949                           ; Number of cases is 2, Range of values is 0 to 1
  8950                           ; switch strategies available:
  8951                           ; Name         Instructions Cycles
  8952                           ; simple_byte            7     4 (average)
  8953                           ;	Chosen strategy is simple_byte
  8954  00187E  0A00               	xorlw	0	; case 0
  8955  001880  B4D8               	btfsc	status,2,c
  8956  001882  D7DC               	goto	l870
  8957  001884  0A01               	xorlw	1	; case 1
  8958  001886  B4D8               	btfsc	status,2,c
  8959  001888  D7C9               	goto	l866
  8960                           
  8961                           ;io.c: 203: switch(PORTDbits.RD3)
  8962  00188A  D02C               	goto	l874
  8963  00188C  503C               	movf	_Reed_Contact_RF_Counter,w,c
  8964  00188E  B4D8               	btfsc	status,2,c
  8965  001890  D002               	goto	l876
  8966                           
  8967                           ;io.c: 206: {
  8968                           ;io.c: 207: Reed_Contact_RF_Counter--;
  8969  001892  063C               	decf	_Reed_Contact_RF_Counter,f,c
  8970                           
  8971                           ;io.c: 209: }
  8972                           
  8973                           ;io.c: 208: break;
  8974  001894  D05F               	goto	l883
  8975  001896                     l876:
  8976                           
  8977                           ;io.c: 210: else {SETxAPIxVAL(29, 0);}
  8978  001896  0E00               	movlw	0
  8979  001898  6E1A               	movwf	SETxAPIxVAL@index+1,c
  8980  00189A  0E1D               	movlw	29
  8981  00189C  6E19               	movwf	SETxAPIxVAL@index,c
  8982  00189E  0E00               	movlw	0
  8983  0018A0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  8984  0018A2  0E00               	movlw	0
  8985  0018A4  6E1B               	movwf	SETxAPIxVAL@value,c
  8986  0018A6  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  8987                           
  8988                           ;io.c: 211: break;
  8989  0018AA  D054               	goto	l883
  8990  0018AC  503C               	movf	_Reed_Contact_RF_Counter,w,c
  8991  0018AE  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  8992  0018B0  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  8993  0018B2  0E00               	movlw	0
  8994  0018B4  6E14               	movwf	GETxAPIxVAL@index+1,c
  8995  0018B6  0E1B               	movlw	27
  8996  0018B8  6E13               	movwf	GETxAPIxVAL@index,c
  8997  0018BA  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  8998  0018BE  501F               	movf	??_Debounce_Inputs,w,c
  8999  0018C0  5C13               	subwf	?_GETxAPIxVAL,w,c
  9000  0018C2  5020               	movf	??_Debounce_Inputs+1,w,c
  9001  0018C4  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9002  0018C6  A0D8               	btfss	status,0,c
  9003  0018C8  D002               	goto	l880
  9004                           
  9005                           ;io.c: 214: {
  9006                           ;io.c: 215: Reed_Contact_RF_Counter++;
  9007  0018CA  2A3C               	incf	_Reed_Contact_RF_Counter,f,c
  9008                           
  9009                           ;io.c: 217: }
  9010                           
  9011                           ;io.c: 216: break;
  9012  0018CC  D043               	goto	l883
  9013  0018CE                     l880:
  9014                           
  9015                           ;io.c: 218: else {SETxAPIxVAL(29, 1);}
  9016  0018CE  0E00               	movlw	0
  9017  0018D0  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9018  0018D2  0E1D               	movlw	29
  9019  0018D4  6E19               	movwf	SETxAPIxVAL@index,c
  9020  0018D6  0E00               	movlw	0
  9021  0018D8  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9022  0018DA  0E01               	movlw	1
  9023  0018DC  6E1B               	movwf	SETxAPIxVAL@value,c
  9024  0018DE  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  9025                           
  9026                           ;io.c: 222: }
  9027                           
  9028                           ;io.c: 221: default : break;
  9029                           
  9030                           ;io.c: 219: break;
  9031  0018E2  D038               	goto	l883
  9032  0018E4                     l874:
  9033  0018E4  A683               	btfss	3971,3,c	;volatile
  9034  0018E6  D002               	goto	u7530
  9035  0018E8  0E01               	movlw	1
  9036  0018EA  D001               	goto	u7536
  9037  0018EC                     u7530:
  9038  0018EC  0E00               	movlw	0
  9039  0018EE                     u7536:
  9040                           
  9041                           ; Switch size 1, requested type "space"
  9042                           ; Number of cases is 2, Range of values is 0 to 1
  9043                           ; switch strategies available:
  9044                           ; Name         Instructions Cycles
  9045                           ; simple_byte            7     4 (average)
  9046                           ;	Chosen strategy is simple_byte
  9047  0018EE  0A00               	xorlw	0	; case 0
  9048  0018F0  B4D8               	btfsc	status,2,c
  9049  0018F2  D7DC               	goto	l879
  9050  0018F4  0A01               	xorlw	1	; case 1
  9051  0018F6  B4D8               	btfsc	status,2,c
  9052  0018F8  D7C9               	goto	l875
  9053                           
  9054                           ;io.c: 225: switch(PORTDbits.RD2)
  9055  0018FA  D02C               	goto	l883
  9056  0018FC  503B               	movf	_Reed_Contact_RB_Counter,w,c
  9057  0018FE  B4D8               	btfsc	status,2,c
  9058  001900  D002               	goto	l885
  9059                           
  9060                           ;io.c: 228: {
  9061                           ;io.c: 229: Reed_Contact_RB_Counter--;
  9062  001902  063B               	decf	_Reed_Contact_RB_Counter,f,c
  9063                           
  9064                           ;io.c: 231: }
  9065                           
  9066                           ;io.c: 230: break;
  9067  001904  D05F               	goto	l892
  9068  001906                     l885:
  9069                           
  9070                           ;io.c: 232: else {SETxAPIxVAL(28, 0);}
  9071  001906  0E00               	movlw	0
  9072  001908  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9073  00190A  0E1C               	movlw	28
  9074  00190C  6E19               	movwf	SETxAPIxVAL@index,c
  9075  00190E  0E00               	movlw	0
  9076  001910  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9077  001912  0E00               	movlw	0
  9078  001914  6E1B               	movwf	SETxAPIxVAL@value,c
  9079  001916  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  9080                           
  9081                           ;io.c: 233: break;
  9082  00191A  D054               	goto	l892
  9083  00191C  503B               	movf	_Reed_Contact_RB_Counter,w,c
  9084  00191E  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9085  001920  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9086  001922  0E00               	movlw	0
  9087  001924  6E14               	movwf	GETxAPIxVAL@index+1,c
  9088  001926  0E1B               	movlw	27
  9089  001928  6E13               	movwf	GETxAPIxVAL@index,c
  9090  00192A  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  9091  00192E  501F               	movf	??_Debounce_Inputs,w,c
  9092  001930  5C13               	subwf	?_GETxAPIxVAL,w,c
  9093  001932  5020               	movf	??_Debounce_Inputs+1,w,c
  9094  001934  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9095  001936  A0D8               	btfss	status,0,c
  9096  001938  D002               	goto	l889
  9097                           
  9098                           ;io.c: 236: {
  9099                           ;io.c: 237: Reed_Contact_RB_Counter++;
  9100  00193A  2A3B               	incf	_Reed_Contact_RB_Counter,f,c
  9101                           
  9102                           ;io.c: 239: }
  9103                           
  9104                           ;io.c: 238: break;
  9105  00193C  D043               	goto	l892
  9106  00193E                     l889:
  9107                           
  9108                           ;io.c: 240: else {SETxAPIxVAL(28, 1);}
  9109  00193E  0E00               	movlw	0
  9110  001940  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9111  001942  0E1C               	movlw	28
  9112  001944  6E19               	movwf	SETxAPIxVAL@index,c
  9113  001946  0E00               	movlw	0
  9114  001948  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9115  00194A  0E01               	movlw	1
  9116  00194C  6E1B               	movwf	SETxAPIxVAL@value,c
  9117  00194E  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  9118                           
  9119                           ;io.c: 244: }
  9120                           
  9121                           ;io.c: 243: default : break;
  9122                           
  9123                           ;io.c: 241: break;
  9124  001952  D038               	goto	l892
  9125  001954                     l883:
  9126  001954  A483               	btfss	3971,2,c	;volatile
  9127  001956  D002               	goto	u7560
  9128  001958  0E01               	movlw	1
  9129  00195A  D001               	goto	u7566
  9130  00195C                     u7560:
  9131  00195C  0E00               	movlw	0
  9132  00195E                     u7566:
  9133                           
  9134                           ; Switch size 1, requested type "space"
  9135                           ; Number of cases is 2, Range of values is 0 to 1
  9136                           ; switch strategies available:
  9137                           ; Name         Instructions Cycles
  9138                           ; simple_byte            7     4 (average)
  9139                           ;	Chosen strategy is simple_byte
  9140  00195E  0A00               	xorlw	0	; case 0
  9141  001960  B4D8               	btfsc	status,2,c
  9142  001962  D7DC               	goto	l888
  9143  001964  0A01               	xorlw	1	; case 1
  9144  001966  B4D8               	btfsc	status,2,c
  9145  001968  D7C9               	goto	l884
  9146                           
  9147                           ;io.c: 247: switch(!PORTBbits.RB0)
  9148  00196A  D02C               	goto	l892
  9149  00196C  5036               	movf	_Button_Contact_Counter_Start,w,c
  9150  00196E  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9151  001970  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9152  001972  0E00               	movlw	0
  9153  001974  6E14               	movwf	GETxAPIxVAL@index+1,c
  9154  001976  0E1B               	movlw	27
  9155  001978  6E13               	movwf	GETxAPIxVAL@index,c
  9156  00197A  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  9157  00197E  501F               	movf	??_Debounce_Inputs,w,c
  9158  001980  5C13               	subwf	?_GETxAPIxVAL,w,c
  9159  001982  5020               	movf	??_Debounce_Inputs+1,w,c
  9160  001984  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9161  001986  A0D8               	btfss	status,0,c
  9162  001988  D002               	goto	l894
  9163                           
  9164                           ;io.c: 250: {
  9165                           ;io.c: 251: Button_Contact_Counter_Start++;
  9166  00198A  2A36               	incf	_Button_Contact_Counter_Start,f,c
  9167                           
  9168                           ;io.c: 253: }
  9169                           
  9170                           ;io.c: 252: break;
  9171  00198C  D05A               	goto	l901
  9172  00198E                     l894:
  9173                           
  9174                           ;io.c: 254: else {SETxAPIxVAL(32, 1); }
  9175  00198E  0E00               	movlw	0
  9176  001990  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9177  001992  0E20               	movlw	32
  9178  001994  6E19               	movwf	SETxAPIxVAL@index,c
  9179  001996  0E00               	movlw	0
  9180  001998  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9181  00199A  0E01               	movlw	1
  9182  00199C  6E1B               	movwf	SETxAPIxVAL@value,c
  9183  00199E  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  9184                           
  9185                           ;io.c: 255: break;
  9186  0019A2  D04F               	goto	l901
  9187  0019A4  5036               	movf	_Button_Contact_Counter_Start,w,c
  9188  0019A6  B4D8               	btfsc	status,2,c
  9189  0019A8  D002               	goto	l898
  9190                           
  9191                           ;io.c: 258: {
  9192                           ;io.c: 259: Button_Contact_Counter_Start--;
  9193  0019AA  0636               	decf	_Button_Contact_Counter_Start,f,c
  9194                           
  9195                           ;io.c: 261: }
  9196                           
  9197                           ;io.c: 260: break;
  9198  0019AC  D04A               	goto	l901
  9199  0019AE                     l898:
  9200                           
  9201                           ;io.c: 262: else {SETxAPIxVAL(32, 0);}
  9202  0019AE  0E00               	movlw	0
  9203  0019B0  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9204  0019B2  0E20               	movlw	32
  9205  0019B4  6E19               	movwf	SETxAPIxVAL@index,c
  9206  0019B6  0E00               	movlw	0
  9207  0019B8  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9208  0019BA  0E00               	movlw	0
  9209  0019BC  6E1B               	movwf	SETxAPIxVAL@value,c
  9210  0019BE  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  9211                           
  9212                           ;io.c: 266: }
  9213                           
  9214                           ;io.c: 265: default : break;
  9215                           
  9216                           ;io.c: 263: break;
  9217  0019C2  D03F               	goto	l901
  9218  0019C4                     l892:
  9219  0019C4  B081               	btfsc	3969,0,c	;volatile
  9220  0019C6  D002               	goto	u7590
  9221  0019C8  0E01               	movlw	1
  9222  0019CA  D001               	goto	u7600
  9223  0019CC                     u7590:
  9224  0019CC  0E00               	movlw	0
  9225  0019CE                     u7600:
  9226  0019CE  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9227  0019D0  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9228                           
  9229                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9230                           ; Switch size 1, requested type "space"
  9231                           ; Number of cases is 1, Range of values is 0 to 0
  9232                           ; switch strategies available:
  9233                           ; Name         Instructions Cycles
  9234                           ; simple_byte            4     3 (average)
  9235                           ;	Chosen strategy is simple_byte
  9236  0019D2  5020               	movf	??_Debounce_Inputs+1,w,c
  9237  0019D4  0A00               	xorlw	0	; case 0
  9238  0019D6  A4D8               	btfss	status,2,c
  9239  0019D8  D034               	goto	l901
  9240                           
  9241                           ; Switch size 1, requested type "space"
  9242                           ; Number of cases is 2, Range of values is 0 to 1
  9243                           ; switch strategies available:
  9244                           ; Name         Instructions Cycles
  9245                           ; simple_byte            7     4 (average)
  9246                           ;	Chosen strategy is simple_byte
  9247  0019DA  501F               	movf	??_Debounce_Inputs,w,c
  9248  0019DC  0A00               	xorlw	0	; case 0
  9249  0019DE  B4D8               	btfsc	status,2,c
  9250  0019E0  D7E1               	goto	l897
  9251  0019E2  0A01               	xorlw	1	; case 1
  9252  0019E4  B4D8               	btfsc	status,2,c
  9253  0019E6  D7C2               	goto	l893
  9254                           
  9255                           ;io.c: 269: switch(!PORTDbits.RD7)
  9256  0019E8  D02C               	goto	l901
  9257  0019EA  5035               	movf	_Button_Contact_Counter_Stop,w,c
  9258  0019EC  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9259  0019EE  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9260  0019F0  0E00               	movlw	0
  9261  0019F2  6E14               	movwf	GETxAPIxVAL@index+1,c
  9262  0019F4  0E1B               	movlw	27
  9263  0019F6  6E13               	movwf	GETxAPIxVAL@index,c
  9264  0019F8  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  9265  0019FC  501F               	movf	??_Debounce_Inputs,w,c
  9266  0019FE  5C13               	subwf	?_GETxAPIxVAL,w,c
  9267  001A00  5020               	movf	??_Debounce_Inputs+1,w,c
  9268  001A02  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9269  001A04  A0D8               	btfss	status,0,c
  9270  001A06  D002               	goto	l903
  9271                           
  9272                           ;io.c: 272: {
  9273                           ;io.c: 273: Button_Contact_Counter_Stop++;
  9274  001A08  2A35               	incf	_Button_Contact_Counter_Stop,f,c
  9275                           
  9276                           ;io.c: 275: }
  9277                           
  9278                           ;io.c: 274: break;
  9279  001A0A  D05A               	goto	l910
  9280  001A0C                     l903:
  9281                           
  9282                           ;io.c: 276: else {SETxAPIxVAL(33, 1); }
  9283  001A0C  0E00               	movlw	0
  9284  001A0E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9285  001A10  0E21               	movlw	33
  9286  001A12  6E19               	movwf	SETxAPIxVAL@index,c
  9287  001A14  0E00               	movlw	0
  9288  001A16  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9289  001A18  0E01               	movlw	1
  9290  001A1A  6E1B               	movwf	SETxAPIxVAL@value,c
  9291  001A1C  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  9292                           
  9293                           ;io.c: 277: break;
  9294  001A20  D04F               	goto	l910
  9295  001A22  5035               	movf	_Button_Contact_Counter_Stop,w,c
  9296  001A24  B4D8               	btfsc	status,2,c
  9297  001A26  D002               	goto	l907
  9298                           
  9299                           ;io.c: 280: {
  9300                           ;io.c: 281: Button_Contact_Counter_Stop--;
  9301  001A28  0635               	decf	_Button_Contact_Counter_Stop,f,c
  9302                           
  9303                           ;io.c: 283: }
  9304                           
  9305                           ;io.c: 282: break;
  9306  001A2A  D04A               	goto	l910
  9307  001A2C                     l907:
  9308                           
  9309                           ;io.c: 284: else {SETxAPIxVAL(33, 0);}
  9310  001A2C  0E00               	movlw	0
  9311  001A2E  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9312  001A30  0E21               	movlw	33
  9313  001A32  6E19               	movwf	SETxAPIxVAL@index,c
  9314  001A34  0E00               	movlw	0
  9315  001A36  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9316  001A38  0E00               	movlw	0
  9317  001A3A  6E1B               	movwf	SETxAPIxVAL@value,c
  9318  001A3C  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  9319                           
  9320                           ;io.c: 288: }
  9321                           
  9322                           ;io.c: 287: default : break;
  9323                           
  9324                           ;io.c: 285: break;
  9325  001A40  D03F               	goto	l910
  9326  001A42                     l901:
  9327  001A42  BE83               	btfsc	3971,7,c	;volatile
  9328  001A44  D002               	goto	u7630
  9329  001A46  0E01               	movlw	1
  9330  001A48  D001               	goto	u7640
  9331  001A4A                     u7630:
  9332  001A4A  0E00               	movlw	0
  9333  001A4C                     u7640:
  9334  001A4C  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9335  001A4E  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9336                           
  9337                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9338                           ; Switch size 1, requested type "space"
  9339                           ; Number of cases is 1, Range of values is 0 to 0
  9340                           ; switch strategies available:
  9341                           ; Name         Instructions Cycles
  9342                           ; simple_byte            4     3 (average)
  9343                           ;	Chosen strategy is simple_byte
  9344  001A50  5020               	movf	??_Debounce_Inputs+1,w,c
  9345  001A52  0A00               	xorlw	0	; case 0
  9346  001A54  A4D8               	btfss	status,2,c
  9347  001A56  D034               	goto	l910
  9348                           
  9349                           ; Switch size 1, requested type "space"
  9350                           ; Number of cases is 2, Range of values is 0 to 1
  9351                           ; switch strategies available:
  9352                           ; Name         Instructions Cycles
  9353                           ; simple_byte            7     4 (average)
  9354                           ;	Chosen strategy is simple_byte
  9355  001A58  501F               	movf	??_Debounce_Inputs,w,c
  9356  001A5A  0A00               	xorlw	0	; case 0
  9357  001A5C  B4D8               	btfsc	status,2,c
  9358  001A5E  D7E1               	goto	l906
  9359  001A60  0A01               	xorlw	1	; case 1
  9360  001A62  B4D8               	btfsc	status,2,c
  9361  001A64  D7C2               	goto	l902
  9362                           
  9363                           ;io.c: 291: switch(!PORTBbits.RB1)
  9364  001A66  D02C               	goto	l910
  9365  001A68  5034               	movf	_Button_Contact_Counter_Middle,w,c
  9366  001A6A  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9367  001A6C  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9368  001A6E  0E00               	movlw	0
  9369  001A70  6E14               	movwf	GETxAPIxVAL@index+1,c
  9370  001A72  0E1B               	movlw	27
  9371  001A74  6E13               	movwf	GETxAPIxVAL@index,c
  9372  001A76  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  9373  001A7A  501F               	movf	??_Debounce_Inputs,w,c
  9374  001A7C  5C13               	subwf	?_GETxAPIxVAL,w,c
  9375  001A7E  5020               	movf	??_Debounce_Inputs+1,w,c
  9376  001A80  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9377  001A82  A0D8               	btfss	status,0,c
  9378  001A84  D002               	goto	l912
  9379                           
  9380                           ;io.c: 294: {
  9381                           ;io.c: 295: Button_Contact_Counter_Middle++;
  9382  001A86  2A34               	incf	_Button_Contact_Counter_Middle,f,c
  9383                           
  9384                           ;io.c: 297: }
  9385                           
  9386                           ;io.c: 296: break;
  9387  001A88  D05A               	goto	l919
  9388  001A8A                     l912:
  9389                           
  9390                           ;io.c: 298: else {SETxAPIxVAL(34, 1); }
  9391  001A8A  0E00               	movlw	0
  9392  001A8C  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9393  001A8E  0E22               	movlw	34
  9394  001A90  6E19               	movwf	SETxAPIxVAL@index,c
  9395  001A92  0E00               	movlw	0
  9396  001A94  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9397  001A96  0E01               	movlw	1
  9398  001A98  6E1B               	movwf	SETxAPIxVAL@value,c
  9399  001A9A  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  9400                           
  9401                           ;io.c: 299: break;
  9402  001A9E  D04F               	goto	l919
  9403  001AA0  5034               	movf	_Button_Contact_Counter_Middle,w,c
  9404  001AA2  B4D8               	btfsc	status,2,c
  9405  001AA4  D002               	goto	l916
  9406                           
  9407                           ;io.c: 302: {
  9408                           ;io.c: 303: Button_Contact_Counter_Middle--;
  9409  001AA6  0634               	decf	_Button_Contact_Counter_Middle,f,c
  9410                           
  9411                           ;io.c: 305: }
  9412                           
  9413                           ;io.c: 304: break;
  9414  001AA8  D04A               	goto	l919
  9415  001AAA                     l916:
  9416                           
  9417                           ;io.c: 306: else {SETxAPIxVAL(34, 0);}
  9418  001AAA  0E00               	movlw	0
  9419  001AAC  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9420  001AAE  0E22               	movlw	34
  9421  001AB0  6E19               	movwf	SETxAPIxVAL@index,c
  9422  001AB2  0E00               	movlw	0
  9423  001AB4  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9424  001AB6  0E00               	movlw	0
  9425  001AB8  6E1B               	movwf	SETxAPIxVAL@value,c
  9426  001ABA  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  9427                           
  9428                           ;io.c: 310: }
  9429                           
  9430                           ;io.c: 309: default : break;
  9431                           
  9432                           ;io.c: 307: break;
  9433  001ABE  D03F               	goto	l919
  9434  001AC0                     l910:
  9435  001AC0  B281               	btfsc	3969,1,c	;volatile
  9436  001AC2  D002               	goto	u7670
  9437  001AC4  0E01               	movlw	1
  9438  001AC6  D001               	goto	u7680
  9439  001AC8                     u7670:
  9440  001AC8  0E00               	movlw	0
  9441  001ACA                     u7680:
  9442  001ACA  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9443  001ACC  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9444                           
  9445                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9446                           ; Switch size 1, requested type "space"
  9447                           ; Number of cases is 1, Range of values is 0 to 0
  9448                           ; switch strategies available:
  9449                           ; Name         Instructions Cycles
  9450                           ; simple_byte            4     3 (average)
  9451                           ;	Chosen strategy is simple_byte
  9452  001ACE  5020               	movf	??_Debounce_Inputs+1,w,c
  9453  001AD0  0A00               	xorlw	0	; case 0
  9454  001AD2  A4D8               	btfss	status,2,c
  9455  001AD4  D034               	goto	l919
  9456                           
  9457                           ; Switch size 1, requested type "space"
  9458                           ; Number of cases is 2, Range of values is 0 to 1
  9459                           ; switch strategies available:
  9460                           ; Name         Instructions Cycles
  9461                           ; simple_byte            7     4 (average)
  9462                           ;	Chosen strategy is simple_byte
  9463  001AD6  501F               	movf	??_Debounce_Inputs,w,c
  9464  001AD8  0A00               	xorlw	0	; case 0
  9465  001ADA  B4D8               	btfsc	status,2,c
  9466  001ADC  D7E1               	goto	l915
  9467  001ADE  0A01               	xorlw	1	; case 1
  9468  001AE0  B4D8               	btfsc	status,2,c
  9469  001AE2  D7C2               	goto	l911
  9470                           
  9471                           ;io.c: 313: switch(!PORTBbits.RB5)
  9472  001AE4  D02C               	goto	l919
  9473  001AE6  5033               	movf	_Button_Contact_Counter_LB,w,c
  9474  001AE8  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9475  001AEA  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9476  001AEC  0E00               	movlw	0
  9477  001AEE  6E14               	movwf	GETxAPIxVAL@index+1,c
  9478  001AF0  0E1B               	movlw	27
  9479  001AF2  6E13               	movwf	GETxAPIxVAL@index,c
  9480  001AF4  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  9481  001AF8  501F               	movf	??_Debounce_Inputs,w,c
  9482  001AFA  5C13               	subwf	?_GETxAPIxVAL,w,c
  9483  001AFC  5020               	movf	??_Debounce_Inputs+1,w,c
  9484  001AFE  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9485  001B00  A0D8               	btfss	status,0,c
  9486  001B02  D002               	goto	l921
  9487                           
  9488                           ;io.c: 316: {
  9489                           ;io.c: 317: Button_Contact_Counter_LB++;
  9490  001B04  2A33               	incf	_Button_Contact_Counter_LB,f,c
  9491                           
  9492                           ;io.c: 319: }
  9493                           
  9494                           ;io.c: 318: break;
  9495  001B06  D05A               	goto	l928
  9496  001B08                     l921:
  9497                           
  9498                           ;io.c: 320: else {SETxAPIxVAL(35, 1); }
  9499  001B08  0E00               	movlw	0
  9500  001B0A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9501  001B0C  0E23               	movlw	35
  9502  001B0E  6E19               	movwf	SETxAPIxVAL@index,c
  9503  001B10  0E00               	movlw	0
  9504  001B12  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9505  001B14  0E01               	movlw	1
  9506  001B16  6E1B               	movwf	SETxAPIxVAL@value,c
  9507  001B18  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  9508                           
  9509                           ;io.c: 321: break;
  9510  001B1C  D04F               	goto	l928
  9511  001B1E  5033               	movf	_Button_Contact_Counter_LB,w,c
  9512  001B20  B4D8               	btfsc	status,2,c
  9513  001B22  D002               	goto	l925
  9514                           
  9515                           ;io.c: 324: {
  9516                           ;io.c: 325: Button_Contact_Counter_LB--;
  9517  001B24  0633               	decf	_Button_Contact_Counter_LB,f,c
  9518                           
  9519                           ;io.c: 327: }
  9520                           
  9521                           ;io.c: 326: break;
  9522  001B26  D04A               	goto	l928
  9523  001B28                     l925:
  9524                           
  9525                           ;io.c: 328: else {SETxAPIxVAL(35, 0);}
  9526  001B28  0E00               	movlw	0
  9527  001B2A  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9528  001B2C  0E23               	movlw	35
  9529  001B2E  6E19               	movwf	SETxAPIxVAL@index,c
  9530  001B30  0E00               	movlw	0
  9531  001B32  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9532  001B34  0E00               	movlw	0
  9533  001B36  6E1B               	movwf	SETxAPIxVAL@value,c
  9534  001B38  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  9535                           
  9536                           ;io.c: 332: }
  9537                           
  9538                           ;io.c: 331: default : break;
  9539                           
  9540                           ;io.c: 329: break;
  9541  001B3C  D03F               	goto	l928
  9542  001B3E                     l919:
  9543  001B3E  BA81               	btfsc	3969,5,c	;volatile
  9544  001B40  D002               	goto	u7710
  9545  001B42  0E01               	movlw	1
  9546  001B44  D001               	goto	u7720
  9547  001B46                     u7710:
  9548  001B46  0E00               	movlw	0
  9549  001B48                     u7720:
  9550  001B48  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9551  001B4A  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9552                           
  9553                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9554                           ; Switch size 1, requested type "space"
  9555                           ; Number of cases is 1, Range of values is 0 to 0
  9556                           ; switch strategies available:
  9557                           ; Name         Instructions Cycles
  9558                           ; simple_byte            4     3 (average)
  9559                           ;	Chosen strategy is simple_byte
  9560  001B4C  5020               	movf	??_Debounce_Inputs+1,w,c
  9561  001B4E  0A00               	xorlw	0	; case 0
  9562  001B50  A4D8               	btfss	status,2,c
  9563  001B52  D034               	goto	l928
  9564                           
  9565                           ; Switch size 1, requested type "space"
  9566                           ; Number of cases is 2, Range of values is 0 to 1
  9567                           ; switch strategies available:
  9568                           ; Name         Instructions Cycles
  9569                           ; simple_byte            7     4 (average)
  9570                           ;	Chosen strategy is simple_byte
  9571  001B54  501F               	movf	??_Debounce_Inputs,w,c
  9572  001B56  0A00               	xorlw	0	; case 0
  9573  001B58  B4D8               	btfsc	status,2,c
  9574  001B5A  D7E1               	goto	l924
  9575  001B5C  0A01               	xorlw	1	; case 1
  9576  001B5E  B4D8               	btfsc	status,2,c
  9577  001B60  D7C2               	goto	l920
  9578                           
  9579                           ;io.c: 335: switch(!PORTBbits.RB4)
  9580  001B62  D02C               	goto	l928
  9581  001B64  5032               	movf	_Button_Contact_Counter_LF,w,c
  9582  001B66  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9583  001B68  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9584  001B6A  0E00               	movlw	0
  9585  001B6C  6E14               	movwf	GETxAPIxVAL@index+1,c
  9586  001B6E  0E1B               	movlw	27
  9587  001B70  6E13               	movwf	GETxAPIxVAL@index,c
  9588  001B72  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  9589  001B76  501F               	movf	??_Debounce_Inputs,w,c
  9590  001B78  5C13               	subwf	?_GETxAPIxVAL,w,c
  9591  001B7A  5020               	movf	??_Debounce_Inputs+1,w,c
  9592  001B7C  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9593  001B7E  A0D8               	btfss	status,0,c
  9594  001B80  D002               	goto	l930
  9595                           
  9596                           ;io.c: 338: {
  9597                           ;io.c: 339: Button_Contact_Counter_LF++;
  9598  001B82  2A32               	incf	_Button_Contact_Counter_LF,f,c
  9599                           
  9600                           ;io.c: 341: }
  9601                           
  9602                           ;io.c: 340: break;
  9603  001B84  D05A               	goto	l937
  9604  001B86                     l930:
  9605                           
  9606                           ;io.c: 342: else {SETxAPIxVAL(36, 1); }
  9607  001B86  0E00               	movlw	0
  9608  001B88  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9609  001B8A  0E24               	movlw	36
  9610  001B8C  6E19               	movwf	SETxAPIxVAL@index,c
  9611  001B8E  0E00               	movlw	0
  9612  001B90  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9613  001B92  0E01               	movlw	1
  9614  001B94  6E1B               	movwf	SETxAPIxVAL@value,c
  9615  001B96  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  9616                           
  9617                           ;io.c: 343: break;
  9618  001B9A  D04F               	goto	l937
  9619  001B9C  5032               	movf	_Button_Contact_Counter_LF,w,c
  9620  001B9E  B4D8               	btfsc	status,2,c
  9621  001BA0  D002               	goto	l934
  9622                           
  9623                           ;io.c: 346: {
  9624                           ;io.c: 347: Button_Contact_Counter_LF--;
  9625  001BA2  0632               	decf	_Button_Contact_Counter_LF,f,c
  9626                           
  9627                           ;io.c: 349: }
  9628                           
  9629                           ;io.c: 348: break;
  9630  001BA4  D04A               	goto	l937
  9631  001BA6                     l934:
  9632                           
  9633                           ;io.c: 350: else {SETxAPIxVAL(36, 0);}
  9634  001BA6  0E00               	movlw	0
  9635  001BA8  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9636  001BAA  0E24               	movlw	36
  9637  001BAC  6E19               	movwf	SETxAPIxVAL@index,c
  9638  001BAE  0E00               	movlw	0
  9639  001BB0  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9640  001BB2  0E00               	movlw	0
  9641  001BB4  6E1B               	movwf	SETxAPIxVAL@value,c
  9642  001BB6  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  9643                           
  9644                           ;io.c: 354: }
  9645                           
  9646                           ;io.c: 353: default : break;
  9647                           
  9648                           ;io.c: 351: break;
  9649  001BBA  D03F               	goto	l937
  9650  001BBC                     l928:
  9651  001BBC  B881               	btfsc	3969,4,c	;volatile
  9652  001BBE  D002               	goto	u7750
  9653  001BC0  0E01               	movlw	1
  9654  001BC2  D001               	goto	u7760
  9655  001BC4                     u7750:
  9656  001BC4  0E00               	movlw	0
  9657  001BC6                     u7760:
  9658  001BC6  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9659  001BC8  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9660                           
  9661                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9662                           ; Switch size 1, requested type "space"
  9663                           ; Number of cases is 1, Range of values is 0 to 0
  9664                           ; switch strategies available:
  9665                           ; Name         Instructions Cycles
  9666                           ; simple_byte            4     3 (average)
  9667                           ;	Chosen strategy is simple_byte
  9668  001BCA  5020               	movf	??_Debounce_Inputs+1,w,c
  9669  001BCC  0A00               	xorlw	0	; case 0
  9670  001BCE  A4D8               	btfss	status,2,c
  9671  001BD0  D034               	goto	l937
  9672                           
  9673                           ; Switch size 1, requested type "space"
  9674                           ; Number of cases is 2, Range of values is 0 to 1
  9675                           ; switch strategies available:
  9676                           ; Name         Instructions Cycles
  9677                           ; simple_byte            7     4 (average)
  9678                           ;	Chosen strategy is simple_byte
  9679  001BD2  501F               	movf	??_Debounce_Inputs,w,c
  9680  001BD4  0A00               	xorlw	0	; case 0
  9681  001BD6  B4D8               	btfsc	status,2,c
  9682  001BD8  D7E1               	goto	l933
  9683  001BDA  0A01               	xorlw	1	; case 1
  9684  001BDC  B4D8               	btfsc	status,2,c
  9685  001BDE  D7C2               	goto	l929
  9686                           
  9687                           ;io.c: 357: switch(!PORTBbits.RB3)
  9688  001BE0  D02C               	goto	l937
  9689  001BE2  5031               	movf	_Button_Contact_Counter_RB,w,c
  9690  001BE4  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9691  001BE6  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9692  001BE8  0E00               	movlw	0
  9693  001BEA  6E14               	movwf	GETxAPIxVAL@index+1,c
  9694  001BEC  0E1B               	movlw	27
  9695  001BEE  6E13               	movwf	GETxAPIxVAL@index,c
  9696  001BF0  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  9697  001BF4  501F               	movf	??_Debounce_Inputs,w,c
  9698  001BF6  5C13               	subwf	?_GETxAPIxVAL,w,c
  9699  001BF8  5020               	movf	??_Debounce_Inputs+1,w,c
  9700  001BFA  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9701  001BFC  A0D8               	btfss	status,0,c
  9702  001BFE  D002               	goto	l939
  9703                           
  9704                           ;io.c: 360: {
  9705                           ;io.c: 361: Button_Contact_Counter_RB++;
  9706  001C00  2A31               	incf	_Button_Contact_Counter_RB,f,c
  9707                           
  9708                           ;io.c: 363: }
  9709                           
  9710                           ;io.c: 362: break;
  9711  001C02  D05A               	goto	l946
  9712  001C04                     l939:
  9713                           
  9714                           ;io.c: 364: else {SETxAPIxVAL(37, 1); }
  9715  001C04  0E00               	movlw	0
  9716  001C06  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9717  001C08  0E25               	movlw	37
  9718  001C0A  6E19               	movwf	SETxAPIxVAL@index,c
  9719  001C0C  0E00               	movlw	0
  9720  001C0E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9721  001C10  0E01               	movlw	1
  9722  001C12  6E1B               	movwf	SETxAPIxVAL@value,c
  9723  001C14  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  9724                           
  9725                           ;io.c: 365: break;
  9726  001C18  D04F               	goto	l946
  9727  001C1A  5031               	movf	_Button_Contact_Counter_RB,w,c
  9728  001C1C  B4D8               	btfsc	status,2,c
  9729  001C1E  D002               	goto	l943
  9730                           
  9731                           ;io.c: 368: {
  9732                           ;io.c: 369: Button_Contact_Counter_RB--;
  9733  001C20  0631               	decf	_Button_Contact_Counter_RB,f,c
  9734                           
  9735                           ;io.c: 371: }
  9736                           
  9737                           ;io.c: 370: break;
  9738  001C22  D04A               	goto	l946
  9739  001C24                     l943:
  9740                           
  9741                           ;io.c: 372: else {SETxAPIxVAL(37, 0);}
  9742  001C24  0E00               	movlw	0
  9743  001C26  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9744  001C28  0E25               	movlw	37
  9745  001C2A  6E19               	movwf	SETxAPIxVAL@index,c
  9746  001C2C  0E00               	movlw	0
  9747  001C2E  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9748  001C30  0E00               	movlw	0
  9749  001C32  6E1B               	movwf	SETxAPIxVAL@value,c
  9750  001C34  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  9751                           
  9752                           ;io.c: 376: }
  9753                           
  9754                           ;io.c: 375: default : break;
  9755                           
  9756                           ;io.c: 373: break;
  9757  001C38  D03F               	goto	l946
  9758  001C3A                     l937:
  9759  001C3A  B681               	btfsc	3969,3,c	;volatile
  9760  001C3C  D002               	goto	u7790
  9761  001C3E  0E01               	movlw	1
  9762  001C40  D001               	goto	u7800
  9763  001C42                     u7790:
  9764  001C42  0E00               	movlw	0
  9765  001C44                     u7800:
  9766  001C44  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9767  001C46  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9768                           
  9769                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9770                           ; Switch size 1, requested type "space"
  9771                           ; Number of cases is 1, Range of values is 0 to 0
  9772                           ; switch strategies available:
  9773                           ; Name         Instructions Cycles
  9774                           ; simple_byte            4     3 (average)
  9775                           ;	Chosen strategy is simple_byte
  9776  001C48  5020               	movf	??_Debounce_Inputs+1,w,c
  9777  001C4A  0A00               	xorlw	0	; case 0
  9778  001C4C  A4D8               	btfss	status,2,c
  9779  001C4E  D034               	goto	l946
  9780                           
  9781                           ; Switch size 1, requested type "space"
  9782                           ; Number of cases is 2, Range of values is 0 to 1
  9783                           ; switch strategies available:
  9784                           ; Name         Instructions Cycles
  9785                           ; simple_byte            7     4 (average)
  9786                           ;	Chosen strategy is simple_byte
  9787  001C50  501F               	movf	??_Debounce_Inputs,w,c
  9788  001C52  0A00               	xorlw	0	; case 0
  9789  001C54  B4D8               	btfsc	status,2,c
  9790  001C56  D7E1               	goto	l942
  9791  001C58  0A01               	xorlw	1	; case 1
  9792  001C5A  B4D8               	btfsc	status,2,c
  9793  001C5C  D7C2               	goto	l938
  9794                           
  9795                           ;io.c: 379: switch(!PORTBbits.RB2)
  9796  001C5E  D02C               	goto	l946
  9797  001C60  5030               	movf	_Button_Contact_Counter_RF,w,c
  9798  001C62  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9799  001C64  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9800  001C66  0E00               	movlw	0
  9801  001C68  6E14               	movwf	GETxAPIxVAL@index+1,c
  9802  001C6A  0E1B               	movlw	27
  9803  001C6C  6E13               	movwf	GETxAPIxVAL@index,c
  9804  001C6E  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  9805  001C72  501F               	movf	??_Debounce_Inputs,w,c
  9806  001C74  5C13               	subwf	?_GETxAPIxVAL,w,c
  9807  001C76  5020               	movf	??_Debounce_Inputs+1,w,c
  9808  001C78  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9809  001C7A  A0D8               	btfss	status,0,c
  9810  001C7C  D002               	goto	l948
  9811                           
  9812                           ;io.c: 382: {
  9813                           ;io.c: 383: Button_Contact_Counter_RF++;
  9814  001C7E  2A30               	incf	_Button_Contact_Counter_RF,f,c
  9815                           
  9816                           ;io.c: 385: }
  9817                           
  9818                           ;io.c: 384: break;
  9819  001C80  D05A               	goto	l955
  9820  001C82                     l948:
  9821                           
  9822                           ;io.c: 386: else {SETxAPIxVAL(38, 1); }
  9823  001C82  0E00               	movlw	0
  9824  001C84  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9825  001C86  0E26               	movlw	38
  9826  001C88  6E19               	movwf	SETxAPIxVAL@index,c
  9827  001C8A  0E00               	movlw	0
  9828  001C8C  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9829  001C8E  0E01               	movlw	1
  9830  001C90  6E1B               	movwf	SETxAPIxVAL@value,c
  9831  001C92  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  9832                           
  9833                           ;io.c: 387: break;
  9834  001C96  D04F               	goto	l955
  9835  001C98  5030               	movf	_Button_Contact_Counter_RF,w,c
  9836  001C9A  B4D8               	btfsc	status,2,c
  9837  001C9C  D002               	goto	l952
  9838                           
  9839                           ;io.c: 390: {
  9840                           ;io.c: 391: Button_Contact_Counter_RF--;
  9841  001C9E  0630               	decf	_Button_Contact_Counter_RF,f,c
  9842                           
  9843                           ;io.c: 393: }
  9844                           
  9845                           ;io.c: 392: break;
  9846  001CA0  D04A               	goto	l955
  9847  001CA2                     l952:
  9848                           
  9849                           ;io.c: 394: else {SETxAPIxVAL(38, 0);}
  9850  001CA2  0E00               	movlw	0
  9851  001CA4  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9852  001CA6  0E26               	movlw	38
  9853  001CA8  6E19               	movwf	SETxAPIxVAL@index,c
  9854  001CAA  0E00               	movlw	0
  9855  001CAC  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9856  001CAE  0E00               	movlw	0
  9857  001CB0  6E1B               	movwf	SETxAPIxVAL@value,c
  9858  001CB2  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  9859                           
  9860                           ;io.c: 398: }
  9861                           
  9862                           ;io.c: 397: default : break;
  9863                           
  9864                           ;io.c: 395: break;
  9865  001CB6  D03F               	goto	l955
  9866  001CB8                     l946:
  9867  001CB8  B481               	btfsc	3969,2,c	;volatile
  9868  001CBA  D002               	goto	u7830
  9869  001CBC  0E01               	movlw	1
  9870  001CBE  D001               	goto	u7840
  9871  001CC0                     u7830:
  9872  001CC0  0E00               	movlw	0
  9873  001CC2                     u7840:
  9874  001CC2  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9875  001CC4  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9876                           
  9877                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9878                           ; Switch size 1, requested type "space"
  9879                           ; Number of cases is 1, Range of values is 0 to 0
  9880                           ; switch strategies available:
  9881                           ; Name         Instructions Cycles
  9882                           ; simple_byte            4     3 (average)
  9883                           ;	Chosen strategy is simple_byte
  9884  001CC6  5020               	movf	??_Debounce_Inputs+1,w,c
  9885  001CC8  0A00               	xorlw	0	; case 0
  9886  001CCA  A4D8               	btfss	status,2,c
  9887  001CCC  D034               	goto	l955
  9888                           
  9889                           ; Switch size 1, requested type "space"
  9890                           ; Number of cases is 2, Range of values is 0 to 1
  9891                           ; switch strategies available:
  9892                           ; Name         Instructions Cycles
  9893                           ; simple_byte            7     4 (average)
  9894                           ;	Chosen strategy is simple_byte
  9895  001CCE  501F               	movf	??_Debounce_Inputs,w,c
  9896  001CD0  0A00               	xorlw	0	; case 0
  9897  001CD2  B4D8               	btfsc	status,2,c
  9898  001CD4  D7E1               	goto	l951
  9899  001CD6  0A01               	xorlw	1	; case 1
  9900  001CD8  B4D8               	btfsc	status,2,c
  9901  001CDA  D7C2               	goto	l947
  9902                           
  9903                           ;io.c: 401: switch(PORTCbits.RC1)
  9904  001CDC  D02C               	goto	l955
  9905  001CDE  503A               	movf	_Reed_Contact_LMU_Counter,w,c
  9906  001CE0  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
  9907  001CE2  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
  9908  001CE4  0E00               	movlw	0
  9909  001CE6  6E14               	movwf	GETxAPIxVAL@index+1,c
  9910  001CE8  0E1B               	movlw	27
  9911  001CEA  6E13               	movwf	GETxAPIxVAL@index,c
  9912  001CEC  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
  9913  001CF0  501F               	movf	??_Debounce_Inputs,w,c
  9914  001CF2  5C13               	subwf	?_GETxAPIxVAL,w,c
  9915  001CF4  5020               	movf	??_Debounce_Inputs+1,w,c
  9916  001CF6  5814               	subwfb	?_GETxAPIxVAL+1,w,c
  9917  001CF8  A0D8               	btfss	status,0,c
  9918  001CFA  D002               	goto	l957
  9919                           
  9920                           ;io.c: 404: {
  9921                           ;io.c: 405: Reed_Contact_LMU_Counter++;
  9922  001CFC  2A3A               	incf	_Reed_Contact_LMU_Counter,f,c
  9923                           
  9924                           ;io.c: 407: }
  9925                           
  9926                           ;io.c: 406: break;
  9927  001CFE  D053               	goto	l964
  9928  001D00                     l957:
  9929                           
  9930                           ;io.c: 408: else {SETxAPIxVAL(41, 1); }
  9931  001D00  0E00               	movlw	0
  9932  001D02  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9933  001D04  0E29               	movlw	41
  9934  001D06  6E19               	movwf	SETxAPIxVAL@index,c
  9935  001D08  0E00               	movlw	0
  9936  001D0A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9937  001D0C  0E01               	movlw	1
  9938  001D0E  6E1B               	movwf	SETxAPIxVAL@value,c
  9939  001D10  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  9940                           
  9941                           ;io.c: 409: break;
  9942  001D14  D048               	goto	l964
  9943  001D16  503A               	movf	_Reed_Contact_LMU_Counter,w,c
  9944  001D18  B4D8               	btfsc	status,2,c
  9945  001D1A  D002               	goto	l961
  9946                           
  9947                           ;io.c: 412: {
  9948                           ;io.c: 413: Reed_Contact_LMU_Counter--;
  9949  001D1C  063A               	decf	_Reed_Contact_LMU_Counter,f,c
  9950                           
  9951                           ;io.c: 415: }
  9952                           
  9953                           ;io.c: 414: break;
  9954  001D1E  D043               	goto	l964
  9955  001D20                     l961:
  9956                           
  9957                           ;io.c: 416: else {SETxAPIxVAL(41, 0);}
  9958  001D20  0E00               	movlw	0
  9959  001D22  6E1A               	movwf	SETxAPIxVAL@index+1,c
  9960  001D24  0E29               	movlw	41
  9961  001D26  6E19               	movwf	SETxAPIxVAL@index,c
  9962  001D28  0E00               	movlw	0
  9963  001D2A  6E1C               	movwf	SETxAPIxVAL@value+1,c
  9964  001D2C  0E00               	movlw	0
  9965  001D2E  6E1B               	movwf	SETxAPIxVAL@value,c
  9966  001D30  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
  9967                           
  9968                           ;io.c: 420: }
  9969                           
  9970                           ;io.c: 419: default : break;
  9971                           
  9972                           ;io.c: 417: break;
  9973  001D34  D038               	goto	l964
  9974  001D36                     l955:
  9975  001D36  A282               	btfss	3970,1,c	;volatile
  9976  001D38  D002               	goto	u7870
  9977  001D3A  0E01               	movlw	1
  9978  001D3C  D001               	goto	u7876
  9979  001D3E                     u7870:
  9980  001D3E  0E00               	movlw	0
  9981  001D40                     u7876:
  9982                           
  9983                           ; Switch size 1, requested type "space"
  9984                           ; Number of cases is 2, Range of values is 0 to 1
  9985                           ; switch strategies available:
  9986                           ; Name         Instructions Cycles
  9987                           ; simple_byte            7     4 (average)
  9988                           ;	Chosen strategy is simple_byte
  9989  001D40  0A00               	xorlw	0	; case 0
  9990  001D42  B4D8               	btfsc	status,2,c
  9991  001D44  D7CC               	goto	l956
  9992  001D46  0A01               	xorlw	1	; case 1
  9993  001D48  B4D8               	btfsc	status,2,c
  9994  001D4A  D7E5               	goto	l960
  9995                           
  9996                           ;io.c: 423: switch(PORTDbits.RD4)
  9997  001D4C  D02C               	goto	l964
  9998  001D4E  5039               	movf	_Reed_Contact_LMD_Counter,w,c
  9999  001D50  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
 10000  001D52  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
 10001  001D54  0E00               	movlw	0
 10002  001D56  6E14               	movwf	GETxAPIxVAL@index+1,c
 10003  001D58  0E1B               	movlw	27
 10004  001D5A  6E13               	movwf	GETxAPIxVAL@index,c
 10005  001D5C  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
 10006  001D60  501F               	movf	??_Debounce_Inputs,w,c
 10007  001D62  5C13               	subwf	?_GETxAPIxVAL,w,c
 10008  001D64  5020               	movf	??_Debounce_Inputs+1,w,c
 10009  001D66  5814               	subwfb	?_GETxAPIxVAL+1,w,c
 10010  001D68  A0D8               	btfss	status,0,c
 10011  001D6A  D002               	goto	l966
 10012                           
 10013                           ;io.c: 426: {
 10014                           ;io.c: 427: Reed_Contact_LMD_Counter++;
 10015  001D6C  2A39               	incf	_Reed_Contact_LMD_Counter,f,c
 10016                           
 10017                           ;io.c: 429: }
 10018                           
 10019                           ;io.c: 428: break;
 10020  001D6E  D053               	goto	l973
 10021  001D70                     l966:
 10022                           
 10023                           ;io.c: 430: else {SETxAPIxVAL(42, 1); }
 10024  001D70  0E00               	movlw	0
 10025  001D72  6E1A               	movwf	SETxAPIxVAL@index+1,c
 10026  001D74  0E2A               	movlw	42
 10027  001D76  6E19               	movwf	SETxAPIxVAL@index,c
 10028  001D78  0E00               	movlw	0
 10029  001D7A  6E1C               	movwf	SETxAPIxVAL@value+1,c
 10030  001D7C  0E01               	movlw	1
 10031  001D7E  6E1B               	movwf	SETxAPIxVAL@value,c
 10032  001D80  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
 10033                           
 10034                           ;io.c: 431: break;
 10035  001D84  D048               	goto	l973
 10036  001D86  5039               	movf	_Reed_Contact_LMD_Counter,w,c
 10037  001D88  B4D8               	btfsc	status,2,c
 10038  001D8A  D002               	goto	l970
 10039                           
 10040                           ;io.c: 434: {
 10041                           ;io.c: 435: Reed_Contact_LMD_Counter--;
 10042  001D8C  0639               	decf	_Reed_Contact_LMD_Counter,f,c
 10043                           
 10044                           ;io.c: 437: }
 10045                           
 10046                           ;io.c: 436: break;
 10047  001D8E  D043               	goto	l973
 10048  001D90                     l970:
 10049                           
 10050                           ;io.c: 438: else {SETxAPIxVAL(42, 0);}
 10051  001D90  0E00               	movlw	0
 10052  001D92  6E1A               	movwf	SETxAPIxVAL@index+1,c
 10053  001D94  0E2A               	movlw	42
 10054  001D96  6E19               	movwf	SETxAPIxVAL@index,c
 10055  001D98  0E00               	movlw	0
 10056  001D9A  6E1C               	movwf	SETxAPIxVAL@value+1,c
 10057  001D9C  0E00               	movlw	0
 10058  001D9E  6E1B               	movwf	SETxAPIxVAL@value,c
 10059  001DA0  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
 10060                           
 10061                           ;io.c: 442: }
 10062                           
 10063                           ;io.c: 441: default : break;
 10064                           
 10065                           ;io.c: 439: break;
 10066  001DA4  D038               	goto	l973
 10067  001DA6                     l964:
 10068  001DA6  A883               	btfss	3971,4,c	;volatile
 10069  001DA8  D002               	goto	u7900
 10070  001DAA  0E01               	movlw	1
 10071  001DAC  D001               	goto	u7906
 10072  001DAE                     u7900:
 10073  001DAE  0E00               	movlw	0
 10074  001DB0                     u7906:
 10075                           
 10076                           ; Switch size 1, requested type "space"
 10077                           ; Number of cases is 2, Range of values is 0 to 1
 10078                           ; switch strategies available:
 10079                           ; Name         Instructions Cycles
 10080                           ; simple_byte            7     4 (average)
 10081                           ;	Chosen strategy is simple_byte
 10082  001DB0  0A00               	xorlw	0	; case 0
 10083  001DB2  B4D8               	btfsc	status,2,c
 10084  001DB4  D7CC               	goto	l965
 10085  001DB6  0A01               	xorlw	1	; case 1
 10086  001DB8  B4D8               	btfsc	status,2,c
 10087  001DBA  D7E5               	goto	l969
 10088                           
 10089                           ;io.c: 445: switch(PORTEbits.RE1)
 10090  001DBC  D02C               	goto	l973
 10091  001DBE  5038               	movf	_Reed_Contact_RMU_Counter,w,c
 10092  001DC0  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
 10093  001DC2  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
 10094  001DC4  0E00               	movlw	0
 10095  001DC6  6E14               	movwf	GETxAPIxVAL@index+1,c
 10096  001DC8  0E1B               	movlw	27
 10097  001DCA  6E13               	movwf	GETxAPIxVAL@index,c
 10098  001DCC  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
 10099  001DD0  501F               	movf	??_Debounce_Inputs,w,c
 10100  001DD2  5C13               	subwf	?_GETxAPIxVAL,w,c
 10101  001DD4  5020               	movf	??_Debounce_Inputs+1,w,c
 10102  001DD6  5814               	subwfb	?_GETxAPIxVAL+1,w,c
 10103  001DD8  A0D8               	btfss	status,0,c
 10104  001DDA  D002               	goto	l975
 10105                           
 10106                           ;io.c: 448: {
 10107                           ;io.c: 449: Reed_Contact_RMU_Counter++;
 10108  001DDC  2A38               	incf	_Reed_Contact_RMU_Counter,f,c
 10109                           
 10110                           ;io.c: 451: }
 10111                           
 10112                           ;io.c: 450: break;
 10113  001DDE  D053               	goto	l982
 10114  001DE0                     l975:
 10115                           
 10116                           ;io.c: 452: else {SETxAPIxVAL(43, 1); }
 10117  001DE0  0E00               	movlw	0
 10118  001DE2  6E1A               	movwf	SETxAPIxVAL@index+1,c
 10119  001DE4  0E2B               	movlw	43
 10120  001DE6  6E19               	movwf	SETxAPIxVAL@index,c
 10121  001DE8  0E00               	movlw	0
 10122  001DEA  6E1C               	movwf	SETxAPIxVAL@value+1,c
 10123  001DEC  0E01               	movlw	1
 10124  001DEE  6E1B               	movwf	SETxAPIxVAL@value,c
 10125  001DF0  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
 10126                           
 10127                           ;io.c: 453: break;
 10128  001DF4  D048               	goto	l982
 10129  001DF6  5038               	movf	_Reed_Contact_RMU_Counter,w,c
 10130  001DF8  B4D8               	btfsc	status,2,c
 10131  001DFA  D002               	goto	l979
 10132                           
 10133                           ;io.c: 456: {
 10134                           ;io.c: 457: Reed_Contact_RMU_Counter--;
 10135  001DFC  0638               	decf	_Reed_Contact_RMU_Counter,f,c
 10136                           
 10137                           ;io.c: 459: }
 10138                           
 10139                           ;io.c: 458: break;
 10140  001DFE  D043               	goto	l982
 10141  001E00                     l979:
 10142                           
 10143                           ;io.c: 460: else {SETxAPIxVAL(43, 0);}
 10144  001E00  0E00               	movlw	0
 10145  001E02  6E1A               	movwf	SETxAPIxVAL@index+1,c
 10146  001E04  0E2B               	movlw	43
 10147  001E06  6E19               	movwf	SETxAPIxVAL@index,c
 10148  001E08  0E00               	movlw	0
 10149  001E0A  6E1C               	movwf	SETxAPIxVAL@value+1,c
 10150  001E0C  0E00               	movlw	0
 10151  001E0E  6E1B               	movwf	SETxAPIxVAL@value,c
 10152  001E10  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
 10153                           
 10154                           ;io.c: 464: }
 10155                           
 10156                           ;io.c: 463: default : break;
 10157                           
 10158                           ;io.c: 461: break;
 10159  001E14  D038               	goto	l982
 10160  001E16                     l973:
 10161  001E16  A284               	btfss	3972,1,c	;volatile
 10162  001E18  D002               	goto	u7930
 10163  001E1A  0E01               	movlw	1
 10164  001E1C  D001               	goto	u7936
 10165  001E1E                     u7930:
 10166  001E1E  0E00               	movlw	0
 10167  001E20                     u7936:
 10168                           
 10169                           ; Switch size 1, requested type "space"
 10170                           ; Number of cases is 2, Range of values is 0 to 1
 10171                           ; switch strategies available:
 10172                           ; Name         Instructions Cycles
 10173                           ; simple_byte            7     4 (average)
 10174                           ;	Chosen strategy is simple_byte
 10175  001E20  0A00               	xorlw	0	; case 0
 10176  001E22  B4D8               	btfsc	status,2,c
 10177  001E24  D7CC               	goto	l974
 10178  001E26  0A01               	xorlw	1	; case 1
 10179  001E28  B4D8               	btfsc	status,2,c
 10180  001E2A  D7E5               	goto	l978
 10181                           
 10182                           ;io.c: 467: switch(PORTEbits.RE0)
 10183  001E2C  D02C               	goto	l982
 10184  001E2E  5037               	movf	_Reed_Contact_RMD_Counter,w,c
 10185  001E30  6E1F               	movwf	??_Debounce_Inputs& (0+255),c
 10186  001E32  6A20               	clrf	(??_Debounce_Inputs+1)& (0+255),c
 10187  001E34  0E00               	movlw	0
 10188  001E36  6E14               	movwf	GETxAPIxVAL@index+1,c
 10189  001E38  0E1B               	movlw	27
 10190  001E3A  6E13               	movwf	GETxAPIxVAL@index,c
 10191  001E3C  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
 10192  001E40  501F               	movf	??_Debounce_Inputs,w,c
 10193  001E42  5C13               	subwf	?_GETxAPIxVAL,w,c
 10194  001E44  5020               	movf	??_Debounce_Inputs+1,w,c
 10195  001E46  5814               	subwfb	?_GETxAPIxVAL+1,w,c
 10196  001E48  A0D8               	btfss	status,0,c
 10197  001E4A  D002               	goto	l984
 10198                           
 10199                           ;io.c: 470: {
 10200                           ;io.c: 471: Reed_Contact_RMD_Counter++;
 10201  001E4C  2A37               	incf	_Reed_Contact_RMD_Counter,f,c
 10202                           
 10203                           ;io.c: 473: }
 10204                           
 10205                           ;io.c: 472: break;
 10206  001E4E  0012               	return	
 10207  001E50                     l984:
 10208                           
 10209                           ;io.c: 474: else {SETxAPIxVAL(44, 1); }
 10210  001E50  0E00               	movlw	0
 10211  001E52  6E1A               	movwf	SETxAPIxVAL@index+1,c
 10212  001E54  0E2C               	movlw	44
 10213  001E56  6E19               	movwf	SETxAPIxVAL@index,c
 10214  001E58  0E00               	movlw	0
 10215  001E5A  6E1C               	movwf	SETxAPIxVAL@value+1,c
 10216  001E5C  0E01               	movlw	1
 10217  001E5E  6E1B               	movwf	SETxAPIxVAL@value,c
 10218  001E60  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
 10219                           
 10220                           ;io.c: 475: break;
 10221  001E64  0012               	return	
 10222  001E66  5037               	movf	_Reed_Contact_RMD_Counter,w,c
 10223  001E68  B4D8               	btfsc	status,2,c
 10224  001E6A  D002               	goto	l988
 10225                           
 10226                           ;io.c: 478: {
 10227                           ;io.c: 479: Reed_Contact_RMD_Counter--;
 10228  001E6C  0637               	decf	_Reed_Contact_RMD_Counter,f,c
 10229                           
 10230                           ;io.c: 481: }
 10231                           
 10232                           ;io.c: 480: break;
 10233  001E6E  0012               	return	
 10234  001E70                     l988:
 10235                           
 10236                           ;io.c: 482: else {SETxAPIxVAL(44, 0);}
 10237  001E70  0E00               	movlw	0
 10238  001E72  6E1A               	movwf	SETxAPIxVAL@index+1,c
 10239  001E74  0E2C               	movlw	44
 10240  001E76  6E19               	movwf	SETxAPIxVAL@index,c
 10241  001E78  0E00               	movlw	0
 10242  001E7A  6E1C               	movwf	SETxAPIxVAL@value+1,c
 10243  001E7C  0E00               	movlw	0
 10244  001E7E  6E1B               	movwf	SETxAPIxVAL@value,c
 10245  001E80  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
 10246                           
 10247                           ;io.c: 486: }
 10248                           
 10249                           ;io.c: 485: default : break;
 10250                           
 10251                           ;io.c: 483: break;
 10252  001E84  0012               	return	
 10253  001E86                     l982:
 10254  001E86  A084               	btfss	3972,0,c	;volatile
 10255  001E88  D002               	goto	u7960
 10256  001E8A  0E01               	movlw	1
 10257  001E8C  D001               	goto	u7966
 10258  001E8E                     u7960:
 10259  001E8E  0E00               	movlw	0
 10260  001E90                     u7966:
 10261                           
 10262                           ; Switch size 1, requested type "space"
 10263                           ; Number of cases is 2, Range of values is 0 to 1
 10264                           ; switch strategies available:
 10265                           ; Name         Instructions Cycles
 10266                           ; simple_byte            7     4 (average)
 10267                           ;	Chosen strategy is simple_byte
 10268  001E90  0A00               	xorlw	0	; case 0
 10269  001E92  B4D8               	btfsc	status,2,c
 10270  001E94  D7CC               	goto	l983
 10271  001E96  0A01               	xorlw	1	; case 1
 10272  001E98  A4D8               	btfss	status,2,c
 10273  001E9A  0012               	return	
 10274  001E9C  D7E4               	goto	l987
 10275  001E9E                     __end_of_Debounce_Inputs:
 10276                           	opt stack 0
 10277                           tblptru	equ	0xFF8
 10278                           tblptrh	equ	0xFF7
 10279                           tblptrl	equ	0xFF6
 10280                           tablat	equ	0xFF5
 10281                           prodh	equ	0xFF4
 10282                           prodl	equ	0xFF3
 10283                           intcon	equ	0xFF2
 10284                           postinc0	equ	0xFEE
 10285                           wreg	equ	0xFE8
 10286                           postinc1	equ	0xFE6
 10287                           postdec1	equ	0xFE5
 10288                           fsr1h	equ	0xFE2
 10289                           fsr1l	equ	0xFE1
 10290                           postinc2	equ	0xFDE
 10291                           postdec2	equ	0xFDD
 10292                           fsr2h	equ	0xFDA
 10293                           fsr2l	equ	0xFD9
 10294                           status	equ	0xFD8
 10295                           
 10296 ;; *************** function _SetDCPWM1 *****************
 10297 ;; Defined at:
 10298 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\pic18\plib\PWM\pw1setdc.c"
 10299 ;; Parameters:    Size  Location     Type
 10300 ;;  dutycycle       2   20[COMRAM] unsigned int 
 10301 ;; Auto vars:     Size  Location     Type
 10302 ;;  DCycle          2   24[COMRAM] struct PWMDC
 10303 ;; Return value:  Size  Location     Type
 10304 ;;                  1    wreg      void 
 10305 ;; Registers used:
 10306 ;;		wreg, status,2, status,0
 10307 ;; Tracked objects:
 10308 ;;		On entry : 0/0
 10309 ;;		On exit  : 0/0
 10310 ;;		Unchanged: 0/0
 10311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10312 ;;      Params:         2       0       0       0       0       0       0       0       0
 10313 ;;      Locals:         2       0       0       0       0       0       0       0       0
 10314 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10315 ;;      Totals:         6       0       0       0       0       0       0       0       0
 10316 ;;Total ram usage:        6 bytes
 10317 ;; Hardware stack levels used:    1
 10318 ;; Hardware stack levels required when called:    3
 10319 ;; This function calls:
 10320 ;;		Nothing
 10321 ;; This function is called by:
 10322 ;;		_Debounce_Inputs
 10323 ;; This function uses a non-reentrant model
 10324 ;;
 10325                           
 10326                           	psect	text18
 10327  00407C                     __ptext18:
 10328                           	opt stack 0
 10329  00407C                     _SetDCPWM1:
 10330                           	opt stack 25
 10331                           
 10332                           ;incstack = 0
 10333  00407C  C015  F017         	movff	SetDCPWM1@dutycycle,??_SetDCPWM1
 10334  004080  C016  F018         	movff	SetDCPWM1@dutycycle+1,??_SetDCPWM1+1
 10335  004084  0E06               	movlw	6
 10336  004086                     u4125:
 10337  004086  90D8               	bcf	status,0,c
 10338  004088  3617               	rlcf	??_SetDCPWM1,f,c
 10339  00408A  3618               	rlcf	??_SetDCPWM1+1,f,c
 10340  00408C  2EE8               	decfsz	wreg,f,c
 10341  00408E  D7FB               	goto	u4125
 10342  004090  C017  F019         	movff	??_SetDCPWM1,SetDCPWM1@DCycle
 10343  004094  C018  F01A         	movff	??_SetDCPWM1+1,SetDCPWM1@DCycle+1
 10344  004098  C01A  FFBE         	movff	SetDCPWM1@DCycle+1,4030	;volatile
 10345  00409C  C019  F017         	movff	SetDCPWM1@DCycle,??_SetDCPWM1
 10346  0040A0  90D8               	bcf	status,0,c
 10347  0040A2  3217               	rrcf	??_SetDCPWM1,f,c
 10348  0040A4  90D8               	bcf	status,0,c
 10349  0040A6  3217               	rrcf	??_SetDCPWM1,f,c
 10350  0040A8  0E30               	movlw	48
 10351  0040AA  1617               	andwf	??_SetDCPWM1,f,c
 10352  0040AC  50BD               	movf	4029,w,c	;volatile
 10353  0040AE  0BCF               	andlw	207
 10354  0040B0  1017               	iorwf	??_SetDCPWM1,w,c
 10355  0040B2  6EBD               	movwf	4029,c	;volatile
 10356  0040B4  0012               	return		;funcret
 10357  0040B6                     __end_of_SetDCPWM1:
 10358                           	opt stack 0
 10359                           tblptru	equ	0xFF8
 10360                           tblptrh	equ	0xFF7
 10361                           tblptrl	equ	0xFF6
 10362                           tablat	equ	0xFF5
 10363                           prodh	equ	0xFF4
 10364                           prodl	equ	0xFF3
 10365                           intcon	equ	0xFF2
 10366                           postinc0	equ	0xFEE
 10367                           wreg	equ	0xFE8
 10368                           postinc1	equ	0xFE6
 10369                           postdec1	equ	0xFE5
 10370                           fsr1h	equ	0xFE2
 10371                           fsr1l	equ	0xFE1
 10372                           postinc2	equ	0xFDE
 10373                           postdec2	equ	0xFDD
 10374                           fsr2h	equ	0xFDA
 10375                           fsr2l	equ	0xFD9
 10376                           status	equ	0xFD8
 10377                           
 10378 ;; *************** function _READxRECEIVEDxMESSAGE *****************
 10379 ;; Defined at:
 10380 ;;		line 37 in file "../terminal.c"
 10381 ;; Parameters:    Size  Location     Type
 10382 ;;		None
 10383 ;; Auto vars:     Size  Location     Type
 10384 ;;		None
 10385 ;; Return value:  Size  Location     Type
 10386 ;;                  1    wreg      void 
 10387 ;; Registers used:
 10388 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10389 ;; Tracked objects:
 10390 ;;		On entry : 0/0
 10391 ;;		On exit  : 0/0
 10392 ;;		Unchanged: 0/0
 10393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10394 ;;      Params:         0       0       0       0       0       0       0       0       0
 10395 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10396 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10397 ;;      Totals:         0       4       0       0       0       0       0       0       0
 10398 ;;Total ram usage:        4 bytes
 10399 ;; Hardware stack levels used:    1
 10400 ;; Hardware stack levels required when called:    6
 10401 ;; This function calls:
 10402 ;;		_EUSART1_Read
 10403 ;;		_TranslateMessage
 10404 ;;		_printf
 10405 ;; This function is called by:
 10406 ;;		_main
 10407 ;; This function uses a non-reentrant model
 10408 ;;
 10409                           
 10410                           	psect	text19
 10411  00347E                     __ptext19:
 10412                           	opt stack 0
 10413  00347E                     _READxRECEIVEDxMESSAGE:
 10414                           	opt stack 24
 10415                           
 10416                           ;terminal.c: 39: if ((eusart1RxCount) > 0){
 10417                           
 10418                           ;incstack = 0
 10419  00347E  503F               	movf	_eusart1RxCount,w,c	;volatile
 10420  003480  B4D8               	btfsc	status,2,c
 10421  003482  D07B               	goto	l622
 10422                           
 10423                           ;terminal.c: 42: Received_Data = EUSART1_Read();
 10424  003484  EC5B  F020         	call	_EUSART1_Read	;wreg free
 10425  003488  0100               	movlb	0	; () banked
 10426  00348A  6F84               	movwf	_Received_Data& (0+255),b
 10427                           
 10428                           ;terminal.c: 44: switch (RxSwitch){
 10429  00348C  D06B               	goto	l616
 10430  00348E                     
 10431                           ; BSR set to: 0
 10432                           ;terminal.c: 46: pData = &Data[0];
 10433                           
 10434                           ; BSR set to: 0
 10435  00348E  0E8E               	movlw	low _Data
 10436  003490  6F78               	movwf	_pData& (0+255),b
 10437  003492  0E00               	movlw	high _Data
 10438  003494  6F79               	movwf	(_pData+1)& (0+255),b
 10439                           
 10440                           ; BSR set to: 0
 10441                           ;terminal.c: 47: pLen = &Data[DataLen - 1];
 10442  003496  0EFF               	movlw	255
 10443  003498  6FBA               	movwf	??_READxRECEIVEDxMESSAGE& (0+255),b
 10444  00349A  0EFF               	movlw	255
 10445  00349C  6FBB               	movwf	(??_READxRECEIVEDxMESSAGE+1)& (0+255),b
 10446  00349E  0E2F               	movlw	low _DataLen
 10447  0034A0  6EF6               	movwf	tblptrl,c
 10448  0034A2                     	if	1	;There is more than 1 active tblptr byte
 10449  0034A2  0E08               	movlw	high _DataLen
 10450  0034A4  6EF7               	movwf	tblptrh,c
 10451  0034A6                     	endif
 10452  0034A6                     	if	0	;There are less than 3 active tblptr bytes
 10453  0034A6                     	endif
 10454  0034A6  0008               	tblrd		*
 10455  0034A8  50F5               	movf	tablat,w,c
 10456  0034AA  6FBC               	movwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),b
 10457  0034AC  6BBD               	clrf	(??_READxRECEIVEDxMESSAGE+3)& (0+255),b
 10458  0034AE  51BA               	movf	??_READxRECEIVEDxMESSAGE& (0+255),w,b
 10459  0034B0  27BC               	addwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),f,b
 10460  0034B2  51BB               	movf	(??_READxRECEIVEDxMESSAGE+1)& (0+255),w,b
 10461  0034B4  23BD               	addwfc	(??_READxRECEIVEDxMESSAGE+3)& (0+255),f,b
 10462  0034B6  0E8E               	movlw	low _Data
 10463  0034B8  25BC               	addwf	(??_READxRECEIVEDxMESSAGE+2)& (0+255),w,b
 10464  0034BA  6F76               	movwf	_pLen& (0+255),b
 10465  0034BC  0E00               	movlw	high _Data
 10466  0034BE  21BD               	addwfc	(??_READxRECEIVEDxMESSAGE+3)& (0+255),w,b
 10467  0034C0  6F77               	movwf	(_pLen+1)& (0+255),b
 10468                           
 10469                           ; BSR set to: 0
 10470                           ;terminal.c: 48: if (Received_Data == 's' || Received_Data == 'g'){
 10471  0034C2  0E73               	movlw	115
 10472  0034C4  1984               	xorwf	_Received_Data& (0+255),w,b
 10473  0034C6  B4D8               	btfsc	status,2,c
 10474  0034C8  D004               	goto	u9530
 10475                           
 10476                           ; BSR set to: 0
 10477  0034CA  0E67               	movlw	103
 10478  0034CC  1984               	xorwf	_Received_Data& (0+255),w,b
 10479  0034CE  A4D8               	btfss	status,2,c
 10480  0034D0  D00A               	goto	l618
 10481  0034D2                     u9530:
 10482                           
 10483                           ; BSR set to: 0
 10484                           ;terminal.c: 49: *pData = Received_Data;
 10485                           
 10486                           ; BSR set to: 0
 10487  0034D2  C078  FFD9         	movff	_pData,fsr2l
 10488  0034D6  C079  FFDA         	movff	_pData+1,fsr2h
 10489  0034DA  C084  FFDF         	movff	_Received_Data,indf2
 10490                           
 10491                           ; BSR set to: 0
 10492                           ;terminal.c: 50: *pData++;
 10493  0034DE  4B78               	infsnz	_pData& (0+255),f,b
 10494  0034E0  2B79               	incf	(_pData+1)& (0+255),f,b
 10495                           
 10496                           ; BSR set to: 0
 10497                           ;terminal.c: 51: RxSwitch = 1;
 10498  0034E2  0E01               	movlw	1
 10499  0034E4  D03D               	goto	L95
 10500  0034E6                     l618:
 10501                           
 10502                           ; BSR set to: 0
 10503                           ;terminal.c: 53: else{
 10504                           ;terminal.c: 54: RxSwitch = 0;
 10505                           
 10506                           ; BSR set to: 0
 10507  0034E6  0E00               	movlw	0
 10508  0034E8  D03B               	goto	L95
 10509  0034EA                     
 10510                           ; BSR set to: 0
 10511                           ;terminal.c: 59: if (Received_Data == 'x'){
 10512                           
 10513                           ; BSR set to: 0
 10514  0034EA  0E78               	movlw	120
 10515  0034EC  1984               	xorwf	_Received_Data& (0+255),w,b
 10516  0034EE  A4D8               	btfss	status,2,c
 10517  0034F0  D7FA               	goto	l618
 10518                           
 10519                           ; BSR set to: 0
 10520                           ;terminal.c: 60: *pData = Received_Data;
 10521  0034F2  C078  FFD9         	movff	_pData,fsr2l
 10522  0034F6  C079  FFDA         	movff	_pData+1,fsr2h
 10523  0034FA  C084  FFDF         	movff	_Received_Data,indf2
 10524  0034FE  D02D               	goto	l632
 10525  003500                     
 10526                           ; BSR set to: 0
 10527                           ;terminal.c: 70: if (Received_Data == 'G'){
 10528                           
 10529                           ; BSR set to: 0
 10530  003500  0E47               	movlw	71
 10531  003502  1984               	xorwf	_Received_Data& (0+255),w,b
 10532  003504  B4D8               	btfsc	status,2,c
 10533  003506  D009               	goto	l628
 10534  003508  D013               	goto	l627
 10535  00350A                     
 10536                           ; BSR set to: 0
 10537                           ;terminal.c: 74: *pData = '\0';
 10538                           
 10539                           ; BSR set to: 0
 10540  00350A  C078  FFD9         	movff	_pData,fsr2l
 10541  00350E  C079  FFDA         	movff	_pData+1,fsr2h
 10542  003512  0E00               	movlw	0
 10543  003514  6EDF               	movwf	indf2,c
 10544                           
 10545                           ; BSR set to: 0
 10546                           ;terminal.c: 75: pData++;
 10547  003516  4B78               	infsnz	_pData& (0+255),f,b
 10548  003518  2B79               	incf	(_pData+1)& (0+255),f,b
 10549  00351A                     l628:
 10550                           
 10551                           ; BSR set to: 0
 10552                           
 10553                           ; BSR set to: 0
 10554  00351A  5176               	movf	_pLen& (0+255),w,b
 10555  00351C  5D78               	subwf	_pData& (0+255),w,b
 10556  00351E  5177               	movf	(_pLen+1)& (0+255),w,b
 10557  003520  5979               	subwfb	(_pData+1)& (0+255),w,b
 10558  003522  A0D8               	btfss	status,0,c
 10559  003524  D7F2               	goto	l629
 10560                           
 10561                           ; BSR set to: 0
 10562                           ;terminal.c: 76: }
 10563                           ;terminal.c: 78: RxSwitch = 3;
 10564                           
 10565                           ; BSR set to: 0
 10566  003526  0E03               	movlw	3
 10567  003528  6F83               	movwf	_RxSwitch& (0+255),b
 10568                           
 10569                           ;terminal.c: 79: Message_To_Translate = 1;
 10570  00352A  0E01               	movlw	1
 10571  00352C  6F82               	movwf	_Message_To_Translate& (0+255),b
 10572                           
 10573                           ;terminal.c: 80: }
 10574  00352E  D025               	goto	l622
 10575  003530                     l627:
 10576                           
 10577                           ; BSR set to: 0
 10578                           ;terminal.c: 81: else{
 10579                           ;terminal.c: 82: *pData = Received_Data;
 10580                           
 10581                           ; BSR set to: 0
 10582  003530  C078  FFD9         	movff	_pData,fsr2l
 10583  003534  C079  FFDA         	movff	_pData+1,fsr2h
 10584  003538  C084  FFDF         	movff	_Received_Data,indf2
 10585                           
 10586                           ; BSR set to: 0
 10587                           ;terminal.c: 83: if (pData > pLen){
 10588  00353C  5178               	movf	_pData& (0+255),w,b
 10589  00353E  5D76               	subwf	_pLen& (0+255),w,b
 10590  003540  5179               	movf	(_pData+1)& (0+255),w,b
 10591  003542  5977               	subwfb	(_pLen+1)& (0+255),w,b
 10592  003544  B0D8               	btfsc	status,0,c
 10593  003546  D009               	goto	l632
 10594                           
 10595                           ; BSR set to: 0
 10596                           ;terminal.c: 84: printf("E#10\r\n");
 10597  003548  0E3A               	movlw	low STR_1
 10598  00354A  6FAD               	movwf	printf@f& (0+255),b
 10599  00354C  0E08               	movlw	high STR_1
 10600  00354E  6FAE               	movwf	(printf@f+1)& (0+255),b
 10601  003550  EC96  F018         	call	_printf	;wreg free
 10602                           
 10603                           ;terminal.c: 85: RxSwitch = 0;
 10604  003554  0E00               	movlw	0
 10605  003556  0100               	movlb	0	; () banked
 10606  003558  D003               	goto	L95
 10607  00355A                     l632:
 10608                           
 10609                           ; BSR set to: 0
 10610                           ;terminal.c: 87: else{
 10611                           ;terminal.c: 88: pData++;
 10612                           
 10613                           ; BSR set to: 0
 10614  00355A  4B78               	infsnz	_pData& (0+255),f,b
 10615  00355C  2B79               	incf	(_pData+1)& (0+255),f,b
 10616                           
 10617                           ; BSR set to: 0
 10618                           ;terminal.c: 89: RxSwitch = 2;
 10619  00355E  0E02               	movlw	2
 10620  003560                     L95:
 10621  003560  6F83               	movwf	_RxSwitch& (0+255),b
 10622                           
 10623                           ; BSR set to: 0
 10624                           ;terminal.c: 99: }
 10625                           
 10626                           ; BSR set to: 0
 10627                           ;terminal.c: 98: break;
 10628                           
 10629                           ;terminal.c: 97: default :
 10630                           
 10631                           ; BSR set to: 0
 10632                           ;terminal.c: 95: break;
 10633                           
 10634                           ;terminal.c: 94: case 3 :
 10635                           
 10636                           ; BSR set to: 0
 10637                           ;terminal.c: 90: }
 10638                           ;terminal.c: 91: }
 10639                           ;terminal.c: 92: break;
 10640                           
 10641                           ; BSR set to: 0
 10642  003562  D00B               	goto	l622
 10643  003564                     l616:
 10644                           
 10645                           ; BSR set to: 0
 10646                           
 10647                           ; BSR set to: 0
 10648  003564  5183               	movf	_RxSwitch& (0+255),w,b
 10649                           
 10650                           ; Switch size 1, requested type "space"
 10651                           ; Number of cases is 4, Range of values is 0 to 3
 10652                           ; switch strategies available:
 10653                           ; Name         Instructions Cycles
 10654                           ; simple_byte           13     7 (average)
 10655                           ;	Chosen strategy is simple_byte
 10656  003566  0A00               	xorlw	0	; case 0
 10657  003568  B4D8               	btfsc	status,2,c
 10658  00356A  D791               	goto	l617
 10659  00356C  0A01               	xorlw	1	; case 1
 10660  00356E  B4D8               	btfsc	status,2,c
 10661  003570  D7BC               	goto	l623
 10662  003572  0A03               	xorlw	3	; case 2
 10663  003574  B4D8               	btfsc	status,2,c
 10664  003576  D7C4               	goto	l626
 10665  003578  0A01               	xorlw	1	; case 3
 10666  00357A                     l622:
 10667                           
 10668                           ;terminal.c: 100: }
 10669                           ;terminal.c: 102: if (Message_To_Translate == 1){
 10670                           
 10671                           ; BSR set to: 0
 10672                           
 10673                           ; BSR set to: 0
 10674  00357A  0100               	movlb	0	; () banked
 10675  00357C  0582               	decf	_Message_To_Translate& (0+255),w,b
 10676  00357E  A4D8               	btfss	status,2,c
 10677  003580  0012               	return	
 10678                           
 10679                           ; BSR set to: 0
 10680                           ;terminal.c: 103: TranslateMessage();
 10681  003582  EC70  F015         	call	_TranslateMessage	;wreg free
 10682                           
 10683                           ;terminal.c: 104: Message_To_Translate = 0;
 10684  003586  0E00               	movlw	0
 10685  003588  0100               	movlb	0	; () banked
 10686  00358A  6F82               	movwf	_Message_To_Translate& (0+255),b
 10687                           
 10688                           ; BSR set to: 0
 10689                           ;terminal.c: 105: RxSwitch = 0;
 10690  00358C  0E00               	movlw	0
 10691  00358E  6F83               	movwf	_RxSwitch& (0+255),b
 10692  003590  0012               	return	
 10693  003592                     __end_of_READxRECEIVEDxMESSAGE:
 10694                           	opt stack 0
 10695                           tblptru	equ	0xFF8
 10696                           tblptrh	equ	0xFF7
 10697                           tblptrl	equ	0xFF6
 10698                           tablat	equ	0xFF5
 10699                           prodh	equ	0xFF4
 10700                           prodl	equ	0xFF3
 10701                           intcon	equ	0xFF2
 10702                           postinc0	equ	0xFEE
 10703                           wreg	equ	0xFE8
 10704                           postinc1	equ	0xFE6
 10705                           postdec1	equ	0xFE5
 10706                           fsr1h	equ	0xFE2
 10707                           fsr1l	equ	0xFE1
 10708                           indf2	equ	0xFDF
 10709                           postinc2	equ	0xFDE
 10710                           postdec2	equ	0xFDD
 10711                           fsr2h	equ	0xFDA
 10712                           fsr2l	equ	0xFD9
 10713                           status	equ	0xFD8
 10714                           
 10715 ;; *************** function _TranslateMessage *****************
 10716 ;; Defined at:
 10717 ;;		line 123 in file "../terminal.c"
 10718 ;; Parameters:    Size  Location     Type
 10719 ;;		None
 10720 ;; Auto vars:     Size  Location     Type
 10721 ;;  Index           2   33[COMRAM] unsigned int 
 10722 ;;  Value           2   31[COMRAM] unsigned int 
 10723 ;; Return value:  Size  Location     Type
 10724 ;;                  1    wreg      void 
 10725 ;; Registers used:
 10726 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10727 ;; Tracked objects:
 10728 ;;		On entry : 0/0
 10729 ;;		On exit  : 0/0
 10730 ;;		Unchanged: 0/0
 10731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10732 ;;      Params:         0       0       0       0       0       0       0       0       0
 10733 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10734 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10735 ;;      Totals:         4       0       0       0       0       0       0       0       0
 10736 ;;Total ram usage:        4 bytes
 10737 ;; Hardware stack levels used:    1
 10738 ;; Hardware stack levels required when called:    5
 10739 ;; This function calls:
 10740 ;;		_GETxAPIxRW
 10741 ;;		_GETxAPIxVAL
 10742 ;;		_SENDxMESSAGE
 10743 ;;		_SETxAPIxVALxNoxRET
 10744 ;;		_atoi
 10745 ;;		_printf
 10746 ;; This function is called by:
 10747 ;;		_READxRECEIVEDxMESSAGE
 10748 ;; This function uses a non-reentrant model
 10749 ;;
 10750                           
 10751                           	psect	text20
 10752  002AE0                     __ptext20:
 10753                           	opt stack 0
 10754  002AE0                     _TranslateMessage:
 10755                           	opt stack 24
 10756                           
 10757                           ;terminal.c: 125: unsigned int Value, Index;
 10758                           ;terminal.c: 127: if(Data[0] == 's'){
 10759                           
 10760                           ; BSR set to: 0
 10761                           ;incstack = 0
 10762  002AE0  0E73               	movlw	115
 10763  002AE2  0100               	movlb	0	; () banked
 10764  002AE4  198E               	xorwf	_Data& (0+255),w,b
 10765  002AE6  A4D8               	btfss	status,2,c
 10766  002AE8  D063               	goto	l640
 10767                           
 10768                           ; BSR set to: 0
 10769                           ;terminal.c: 129: pData = &Data[2];
 10770  002AEA  0E90               	movlw	low (_Data+2)
 10771  002AEC  6F78               	movwf	_pData& (0+255),b
 10772  002AEE  0E00               	movlw	high (_Data+2)
 10773  002AF0  6F79               	movwf	(_pData+1)& (0+255),b
 10774                           
 10775                           ; BSR set to: 0
 10776                           ;terminal.c: 130: Index = (unsigned int)atoi (pData);
 10777  002AF2  C078  F019         	movff	_pData,atoi@s
 10778  002AF6  C079  F01A         	movff	_pData+1,atoi@s+1
 10779  002AFA  ECB3  F01C         	call	_atoi	;wreg free
 10780  002AFE  C019  F022         	movff	?_atoi,TranslateMessage@Index
 10781  002B02  C01A  F023         	movff	?_atoi+1,TranslateMessage@Index+1
 10782                           
 10783                           ;terminal.c: 131: pData = &Data[5];
 10784  002B06  0E93               	movlw	low (_Data+5)
 10785  002B08  0100               	movlb	0	; () banked
 10786  002B0A  6F78               	movwf	_pData& (0+255),b
 10787  002B0C  0E00               	movlw	high (_Data+5)
 10788  002B0E  6F79               	movwf	(_pData+1)& (0+255),b
 10789                           
 10790                           ;terminal.c: 132: Value = (unsigned int)atoi (pData);
 10791  002B10  C078  F019         	movff	_pData,atoi@s
 10792  002B14  C079  F01A         	movff	_pData+1,atoi@s+1
 10793  002B18  ECB3  F01C         	call	_atoi	;wreg free
 10794  002B1C  C019  F020         	movff	?_atoi,TranslateMessage@Value
 10795  002B20  C01A  F021         	movff	?_atoi+1,TranslateMessage@Value+1
 10796                           
 10797                           ;terminal.c: 134: if (GETxAPIxRW(Index) == 0){
 10798  002B24  C022  F013         	movff	TranslateMessage@Index,GETxAPIxRW@index
 10799  002B28  C023  F014         	movff	TranslateMessage@Index+1,GETxAPIxRW@index+1
 10800  002B2C  ECF6  F020         	call	_GETxAPIxRW	;wreg free
 10801  002B30  5013               	movf	?_GETxAPIxRW,w,c
 10802  002B32  1014               	iorwf	?_GETxAPIxRW+1,w,c
 10803  002B34  A4D8               	btfss	status,2,c
 10804  002B36  D008               	goto	l641
 10805                           
 10806                           ;terminal.c: 135: printf("E#11\r\n");
 10807  002B38  0E41               	movlw	low STR_2
 10808  002B3A  0100               	movlb	0	; () banked
 10809  002B3C  6FAD               	movwf	printf@f& (0+255),b
 10810  002B3E  0E08               	movlw	high STR_2
 10811  002B40  6FAE               	movwf	(printf@f+1)& (0+255),b
 10812  002B42  EC96  F018         	call	_printf	;wreg free
 10813                           
 10814                           ;terminal.c: 136: }
 10815  002B46  0012               	return	
 10816  002B48                     l641:
 10817                           
 10818                           ;terminal.c: 137: else if (Index < 0xF){
 10819  002B48  5023               	movf	TranslateMessage@Index+1,w,c
 10820  002B4A  E10C               	bnz	l8498
 10821  002B4C  0E0F               	movlw	15
 10822  002B4E  5C22               	subwf	TranslateMessage@Index,w,c
 10823  002B50  B0D8               	btfsc	status,0,c
 10824  002B52  D008               	goto	l643
 10825                           
 10826                           ;terminal.c: 138: printf("E#12\r\n");
 10827  002B54  0E48               	movlw	low STR_3
 10828  002B56  0100               	movlb	0	; () banked
 10829  002B58  6FAD               	movwf	printf@f& (0+255),b
 10830  002B5A  0E08               	movlw	high STR_3
 10831  002B5C  6FAE               	movwf	(printf@f+1)& (0+255),b
 10832  002B5E  EC96  F018         	call	_printf	;wreg free
 10833                           
 10834                           ;terminal.c: 139: }
 10835  002B62  0012               	return	
 10836  002B64                     l643:
 10837  002B64                     l8498:
 10838                           
 10839                           ;terminal.c: 140: else if (Index > 91){
 10840  002B64  5023               	movf	TranslateMessage@Index+1,w,c
 10841  002B66  E104               	bnz	u8540
 10842  002B68  0E5C               	movlw	92
 10843  002B6A  5C22               	subwf	TranslateMessage@Index,w,c
 10844  002B6C  A0D8               	btfss	status,0,c
 10845  002B6E  D008               	goto	l645
 10846  002B70                     u8540:
 10847                           
 10848                           ;terminal.c: 141: printf("E#13\r\n");
 10849  002B70  0E4F               	movlw	low STR_4
 10850  002B72  0100               	movlb	0	; () banked
 10851  002B74  6FAD               	movwf	printf@f& (0+255),b
 10852  002B76  0E08               	movlw	high STR_4
 10853  002B78  6FAE               	movwf	(printf@f+1)& (0+255),b
 10854  002B7A  EC96  F018         	call	_printf	;wreg free
 10855                           
 10856                           ;terminal.c: 142: }
 10857  002B7E  0012               	return	
 10858  002B80                     l645:
 10859                           
 10860                           ;terminal.c: 143: else if (Value > 0xFFFE){
 10861  002B80  2820               	incf	TranslateMessage@Value,w,c
 10862  002B82  E10B               	bnz	l8506
 10863  002B84  2821               	incf	TranslateMessage@Value+1,w,c
 10864  002B86  A4D8               	btfss	status,2,c
 10865  002B88  D008               	goto	l647
 10866                           
 10867                           ;terminal.c: 144: printf("E#14\r\n");
 10868  002B8A  0E56               	movlw	low STR_5
 10869  002B8C  0100               	movlb	0	; () banked
 10870  002B8E  6FAD               	movwf	printf@f& (0+255),b
 10871  002B90  0E08               	movlw	high STR_5
 10872  002B92  6FAE               	movwf	(printf@f+1)& (0+255),b
 10873  002B94  EC96  F018         	call	_printf	;wreg free
 10874                           
 10875                           ;terminal.c: 145: }
 10876  002B98  0012               	return	
 10877  002B9A                     l647:
 10878  002B9A                     l8506:
 10879                           
 10880                           ;terminal.c: 146: else{
 10881                           ;terminal.c: 147: SETxAPIxVALxNoxRET(Index, Value);
 10882  002B9A  C022  F015         	movff	TranslateMessage@Index,SETxAPIxVALxNoxRET@index
 10883  002B9E  C023  F016         	movff	TranslateMessage@Index+1,SETxAPIxVALxNoxRET@index+1
 10884  002BA2  C020  F017         	movff	TranslateMessage@Value,SETxAPIxVALxNoxRET@value
 10885  002BA6  C021  F018         	movff	TranslateMessage@Value+1,SETxAPIxVALxNoxRET@value+1
 10886  002BAA  EC20  F020         	call	_SETxAPIxVALxNoxRET	;wreg free
 10887                           
 10888                           ;terminal.c: 148: }
 10889                           ;terminal.c: 149: }
 10890  002BAE  0012               	return	
 10891  002BB0                     l640:
 10892                           
 10893                           ;terminal.c: 151: else if (Data[0] == 'g'){
 10894  002BB0  0E67               	movlw	103
 10895  002BB2  0100               	movlb	0	; () banked
 10896  002BB4  198E               	xorwf	_Data& (0+255),w,b
 10897  002BB6  A4D8               	btfss	status,2,c
 10898  002BB8  0012               	return	
 10899                           
 10900                           ; BSR set to: 0
 10901                           ;terminal.c: 153: pData = &Data[2];
 10902  002BBA  0E90               	movlw	low (_Data+2)
 10903  002BBC  6F78               	movwf	_pData& (0+255),b
 10904  002BBE  0E00               	movlw	high (_Data+2)
 10905  002BC0  6F79               	movwf	(_pData+1)& (0+255),b
 10906                           
 10907                           ; BSR set to: 0
 10908                           ;terminal.c: 154: Index = (unsigned int)atoi (pData);
 10909  002BC2  C078  F019         	movff	_pData,atoi@s
 10910  002BC6  C079  F01A         	movff	_pData+1,atoi@s+1
 10911  002BCA  ECB3  F01C         	call	_atoi	;wreg free
 10912  002BCE  C019  F022         	movff	?_atoi,TranslateMessage@Index
 10913  002BD2  C01A  F023         	movff	?_atoi+1,TranslateMessage@Index+1
 10914                           
 10915                           ;terminal.c: 156: if (Index < 0xF){
 10916  002BD6  5023               	movf	TranslateMessage@Index+1,w,c
 10917  002BD8  E10C               	bnz	l8518
 10918  002BDA  0E0F               	movlw	15
 10919  002BDC  5C22               	subwf	TranslateMessage@Index,w,c
 10920  002BDE  B0D8               	btfsc	status,0,c
 10921  002BE0  D008               	goto	l651
 10922                           
 10923                           ;terminal.c: 157: printf("E#12\r\n");
 10924  002BE2  0E48               	movlw	low STR_3
 10925  002BE4  0100               	movlb	0	; () banked
 10926  002BE6  6FAD               	movwf	printf@f& (0+255),b
 10927  002BE8  0E08               	movlw	high STR_3
 10928  002BEA  6FAE               	movwf	(printf@f+1)& (0+255),b
 10929  002BEC  EC96  F018         	call	_printf	;wreg free
 10930                           
 10931                           ;terminal.c: 158: }
 10932  002BF0  0012               	return	
 10933  002BF2                     l651:
 10934  002BF2                     l8518:
 10935                           
 10936                           ;terminal.c: 159: else if (Index > 91){
 10937  002BF2  5023               	movf	TranslateMessage@Index+1,w,c
 10938  002BF4  E104               	bnz	u8580
 10939  002BF6  0E5C               	movlw	92
 10940  002BF8  5C22               	subwf	TranslateMessage@Index,w,c
 10941  002BFA  A0D8               	btfss	status,0,c
 10942  002BFC  D008               	goto	l653
 10943  002BFE                     u8580:
 10944                           
 10945                           ;terminal.c: 160: printf("E#13\r\n");
 10946  002BFE  0E4F               	movlw	low STR_4
 10947  002C00  0100               	movlb	0	; () banked
 10948  002C02  6FAD               	movwf	printf@f& (0+255),b
 10949  002C04  0E08               	movlw	high STR_4
 10950  002C06  6FAE               	movwf	(printf@f+1)& (0+255),b
 10951  002C08  EC96  F018         	call	_printf	;wreg free
 10952                           
 10953                           ;terminal.c: 161: }
 10954  002C0C  0012               	return	
 10955  002C0E                     l653:
 10956                           
 10957                           ;terminal.c: 162: else{
 10958                           ;terminal.c: 163: Value = GETxAPIxVAL(Index);
 10959  002C0E  C022  F013         	movff	TranslateMessage@Index,GETxAPIxVAL@index
 10960  002C12  C023  F014         	movff	TranslateMessage@Index+1,GETxAPIxVAL@index+1
 10961  002C16  ECE8  F020         	call	_GETxAPIxVAL	;wreg free
 10962  002C1A  C013  F020         	movff	?_GETxAPIxVAL,TranslateMessage@Value
 10963  002C1E  C014  F021         	movff	?_GETxAPIxVAL+1,TranslateMessage@Value+1
 10964                           
 10965                           ;terminal.c: 164: SENDxMESSAGE(Index, Value);
 10966  002C22  C022  F013         	movff	TranslateMessage@Index,SENDxMESSAGE@index
 10967  002C26  C023  F014         	movff	TranslateMessage@Index+1,SENDxMESSAGE@index+1
 10968  002C2A  C020  F015         	movff	TranslateMessage@Value,SENDxMESSAGE@value
 10969  002C2E  C021  F016         	movff	TranslateMessage@Value+1,SENDxMESSAGE@value+1
 10970  002C32  ECEE  F01E         	call	_SENDxMESSAGE	;wreg free
 10971  002C36  0012               	return	
 10972  002C38                     __end_of_TranslateMessage:
 10973                           	opt stack 0
 10974                           tblptru	equ	0xFF8
 10975                           tblptrh	equ	0xFF7
 10976                           tblptrl	equ	0xFF6
 10977                           tablat	equ	0xFF5
 10978                           prodh	equ	0xFF4
 10979                           prodl	equ	0xFF3
 10980                           intcon	equ	0xFF2
 10981                           postinc0	equ	0xFEE
 10982                           wreg	equ	0xFE8
 10983                           postinc1	equ	0xFE6
 10984                           postdec1	equ	0xFE5
 10985                           fsr1h	equ	0xFE2
 10986                           fsr1l	equ	0xFE1
 10987                           indf2	equ	0xFDF
 10988                           postinc2	equ	0xFDE
 10989                           postdec2	equ	0xFDD
 10990                           fsr2h	equ	0xFDA
 10991                           fsr2l	equ	0xFD9
 10992                           status	equ	0xFD8
 10993                           
 10994 ;; *************** function _atoi *****************
 10995 ;; Defined at:
 10996 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\atoi.c"
 10997 ;; Parameters:    Size  Location     Type
 10998 ;;  s               2   24[COMRAM] PTR const unsigned char 
 10999 ;;		 -> NULL(0), Data(10), 
 11000 ;; Auto vars:     Size  Location     Type
 11001 ;;  a               2   29[COMRAM] int 
 11002 ;;  sign            1   28[COMRAM] unsigned char 
 11003 ;; Return value:  Size  Location     Type
 11004 ;;                  2   24[COMRAM] int 
 11005 ;; Registers used:
 11006 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11007 ;; Tracked objects:
 11008 ;;		On entry : 0/0
 11009 ;;		On exit  : 0/0
 11010 ;;		Unchanged: 0/0
 11011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11012 ;;      Params:         2       0       0       0       0       0       0       0       0
 11013 ;;      Locals:         3       0       0       0       0       0       0       0       0
 11014 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11015 ;;      Totals:         7       0       0       0       0       0       0       0       0
 11016 ;;Total ram usage:        7 bytes
 11017 ;; Hardware stack levels used:    1
 11018 ;; Hardware stack levels required when called:    4
 11019 ;; This function calls:
 11020 ;;		___wmul
 11021 ;;		_isdigit
 11022 ;; This function is called by:
 11023 ;;		_TranslateMessage
 11024 ;; This function uses a non-reentrant model
 11025 ;;
 11026                           
 11027                           	psect	text21
 11028  003966                     __ptext21:
 11029                           	opt stack 0
 11030  003966                     _atoi:
 11031                           	opt stack 24
 11032                           
 11033                           ;incstack = 0
 11034  003966  D002               	goto	l1450
 11035  003968  4A19               	infsnz	atoi@s,f,c
 11036  00396A  2A1A               	incf	atoi@s+1,f,c
 11037  00396C                     l1450:
 11038  00396C  C019  FFD9         	movff	atoi@s,fsr2l
 11039  003970  C01A  FFDA         	movff	atoi@s+1,fsr2h
 11040  003974  0E20               	movlw	32
 11041  003976  18DE               	xorwf	postinc2,w,c
 11042  003978  B4D8               	btfsc	status,2,c
 11043  00397A  D7F6               	goto	l1451
 11044  00397C  C019  FFD9         	movff	atoi@s,fsr2l
 11045  003980  C01A  FFDA         	movff	atoi@s+1,fsr2h
 11046  003984  0E09               	movlw	9
 11047  003986  18DE               	xorwf	postinc2,w,c
 11048  003988  B4D8               	btfsc	status,2,c
 11049  00398A  D7EE               	goto	l1451
 11050  00398C  0E00               	movlw	0
 11051  00398E  6E1F               	movwf	atoi@a+1,c
 11052  003990  0E00               	movlw	0
 11053  003992  6E1E               	movwf	atoi@a,c
 11054  003994  0E00               	movlw	0
 11055  003996  6E1D               	movwf	atoi@sign,c
 11056  003998  C019  FFD9         	movff	atoi@s,fsr2l
 11057  00399C  C01A  FFDA         	movff	atoi@s+1,fsr2h
 11058  0039A0  0E2D               	movlw	45
 11059  0039A2  18DE               	xorwf	postinc2,w,c
 11060  0039A4  A4D8               	btfss	status,2,c
 11061  0039A6  D002               	goto	l1453
 11062  0039A8  2A1D               	incf	atoi@sign,f,c
 11063  0039AA  D024               	goto	l7810
 11064  0039AC                     l1453:
 11065  0039AC  C019  FFD9         	movff	atoi@s,fsr2l
 11066  0039B0  C01A  FFDA         	movff	atoi@s+1,fsr2h
 11067  0039B4  0E2B               	movlw	43
 11068  0039B6  18DE               	xorwf	postinc2,w,c
 11069  0039B8  A4D8               	btfss	status,2,c
 11070  0039BA  D01E               	goto	l1456
 11071  0039BC  D01B               	goto	l7810
 11072  0039BE  C01E  F013         	movff	atoi@a,___wmul@multiplier
 11073  0039C2  C01F  F014         	movff	atoi@a+1,___wmul@multiplier+1
 11074  0039C6  0E00               	movlw	0
 11075  0039C8  6E16               	movwf	___wmul@multiplicand+1,c
 11076  0039CA  0E0A               	movlw	10
 11077  0039CC  6E15               	movwf	___wmul@multiplicand,c
 11078  0039CE  ECB6  F020         	call	___wmul	;wreg free
 11079  0039D2  C019  FFD9         	movff	atoi@s,fsr2l
 11080  0039D6  C01A  FFDA         	movff	atoi@s+1,fsr2h
 11081  0039DA  50DF               	movf	indf2,w,c
 11082  0039DC  6E1B               	movwf	??_atoi& (0+255),c
 11083  0039DE  6A1C               	clrf	(??_atoi+1)& (0+255),c
 11084  0039E0  5013               	movf	?___wmul,w,c
 11085  0039E2  261B               	addwf	??_atoi,f,c
 11086  0039E4  5014               	movf	?___wmul+1,w,c
 11087  0039E6  221C               	addwfc	??_atoi+1,f,c
 11088  0039E8  0ED0               	movlw	208
 11089  0039EA  241B               	addwf	??_atoi,w,c
 11090  0039EC  6E1E               	movwf	atoi@a,c
 11091  0039EE  0EFF               	movlw	255
 11092  0039F0  201C               	addwfc	??_atoi+1,w,c
 11093  0039F2  6E1F               	movwf	atoi@a+1,c
 11094  0039F4                     l7810:
 11095  0039F4  4A19               	infsnz	atoi@s,f,c
 11096  0039F6  2A1A               	incf	atoi@s+1,f,c
 11097  0039F8                     l1456:
 11098  0039F8  C019  FFD9         	movff	atoi@s,fsr2l
 11099  0039FC  C01A  FFDA         	movff	atoi@s+1,fsr2h
 11100  003A00  50DF               	movf	indf2,w,c
 11101  003A02  ECD9  F020         	call	_isdigit
 11102  003A06  B0D8               	btfsc	status,0,c
 11103  003A08  D7DA               	goto	l1457
 11104  003A0A  501D               	movf	atoi@sign,w,c
 11105  003A0C  B4D8               	btfsc	status,2,c
 11106  003A0E  D00D               	goto	l1459
 11107  003A10  C01E  F01B         	movff	atoi@a,??_atoi
 11108  003A14  C01F  F01C         	movff	atoi@a+1,??_atoi+1
 11109  003A18  1E1B               	comf	??_atoi,f,c
 11110  003A1A  1E1C               	comf	??_atoi+1,f,c
 11111  003A1C  4A1B               	infsnz	??_atoi,f,c
 11112  003A1E  2A1C               	incf	??_atoi+1,f,c
 11113  003A20  C01B  F019         	movff	??_atoi,?_atoi
 11114  003A24  C01C  F01A         	movff	??_atoi+1,?_atoi+1
 11115  003A28  0012               	return	
 11116  003A2A                     l1459:
 11117  003A2A  C01E  F019         	movff	atoi@a,?_atoi
 11118  003A2E  C01F  F01A         	movff	atoi@a+1,?_atoi+1
 11119  003A32  0012               	return		;funcret
 11120  003A34                     __end_of_atoi:
 11121                           	opt stack 0
 11122                           tblptru	equ	0xFF8
 11123                           tblptrh	equ	0xFF7
 11124                           tblptrl	equ	0xFF6
 11125                           tablat	equ	0xFF5
 11126                           prodh	equ	0xFF4
 11127                           prodl	equ	0xFF3
 11128                           intcon	equ	0xFF2
 11129                           postinc0	equ	0xFEE
 11130                           wreg	equ	0xFE8
 11131                           postinc1	equ	0xFE6
 11132                           postdec1	equ	0xFE5
 11133                           fsr1h	equ	0xFE2
 11134                           fsr1l	equ	0xFE1
 11135                           indf2	equ	0xFDF
 11136                           postinc2	equ	0xFDE
 11137                           postdec2	equ	0xFDD
 11138                           fsr2h	equ	0xFDA
 11139                           fsr2l	equ	0xFD9
 11140                           status	equ	0xFD8
 11141                           
 11142 ;; *************** function _isdigit *****************
 11143 ;; Defined at:
 11144 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
 11145 ;; Parameters:    Size  Location     Type
 11146 ;;  c               1    wreg     unsigned char 
 11147 ;; Auto vars:     Size  Location     Type
 11148 ;;  c               1   20[COMRAM] unsigned char 
 11149 ;; Return value:  Size  Location     Type
 11150 ;;		None               void
 11151 ;; Registers used:
 11152 ;;		wreg, status,2, status,0
 11153 ;; Tracked objects:
 11154 ;;		On entry : 0/0
 11155 ;;		On exit  : 0/0
 11156 ;;		Unchanged: 0/0
 11157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11158 ;;      Params:         0       0       0       0       0       0       0       0       0
 11159 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11160 ;;      Temps:          1       0       0       0       0       0       0       0       0
 11161 ;;      Totals:         3       0       0       0       0       0       0       0       0
 11162 ;;Total ram usage:        3 bytes
 11163 ;; Hardware stack levels used:    1
 11164 ;; Hardware stack levels required when called:    3
 11165 ;; This function calls:
 11166 ;;		Nothing
 11167 ;; This function is called by:
 11168 ;;		_atoi
 11169 ;; This function uses a non-reentrant model
 11170 ;;
 11171                           
 11172                           	psect	text22
 11173  0041B2                     __ptext22:
 11174                           	opt stack 0
 11175  0041B2                     _isdigit:
 11176                           	opt stack 24
 11177                           
 11178                           ;incstack = 0
 11179                           ;isdigit@c stored from wreg
 11180  0041B2  6E15               	movwf	isdigit@c,c
 11181  0041B4  0E00               	movlw	0
 11182  0041B6  6E14               	movwf	_isdigit$1841,c
 11183  0041B8  0E3A               	movlw	58
 11184  0041BA  6015               	cpfslt	isdigit@c,c
 11185  0041BC  D005               	goto	l1631
 11186  0041BE  0E2F               	movlw	47
 11187  0041C0  6415               	cpfsgt	isdigit@c,c
 11188  0041C2  D002               	goto	l1631
 11189  0041C4  0E01               	movlw	1
 11190  0041C6  6E14               	movwf	_isdigit$1841,c
 11191  0041C8                     l1631:
 11192  0041C8  C014  F013         	movff	_isdigit$1841,??_isdigit
 11193  0041CC  3013               	rrcf	??_isdigit,w,c
 11194  0041CE  0012               	return	
 11195  0041D0                     __end_of_isdigit:
 11196                           	opt stack 0
 11197                           tblptru	equ	0xFF8
 11198                           tblptrh	equ	0xFF7
 11199                           tblptrl	equ	0xFF6
 11200                           tablat	equ	0xFF5
 11201                           prodh	equ	0xFF4
 11202                           prodl	equ	0xFF3
 11203                           intcon	equ	0xFF2
 11204                           postinc0	equ	0xFEE
 11205                           wreg	equ	0xFE8
 11206                           postinc1	equ	0xFE6
 11207                           postdec1	equ	0xFE5
 11208                           fsr1h	equ	0xFE2
 11209                           fsr1l	equ	0xFE1
 11210                           indf2	equ	0xFDF
 11211                           postinc2	equ	0xFDE
 11212                           postdec2	equ	0xFDD
 11213                           fsr2h	equ	0xFDA
 11214                           fsr2l	equ	0xFD9
 11215                           status	equ	0xFD8
 11216                           
 11217 ;; *************** function ___wmul *****************
 11218 ;; Defined at:
 11219 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
 11220 ;; Parameters:    Size  Location     Type
 11221 ;;  multiplier      2   18[COMRAM] unsigned int 
 11222 ;;  multiplicand    2   20[COMRAM] unsigned int 
 11223 ;; Auto vars:     Size  Location     Type
 11224 ;;  product         2   22[COMRAM] unsigned int 
 11225 ;; Return value:  Size  Location     Type
 11226 ;;                  2   18[COMRAM] unsigned int 
 11227 ;; Registers used:
 11228 ;;		wreg, status,2, status,0, prodl, prodh
 11229 ;; Tracked objects:
 11230 ;;		On entry : 0/0
 11231 ;;		On exit  : 0/0
 11232 ;;		Unchanged: 0/0
 11233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11234 ;;      Params:         4       0       0       0       0       0       0       0       0
 11235 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11236 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11237 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11238 ;;Total ram usage:        6 bytes
 11239 ;; Hardware stack levels used:    1
 11240 ;; Hardware stack levels required when called:    3
 11241 ;; This function calls:
 11242 ;;		Nothing
 11243 ;; This function is called by:
 11244 ;;		_atoi
 11245 ;; This function uses a non-reentrant model
 11246 ;;
 11247                           
 11248                           	psect	text23
 11249  00416C                     __ptext23:
 11250                           	opt stack 0
 11251  00416C                     ___wmul:
 11252                           	opt stack 24
 11253                           
 11254                           ;incstack = 0
 11255  00416C  5013               	movf	___wmul@multiplier,w,c
 11256  00416E  0215               	mulwf	___wmul@multiplicand,c
 11257  004170  CFF3 F017          	movff	prodl,___wmul@product
 11258  004174  CFF4 F018          	movff	prodh,___wmul@product+1
 11259  004178  5013               	movf	___wmul@multiplier,w,c
 11260  00417A  0216               	mulwf	___wmul@multiplicand+1,c
 11261  00417C  50F3               	movf	prodl,w,c
 11262  00417E  2618               	addwf	___wmul@product+1,f,c
 11263  004180  5014               	movf	___wmul@multiplier+1,w,c
 11264  004182  0215               	mulwf	___wmul@multiplicand,c
 11265  004184  50F3               	movf	prodl,w,c
 11266  004186  2618               	addwf	___wmul@product+1,f,c
 11267  004188  C017  F013         	movff	___wmul@product,?___wmul
 11268  00418C  C018  F014         	movff	___wmul@product+1,?___wmul+1
 11269  004190  0012               	return	
 11270  004192                     __end_of___wmul:
 11271                           	opt stack 0
 11272                           tblptru	equ	0xFF8
 11273                           tblptrh	equ	0xFF7
 11274                           tblptrl	equ	0xFF6
 11275                           tablat	equ	0xFF5
 11276                           prodh	equ	0xFF4
 11277                           prodl	equ	0xFF3
 11278                           intcon	equ	0xFF2
 11279                           postinc0	equ	0xFEE
 11280                           wreg	equ	0xFE8
 11281                           postinc1	equ	0xFE6
 11282                           postdec1	equ	0xFE5
 11283                           fsr1h	equ	0xFE2
 11284                           fsr1l	equ	0xFE1
 11285                           indf2	equ	0xFDF
 11286                           postinc2	equ	0xFDE
 11287                           postdec2	equ	0xFDD
 11288                           fsr2h	equ	0xFDA
 11289                           fsr2l	equ	0xFD9
 11290                           status	equ	0xFD8
 11291                           
 11292 ;; *************** function _SETxAPIxVALxNoxRET *****************
 11293 ;; Defined at:
 11294 ;;		line 223 in file "../api.c"
 11295 ;; Parameters:    Size  Location     Type
 11296 ;;  index           2   20[COMRAM] unsigned int 
 11297 ;;  value           2   22[COMRAM] unsigned int 
 11298 ;; Auto vars:     Size  Location     Type
 11299 ;;		None
 11300 ;; Return value:  Size  Location     Type
 11301 ;;                  1    wreg      void 
 11302 ;; Registers used:
 11303 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11304 ;; Tracked objects:
 11305 ;;		On entry : 0/0
 11306 ;;		On exit  : 0/0
 11307 ;;		Unchanged: 0/0
 11308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11309 ;;      Params:         4       0       0       0       0       0       0       0       0
 11310 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11311 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11312 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11313 ;;Total ram usage:        6 bytes
 11314 ;; Hardware stack levels used:    1
 11315 ;; Hardware stack levels required when called:    3
 11316 ;; This function calls:
 11317 ;;		Nothing
 11318 ;; This function is called by:
 11319 ;;		_Update_StateMchn
 11320 ;;		_TranslateMessage
 11321 ;; This function uses a non-reentrant model
 11322 ;;
 11323                           
 11324                           	psect	text24
 11325  004040                     __ptext24:
 11326                           	opt stack 0
 11327  004040                     _SETxAPIxVALxNoxRET:
 11328                           	opt stack 26
 11329                           
 11330                           ;api.c: 224: if(API[index] != value){
 11331                           
 11332                           ;incstack = 0
 11333  004040  90D8               	bcf	status,0,c
 11334  004042  3415               	rlcf	SETxAPIxVALxNoxRET@index,w,c
 11335  004044  6ED9               	movwf	fsr2l,c
 11336  004046  3416               	rlcf	SETxAPIxVALxNoxRET@index+1,w,c
 11337  004048  6EDA               	movwf	fsr2h,c
 11338  00404A  0E00               	movlw	low _API
 11339  00404C  26D9               	addwf	fsr2l,f,c
 11340  00404E  0E01               	movlw	high _API
 11341  004050  22DA               	addwfc	fsr2h,f,c
 11342  004052  5017               	movf	SETxAPIxVALxNoxRET@value,w,c
 11343  004054  18DE               	xorwf	postinc2,w,c
 11344  004056  E104               	bnz	u6740
 11345  004058  5018               	movf	SETxAPIxVALxNoxRET@value+1,w,c
 11346  00405A  18DE               	xorwf	postinc2,w,c
 11347  00405C  B4D8               	btfsc	status,2,c
 11348  00405E  0012               	return	
 11349  004060                     u6740:
 11350                           
 11351                           ;api.c: 225: API[index] = value;
 11352  004060  90D8               	bcf	status,0,c
 11353  004062  3415               	rlcf	SETxAPIxVALxNoxRET@index,w,c
 11354  004064  6ED9               	movwf	fsr2l,c
 11355  004066  3416               	rlcf	SETxAPIxVALxNoxRET@index+1,w,c
 11356  004068  6EDA               	movwf	fsr2h,c
 11357  00406A  0E00               	movlw	low _API
 11358  00406C  26D9               	addwf	fsr2l,f,c
 11359  00406E  0E01               	movlw	high _API
 11360  004070  22DA               	addwfc	fsr2h,f,c
 11361  004072  C017  FFDE         	movff	SETxAPIxVALxNoxRET@value,postinc2
 11362  004076  C018  FFDD         	movff	SETxAPIxVALxNoxRET@value+1,postdec2
 11363  00407A  0012               	return	
 11364  00407C                     __end_of_SETxAPIxVALxNoxRET:
 11365                           	opt stack 0
 11366                           tblptru	equ	0xFF8
 11367                           tblptrh	equ	0xFF7
 11368                           tblptrl	equ	0xFF6
 11369                           tablat	equ	0xFF5
 11370                           prodh	equ	0xFF4
 11371                           prodl	equ	0xFF3
 11372                           intcon	equ	0xFF2
 11373                           postinc0	equ	0xFEE
 11374                           wreg	equ	0xFE8
 11375                           postinc1	equ	0xFE6
 11376                           postdec1	equ	0xFE5
 11377                           fsr1h	equ	0xFE2
 11378                           fsr1l	equ	0xFE1
 11379                           indf2	equ	0xFDF
 11380                           postinc2	equ	0xFDE
 11381                           postdec2	equ	0xFDD
 11382                           fsr2h	equ	0xFDA
 11383                           fsr2l	equ	0xFD9
 11384                           status	equ	0xFD8
 11385                           
 11386 ;; *************** function _GETxAPIxVAL *****************
 11387 ;; Defined at:
 11388 ;;		line 229 in file "../api.c"
 11389 ;; Parameters:    Size  Location     Type
 11390 ;;  index           2   18[COMRAM] unsigned int 
 11391 ;; Auto vars:     Size  Location     Type
 11392 ;;		None
 11393 ;; Return value:  Size  Location     Type
 11394 ;;                  2   18[COMRAM] unsigned int 
 11395 ;; Registers used:
 11396 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11397 ;; Tracked objects:
 11398 ;;		On entry : 0/0
 11399 ;;		On exit  : 0/0
 11400 ;;		Unchanged: 0/0
 11401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11402 ;;      Params:         2       0       0       0       0       0       0       0       0
 11403 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11404 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11405 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11406 ;;Total ram usage:        2 bytes
 11407 ;; Hardware stack levels used:    1
 11408 ;; Hardware stack levels required when called:    3
 11409 ;; This function calls:
 11410 ;;		Nothing
 11411 ;; This function is called by:
 11412 ;;		_Update_StateMchn
 11413 ;;		_Train_Path
 11414 ;;		_TranslateMessage
 11415 ;;		_Debounce_Inputs
 11416 ;;		_Junction
 11417 ;;		_Train_Move_Left_Start
 11418 ;;		_Right_Mountain_From_The_Right
 11419 ;;		_Left_Mountain_From_The_Right
 11420 ;;		_Train_Move_Left_Brake
 11421 ;;		_Train_Move_Right_Start
 11422 ;;		_Left_Mountain_From_The_Left
 11423 ;;		_Right_Mountain_From_The_Left
 11424 ;;		_Train_Move_Right_Brake
 11425 ;;		_SETxPWM
 11426 ;;		_INCRxAPIxVAL
 11427 ;;		_DECRxAPIxVAL
 11428 ;; This function uses a non-reentrant model
 11429 ;;
 11430                           
 11431                           	psect	text25
 11432  0041D0                     __ptext25:
 11433                           	opt stack 0
 11434  0041D0                     _GETxAPIxVAL:
 11435                           	opt stack 23
 11436                           
 11437                           ;api.c: 230: return API[index];
 11438                           
 11439                           ;incstack = 0
 11440  0041D0  90D8               	bcf	status,0,c
 11441  0041D2  3413               	rlcf	GETxAPIxVAL@index,w,c
 11442  0041D4  6ED9               	movwf	fsr2l,c
 11443  0041D6  3414               	rlcf	GETxAPIxVAL@index+1,w,c
 11444  0041D8  6EDA               	movwf	fsr2h,c
 11445  0041DA  0E00               	movlw	low _API
 11446  0041DC  26D9               	addwf	fsr2l,f,c
 11447  0041DE  0E01               	movlw	high _API
 11448  0041E0  22DA               	addwfc	fsr2h,f,c
 11449  0041E2  CFDE F013          	movff	postinc2,?_GETxAPIxVAL
 11450  0041E6  CFDD F014          	movff	postdec2,?_GETxAPIxVAL+1
 11451  0041EA  0012               	return	
 11452  0041EC                     __end_of_GETxAPIxVAL:
 11453                           	opt stack 0
 11454                           tblptru	equ	0xFF8
 11455                           tblptrh	equ	0xFF7
 11456                           tblptrl	equ	0xFF6
 11457                           tablat	equ	0xFF5
 11458                           prodh	equ	0xFF4
 11459                           prodl	equ	0xFF3
 11460                           intcon	equ	0xFF2
 11461                           postinc0	equ	0xFEE
 11462                           wreg	equ	0xFE8
 11463                           postinc1	equ	0xFE6
 11464                           postdec1	equ	0xFE5
 11465                           fsr1h	equ	0xFE2
 11466                           fsr1l	equ	0xFE1
 11467                           indf2	equ	0xFDF
 11468                           postinc2	equ	0xFDE
 11469                           postdec2	equ	0xFDD
 11470                           fsr2h	equ	0xFDA
 11471                           fsr2l	equ	0xFD9
 11472                           status	equ	0xFD8
 11473                           
 11474 ;; *************** function _GETxAPIxRW *****************
 11475 ;; Defined at:
 11476 ;;		line 212 in file "../api.c"
 11477 ;; Parameters:    Size  Location     Type
 11478 ;;  index           2   18[COMRAM] unsigned int 
 11479 ;; Auto vars:     Size  Location     Type
 11480 ;;		None
 11481 ;; Return value:  Size  Location     Type
 11482 ;;                  2   18[COMRAM] unsigned int 
 11483 ;; Registers used:
 11484 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11485 ;; Tracked objects:
 11486 ;;		On entry : 0/0
 11487 ;;		On exit  : 0/0
 11488 ;;		Unchanged: 0/0
 11489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11490 ;;      Params:         2       0       0       0       0       0       0       0       0
 11491 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11492 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11493 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11494 ;;Total ram usage:        2 bytes
 11495 ;; Hardware stack levels used:    1
 11496 ;; Hardware stack levels required when called:    3
 11497 ;; This function calls:
 11498 ;;		Nothing
 11499 ;; This function is called by:
 11500 ;;		_TranslateMessage
 11501 ;; This function uses a non-reentrant model
 11502 ;;
 11503                           
 11504                           	psect	text26
 11505  0041EC                     __ptext26:
 11506                           	opt stack 0
 11507  0041EC                     _GETxAPIxRW:
 11508                           	opt stack 25
 11509                           
 11510                           ;api.c: 213: return API_RW[index];
 11511                           
 11512                           ;incstack = 0
 11513  0041EC  90D8               	bcf	status,0,c
 11514  0041EE  3413               	rlcf	GETxAPIxRW@index,w,c
 11515  0041F0  6ED9               	movwf	fsr2l,c
 11516  0041F2  3414               	rlcf	GETxAPIxRW@index+1,w,c
 11517  0041F4  6EDA               	movwf	fsr2h,c
 11518  0041F6  0E00               	movlw	low _API_RW
 11519  0041F8  26D9               	addwf	fsr2l,f,c
 11520  0041FA  0E02               	movlw	high _API_RW
 11521  0041FC  22DA               	addwfc	fsr2h,f,c
 11522  0041FE  CFDE F013          	movff	postinc2,?_GETxAPIxRW
 11523  004202  CFDD F014          	movff	postdec2,?_GETxAPIxRW+1
 11524  004206  0012               	return	
 11525  004208                     __end_of_GETxAPIxRW:
 11526                           	opt stack 0
 11527                           tblptru	equ	0xFF8
 11528                           tblptrh	equ	0xFF7
 11529                           tblptrl	equ	0xFF6
 11530                           tablat	equ	0xFF5
 11531                           prodh	equ	0xFF4
 11532                           prodl	equ	0xFF3
 11533                           intcon	equ	0xFF2
 11534                           postinc0	equ	0xFEE
 11535                           wreg	equ	0xFE8
 11536                           postinc1	equ	0xFE6
 11537                           postdec1	equ	0xFE5
 11538                           fsr1h	equ	0xFE2
 11539                           fsr1l	equ	0xFE1
 11540                           indf2	equ	0xFDF
 11541                           postinc2	equ	0xFDE
 11542                           postdec2	equ	0xFDD
 11543                           fsr2h	equ	0xFDA
 11544                           fsr2l	equ	0xFD9
 11545                           status	equ	0xFD8
 11546                           
 11547 ;; *************** function _EUSART1_Read *****************
 11548 ;; Defined at:
 11549 ;;		line 143 in file "../eusart1.c"
 11550 ;; Parameters:    Size  Location     Type
 11551 ;;		None
 11552 ;; Auto vars:     Size  Location     Type
 11553 ;;  readValue       1   18[COMRAM] unsigned char 
 11554 ;; Return value:  Size  Location     Type
 11555 ;;                  1    wreg      unsigned char 
 11556 ;; Registers used:
 11557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11558 ;; Tracked objects:
 11559 ;;		On entry : 0/0
 11560 ;;		On exit  : 0/0
 11561 ;;		Unchanged: 0/0
 11562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11563 ;;      Params:         0       0       0       0       0       0       0       0       0
 11564 ;;      Locals:         1       0       0       0       0       0       0       0       0
 11565 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11566 ;;      Totals:         1       0       0       0       0       0       0       0       0
 11567 ;;Total ram usage:        1 bytes
 11568 ;; Hardware stack levels used:    1
 11569 ;; Hardware stack levels required when called:    3
 11570 ;; This function calls:
 11571 ;;		Nothing
 11572 ;; This function is called by:
 11573 ;;		_READxRECEIVEDxMESSAGE
 11574 ;; This function uses a non-reentrant model
 11575 ;;
 11576                           
 11577                           	psect	text27
 11578  0040B6                     __ptext27:
 11579                           	opt stack 0
 11580  0040B6                     _EUSART1_Read:
 11581                           	opt stack 26
 11582                           
 11583                           ;eusart1.c: 144: uint8_t readValue = 0;
 11584                           
 11585                           ;incstack = 0
 11586  0040B6  0E00               	movlw	0
 11587  0040B8  6E13               	movwf	EUSART1_Read@readValue,c
 11588  0040BA  503F               	movf	_eusart1RxCount,w,c	;volatile
 11589  0040BC  B4D8               	btfsc	status,2,c
 11590  0040BE  D7FD               	goto	l539
 11591                           
 11592                           ;eusart1.c: 147: }
 11593                           ;eusart1.c: 149: PIE1bits.RC1IE = 0;
 11594  0040C0  9A9D               	bcf	3997,5,c	;volatile
 11595                           
 11596                           ;eusart1.c: 151: readValue = eusart1RxBuffer[eusart1RxTail++];
 11597  0040C2  5040               	movf	_eusart1RxTail,w,c
 11598  0040C4  0D01               	mullw	1
 11599  0040C6  0E00               	movlw	low _eusart1RxBuffer
 11600  0040C8  24F3               	addwf	prodl,w,c
 11601  0040CA  6ED9               	movwf	fsr2l,c
 11602  0040CC  0E04               	movlw	high _eusart1RxBuffer
 11603  0040CE  20F4               	addwfc	prodh,w,c
 11604  0040D0  6EDA               	movwf	fsr2h,c
 11605  0040D2  50DF               	movf	indf2,w,c
 11606  0040D4  6E13               	movwf	EUSART1_Read@readValue,c
 11607  0040D6  2A40               	incf	_eusart1RxTail,f,c
 11608                           
 11609                           ;eusart1.c: 152: if (sizeof (eusart1RxBuffer) <= eusart1RxTail) {
 11610  0040D8  0E7D               	movlw	125
 11611  0040DA  6440               	cpfsgt	_eusart1RxTail,c
 11612  0040DC  D002               	goto	l541
 11613                           
 11614                           ;eusart1.c: 153: eusart1RxTail = 0;
 11615  0040DE  0E00               	movlw	0
 11616  0040E0  6E40               	movwf	_eusart1RxTail,c
 11617  0040E2                     l541:
 11618                           
 11619                           ;eusart1.c: 154: }
 11620                           ;eusart1.c: 155: eusart1RxCount--;
 11621  0040E2  063F               	decf	_eusart1RxCount,f,c	;volatile
 11622                           
 11623                           ;eusart1.c: 156: PIE1bits.RC1IE = 1;
 11624  0040E4  8A9D               	bsf	3997,5,c	;volatile
 11625                           
 11626                           ;eusart1.c: 158: return readValue;
 11627  0040E6  5013               	movf	EUSART1_Read@readValue,w,c
 11628  0040E8  0012               	return	
 11629  0040EA                     __end_of_EUSART1_Read:
 11630                           	opt stack 0
 11631                           tblptru	equ	0xFF8
 11632                           tblptrh	equ	0xFF7
 11633                           tblptrl	equ	0xFF6
 11634                           tablat	equ	0xFF5
 11635                           prodh	equ	0xFF4
 11636                           prodl	equ	0xFF3
 11637                           intcon	equ	0xFF2
 11638                           postinc0	equ	0xFEE
 11639                           wreg	equ	0xFE8
 11640                           postinc1	equ	0xFE6
 11641                           postdec1	equ	0xFE5
 11642                           fsr1h	equ	0xFE2
 11643                           fsr1l	equ	0xFE1
 11644                           indf2	equ	0xFDF
 11645                           postinc2	equ	0xFDE
 11646                           postdec2	equ	0xFDD
 11647                           fsr2h	equ	0xFDA
 11648                           fsr2l	equ	0xFD9
 11649                           status	equ	0xFD8
 11650                           
 11651 ;; *************** function _Init_Timers *****************
 11652 ;; Defined at:
 11653 ;;		line 187 in file "../Main.c"
 11654 ;; Parameters:    Size  Location     Type
 11655 ;;		None
 11656 ;; Auto vars:     Size  Location     Type
 11657 ;;		None
 11658 ;; Return value:  Size  Location     Type
 11659 ;;                  1    wreg      void 
 11660 ;; Registers used:
 11661 ;;		wreg, status,2
 11662 ;; Tracked objects:
 11663 ;;		On entry : 0/0
 11664 ;;		On exit  : 0/0
 11665 ;;		Unchanged: 0/0
 11666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11667 ;;      Params:         0       0       0       0       0       0       0       0       0
 11668 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11669 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11670 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11671 ;;Total ram usage:        0 bytes
 11672 ;; Hardware stack levels used:    1
 11673 ;; Hardware stack levels required when called:    3
 11674 ;; This function calls:
 11675 ;;		Nothing
 11676 ;; This function is called by:
 11677 ;;		_main
 11678 ;; This function uses a non-reentrant model
 11679 ;;
 11680                           
 11681                           	psect	text28
 11682  004208                     __ptext28:
 11683                           	opt stack 0
 11684  004208                     _Init_Timers:
 11685                           	opt stack 27
 11686                           
 11687                           ;Main.c: 189: RCONbits.IPEN = 1;
 11688                           
 11689                           ;incstack = 0
 11690  004208  8ED0               	bsf	4048,7,c	;volatile
 11691                           
 11692                           ;Main.c: 190: INTCON = 0xA0;
 11693  00420A  0EA0               	movlw	160
 11694  00420C  6EF2               	movwf	intcon,c	;volatile
 11695                           
 11696                           ;Main.c: 191: INTCON2 = 0x84;
 11697  00420E  0E84               	movlw	132
 11698  004210  6EF1               	movwf	intcon2,c	;volatile
 11699                           
 11700                           ;Main.c: 192: TMR0H = 0x0;
 11701  004212  0E00               	movlw	0
 11702  004214  6ED7               	movwf	4055,c	;volatile
 11703                           
 11704                           ;Main.c: 193: TMR0L = 0x0;
 11705  004216  0E00               	movlw	0
 11706  004218  6ED6               	movwf	4054,c	;volatile
 11707                           
 11708                           ;Main.c: 194: T0CON = 0xC3;
 11709  00421A  0EC3               	movlw	195
 11710  00421C  6ED5               	movwf	4053,c	;volatile
 11711  00421E  0012               	return		;funcret
 11712  004220                     __end_of_Init_Timers:
 11713                           	opt stack 0
 11714                           tblptru	equ	0xFF8
 11715                           tblptrh	equ	0xFF7
 11716                           tblptrl	equ	0xFF6
 11717                           tablat	equ	0xFF5
 11718                           prodh	equ	0xFF4
 11719                           prodl	equ	0xFF3
 11720                           intcon	equ	0xFF2
 11721                           intcon2	equ	0xFF1
 11722                           postinc0	equ	0xFEE
 11723                           wreg	equ	0xFE8
 11724                           postinc1	equ	0xFE6
 11725                           postdec1	equ	0xFE5
 11726                           fsr1h	equ	0xFE2
 11727                           fsr1l	equ	0xFE1
 11728                           indf2	equ	0xFDF
 11729                           postinc2	equ	0xFDE
 11730                           postdec2	equ	0xFDD
 11731                           fsr2h	equ	0xFDA
 11732                           fsr2l	equ	0xFD9
 11733                           status	equ	0xFD8
 11734                           
 11735 ;; *************** function _Init_Pwm *****************
 11736 ;; Defined at:
 11737 ;;		line 200 in file "../Main.c"
 11738 ;; Parameters:    Size  Location     Type
 11739 ;;		None
 11740 ;; Auto vars:     Size  Location     Type
 11741 ;;		None
 11742 ;; Return value:  Size  Location     Type
 11743 ;;                  1    wreg      void 
 11744 ;; Registers used:
 11745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11746 ;; Tracked objects:
 11747 ;;		On entry : 0/0
 11748 ;;		On exit  : 0/0
 11749 ;;		Unchanged: 0/0
 11750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11751 ;;      Params:         0       0       0       0       0       0       0       0       0
 11752 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11753 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11754 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11755 ;;Total ram usage:        0 bytes
 11756 ;; Hardware stack levels used:    1
 11757 ;; Hardware stack levels required when called:    5
 11758 ;; This function calls:
 11759 ;;		_SETxAPIxVAL
 11760 ;; This function is called by:
 11761 ;;		_main
 11762 ;; This function uses a non-reentrant model
 11763 ;;
 11764                           
 11765                           	psect	text29
 11766  004144                     __ptext29:
 11767                           	opt stack 0
 11768  004144                     _Init_Pwm:
 11769                           	opt stack 25
 11770                           
 11771                           ;Main.c: 203: SETxAPIxVAL(69, 1);
 11772                           
 11773                           ;incstack = 0
 11774  004144  0E00               	movlw	0
 11775  004146  6E1A               	movwf	SETxAPIxVAL@index+1,c
 11776  004148  0E45               	movlw	69
 11777  00414A  6E19               	movwf	SETxAPIxVAL@index,c
 11778  00414C  0E00               	movlw	0
 11779  00414E  6E1C               	movwf	SETxAPIxVAL@value+1,c
 11780  004150  0E01               	movlw	1
 11781  004152  6E1B               	movwf	SETxAPIxVAL@value,c
 11782  004154  ECB3  F01F         	call	_SETxAPIxVAL	;wreg free
 11783                           
 11784                           ;Main.c: 204: PR2=0xFF;
 11785  004158  68CB               	setf	4043,c	;volatile
 11786                           
 11787                           ;Main.c: 205: CCPR1L = 0x7F;
 11788  00415A  0E7F               	movlw	127
 11789  00415C  6EBE               	movwf	4030,c	;volatile
 11790                           
 11791                           ;Main.c: 206: CCP1CON = 0x0F;
 11792  00415E  0E0F               	movlw	15
 11793  004160  6EBD               	movwf	4029,c	;volatile
 11794                           
 11795                           ;Main.c: 207: T2CON = 0x04;
 11796  004162  0E04               	movlw	4
 11797  004164  6ECA               	movwf	4042,c	;volatile
 11798                           
 11799                           ;Main.c: 208: TRISCbits.TRISC2=0;TRISCbits.TRISC0=0;;
 11800  004166  9494               	bcf	3988,2,c	;volatile
 11801  004168  9094               	bcf	3988,0,c	;volatile
 11802  00416A  0012               	return		;funcret
 11803  00416C                     __end_of_Init_Pwm:
 11804                           	opt stack 0
 11805                           tblptru	equ	0xFF8
 11806                           tblptrh	equ	0xFF7
 11807                           tblptrl	equ	0xFF6
 11808                           tablat	equ	0xFF5
 11809                           prodh	equ	0xFF4
 11810                           prodl	equ	0xFF3
 11811                           intcon	equ	0xFF2
 11812                           intcon2	equ	0xFF1
 11813                           postinc0	equ	0xFEE
 11814                           wreg	equ	0xFE8
 11815                           postinc1	equ	0xFE6
 11816                           postdec1	equ	0xFE5
 11817                           fsr1h	equ	0xFE2
 11818                           fsr1l	equ	0xFE1
 11819                           indf2	equ	0xFDF
 11820                           postinc2	equ	0xFDE
 11821                           postdec2	equ	0xFDD
 11822                           fsr2h	equ	0xFDA
 11823                           fsr2l	equ	0xFD9
 11824                           status	equ	0xFD8
 11825                           
 11826 ;; *************** function _SETxAPIxVAL *****************
 11827 ;; Defined at:
 11828 ;;		line 216 in file "../api.c"
 11829 ;; Parameters:    Size  Location     Type
 11830 ;;  index           2   24[COMRAM] unsigned int 
 11831 ;;  value           2   26[COMRAM] unsigned int 
 11832 ;; Auto vars:     Size  Location     Type
 11833 ;;		None
 11834 ;; Return value:  Size  Location     Type
 11835 ;;                  1    wreg      void 
 11836 ;; Registers used:
 11837 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11838 ;; Tracked objects:
 11839 ;;		On entry : 0/0
 11840 ;;		On exit  : 0/0
 11841 ;;		Unchanged: 0/0
 11842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11843 ;;      Params:         4       0       0       0       0       0       0       0       0
 11844 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11845 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11846 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11847 ;;Total ram usage:        6 bytes
 11848 ;; Hardware stack levels used:    1
 11849 ;; Hardware stack levels required when called:    4
 11850 ;; This function calls:
 11851 ;;		_SENDxMESSAGE
 11852 ;; This function is called by:
 11853 ;;		_Init_Pwm
 11854 ;;		_Update_StateMchn
 11855 ;;		_Train_Path
 11856 ;;		_Green_Led
 11857 ;;		_Red_Led
 11858 ;;		_Debounce_Inputs
 11859 ;;		_Junction
 11860 ;;		_Train_Move_Left_Start
 11861 ;;		_Train_Move_Left_Brake
 11862 ;;		_Train_Move_Right_Start
 11863 ;;		_Train_Move_Right_Brake
 11864 ;;		_SETxPWM
 11865 ;;		_INCRxAPIxVAL
 11866 ;;		_DECRxAPIxVAL
 11867 ;; This function uses a non-reentrant model
 11868 ;;
 11869                           
 11870                           	psect	text30
 11871  003F66                     __ptext30:
 11872                           	opt stack 0
 11873  003F66                     _SETxAPIxVAL:
 11874                           	opt stack 22
 11875                           
 11876                           ;api.c: 217: if(API[index] != value){
 11877                           
 11878                           ;incstack = 0
 11879  003F66  90D8               	bcf	status,0,c
 11880  003F68  3419               	rlcf	SETxAPIxVAL@index,w,c
 11881  003F6A  6ED9               	movwf	fsr2l,c
 11882  003F6C  341A               	rlcf	SETxAPIxVAL@index+1,w,c
 11883  003F6E  6EDA               	movwf	fsr2h,c
 11884  003F70  0E00               	movlw	low _API
 11885  003F72  26D9               	addwf	fsr2l,f,c
 11886  003F74  0E01               	movlw	high _API
 11887  003F76  22DA               	addwfc	fsr2h,f,c
 11888  003F78  501B               	movf	SETxAPIxVAL@value,w,c
 11889  003F7A  18DE               	xorwf	postinc2,w,c
 11890  003F7C  E104               	bnz	u6600
 11891  003F7E  501C               	movf	SETxAPIxVAL@value+1,w,c
 11892  003F80  18DE               	xorwf	postinc2,w,c
 11893  003F82  B4D8               	btfsc	status,2,c
 11894  003F84  0012               	return	
 11895  003F86                     u6600:
 11896                           
 11897                           ;api.c: 218: API[index] = value;
 11898  003F86  90D8               	bcf	status,0,c
 11899  003F88  3419               	rlcf	SETxAPIxVAL@index,w,c
 11900  003F8A  6ED9               	movwf	fsr2l,c
 11901  003F8C  341A               	rlcf	SETxAPIxVAL@index+1,w,c
 11902  003F8E  6EDA               	movwf	fsr2h,c
 11903  003F90  0E00               	movlw	low _API
 11904  003F92  26D9               	addwf	fsr2l,f,c
 11905  003F94  0E01               	movlw	high _API
 11906  003F96  22DA               	addwfc	fsr2h,f,c
 11907  003F98  C01B  FFDE         	movff	SETxAPIxVAL@value,postinc2
 11908  003F9C  C01C  FFDD         	movff	SETxAPIxVAL@value+1,postdec2
 11909                           
 11910                           ;api.c: 219: SENDxMESSAGE(index, value);
 11911  003FA0  C019  F013         	movff	SETxAPIxVAL@index,SENDxMESSAGE@index
 11912  003FA4  C01A  F014         	movff	SETxAPIxVAL@index+1,SENDxMESSAGE@index+1
 11913  003FA8  C01B  F015         	movff	SETxAPIxVAL@value,SENDxMESSAGE@value
 11914  003FAC  C01C  F016         	movff	SETxAPIxVAL@value+1,SENDxMESSAGE@value+1
 11915  003FB0  ECEE  F01E         	call	_SENDxMESSAGE	;wreg free
 11916  003FB4  0012               	return	
 11917  003FB6                     __end_of_SETxAPIxVAL:
 11918                           	opt stack 0
 11919                           tblptru	equ	0xFF8
 11920                           tblptrh	equ	0xFF7
 11921                           tblptrl	equ	0xFF6
 11922                           tablat	equ	0xFF5
 11923                           prodh	equ	0xFF4
 11924                           prodl	equ	0xFF3
 11925                           intcon	equ	0xFF2
 11926                           intcon2	equ	0xFF1
 11927                           postinc0	equ	0xFEE
 11928                           wreg	equ	0xFE8
 11929                           postinc1	equ	0xFE6
 11930                           postdec1	equ	0xFE5
 11931                           fsr1h	equ	0xFE2
 11932                           fsr1l	equ	0xFE1
 11933                           indf2	equ	0xFDF
 11934                           postinc2	equ	0xFDE
 11935                           postdec2	equ	0xFDD
 11936                           fsr2h	equ	0xFDA
 11937                           fsr2l	equ	0xFD9
 11938                           status	equ	0xFD8
 11939                           
 11940 ;; *************** function _SENDxMESSAGE *****************
 11941 ;; Defined at:
 11942 ;;		line 212 in file "../terminal.c"
 11943 ;; Parameters:    Size  Location     Type
 11944 ;;  index           2   18[COMRAM] unsigned int 
 11945 ;;  value           2   20[COMRAM] unsigned int 
 11946 ;; Auto vars:     Size  Location     Type
 11947 ;;		None
 11948 ;; Return value:  Size  Location     Type
 11949 ;;                  1    wreg      void 
 11950 ;; Registers used:
 11951 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11952 ;; Tracked objects:
 11953 ;;		On entry : 0/0
 11954 ;;		On exit  : 0/0
 11955 ;;		Unchanged: 0/0
 11956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11957 ;;      Params:         4       0       0       0       0       0       0       0       0
 11958 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11959 ;;      Temps:          2       0       0       0       0       0       0       0       0
 11960 ;;      Totals:         6       0       0       0       0       0       0       0       0
 11961 ;;Total ram usage:        6 bytes
 11962 ;; Hardware stack levels used:    1
 11963 ;; Hardware stack levels required when called:    3
 11964 ;; This function calls:
 11965 ;;		Nothing
 11966 ;; This function is called by:
 11967 ;;		_TranslateMessage
 11968 ;;		_SETxAPIxVAL
 11969 ;;		_INCRxAPIxVAL
 11970 ;;		_DECRxAPIxVAL
 11971 ;; This function uses a non-reentrant model
 11972 ;;
 11973                           
 11974                           	psect	text31
 11975  003DDC                     __ptext31:
 11976                           	opt stack 0
 11977  003DDC                     _SENDxMESSAGE:
 11978                           	opt stack 22
 11979                           
 11980                           ;terminal.c: 214: Comm_List[WritePointer][0] = index;
 11981                           
 11982                           ;incstack = 0
 11983  003DDC  0EFC               	movlw	low _Comm_List
 11984  003DDE  6E17               	movwf	??_SENDxMESSAGE& (0+255),c
 11985  003DE0  0E04               	movlw	high _Comm_List
 11986  003DE2  6E18               	movwf	(??_SENDxMESSAGE+1)& (0+255),c
 11987  003DE4  90D8               	bcf	status,0,c
 11988  003DE6  0100               	movlb	0	; () banked
 11989  003DE8  3574               	rlcf	_WritePointer& (0+255),w,b
 11990  003DEA  6ED9               	movwf	fsr2l,c
 11991  003DEC  3575               	rlcf	(_WritePointer+1)& (0+255),w,b
 11992  003DEE  6EDA               	movwf	fsr2h,c
 11993  003DF0  90D8               	bcf	status,0,c
 11994  003DF2  36D9               	rlcf	fsr2l,f,c
 11995  003DF4  36DA               	rlcf	fsr2h,f,c
 11996  003DF6  5017               	movf	??_SENDxMESSAGE,w,c
 11997  003DF8  26D9               	addwf	fsr2l,f,c
 11998  003DFA  5018               	movf	??_SENDxMESSAGE+1,w,c
 11999  003DFC  22DA               	addwfc	fsr2h,f,c
 12000  003DFE  C013  FFDE         	movff	SENDxMESSAGE@index,postinc2
 12001  003E02  C014  FFDD         	movff	SENDxMESSAGE@index+1,postdec2
 12002                           
 12003                           ;terminal.c: 215: Comm_List[WritePointer][1] = value;
 12004  003E06  C074  F017         	movff	_WritePointer,??_SENDxMESSAGE
 12005  003E0A  C075  F018         	movff	_WritePointer+1,??_SENDxMESSAGE+1
 12006  003E0E  90D8               	bcf	status,0,c
 12007  003E10  3617               	rlcf	??_SENDxMESSAGE,f,c
 12008  003E12  3618               	rlcf	??_SENDxMESSAGE+1,f,c
 12009  003E14  90D8               	bcf	status,0,c
 12010  003E16  3617               	rlcf	??_SENDxMESSAGE,f,c
 12011  003E18  3618               	rlcf	??_SENDxMESSAGE+1,f,c
 12012  003E1A  0E02               	movlw	2
 12013  003E1C  2617               	addwf	??_SENDxMESSAGE,f,c
 12014  003E1E  0E00               	movlw	0
 12015  003E20  2218               	addwfc	??_SENDxMESSAGE+1,f,c
 12016  003E22  0EFC               	movlw	low _Comm_List
 12017  003E24  2417               	addwf	??_SENDxMESSAGE,w,c
 12018  003E26  6ED9               	movwf	fsr2l,c
 12019  003E28  0E04               	movlw	high _Comm_List
 12020  003E2A  2018               	addwfc	??_SENDxMESSAGE+1,w,c
 12021  003E2C  6EDA               	movwf	fsr2h,c
 12022  003E2E  C015  FFDE         	movff	SENDxMESSAGE@value,postinc2
 12023  003E32  C016  FFDD         	movff	SENDxMESSAGE@value+1,postdec2
 12024                           
 12025                           ; BSR set to: 0
 12026                           ;terminal.c: 217: WritePointer++;
 12027  003E36  4B74               	infsnz	_WritePointer& (0+255),f,b
 12028  003E38  2B75               	incf	(_WritePointer+1)& (0+255),f,b
 12029                           
 12030                           ; BSR set to: 0
 12031                           ;terminal.c: 218: if (WritePointer > 189){
 12032  003E3A  5175               	movf	(_WritePointer+1)& (0+255),w,b
 12033  003E3C  E104               	bnz	u6590
 12034  003E3E  0EBE               	movlw	190
 12035  003E40  5D74               	subwf	_WritePointer& (0+255),w,b
 12036  003E42  A0D8               	btfss	status,0,c
 12037  003E44  0012               	return	
 12038  003E46                     u6590:
 12039                           
 12040                           ; BSR set to: 0
 12041                           ;terminal.c: 219: WritePointer = 0;
 12042  003E46  0E00               	movlw	0
 12043  003E48  6F75               	movwf	(_WritePointer+1)& (0+255),b
 12044  003E4A  0E00               	movlw	0
 12045  003E4C  6F74               	movwf	_WritePointer& (0+255),b
 12046  003E4E  0012               	return	
 12047  003E50                     __end_of_SENDxMESSAGE:
 12048                           	opt stack 0
 12049                           tblptru	equ	0xFF8
 12050                           tblptrh	equ	0xFF7
 12051                           tblptrl	equ	0xFF6
 12052                           tablat	equ	0xFF5
 12053                           prodh	equ	0xFF4
 12054                           prodl	equ	0xFF3
 12055                           intcon	equ	0xFF2
 12056                           intcon2	equ	0xFF1
 12057                           postinc0	equ	0xFEE
 12058                           wreg	equ	0xFE8
 12059                           postinc1	equ	0xFE6
 12060                           postdec1	equ	0xFE5
 12061                           fsr1h	equ	0xFE2
 12062                           fsr1l	equ	0xFE1
 12063                           indf2	equ	0xFDF
 12064                           postinc2	equ	0xFDE
 12065                           postdec2	equ	0xFDD
 12066                           fsr2h	equ	0xFDA
 12067                           fsr2l	equ	0xFD9
 12068                           status	equ	0xFD8
 12069                           
 12070 ;; *************** function _EUSART1_Initialize *****************
 12071 ;; Defined at:
 12072 ;;		line 78 in file "../eusart1.c"
 12073 ;; Parameters:    Size  Location     Type
 12074 ;;		None
 12075 ;; Auto vars:     Size  Location     Type
 12076 ;;  baud_rate       2   18[COMRAM] unsigned int 
 12077 ;; Return value:  Size  Location     Type
 12078 ;;                  1    wreg      void 
 12079 ;; Registers used:
 12080 ;;		wreg, status,2
 12081 ;; Tracked objects:
 12082 ;;		On entry : 0/0
 12083 ;;		On exit  : 0/0
 12084 ;;		Unchanged: 0/0
 12085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12086 ;;      Params:         0       0       0       0       0       0       0       0       0
 12087 ;;      Locals:         2       0       0       0       0       0       0       0       0
 12088 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12089 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12090 ;;Total ram usage:        2 bytes
 12091 ;; Hardware stack levels used:    1
 12092 ;; Hardware stack levels required when called:    3
 12093 ;; This function calls:
 12094 ;;		Nothing
 12095 ;; This function is called by:
 12096 ;;		_main
 12097 ;; This function uses a non-reentrant model
 12098 ;;
 12099                           
 12100                           	psect	text32
 12101  003FB6                     __ptext32:
 12102                           	opt stack 0
 12103  003FB6                     _EUSART1_Initialize:
 12104                           	opt stack 27
 12105                           
 12106                           ;eusart1.c: 80: PIE1bits.RC1IE = 0;
 12107                           
 12108                           ; BSR set to: 0
 12109                           ;incstack = 0
 12110  003FB6  9A9D               	bcf	3997,5,c	;volatile
 12111                           
 12112                           ;eusart1.c: 81: PIE1bits.TX1IE = 0;
 12113  003FB8  989D               	bcf	3997,4,c	;volatile
 12114                           
 12115                           ;eusart1.c: 85: BAUDCONbits.BRG16 = 1;
 12116  003FBA  86B8               	bsf	4024,3,c	;volatile
 12117                           
 12118                           ;eusart1.c: 87: RCSTAbits.SPEN = 1;
 12119  003FBC  8EAB               	bsf	4011,7,c	;volatile
 12120                           
 12121                           ;eusart1.c: 88: RCSTAbits.RX9 = 0;
 12122  003FBE  9CAB               	bcf	4011,6,c	;volatile
 12123                           
 12124                           ;eusart1.c: 89: RCSTAbits.CREN = 1;
 12125  003FC0  88AB               	bsf	4011,4,c	;volatile
 12126                           
 12127                           ;eusart1.c: 90: RCSTAbits.ADDEN = 0;
 12128  003FC2  96AB               	bcf	4011,3,c	;volatile
 12129                           
 12130                           ;eusart1.c: 92: TXSTAbits.TX9 = 0;
 12131  003FC4  9CAC               	bcf	4012,6,c	;volatile
 12132                           
 12133                           ;eusart1.c: 93: TXSTAbits.TXEN = 1;
 12134  003FC6  8AAC               	bsf	4012,5,c	;volatile
 12135                           
 12136                           ;eusart1.c: 94: TXSTAbits.SYNC = 0;
 12137  003FC8  98AC               	bcf	4012,4,c	;volatile
 12138                           
 12139                           ;eusart1.c: 95: TXSTAbits.SENDB = 0;
 12140  003FCA  96AC               	bcf	4012,3,c	;volatile
 12141                           
 12142                           ;eusart1.c: 96: TXSTAbits.BRGH = 1;
 12143  003FCC  84AC               	bsf	4012,2,c	;volatile
 12144                           
 12145                           ;eusart1.c: 97: TXSTAbits.TRMT = 1;
 12146  003FCE  82AC               	bsf	4012,1,c	;volatile
 12147                           
 12148                           ;eusart1.c: 98: TXSTAbits.TX9D = 0;
 12149  003FD0  90AC               	bcf	4012,0,c	;volatile
 12150                           
 12151                           ;eusart1.c: 100: unsigned int baud_rate;
 12152                           ;eusart1.c: 102: baud_rate = 417;
 12153  003FD2  0E01               	movlw	1
 12154  003FD4  6E14               	movwf	EUSART1_Initialize@baud_rate+1,c
 12155  003FD6  0EA1               	movlw	161
 12156  003FD8  6E13               	movwf	EUSART1_Initialize@baud_rate,c
 12157                           
 12158                           ;eusart1.c: 104: SPBRGH = baud_rate >> 8;
 12159  003FDA  5014               	movf	EUSART1_Initialize@baud_rate+1,w,c
 12160  003FDC  6EB0               	movwf	4016,c	;volatile
 12161                           
 12162                           ;eusart1.c: 105: SPBRG = baud_rate;
 12163  003FDE  C013  FFAF         	movff	EUSART1_Initialize@baud_rate,4015	;volatile
 12164                           
 12165                           ;eusart1.c: 109: eusart1TxHead = 0;
 12166  003FE2  0E00               	movlw	0
 12167  003FE4  6E44               	movwf	_eusart1TxHead,c
 12168                           
 12169                           ;eusart1.c: 110: eusart1TxTail = 0;
 12170  003FE6  0E00               	movlw	0
 12171  003FE8  6E43               	movwf	_eusart1TxTail,c
 12172                           
 12173                           ;eusart1.c: 111: eusart1TxBufferRemaining = sizeof (eusart1TxBuffer);
 12174  003FEA  0E7E               	movlw	126
 12175  003FEC  6E42               	movwf	_eusart1TxBufferRemaining,c	;volatile
 12176                           
 12177                           ;eusart1.c: 113: eusart1RxHead = 0;
 12178  003FEE  0E00               	movlw	0
 12179  003FF0  6E41               	movwf	_eusart1RxHead,c
 12180                           
 12181                           ;eusart1.c: 114: eusart1RxTail = 0;
 12182  003FF2  0E00               	movlw	0
 12183  003FF4  6E40               	movwf	_eusart1RxTail,c
 12184                           
 12185                           ;eusart1.c: 115: eusart1RxCount = 0;
 12186  003FF6  0E00               	movlw	0
 12187  003FF8  6E3F               	movwf	_eusart1RxCount,c	;volatile
 12188                           
 12189                           ;eusart1.c: 118: PIE1bits.RC1IE = 1;
 12190  003FFA  8A9D               	bsf	3997,5,c	;volatile
 12191  003FFC  0012               	return		;funcret
 12192  003FFE                     __end_of_EUSART1_Initialize:
 12193                           	opt stack 0
 12194                           tblptru	equ	0xFF8
 12195                           tblptrh	equ	0xFF7
 12196                           tblptrl	equ	0xFF6
 12197                           tablat	equ	0xFF5
 12198                           prodh	equ	0xFF4
 12199                           prodl	equ	0xFF3
 12200                           intcon	equ	0xFF2
 12201                           intcon2	equ	0xFF1
 12202                           postinc0	equ	0xFEE
 12203                           wreg	equ	0xFE8
 12204                           postinc1	equ	0xFE6
 12205                           postdec1	equ	0xFE5
 12206                           fsr1h	equ	0xFE2
 12207                           fsr1l	equ	0xFE1
 12208                           indf2	equ	0xFDF
 12209                           postinc2	equ	0xFDE
 12210                           postdec2	equ	0xFDD
 12211                           fsr2h	equ	0xFDA
 12212                           fsr2l	equ	0xFD9
 12213                           status	equ	0xFD8
 12214                           
 12215 ;; *************** function _EEPROMxREAD *****************
 12216 ;; Defined at:
 12217 ;;		line 60 in file "../eeprom_settings.c"
 12218 ;; Parameters:    Size  Location     Type
 12219 ;;		None
 12220 ;; Auto vars:     Size  Location     Type
 12221 ;;  Data            2   30[COMRAM] unsigned int 
 12222 ;;  i               1   32[COMRAM] unsigned char 
 12223 ;; Return value:  Size  Location     Type
 12224 ;;                  2   26[COMRAM] unsigned int 
 12225 ;; Registers used:
 12226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12227 ;; Tracked objects:
 12228 ;;		On entry : 0/0
 12229 ;;		On exit  : 0/0
 12230 ;;		Unchanged: 0/0
 12231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12232 ;;      Params:         2       0       0       0       0       0       0       0       0
 12233 ;;      Locals:         3       0       0       0       0       0       0       0       0
 12234 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12235 ;;      Totals:         7       0       0       0       0       0       0       0       0
 12236 ;;Total ram usage:        7 bytes
 12237 ;; Hardware stack levels used:    1
 12238 ;; Hardware stack levels required when called:    4
 12239 ;; This function calls:
 12240 ;;		_Eeprom_Read
 12241 ;; This function is called by:
 12242 ;;		_main
 12243 ;; This function uses a non-reentrant model
 12244 ;;
 12245                           
 12246                           	psect	text33
 12247  003894                     __ptext33:
 12248                           	opt stack 0
 12249  003894                     _EEPROMxREAD:
 12250                           	opt stack 26
 12251                           
 12252                           ;eeprom_settings.c: 62: unsigned char i = 0;
 12253                           
 12254                           ;incstack = 0
 12255  003894  0E00               	movlw	0
 12256  003896  6E21               	movwf	EEPROMxREAD@i,c
 12257                           
 12258                           ;eeprom_settings.c: 63: unsigned int Data = 0;
 12259  003898  0E00               	movlw	0
 12260  00389A  6E20               	movwf	EEPROMxREAD@Data+1,c
 12261  00389C  0E00               	movlw	0
 12262  00389E  6E1F               	movwf	EEPROMxREAD@Data,c
 12263                           
 12264                           ;eeprom_settings.c: 68: if (!WriteActive){
 12265  0038A0  0100               	movlb	0	; () banked
 12266  0038A2  516C               	movf	_WriteActive& (0+255),w,b
 12267  0038A4  116D               	iorwf	(_WriteActive+1)& (0+255),w,b
 12268  0038A6  A4D8               	btfss	status,2,c
 12269  0038A8  D059               	goto	l735
 12270                           
 12271                           ; BSR set to: 0
 12272                           ;eeprom_settings.c: 69: ReadActive = 1;
 12273  0038AA  0E00               	movlw	0
 12274  0038AC  6F6F               	movwf	(_ReadActive+1)& (0+255),b
 12275  0038AE  0E01               	movlw	1
 12276  0038B0  6F6E               	movwf	_ReadActive& (0+255),b
 12277                           
 12278                           ;eeprom_settings.c: 70: INTCON = 0x00;
 12279  0038B2  0E00               	movlw	0
 12280  0038B4  6EF2               	movwf	intcon,c	;volatile
 12281                           
 12282                           ;eeprom_settings.c: 72: for(i = 0; i < 18; i++ )
 12283  0038B6  0E00               	movlw	0
 12284  0038B8  6E21               	movwf	EEPROMxREAD@i,c
 12285  0038BA                     l5982:
 12286                           
 12287                           ; BSR set to: 0
 12288  0038BA  0E11               	movlw	17
 12289  0038BC  6421               	cpfsgt	EEPROMxREAD@i,c
 12290  0038BE  D001               	goto	l736
 12291  0038C0  D041               	goto	u5390
 12292  0038C2                     l736:
 12293                           
 12294                           ;eeprom_settings.c: 73: {
 12295                           ;eeprom_settings.c: 74: Data = Eeprom_Read(i);
 12296                           
 12297                           ; BSR set to: 0
 12298  0038C2  C021  F013         	movff	EEPROMxREAD@i,Eeprom_Read@Location
 12299  0038C6  6A14               	clrf	Eeprom_Read@Location+1,c
 12300  0038C8  EC5C  F01F         	call	_Eeprom_Read	;wreg free
 12301  0038CC  C013  F01F         	movff	?_Eeprom_Read,EEPROMxREAD@Data
 12302  0038D0  C014  F020         	movff	?_Eeprom_Read+1,EEPROMxREAD@Data+1
 12303                           
 12304                           ;eeprom_settings.c: 78: API[ApiList[i]] = Data;
 12305  0038D4  5021               	movf	EEPROMxREAD@i,w,c
 12306  0038D6  0D02               	mullw	2
 12307  0038D8  0E01               	movlw	low _ApiList
 12308  0038DA  24F3               	addwf	prodl,w,c
 12309  0038DC  6EF6               	movwf	tblptrl,c
 12310  0038DE  0E08               	movlw	high _ApiList
 12311  0038E0  20F4               	addwfc	prodh,w,c
 12312  0038E2  6EF7               	movwf	tblptrh,c
 12313  0038E4                     	if	0	;There are less than 3 active tblptr bytes
 12314  0038E4                     	endif
 12315  0038E4  0009               	tblrd		*+
 12316  0038E6  CFF5 F01D          	movff	tablat,??_EEPROMxREAD
 12317  0038EA  0009               	tblrd		*+
 12318  0038EC  CFF5 F01E          	movff	tablat,??_EEPROMxREAD+1
 12319  0038F0  90D8               	bcf	status,0,c
 12320  0038F2  361D               	rlcf	??_EEPROMxREAD,f,c
 12321  0038F4  361E               	rlcf	??_EEPROMxREAD+1,f,c
 12322  0038F6  0E00               	movlw	low _API
 12323  0038F8  241D               	addwf	??_EEPROMxREAD,w,c
 12324  0038FA  6ED9               	movwf	fsr2l,c
 12325  0038FC  0E01               	movlw	high _API
 12326  0038FE  201E               	addwfc	??_EEPROMxREAD+1,w,c
 12327  003900  6EDA               	movwf	fsr2h,c
 12328  003902  C01F  FFDE         	movff	EEPROMxREAD@Data,postinc2
 12329  003906  C020  FFDD         	movff	EEPROMxREAD@Data+1,postdec2
 12330                           
 12331                           ;eeprom_settings.c: 79: API_EEPROM[ApiList[i]] = Data;
 12332  00390A  5021               	movf	EEPROMxREAD@i,w,c
 12333  00390C  0D02               	mullw	2
 12334  00390E  0E01               	movlw	low _ApiList
 12335  003910  24F3               	addwf	prodl,w,c
 12336  003912  6EF6               	movwf	tblptrl,c
 12337  003914  0E08               	movlw	high _ApiList
 12338  003916  20F4               	addwfc	prodh,w,c
 12339  003918  6EF7               	movwf	tblptrh,c
 12340  00391A                     	if	0	;There are less than 3 active tblptr bytes
 12341  00391A                     	endif
 12342  00391A  0009               	tblrd		*+
 12343  00391C  CFF5 F01D          	movff	tablat,??_EEPROMxREAD
 12344  003920  0009               	tblrd		*+
 12345  003922  CFF5 F01E          	movff	tablat,??_EEPROMxREAD+1
 12346  003926  90D8               	bcf	status,0,c
 12347  003928  361D               	rlcf	??_EEPROMxREAD,f,c
 12348  00392A  361E               	rlcf	??_EEPROMxREAD+1,f,c
 12349  00392C  0E00               	movlw	low _API_EEPROM
 12350  00392E  241D               	addwf	??_EEPROMxREAD,w,c
 12351  003930  6ED9               	movwf	fsr2l,c
 12352  003932  0E03               	movlw	high _API_EEPROM
 12353  003934  201E               	addwfc	??_EEPROMxREAD+1,w,c
 12354  003936  6EDA               	movwf	fsr2h,c
 12355  003938  C01F  FFDE         	movff	EEPROMxREAD@Data,postinc2
 12356  00393C  C020  FFDD         	movff	EEPROMxREAD@Data+1,postdec2
 12357  003940  2A21               	incf	EEPROMxREAD@i,f,c
 12358  003942  D7BB               	goto	l5982
 12359  003944                     u5390:
 12360                           
 12361                           ;eeprom_settings.c: 81: }
 12362                           ;eeprom_settings.c: 83: INTCON = 0xA0;
 12363  003944  0EA0               	movlw	160
 12364  003946  6EF2               	movwf	intcon,c	;volatile
 12365                           
 12366                           ;eeprom_settings.c: 84: ReadActive = 0;
 12367  003948  0E00               	movlw	0
 12368  00394A  0100               	movlb	0	; () banked
 12369  00394C  6F6F               	movwf	(_ReadActive+1)& (0+255),b
 12370  00394E  0E00               	movlw	0
 12371  003950  6F6E               	movwf	_ReadActive& (0+255),b
 12372                           
 12373                           ;eeprom_settings.c: 85: return (1);
 12374  003952  0E00               	movlw	0
 12375  003954  6E1C               	movwf	?_EEPROMxREAD+1,c
 12376  003956  0E01               	movlw	1
 12377  003958  6E1B               	movwf	?_EEPROMxREAD,c
 12378                           
 12379                           ; BSR set to: 0
 12380                           ;eeprom_settings.c: 86: }
 12381                           
 12382                           ; BSR set to: 0
 12383  00395A  0012               	return	
 12384  00395C                     l735:
 12385                           
 12386                           ; BSR set to: 0
 12387                           ;eeprom_settings.c: 87: else{
 12388                           ;eeprom_settings.c: 88: return (0);
 12389                           
 12390                           ; BSR set to: 0
 12391  00395C  0E00               	movlw	0
 12392  00395E  6E1C               	movwf	?_EEPROMxREAD+1,c
 12393  003960  0E00               	movlw	0
 12394  003962  6E1B               	movwf	?_EEPROMxREAD,c
 12395                           
 12396                           ; BSR set to: 0
 12397  003964  0012               	return	
 12398  003966                     __end_of_EEPROMxREAD:
 12399                           	opt stack 0
 12400                           tblptru	equ	0xFF8
 12401                           tblptrh	equ	0xFF7
 12402                           tblptrl	equ	0xFF6
 12403                           tablat	equ	0xFF5
 12404                           prodh	equ	0xFF4
 12405                           prodl	equ	0xFF3
 12406                           intcon	equ	0xFF2
 12407                           intcon2	equ	0xFF1
 12408                           postinc0	equ	0xFEE
 12409                           wreg	equ	0xFE8
 12410                           postinc1	equ	0xFE6
 12411                           postdec1	equ	0xFE5
 12412                           fsr1h	equ	0xFE2
 12413                           fsr1l	equ	0xFE1
 12414                           indf2	equ	0xFDF
 12415                           postinc2	equ	0xFDE
 12416                           postdec2	equ	0xFDD
 12417                           fsr2h	equ	0xFDA
 12418                           fsr2l	equ	0xFD9
 12419                           status	equ	0xFD8
 12420                           
 12421 ;; *************** function _Eeprom_Read *****************
 12422 ;; Defined at:
 12423 ;;		line 107 in file "../eeprom_settings.c"
 12424 ;; Parameters:    Size  Location     Type
 12425 ;;  Location        2   18[COMRAM] unsigned int 
 12426 ;; Auto vars:     Size  Location     Type
 12427 ;;  Return_Data     2   24[COMRAM] unsigned int 
 12428 ;;  Location_Hig    2   22[COMRAM] unsigned int 
 12429 ;;  Location_Low    2   20[COMRAM] unsigned int 
 12430 ;; Return value:  Size  Location     Type
 12431 ;;                  2   18[COMRAM] unsigned int 
 12432 ;; Registers used:
 12433 ;;		wreg, status,2, status,0
 12434 ;; Tracked objects:
 12435 ;;		On entry : 0/0
 12436 ;;		On exit  : 0/0
 12437 ;;		Unchanged: 0/0
 12438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12439 ;;      Params:         2       0       0       0       0       0       0       0       0
 12440 ;;      Locals:         6       0       0       0       0       0       0       0       0
 12441 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12442 ;;      Totals:         8       0       0       0       0       0       0       0       0
 12443 ;;Total ram usage:        8 bytes
 12444 ;; Hardware stack levels used:    1
 12445 ;; Hardware stack levels required when called:    3
 12446 ;; This function calls:
 12447 ;;		Nothing
 12448 ;; This function is called by:
 12449 ;;		_EEPROMxREAD
 12450 ;; This function uses a non-reentrant model
 12451 ;;
 12452                           
 12453                           	psect	text34
 12454  003EB8                     __ptext34:
 12455                           	opt stack 0
 12456  003EB8                     _Eeprom_Read:
 12457                           	opt stack 26
 12458                           
 12459                           ;eeprom_settings.c: 109: unsigned int Location_High_Byte = Location * 2;
 12460                           
 12461                           ; BSR set to: 0
 12462                           ;incstack = 0
 12463  003EB8  90D8               	bcf	status,0,c
 12464  003EBA  3413               	rlcf	Eeprom_Read@Location,w,c
 12465  003EBC  6E17               	movwf	Eeprom_Read@Location_High_Byte,c
 12466  003EBE  3414               	rlcf	Eeprom_Read@Location+1,w,c
 12467  003EC0  6E18               	movwf	Eeprom_Read@Location_High_Byte+1,c
 12468                           
 12469                           ;eeprom_settings.c: 110: unsigned int Location_Low_Byte = Location_High_Byte + 1;
 12470  003EC2  0E01               	movlw	1
 12471  003EC4  2417               	addwf	Eeprom_Read@Location_High_Byte,w,c
 12472  003EC6  6E15               	movwf	Eeprom_Read@Location_Low_Byte,c
 12473  003EC8  0E00               	movlw	0
 12474  003ECA  2018               	addwfc	Eeprom_Read@Location_High_Byte+1,w,c
 12475  003ECC  6E16               	movwf	Eeprom_Read@Location_Low_Byte+1,c
 12476                           
 12477                           ;eeprom_settings.c: 111: unsigned int Return_Data = 0;
 12478  003ECE  0E00               	movlw	0
 12479  003ED0  6E1A               	movwf	Eeprom_Read@Return_Data+1,c
 12480  003ED2  0E00               	movlw	0
 12481  003ED4  6E19               	movwf	Eeprom_Read@Return_Data,c
 12482                           
 12483                           ;eeprom_settings.c: 115: EECON1bits.EEPGD = 0;
 12484  003ED6  9EA6               	bcf	4006,7,c	;volsfr
 12485                           
 12486                           ;eeprom_settings.c: 116: EECON1bits.CFGS = 0;
 12487  003ED8  9CA6               	bcf	4006,6,c	;volsfr
 12488                           
 12489                           ;eeprom_settings.c: 117: EEADR = Location_High_Byte;
 12490  003EDA  C017  FFA9         	movff	Eeprom_Read@Location_High_Byte,4009	;volatile
 12491                           
 12492                           ;eeprom_settings.c: 118: EECON1bits.RD = 1;
 12493  003EDE  80A6               	bsf	4006,0,c	;volsfr
 12494  003EE0  B0A6               	btfsc	4006,0,c	;volsfr
 12495  003EE2  D7FE               	goto	l743
 12496                           
 12497                           ;eeprom_settings.c: 120: Return_Data = EEDATA;
 12498  003EE4  CFA8 F019          	movff	4008,Eeprom_Read@Return_Data	;volatile
 12499  003EE8  6A1A               	clrf	Eeprom_Read@Return_Data+1,c
 12500                           
 12501                           ;eeprom_settings.c: 121: Return_Data = Return_Data << 8;
 12502  003EEA  5019               	movf	Eeprom_Read@Return_Data,w,c
 12503  003EEC  6E1A               	movwf	Eeprom_Read@Return_Data+1,c
 12504  003EEE  6A19               	clrf	Eeprom_Read@Return_Data,c
 12505                           
 12506                           ;eeprom_settings.c: 126: EECON1bits.EEPGD = 0;
 12507  003EF0  9EA6               	bcf	4006,7,c	;volsfr
 12508                           
 12509                           ;eeprom_settings.c: 127: EECON1bits.CFGS = 0;
 12510  003EF2  9CA6               	bcf	4006,6,c	;volsfr
 12511                           
 12512                           ;eeprom_settings.c: 128: EEADR = Location_Low_Byte;
 12513  003EF4  C015  FFA9         	movff	Eeprom_Read@Location_Low_Byte,4009	;volatile
 12514                           
 12515                           ;eeprom_settings.c: 129: EECON1bits.RD = 1;
 12516  003EF8  80A6               	bsf	4006,0,c	;volsfr
 12517  003EFA  B0A6               	btfsc	4006,0,c	;volsfr
 12518  003EFC  D7FE               	goto	l746
 12519                           
 12520                           ;eeprom_settings.c: 131: Return_Data = Return_Data | EEDATA;
 12521  003EFE  5019               	movf	Eeprom_Read@Return_Data,w,c
 12522  003F00  10A8               	iorwf	4008,w,c	;volatile
 12523  003F02  6E19               	movwf	Eeprom_Read@Return_Data,c
 12524  003F04  501A               	movf	Eeprom_Read@Return_Data+1,w,c
 12525  003F06  6E1A               	movwf	Eeprom_Read@Return_Data+1,c
 12526                           
 12527                           ;eeprom_settings.c: 136: EEADR = 0xFF;
 12528  003F08  68A9               	setf	4009,c	;volatile
 12529                           
 12530                           ;eeprom_settings.c: 140: return (Return_Data);
 12531  003F0A  C019  F013         	movff	Eeprom_Read@Return_Data,?_Eeprom_Read
 12532  003F0E  C01A  F014         	movff	Eeprom_Read@Return_Data+1,?_Eeprom_Read+1
 12533  003F12  0012               	return	
 12534  003F14                     __end_of_Eeprom_Read:
 12535                           	opt stack 0
 12536                           tblptru	equ	0xFF8
 12537                           tblptrh	equ	0xFF7
 12538                           tblptrl	equ	0xFF6
 12539                           tablat	equ	0xFF5
 12540                           prodh	equ	0xFF4
 12541                           prodl	equ	0xFF3
 12542                           intcon	equ	0xFF2
 12543                           intcon2	equ	0xFF1
 12544                           postinc0	equ	0xFEE
 12545                           wreg	equ	0xFE8
 12546                           postinc1	equ	0xFE6
 12547                           postdec1	equ	0xFE5
 12548                           fsr1h	equ	0xFE2
 12549                           fsr1l	equ	0xFE1
 12550                           indf2	equ	0xFDF
 12551                           postinc2	equ	0xFDE
 12552                           postdec2	equ	0xFDD
 12553                           fsr2h	equ	0xFDA
 12554                           fsr2l	equ	0xFD9
 12555                           status	equ	0xFD8
 12556                           
 12557 ;; *************** function _DIAGNOSTICxTOxPC *****************
 12558 ;; Defined at:
 12559 ;;		line 192 in file "../terminal.c"
 12560 ;; Parameters:    Size  Location     Type
 12561 ;;		None
 12562 ;; Auto vars:     Size  Location     Type
 12563 ;;		None
 12564 ;; Return value:  Size  Location     Type
 12565 ;;                  1    wreg      void 
 12566 ;; Registers used:
 12567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12568 ;; Tracked objects:
 12569 ;;		On entry : 0/0
 12570 ;;		On exit  : 0/0
 12571 ;;		Unchanged: 0/0
 12572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12573 ;;      Params:         0       0       0       0       0       0       0       0       0
 12574 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12575 ;;      Temps:          4       0       0       0       0       0       0       0       0
 12576 ;;      Totals:         4       0       0       0       0       0       0       0       0
 12577 ;;Total ram usage:        4 bytes
 12578 ;; Hardware stack levels used:    1
 12579 ;; Hardware stack levels required when called:    6
 12580 ;; This function calls:
 12581 ;;		_SendMessage
 12582 ;; This function is called by:
 12583 ;;		_main
 12584 ;; This function uses a non-reentrant model
 12585 ;;
 12586                           
 12587                           	psect	text35
 12588  003B8A                     __ptext35:
 12589                           	opt stack 0
 12590  003B8A                     _DIAGNOSTICxTOxPC:
 12591                           	opt stack 24
 12592                           
 12593                           ;terminal.c: 194: if (DelayCounter > 5000){
 12594                           
 12595                           ;incstack = 0
 12596  003B8A  0E89               	movlw	137
 12597  003B8C  0100               	movlb	0	; () banked
 12598  003B8E  5D70               	subwf	_DelayCounter& (0+255),w,b
 12599  003B90  0E13               	movlw	19
 12600  003B92  5971               	subwfb	(_DelayCounter+1)& (0+255),w,b
 12601  003B94  A0D8               	btfss	status,0,c
 12602  003B96  D047               	goto	l661
 12603                           
 12604                           ; BSR set to: 0
 12605                           ;terminal.c: 195: DelayCounter = 1;
 12606  003B98  0E00               	movlw	0
 12607  003B9A  6F71               	movwf	(_DelayCounter+1)& (0+255),b
 12608  003B9C  0E01               	movlw	1
 12609  003B9E  6F70               	movwf	_DelayCounter& (0+255),b
 12610                           
 12611                           ; BSR set to: 0
 12612                           ;terminal.c: 197: if (WritePointer != ReadPointer){
 12613  003BA0  5172               	movf	_ReadPointer& (0+255),w,b
 12614  003BA2  1974               	xorwf	_WritePointer& (0+255),w,b
 12615  003BA4  E104               	bnz	u9600
 12616  003BA6  5173               	movf	(_ReadPointer+1)& (0+255),w,b
 12617  003BA8  1975               	xorwf	(_WritePointer+1)& (0+255),w,b
 12618  003BAA  B4D8               	btfsc	status,2,c
 12619  003BAC  0012               	return	
 12620  003BAE                     u9600:
 12621                           
 12622                           ; BSR set to: 0
 12623                           ;terminal.c: 199: SendMessage(Comm_List[ReadPointer][0], Comm_List[ReadPointer][1]);
 12624  003BAE  0EFC               	movlw	low _Comm_List
 12625  003BB0  6E20               	movwf	??_DIAGNOSTICxTOxPC& (0+255),c
 12626  003BB2  0E04               	movlw	high _Comm_List
 12627  003BB4  6E21               	movwf	(??_DIAGNOSTICxTOxPC+1)& (0+255),c
 12628  003BB6  90D8               	bcf	status,0,c
 12629  003BB8  3572               	rlcf	_ReadPointer& (0+255),w,b
 12630  003BBA  6ED9               	movwf	fsr2l,c
 12631  003BBC  3573               	rlcf	(_ReadPointer+1)& (0+255),w,b
 12632  003BBE  6EDA               	movwf	fsr2h,c
 12633  003BC0  90D8               	bcf	status,0,c
 12634  003BC2  36D9               	rlcf	fsr2l,f,c
 12635  003BC4  36DA               	rlcf	fsr2h,f,c
 12636  003BC6  5020               	movf	??_DIAGNOSTICxTOxPC,w,c
 12637  003BC8  26D9               	addwf	fsr2l,f,c
 12638  003BCA  5021               	movf	??_DIAGNOSTICxTOxPC+1,w,c
 12639  003BCC  22DA               	addwfc	fsr2h,f,c
 12640  003BCE  CFDE F0BA          	movff	postinc2,SendMessage@index
 12641  003BD2  CFDD F0BB          	movff	postdec2,SendMessage@index+1
 12642  003BD6  C072  F022         	movff	_ReadPointer,??_DIAGNOSTICxTOxPC+2
 12643  003BDA  C073  F023         	movff	_ReadPointer+1,??_DIAGNOSTICxTOxPC+3
 12644  003BDE  90D8               	bcf	status,0,c
 12645  003BE0  3622               	rlcf	??_DIAGNOSTICxTOxPC+2,f,c
 12646  003BE2  3623               	rlcf	??_DIAGNOSTICxTOxPC+3,f,c
 12647  003BE4  90D8               	bcf	status,0,c
 12648  003BE6  3622               	rlcf	??_DIAGNOSTICxTOxPC+2,f,c
 12649  003BE8  3623               	rlcf	??_DIAGNOSTICxTOxPC+3,f,c
 12650  003BEA  0E02               	movlw	2
 12651  003BEC  2622               	addwf	??_DIAGNOSTICxTOxPC+2,f,c
 12652  003BEE  0E00               	movlw	0
 12653  003BF0  2223               	addwfc	??_DIAGNOSTICxTOxPC+3,f,c
 12654  003BF2  0EFC               	movlw	low _Comm_List
 12655  003BF4  2422               	addwf	??_DIAGNOSTICxTOxPC+2,w,c
 12656  003BF6  6ED9               	movwf	fsr2l,c
 12657  003BF8  0E04               	movlw	high _Comm_List
 12658  003BFA  2023               	addwfc	??_DIAGNOSTICxTOxPC+3,w,c
 12659  003BFC  6EDA               	movwf	fsr2h,c
 12660  003BFE  CFDE F0BC          	movff	postinc2,SendMessage@value
 12661  003C02  CFDD F0BD          	movff	postdec2,SendMessage@value+1
 12662  003C06  ECC9  F020         	call	_SendMessage	;wreg free
 12663                           
 12664                           ;terminal.c: 200: ReadPointer++;
 12665  003C0A  0100               	movlb	0	; () banked
 12666  003C0C  4B72               	infsnz	_ReadPointer& (0+255),f,b
 12667  003C0E  2B73               	incf	(_ReadPointer+1)& (0+255),f,b
 12668                           
 12669                           ; BSR set to: 0
 12670                           ;terminal.c: 202: if (ReadPointer > 189){
 12671  003C10  5173               	movf	(_ReadPointer+1)& (0+255),w,b
 12672  003C12  E104               	bnz	u9610
 12673  003C14  0EBE               	movlw	190
 12674  003C16  5D72               	subwf	_ReadPointer& (0+255),w,b
 12675  003C18  A0D8               	btfss	status,0,c
 12676  003C1A  0012               	return	
 12677  003C1C                     u9610:
 12678                           
 12679                           ; BSR set to: 0
 12680                           ;terminal.c: 203: ReadPointer = 0;
 12681  003C1C  0E00               	movlw	0
 12682  003C1E  6F73               	movwf	(_ReadPointer+1)& (0+255),b
 12683  003C20  0E00               	movlw	0
 12684  003C22  6F72               	movwf	_ReadPointer& (0+255),b
 12685                           
 12686                           ; BSR set to: 0
 12687                           ;terminal.c: 204: }
 12688                           ;terminal.c: 205: }
 12689                           ;terminal.c: 206: }
 12690                           
 12691                           ; BSR set to: 0
 12692  003C24  0012               	return	
 12693  003C26                     l661:
 12694                           
 12695                           ; BSR set to: 0
 12696                           ;terminal.c: 207: else{
 12697                           ;terminal.c: 208: DelayCounter++;
 12698                           
 12699                           ; BSR set to: 0
 12700  003C26  4B70               	infsnz	_DelayCounter& (0+255),f,b
 12701  003C28  2B71               	incf	(_DelayCounter+1)& (0+255),f,b
 12702  003C2A  0012               	return	
 12703  003C2C                     __end_of_DIAGNOSTICxTOxPC:
 12704                           	opt stack 0
 12705                           tblptru	equ	0xFF8
 12706                           tblptrh	equ	0xFF7
 12707                           tblptrl	equ	0xFF6
 12708                           tablat	equ	0xFF5
 12709                           prodh	equ	0xFF4
 12710                           prodl	equ	0xFF3
 12711                           intcon	equ	0xFF2
 12712                           intcon2	equ	0xFF1
 12713                           postinc0	equ	0xFEE
 12714                           wreg	equ	0xFE8
 12715                           postinc1	equ	0xFE6
 12716                           postdec1	equ	0xFE5
 12717                           fsr1h	equ	0xFE2
 12718                           fsr1l	equ	0xFE1
 12719                           indf2	equ	0xFDF
 12720                           postinc2	equ	0xFDE
 12721                           postdec2	equ	0xFDD
 12722                           fsr2h	equ	0xFDA
 12723                           fsr2l	equ	0xFD9
 12724                           status	equ	0xFD8
 12725                           
 12726 ;; *************** function _SendMessage *****************
 12727 ;; Defined at:
 12728 ;;		line 183 in file "../terminal.c"
 12729 ;; Parameters:    Size  Location     Type
 12730 ;;  index           2   34[BANK0 ] unsigned int 
 12731 ;;  value           2   36[BANK0 ] unsigned int 
 12732 ;; Auto vars:     Size  Location     Type
 12733 ;;		None
 12734 ;; Return value:  Size  Location     Type
 12735 ;;                  1    wreg      void 
 12736 ;; Registers used:
 12737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12738 ;; Tracked objects:
 12739 ;;		On entry : 0/0
 12740 ;;		On exit  : 0/0
 12741 ;;		Unchanged: 0/0
 12742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12743 ;;      Params:         0       4       0       0       0       0       0       0       0
 12744 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12745 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12746 ;;      Totals:         0       4       0       0       0       0       0       0       0
 12747 ;;Total ram usage:        4 bytes
 12748 ;; Hardware stack levels used:    1
 12749 ;; Hardware stack levels required when called:    5
 12750 ;; This function calls:
 12751 ;;		_printf
 12752 ;; This function is called by:
 12753 ;;		_DIAGNOSTICxTOxPC
 12754 ;; This function uses a non-reentrant model
 12755 ;;
 12756                           
 12757                           	psect	text36
 12758  004192                     __ptext36:
 12759                           	opt stack 0
 12760  004192                     _SendMessage:
 12761                           	opt stack 24
 12762                           
 12763                           ;terminal.c: 189: printf("M#%d %d\r\n", index, value);
 12764                           
 12765                           ; BSR set to: 0
 12766                           ;incstack = 0
 12767  004192  0E30               	movlw	low STR_8
 12768  004194  0100               	movlb	0	; () banked
 12769  004196  6FAD               	movwf	printf@f& (0+255),b
 12770  004198  0E08               	movlw	high STR_8
 12771  00419A  6FAE               	movwf	(printf@f+1)& (0+255),b
 12772  00419C  C0BA  F0AF         	movff	SendMessage@index,?_printf+2
 12773  0041A0  C0BB  F0B0         	movff	SendMessage@index+1,?_printf+3
 12774  0041A4  C0BC  F0B1         	movff	SendMessage@value,?_printf+4
 12775  0041A8  C0BD  F0B2         	movff	SendMessage@value+1,?_printf+5
 12776  0041AC  EC96  F018         	call	_printf	;wreg free
 12777  0041B0  0012               	return		;funcret
 12778  0041B2                     __end_of_SendMessage:
 12779                           	opt stack 0
 12780                           tblptru	equ	0xFF8
 12781                           tblptrh	equ	0xFF7
 12782                           tblptrl	equ	0xFF6
 12783                           tablat	equ	0xFF5
 12784                           prodh	equ	0xFF4
 12785                           prodl	equ	0xFF3
 12786                           intcon	equ	0xFF2
 12787                           intcon2	equ	0xFF1
 12788                           postinc0	equ	0xFEE
 12789                           wreg	equ	0xFE8
 12790                           postinc1	equ	0xFE6
 12791                           postdec1	equ	0xFE5
 12792                           fsr1h	equ	0xFE2
 12793                           fsr1l	equ	0xFE1
 12794                           indf2	equ	0xFDF
 12795                           postinc2	equ	0xFDE
 12796                           postdec2	equ	0xFDD
 12797                           fsr2h	equ	0xFDA
 12798                           fsr2l	equ	0xFD9
 12799                           status	equ	0xFD8
 12800                           
 12801 ;; *************** function _printf *****************
 12802 ;; Defined at:
 12803 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
 12804 ;; Parameters:    Size  Location     Type
 12805 ;;  f               2   21[BANK0 ] PTR const unsigned char 
 12806 ;;		 -> STR_8(10), STR_7(7), STR_6(7), STR_5(7), 
 12807 ;;		 -> STR_4(7), STR_3(7), STR_2(7), STR_1(7), 
 12808 ;; Auto vars:     Size  Location     Type
 12809 ;;  tmpval          4    0        struct .
 12810 ;;  cp              3    0        PTR const unsigned char 
 12811 ;;  val             2   31[BANK0 ] unsigned int 
 12812 ;;  ap              2   27[BANK0 ] PTR void [1]
 12813 ;;		 -> ?_printf(2), 
 12814 ;;  len             2    0        unsigned int 
 12815 ;;  c               1   33[BANK0 ] char 
 12816 ;;  prec            1   30[BANK0 ] char 
 12817 ;;  flag            1   29[BANK0 ] unsigned char 
 12818 ;; Return value:  Size  Location     Type
 12819 ;;                  2   21[BANK0 ] int 
 12820 ;; Registers used:
 12821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12822 ;; Tracked objects:
 12823 ;;		On entry : 0/0
 12824 ;;		On exit  : 0/0
 12825 ;;		Unchanged: 0/0
 12826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12827 ;;      Params:         0       6       0       0       0       0       0       0       0
 12828 ;;      Locals:         0       7       0       0       0       0       0       0       0
 12829 ;;      Temps:          1       0       0       0       0       0       0       0       0
 12830 ;;      Totals:         1      13       0       0       0       0       0       0       0
 12831 ;;Total ram usage:       14 bytes
 12832 ;; Hardware stack levels used:    1
 12833 ;; Hardware stack levels required when called:    4
 12834 ;; This function calls:
 12835 ;;		___lwdiv
 12836 ;;		___lwmod
 12837 ;;		_putch
 12838 ;; This function is called by:
 12839 ;;		_READxRECEIVEDxMESSAGE
 12840 ;;		_TranslateMessage
 12841 ;;		_SendMessage
 12842 ;; This function uses a non-reentrant model
 12843 ;;
 12844                           
 12845                           	psect	text37
 12846  00312C                     __ptext37:
 12847                           	opt stack 0
 12848  00312C                     _printf:
 12849                           	opt stack 25
 12850                           
 12851                           ;doprnt.c: 466: va_list ap;
 12852                           ;doprnt.c: 499: signed char c;
 12853                           ;doprnt.c: 506: signed char prec;
 12854                           ;doprnt.c: 508: unsigned char flag;
 12855                           ;doprnt.c: 523: union {
 12856                           ;doprnt.c: 524: unsigned long vd;
 12857                           ;doprnt.c: 525: double integ;
 12858                           ;doprnt.c: 526: } tmpval;
 12859                           ;doprnt.c: 528: unsigned int val;
 12860                           ;doprnt.c: 529: unsigned len;
 12861                           ;doprnt.c: 530: const char * cp;
 12862                           ;doprnt.c: 533: *ap = __va_start();
 12863                           
 12864                           ;incstack = 0
 12865  00312C  0EAF               	movlw	low (?_printf+2)
 12866  00312E  0100               	movlb	0	; () banked
 12867  003130  6FB3               	movwf	printf@ap& (0+255),b
 12868  003132  0E00               	movlw	high (?_printf+2)
 12869  003134  6FB4               	movwf	(printf@ap+1)& (0+255),b
 12870                           
 12871                           ;doprnt.c: 536: while(c = *f++) {
 12872  003136  D081               	goto	u7290
 12873  003138                     
 12874                           ; BSR set to: 0
 12875                           ;doprnt.c: 538: if(c != '%')
 12876                           
 12877                           ; BSR set to: 0
 12878  003138  0E25               	movlw	37
 12879  00313A  19B9               	xorwf	printf@c& (0+255),w,b
 12880  00313C  B4D8               	btfsc	status,2,c
 12881  00313E  D004               	goto	l1262
 12882                           
 12883                           ; BSR set to: 0
 12884                           ;doprnt.c: 540: {
 12885                           ;doprnt.c: 541: (putch(c) );
 12886  003140  51B9               	movf	printf@c& (0+255),w,b
 12887  003142  EC10  F021         	call	_putch
 12888                           
 12889                           ;doprnt.c: 542: continue;
 12890  003146  D079               	goto	u7290
 12891  003148                     l1262:
 12892                           
 12893                           ;doprnt.c: 543: }
 12894                           ;doprnt.c: 548: flag = 0;
 12895  003148  0E00               	movlw	0
 12896  00314A  0100               	movlb	0	; () banked
 12897  00314C  6FB5               	movwf	printf@flag& (0+255),b
 12898                           
 12899                           ; BSR set to: 0
 12900                           
 12901                           ; BSR set to: 0
 12902                           
 12903                           ; BSR set to: 0
 12904                           ;doprnt.c: 822: }
 12905                           
 12906                           ; BSR set to: 0
 12907                           ;doprnt.c: 813: continue;
 12908                           
 12909                           ;doprnt.c: 802: default:
 12910                           
 12911                           ; BSR set to: 0
 12912                           ;doprnt.c: 698: case 'i':
 12913                           ;doprnt.c: 699: break;
 12914                           
 12915                           ; BSR set to: 0
 12916                           
 12917                           ;doprnt.c: 697: case 'd':
 12918                           
 12919                           ; BSR set to: 0
 12920                           ;doprnt.c: 638: goto alldone;
 12921                           
 12922                           ;doprnt.c: 637: case 0:
 12923                           
 12924                           ;doprnt.c: 635: switch(c = *f++) {
 12925  00314E  C0AD  FFF6         	movff	printf@f,tblptrl
 12926  003152  C0AE  FFF7         	movff	printf@f+1,tblptrh
 12927  003156  4BAD               	infsnz	printf@f& (0+255),f,b
 12928  003158  2BAE               	incf	(printf@f+1)& (0+255),f,b
 12929  00315A                     	if	0	;tblptru may be non-zero
 12930  00315A                     	endif
 12931  00315A                     	if	0	;tblptru may be non-zero
 12932  00315A                     	endif
 12933  00315A  0008               	tblrd		*
 12934  00315C  CFF5 F0B9          	movff	tablat,printf@c
 12935  003160  51B9               	movf	printf@c& (0+255),w,b
 12936                           
 12937                           ; Switch size 1, requested type "space"
 12938                           ; Number of cases is 3, Range of values is 0 to 105
 12939                           ; switch strategies available:
 12940                           ; Name         Instructions Cycles
 12941                           ; simple_byte           10     6 (average)
 12942                           ;	Chosen strategy is simple_byte
 12943  003162  0A00               	xorlw	0	; case 0
 12944  003164  B4D8               	btfsc	status,2,c
 12945  003166  0012               	return	
 12946  003168  0A64               	xorlw	100	; case 100
 12947  00316A  B4D8               	btfsc	status,2,c
 12948  00316C  D003               	goto	l1268
 12949  00316E  0A0D               	xorlw	13	; case 105
 12950  003170  A4D8               	btfss	status,2,c
 12951  003172  D063               	goto	u7290
 12952  003174                     l1268:
 12953                           
 12954                           ; BSR set to: 0
 12955                           ;doprnt.c: 1253: {
 12956                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12957                           
 12958                           ; BSR set to: 0
 12959  003174  C0B3  FFD9         	movff	printf@ap,fsr2l
 12960  003178  C0B4  FFDA         	movff	printf@ap+1,fsr2h
 12961  00317C  CFDE F0B7          	movff	postinc2,printf@val
 12962  003180  CFDD F0B8          	movff	postdec2,printf@val+1
 12963                           
 12964                           ; BSR set to: 0
 12965  003184  0E02               	movlw	2
 12966  003186  27B3               	addwf	printf@ap& (0+255),f,b
 12967  003188  0E00               	movlw	0
 12968  00318A  23B4               	addwfc	(printf@ap+1)& (0+255),f,b
 12969                           
 12970                           ; BSR set to: 0
 12971                           ;doprnt.c: 1261: if((int)val < 0) {
 12972  00318C  AFB8               	btfss	(printf@val+1)& (0+255),7,b
 12973  00318E  D006               	goto	l1270
 12974                           
 12975                           ; BSR set to: 0
 12976                           ;doprnt.c: 1262: flag |= 0x03;
 12977  003190  0E03               	movlw	3
 12978  003192  13B5               	iorwf	printf@flag& (0+255),f,b
 12979                           
 12980                           ; BSR set to: 0
 12981                           ;doprnt.c: 1263: val = -val;
 12982  003194  6DB7               	negf	printf@val& (0+255),b
 12983  003196  1FB8               	comf	(printf@val+1)& (0+255),f,b
 12984  003198  B0D8               	btfsc	status,0,c
 12985  00319A  2BB8               	incf	(printf@val+1)& (0+255),f,b
 12986  00319C                     l1270:
 12987                           
 12988                           ; BSR set to: 0
 12989                           ;doprnt.c: 1264: }
 12990                           ;doprnt.c: 1266: }
 12991                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12992                           
 12993                           ; BSR set to: 0
 12994  00319C  0E01               	movlw	1
 12995  00319E  6FB9               	movwf	printf@c& (0+255),b
 12996  0031A0                     l7764:
 12997                           
 12998                           ; BSR set to: 0
 12999  0031A0  0E05               	movlw	5
 13000  0031A2  19B9               	xorwf	printf@c& (0+255),w,b
 13001  0031A4  B4D8               	btfsc	status,2,c
 13002  0031A6  D012               	goto	u7270
 13003                           
 13004                           ; BSR set to: 0
 13005                           ;doprnt.c: 1306: if(val < dpowers[c])
 13006                           
 13007                           ; BSR set to: 0
 13008                           
 13009                           ; BSR set to: 0
 13010  0031A8  51B9               	movf	printf@c& (0+255),w,b
 13011  0031AA  0D02               	mullw	2
 13012  0031AC  0E25               	movlw	low _dpowers
 13013  0031AE  24F3               	addwf	prodl,w,c
 13014  0031B0  6EF6               	movwf	tblptrl,c
 13015  0031B2  0E08               	movlw	high _dpowers
 13016  0031B4  20F4               	addwfc	prodh,w,c
 13017  0031B6  6EF7               	movwf	tblptrh,c
 13018  0031B8                     	if	0	;There are less than 3 active tblptr bytes
 13019  0031B8                     	endif
 13020  0031B8  0009               	tblrd		*+
 13021  0031BA  50F5               	movf	tablat,w,c
 13022  0031BC  5DB7               	subwf	printf@val& (0+255),w,b
 13023  0031BE  0009               	tblrd		*+
 13024  0031C0  50F5               	movf	tablat,w,c
 13025  0031C2  59B8               	subwfb	(printf@val+1)& (0+255),w,b
 13026  0031C4  A0D8               	btfss	status,0,c
 13027  0031C6  D002               	goto	u7270
 13028                           
 13029                           ; BSR set to: 0
 13030                           
 13031                           ; BSR set to: 0
 13032                           
 13033                           ; BSR set to: 0
 13034                           ;doprnt.c: 1307: break;
 13035  0031C8  2BB9               	incf	printf@c& (0+255),f,b
 13036  0031CA  D7EA               	goto	l7764
 13037  0031CC                     u7270:
 13038                           
 13039                           ; BSR set to: 0
 13040                           ;doprnt.c: 1422: {
 13041                           ;doprnt.c: 1438: if(flag & 0x03)
 13042                           
 13043                           ; BSR set to: 0
 13044  0031CC  C0B5  F01F         	movff	printf@flag,??_printf
 13045  0031D0  0E03               	movlw	3
 13046  0031D2  161F               	andwf	??_printf,f,c
 13047  0031D4  B4D8               	btfsc	status,2,c
 13048  0031D6  D003               	goto	l1274
 13049                           
 13050                           ; BSR set to: 0
 13051                           ;doprnt.c: 1439: (putch('-') );
 13052  0031D8  0E2D               	movlw	45
 13053  0031DA  EC10  F021         	call	_putch
 13054  0031DE                     l1274:
 13055                           
 13056                           ;doprnt.c: 1469: }
 13057                           ;doprnt.c: 1472: prec = c;
 13058  0031DE  C0B9  F0B6         	movff	printf@c,printf@prec
 13059                           
 13060                           ;doprnt.c: 1474: while(prec--) {
 13061  0031E2  D026               	goto	l1275
 13062  0031E4                     
 13063                           ;doprnt.c: 1478: {
 13064                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13065  0031E4  0100               	movlb	0	; () banked
 13066  0031E6  51B6               	movf	printf@prec& (0+255),w,b
 13067  0031E8  0D02               	mullw	2
 13068  0031EA  0E25               	movlw	low _dpowers
 13069  0031EC  24F3               	addwf	prodl,w,c
 13070  0031EE  6EF6               	movwf	tblptrl,c
 13071  0031F0  0E08               	movlw	high _dpowers
 13072  0031F2  20F4               	addwfc	prodh,w,c
 13073  0031F4  6EF7               	movwf	tblptrh,c
 13074  0031F6                     	if	0	;There are less than 3 active tblptr bytes
 13075  0031F6                     	endif
 13076  0031F6  0009               	tblrd		*+
 13077  0031F8  CFF5 F015          	movff	tablat,___lwdiv@divisor
 13078  0031FC  000A               	tblrd		*-
 13079  0031FE  CFF5 F016          	movff	tablat,___lwdiv@divisor+1
 13080  003202  C0B7  F013         	movff	printf@val,___lwdiv@dividend
 13081  003206  C0B8  F014         	movff	printf@val+1,___lwdiv@dividend+1
 13082  00320A  EC8A  F01F         	call	___lwdiv	;wreg free
 13083  00320E  C013  F01A         	movff	?___lwdiv,___lwmod@dividend
 13084  003212  C014  F01B         	movff	?___lwdiv+1,___lwmod@dividend+1
 13085  003216  0E00               	movlw	0
 13086  003218  6E1D               	movwf	___lwmod@divisor+1,c
 13087  00321A  0E0A               	movlw	10
 13088  00321C  6E1C               	movwf	___lwmod@divisor,c
 13089  00321E  ECFF  F01F         	call	___lwmod	;wreg free
 13090  003222  501A               	movf	?___lwmod,w,c
 13091  003224  0F30               	addlw	48
 13092  003226  0100               	movlb	0	; () banked
 13093  003228  6FB9               	movwf	printf@c& (0+255),b
 13094                           
 13095                           ; BSR set to: 0
 13096                           ;doprnt.c: 1523: }
 13097                           ;doprnt.c: 1524: (putch(c) );
 13098  00322A  51B9               	movf	printf@c& (0+255),w,b
 13099  00322C  EC10  F021         	call	_putch
 13100  003230                     l1275:
 13101  003230  0100               	movlb	0	; () banked
 13102  003232  07B6               	decf	printf@prec& (0+255),f,b
 13103  003234  29B6               	incf	printf@prec& (0+255),w,b
 13104  003236  A4D8               	btfss	status,2,c
 13105  003238  D7D5               	goto	l1276
 13106  00323A                     u7290:
 13107                           
 13108                           ; BSR set to: 0
 13109                           
 13110                           ; BSR set to: 0
 13111  00323A  C0AD  FFF6         	movff	printf@f,tblptrl
 13112  00323E  C0AE  FFF7         	movff	printf@f+1,tblptrh
 13113  003242  0100               	movlb	0	; () banked
 13114  003244  4BAD               	infsnz	printf@f& (0+255),f,b
 13115  003246  2BAE               	incf	(printf@f+1)& (0+255),f,b
 13116  003248                     	if	0	;tblptru may be non-zero
 13117  003248                     	endif
 13118  003248                     	if	0	;tblptru may be non-zero
 13119  003248                     	endif
 13120  003248  0008               	tblrd		*
 13121  00324A  CFF5 F0B9          	movff	tablat,printf@c
 13122  00324E  51B9               	movf	printf@c& (0+255),w,b
 13123  003250  B4D8               	btfsc	status,2,c
 13124  003252  0012               	return	
 13125  003254  D771               	goto	l1261
 13126  003256                     __end_of_printf:
 13127                           	opt stack 0
 13128                           tblptru	equ	0xFF8
 13129                           tblptrh	equ	0xFF7
 13130                           tblptrl	equ	0xFF6
 13131                           tablat	equ	0xFF5
 13132                           prodh	equ	0xFF4
 13133                           prodl	equ	0xFF3
 13134                           intcon	equ	0xFF2
 13135                           intcon2	equ	0xFF1
 13136                           postinc0	equ	0xFEE
 13137                           wreg	equ	0xFE8
 13138                           postinc1	equ	0xFE6
 13139                           postdec1	equ	0xFE5
 13140                           fsr1h	equ	0xFE2
 13141                           fsr1l	equ	0xFE1
 13142                           indf2	equ	0xFDF
 13143                           postinc2	equ	0xFDE
 13144                           postdec2	equ	0xFDD
 13145                           fsr2h	equ	0xFDA
 13146                           fsr2l	equ	0xFD9
 13147                           status	equ	0xFD8
 13148                           
 13149 ;; *************** function _putch *****************
 13150 ;; Defined at:
 13151 ;;		line 178 in file "../eusart1.c"
 13152 ;; Parameters:    Size  Location     Type
 13153 ;;  data            1    wreg     unsigned char 
 13154 ;; Auto vars:     Size  Location     Type
 13155 ;;  data            1   18[COMRAM] unsigned char 
 13156 ;; Return value:  Size  Location     Type
 13157 ;;                  1    wreg      void 
 13158 ;; Registers used:
 13159 ;;		wreg
 13160 ;; Tracked objects:
 13161 ;;		On entry : 0/0
 13162 ;;		On exit  : 0/0
 13163 ;;		Unchanged: 0/0
 13164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13165 ;;      Params:         0       0       0       0       0       0       0       0       0
 13166 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13167 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13168 ;;      Totals:         1       0       0       0       0       0       0       0       0
 13169 ;;Total ram usage:        1 bytes
 13170 ;; Hardware stack levels used:    1
 13171 ;; Hardware stack levels required when called:    3
 13172 ;; This function calls:
 13173 ;;		Nothing
 13174 ;; This function is called by:
 13175 ;;		_printf
 13176 ;; This function uses a non-reentrant model
 13177 ;;
 13178                           
 13179                           	psect	text38
 13180  004220                     __ptext38:
 13181                           	opt stack 0
 13182  004220                     _putch:
 13183                           	opt stack 25
 13184                           
 13185                           ; BSR set to: 0
 13186                           ;incstack = 0
 13187                           ;putch@data stored from wreg
 13188  004220  6E13               	movwf	putch@data,c
 13189  004222                     
 13190                           ;eusart1.c: 180: continue;
 13191                           
 13192                           ;eusart1.c: 179: while(! TXIF)
 13193  004222  A89E               	btfss	3998,4,c	;volatile
 13194  004224  D7FE               	goto	l7200
 13195                           
 13196                           ;eusart1.c: 181: TXREG1 = data;
 13197  004226  C013  FFAD         	movff	putch@data,4013	;volatile
 13198  00422A  0012               	return		;funcret
 13199  00422C                     __end_of_putch:
 13200                           	opt stack 0
 13201                           tblptru	equ	0xFF8
 13202                           tblptrh	equ	0xFF7
 13203                           tblptrl	equ	0xFF6
 13204                           tablat	equ	0xFF5
 13205                           prodh	equ	0xFF4
 13206                           prodl	equ	0xFF3
 13207                           intcon	equ	0xFF2
 13208                           intcon2	equ	0xFF1
 13209                           postinc0	equ	0xFEE
 13210                           wreg	equ	0xFE8
 13211                           postinc1	equ	0xFE6
 13212                           postdec1	equ	0xFE5
 13213                           fsr1h	equ	0xFE2
 13214                           fsr1l	equ	0xFE1
 13215                           indf2	equ	0xFDF
 13216                           postinc2	equ	0xFDE
 13217                           postdec2	equ	0xFDD
 13218                           fsr2h	equ	0xFDA
 13219                           fsr2l	equ	0xFD9
 13220                           status	equ	0xFD8
 13221                           
 13222 ;; *************** function ___lwmod *****************
 13223 ;; Defined at:
 13224 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwmod.c"
 13225 ;; Parameters:    Size  Location     Type
 13226 ;;  dividend        2   25[COMRAM] unsigned int 
 13227 ;;  divisor         2   27[COMRAM] unsigned int 
 13228 ;; Auto vars:     Size  Location     Type
 13229 ;;  counter         1   29[COMRAM] unsigned char 
 13230 ;; Return value:  Size  Location     Type
 13231 ;;                  2   25[COMRAM] unsigned int 
 13232 ;; Registers used:
 13233 ;;		wreg, status,2, status,0
 13234 ;; Tracked objects:
 13235 ;;		On entry : 0/0
 13236 ;;		On exit  : 0/0
 13237 ;;		Unchanged: 0/0
 13238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13239 ;;      Params:         4       0       0       0       0       0       0       0       0
 13240 ;;      Locals:         1       0       0       0       0       0       0       0       0
 13241 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13242 ;;      Totals:         5       0       0       0       0       0       0       0       0
 13243 ;;Total ram usage:        5 bytes
 13244 ;; Hardware stack levels used:    1
 13245 ;; Hardware stack levels required when called:    3
 13246 ;; This function calls:
 13247 ;;		Nothing
 13248 ;; This function is called by:
 13249 ;;		_printf
 13250 ;; This function uses a non-reentrant model
 13251 ;;
 13252                           
 13253                           	psect	text39
 13254  003FFE                     __ptext39:
 13255                           	opt stack 0
 13256  003FFE                     ___lwmod:
 13257                           	opt stack 25
 13258                           
 13259                           ;incstack = 0
 13260  003FFE  501C               	movf	___lwmod@divisor,w,c
 13261  004000  101D               	iorwf	___lwmod@divisor+1,w,c
 13262  004002  B4D8               	btfsc	status,2,c
 13263  004004  D018               	goto	l1725
 13264  004006  0E01               	movlw	1
 13265  004008  6E1E               	movwf	___lwmod@counter,c
 13266  00400A  D004               	goto	l1720
 13267  00400C  90D8               	bcf	status,0,c
 13268  00400E  361C               	rlcf	___lwmod@divisor,f,c
 13269  004010  361D               	rlcf	___lwmod@divisor+1,f,c
 13270  004012  2A1E               	incf	___lwmod@counter,f,c
 13271  004014                     l1720:
 13272  004014  AE1D               	btfss	___lwmod@divisor+1,7,c
 13273  004016  D7FA               	goto	l1721
 13274  004018                     u6710:
 13275  004018  501C               	movf	___lwmod@divisor,w,c
 13276  00401A  5C1A               	subwf	___lwmod@dividend,w,c
 13277  00401C  501D               	movf	___lwmod@divisor+1,w,c
 13278  00401E  581B               	subwfb	___lwmod@dividend+1,w,c
 13279  004020  A0D8               	btfss	status,0,c
 13280  004022  D004               	goto	l1724
 13281  004024  501C               	movf	___lwmod@divisor,w,c
 13282  004026  5E1A               	subwf	___lwmod@dividend,f,c
 13283  004028  501D               	movf	___lwmod@divisor+1,w,c
 13284  00402A  5A1B               	subwfb	___lwmod@dividend+1,f,c
 13285  00402C                     l1724:
 13286  00402C  90D8               	bcf	status,0,c
 13287  00402E  321D               	rrcf	___lwmod@divisor+1,f,c
 13288  004030  321C               	rrcf	___lwmod@divisor,f,c
 13289  004032  2E1E               	decfsz	___lwmod@counter,f,c
 13290  004034  D7F1               	goto	u6710
 13291  004036                     l1725:
 13292  004036  C01A  F01A         	movff	___lwmod@dividend,?___lwmod
 13293  00403A  C01B  F01B         	movff	___lwmod@dividend+1,?___lwmod+1
 13294  00403E  0012               	return		;funcret
 13295  004040                     __end_of___lwmod:
 13296                           	opt stack 0
 13297                           tblptru	equ	0xFF8
 13298                           tblptrh	equ	0xFF7
 13299                           tblptrl	equ	0xFF6
 13300                           tablat	equ	0xFF5
 13301                           prodh	equ	0xFF4
 13302                           prodl	equ	0xFF3
 13303                           intcon	equ	0xFF2
 13304                           intcon2	equ	0xFF1
 13305                           postinc0	equ	0xFEE
 13306                           wreg	equ	0xFE8
 13307                           postinc1	equ	0xFE6
 13308                           postdec1	equ	0xFE5
 13309                           fsr1h	equ	0xFE2
 13310                           fsr1l	equ	0xFE1
 13311                           indf2	equ	0xFDF
 13312                           postinc2	equ	0xFDE
 13313                           postdec2	equ	0xFDD
 13314                           fsr2h	equ	0xFDA
 13315                           fsr2l	equ	0xFD9
 13316                           status	equ	0xFD8
 13317                           
 13318 ;; *************** function ___lwdiv *****************
 13319 ;; Defined at:
 13320 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lwdiv.c"
 13321 ;; Parameters:    Size  Location     Type
 13322 ;;  dividend        2   18[COMRAM] unsigned int 
 13323 ;;  divisor         2   20[COMRAM] unsigned int 
 13324 ;; Auto vars:     Size  Location     Type
 13325 ;;  quotient        2   23[COMRAM] unsigned int 
 13326 ;;  counter         1   22[COMRAM] unsigned char 
 13327 ;; Return value:  Size  Location     Type
 13328 ;;                  2   18[COMRAM] unsigned int 
 13329 ;; Registers used:
 13330 ;;		wreg, status,2, status,0
 13331 ;; Tracked objects:
 13332 ;;		On entry : 0/0
 13333 ;;		On exit  : 0/0
 13334 ;;		Unchanged: 0/0
 13335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13336 ;;      Params:         4       0       0       0       0       0       0       0       0
 13337 ;;      Locals:         3       0       0       0       0       0       0       0       0
 13338 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13339 ;;      Totals:         7       0       0       0       0       0       0       0       0
 13340 ;;Total ram usage:        7 bytes
 13341 ;; Hardware stack levels used:    1
 13342 ;; Hardware stack levels required when called:    3
 13343 ;; This function calls:
 13344 ;;		Nothing
 13345 ;; This function is called by:
 13346 ;;		_printf
 13347 ;; This function uses a non-reentrant model
 13348 ;;
 13349                           
 13350                           	psect	text40
 13351  003F14                     __ptext40:
 13352                           	opt stack 0
 13353  003F14                     ___lwdiv:
 13354                           	opt stack 25
 13355                           
 13356                           ;incstack = 0
 13357  003F14  0E00               	movlw	0
 13358  003F16  6E19               	movwf	___lwdiv@quotient+1,c
 13359  003F18  0E00               	movlw	0
 13360  003F1A  6E18               	movwf	___lwdiv@quotient,c
 13361  003F1C  5015               	movf	___lwdiv@divisor,w,c
 13362  003F1E  1016               	iorwf	___lwdiv@divisor+1,w,c
 13363  003F20  B4D8               	btfsc	status,2,c
 13364  003F22  D01C               	goto	l1715
 13365  003F24  0E01               	movlw	1
 13366  003F26  6E17               	movwf	___lwdiv@counter,c
 13367  003F28  D004               	goto	l1710
 13368  003F2A  90D8               	bcf	status,0,c
 13369  003F2C  3615               	rlcf	___lwdiv@divisor,f,c
 13370  003F2E  3616               	rlcf	___lwdiv@divisor+1,f,c
 13371  003F30  2A17               	incf	___lwdiv@counter,f,c
 13372  003F32                     l1710:
 13373  003F32  AE16               	btfss	___lwdiv@divisor+1,7,c
 13374  003F34  D7FA               	goto	l1711
 13375  003F36                     u6680:
 13376  003F36  90D8               	bcf	status,0,c
 13377  003F38  3618               	rlcf	___lwdiv@quotient,f,c
 13378  003F3A  3619               	rlcf	___lwdiv@quotient+1,f,c
 13379  003F3C  5015               	movf	___lwdiv@divisor,w,c
 13380  003F3E  5C13               	subwf	___lwdiv@dividend,w,c
 13381  003F40  5016               	movf	___lwdiv@divisor+1,w,c
 13382  003F42  5814               	subwfb	___lwdiv@dividend+1,w,c
 13383  003F44  A0D8               	btfss	status,0,c
 13384  003F46  D005               	goto	l1714
 13385  003F48  5015               	movf	___lwdiv@divisor,w,c
 13386  003F4A  5E13               	subwf	___lwdiv@dividend,f,c
 13387  003F4C  5016               	movf	___lwdiv@divisor+1,w,c
 13388  003F4E  5A14               	subwfb	___lwdiv@dividend+1,f,c
 13389  003F50  8018               	bsf	___lwdiv@quotient,0,c
 13390  003F52                     l1714:
 13391  003F52  90D8               	bcf	status,0,c
 13392  003F54  3216               	rrcf	___lwdiv@divisor+1,f,c
 13393  003F56  3215               	rrcf	___lwdiv@divisor,f,c
 13394  003F58  2E17               	decfsz	___lwdiv@counter,f,c
 13395  003F5A  D7ED               	goto	u6680
 13396  003F5C                     l1715:
 13397  003F5C  C018  F013         	movff	___lwdiv@quotient,?___lwdiv
 13398  003F60  C019  F014         	movff	___lwdiv@quotient+1,?___lwdiv+1
 13399  003F64  0012               	return		;funcret
 13400  003F66                     __end_of___lwdiv:
 13401                           	opt stack 0
 13402                           tblptru	equ	0xFF8
 13403                           tblptrh	equ	0xFF7
 13404                           tblptrl	equ	0xFF6
 13405                           tablat	equ	0xFF5
 13406                           prodh	equ	0xFF4
 13407                           prodl	equ	0xFF3
 13408                           intcon	equ	0xFF2
 13409                           intcon2	equ	0xFF1
 13410                           postinc0	equ	0xFEE
 13411                           wreg	equ	0xFE8
 13412                           postinc1	equ	0xFE6
 13413                           postdec1	equ	0xFE5
 13414                           fsr1h	equ	0xFE2
 13415                           fsr1l	equ	0xFE1
 13416                           indf2	equ	0xFDF
 13417                           postinc2	equ	0xFDE
 13418                           postdec2	equ	0xFDD
 13419                           fsr2h	equ	0xFDA
 13420                           fsr2l	equ	0xFD9
 13421                           status	equ	0xFD8
 13422                           
 13423 ;; *************** function _APIxInitialize *****************
 13424 ;; Defined at:
 13425 ;;		line 33 in file "../api.c"
 13426 ;; Parameters:    Size  Location     Type
 13427 ;;		None
 13428 ;; Auto vars:     Size  Location     Type
 13429 ;;  i               2   18[COMRAM] unsigned int 
 13430 ;; Return value:  Size  Location     Type
 13431 ;;                  1    wreg      void 
 13432 ;; Registers used:
 13433 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13434 ;; Tracked objects:
 13435 ;;		On entry : 0/0
 13436 ;;		On exit  : 0/0
 13437 ;;		Unchanged: 0/0
 13438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13439 ;;      Params:         0       0       0       0       0       0       0       0       0
 13440 ;;      Locals:         2       0       0       0       0       0       0       0       0
 13441 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13442 ;;      Totals:         2       0       0       0       0       0       0       0       0
 13443 ;;Total ram usage:        2 bytes
 13444 ;; Hardware stack levels used:    1
 13445 ;; Hardware stack levels required when called:    3
 13446 ;; This function calls:
 13447 ;;		Nothing
 13448 ;; This function is called by:
 13449 ;;		_main
 13450 ;; This function uses a non-reentrant model
 13451 ;;
 13452                           
 13453                           	psect	text41
 13454  001E9E                     __ptext41:
 13455                           	opt stack 0
 13456  001E9E                     _APIxInitialize:
 13457                           	opt stack 27
 13458                           
 13459                           ;api.c: 35: unsigned int i;
 13460                           ;api.c: 36: for(i = 0; i < (91); i++ )
 13461                           
 13462                           ;incstack = 0
 13463  001E9E  0E00               	movlw	0
 13464  001EA0  6E14               	movwf	APIxInitialize@i+1,c
 13465  001EA2  0E00               	movlw	0
 13466  001EA4  6E13               	movwf	APIxInitialize@i,c
 13467  001EA6                     l5964:
 13468  001EA6  5014               	movf	APIxInitialize@i+1,w,c
 13469  001EA8  E12E               	bnz	l5974
 13470  001EAA  0E5B               	movlw	91
 13471  001EAC  5C13               	subwf	APIxInitialize@i,w,c
 13472  001EAE  B0D8               	btfsc	status,0,c
 13473  001EB0  D02A               	goto	u5360
 13474                           
 13475                           ;api.c: 37: {
 13476                           ;api.c: 38: API_RW[i] = 0;
 13477  001EB2  90D8               	bcf	status,0,c
 13478  001EB4  3413               	rlcf	APIxInitialize@i,w,c
 13479  001EB6  6ED9               	movwf	fsr2l,c
 13480  001EB8  3414               	rlcf	APIxInitialize@i+1,w,c
 13481  001EBA  6EDA               	movwf	fsr2h,c
 13482  001EBC  0E00               	movlw	low _API_RW
 13483  001EBE  26D9               	addwf	fsr2l,f,c
 13484  001EC0  0E02               	movlw	high _API_RW
 13485  001EC2  22DA               	addwfc	fsr2h,f,c
 13486  001EC4  0E00               	movlw	0
 13487  001EC6  6EDE               	movwf	postinc2,c
 13488  001EC8  0E00               	movlw	0
 13489  001ECA  6EDD               	movwf	postdec2,c
 13490                           
 13491                           ;api.c: 39: API[i] = 0;
 13492  001ECC  90D8               	bcf	status,0,c
 13493  001ECE  3413               	rlcf	APIxInitialize@i,w,c
 13494  001ED0  6ED9               	movwf	fsr2l,c
 13495  001ED2  3414               	rlcf	APIxInitialize@i+1,w,c
 13496  001ED4  6EDA               	movwf	fsr2h,c
 13497  001ED6  0E00               	movlw	low _API
 13498  001ED8  26D9               	addwf	fsr2l,f,c
 13499  001EDA  0E01               	movlw	high _API
 13500  001EDC  22DA               	addwfc	fsr2h,f,c
 13501  001EDE  0E00               	movlw	0
 13502  001EE0  6EDE               	movwf	postinc2,c
 13503  001EE2  0E00               	movlw	0
 13504  001EE4  6EDD               	movwf	postdec2,c
 13505                           
 13506                           ;api.c: 40: API_EEPROM[i] = 0xFFFF;
 13507  001EE6  90D8               	bcf	status,0,c
 13508  001EE8  3413               	rlcf	APIxInitialize@i,w,c
 13509  001EEA  6ED9               	movwf	fsr2l,c
 13510  001EEC  3414               	rlcf	APIxInitialize@i+1,w,c
 13511  001EEE  6EDA               	movwf	fsr2h,c
 13512  001EF0  0E00               	movlw	low _API_EEPROM
 13513  001EF2  26D9               	addwf	fsr2l,f,c
 13514  001EF4  0E03               	movlw	high _API_EEPROM
 13515  001EF6  22DA               	addwfc	fsr2h,f,c
 13516  001EF8  0EFF               	movlw	255
 13517  001EFA  6EDE               	movwf	postinc2,c
 13518  001EFC  0EFF               	movlw	255
 13519  001EFE  6EDD               	movwf	postdec2,c
 13520  001F00  4A13               	infsnz	APIxInitialize@i,f,c
 13521  001F02  2A14               	incf	APIxInitialize@i+1,f,c
 13522  001F04  D7D0               	goto	l5964
 13523  001F06                     u5360:
 13524  001F06                     l5974:
 13525                           
 13526                           ;api.c: 41: }
 13527                           ;api.c: 44: API_RW[16] = 0;
 13528  001F06  0E00               	movlw	0
 13529  001F08  0102               	movlb	2	; () banked
 13530  001F0A  6F21               	movwf	(_API_RW+33)& (0+255),b
 13531  001F0C  0E00               	movlw	0
 13532  001F0E  6F20               	movwf	(_API_RW+32)& (0+255),b
 13533                           
 13534                           ;api.c: 45: API_RW[17] = 0;
 13535  001F10  0E00               	movlw	0
 13536  001F12  6F23               	movwf	(_API_RW+35)& (0+255),b
 13537  001F14  0E00               	movlw	0
 13538  001F16  6F22               	movwf	(_API_RW+34)& (0+255),b
 13539                           
 13540                           ;api.c: 46: API_RW[18] = 1;
 13541  001F18  0E00               	movlw	0
 13542  001F1A  6F25               	movwf	(_API_RW+37)& (0+255),b
 13543  001F1C  0E01               	movlw	1
 13544  001F1E  6F24               	movwf	(_API_RW+36)& (0+255),b
 13545                           
 13546                           ;api.c: 47: API_RW[19] = 1;
 13547  001F20  0E00               	movlw	0
 13548  001F22  6F27               	movwf	(_API_RW+39)& (0+255),b
 13549  001F24  0E01               	movlw	1
 13550  001F26  6F26               	movwf	(_API_RW+38)& (0+255),b
 13551                           
 13552                           ;api.c: 48: API_RW[20] = 1;
 13553  001F28  0E00               	movlw	0
 13554  001F2A  6F29               	movwf	(_API_RW+41)& (0+255),b
 13555  001F2C  0E01               	movlw	1
 13556  001F2E  6F28               	movwf	(_API_RW+40)& (0+255),b
 13557                           
 13558                           ;api.c: 49: API_RW[21] = 1;
 13559  001F30  0E00               	movlw	0
 13560  001F32  6F2B               	movwf	(_API_RW+43)& (0+255),b
 13561  001F34  0E01               	movlw	1
 13562  001F36  6F2A               	movwf	(_API_RW+42)& (0+255),b
 13563                           
 13564                           ;api.c: 50: API_RW[22] = 1;
 13565  001F38  0E00               	movlw	0
 13566  001F3A  6F2D               	movwf	(_API_RW+45)& (0+255),b
 13567  001F3C  0E01               	movlw	1
 13568  001F3E  6F2C               	movwf	(_API_RW+44)& (0+255),b
 13569                           
 13570                           ;api.c: 51: API_RW[23] = 1;
 13571  001F40  0E00               	movlw	0
 13572  001F42  6F2F               	movwf	(_API_RW+47)& (0+255),b
 13573  001F44  0E01               	movlw	1
 13574  001F46  6F2E               	movwf	(_API_RW+46)& (0+255),b
 13575                           
 13576                           ;api.c: 52: API_RW[24] = 1;
 13577  001F48  0E00               	movlw	0
 13578  001F4A  6F31               	movwf	(_API_RW+49)& (0+255),b
 13579  001F4C  0E01               	movlw	1
 13580  001F4E  6F30               	movwf	(_API_RW+48)& (0+255),b
 13581                           
 13582                           ;api.c: 53: API_RW[25] = 1;
 13583  001F50  0E00               	movlw	0
 13584  001F52  6F33               	movwf	(_API_RW+51)& (0+255),b
 13585  001F54  0E01               	movlw	1
 13586  001F56  6F32               	movwf	(_API_RW+50)& (0+255),b
 13587                           
 13588                           ;api.c: 54: API_RW[26] = 1;
 13589  001F58  0E00               	movlw	0
 13590  001F5A  6F35               	movwf	(_API_RW+53)& (0+255),b
 13591  001F5C  0E01               	movlw	1
 13592  001F5E  6F34               	movwf	(_API_RW+52)& (0+255),b
 13593                           
 13594                           ;api.c: 55: API_RW[27] = 1;
 13595  001F60  0E00               	movlw	0
 13596  001F62  6F37               	movwf	(_API_RW+55)& (0+255),b
 13597  001F64  0E01               	movlw	1
 13598  001F66  6F36               	movwf	(_API_RW+54)& (0+255),b
 13599                           
 13600                           ;api.c: 56: API_RW[28] = 0;
 13601  001F68  0E00               	movlw	0
 13602  001F6A  6F39               	movwf	(_API_RW+57)& (0+255),b
 13603  001F6C  0E00               	movlw	0
 13604  001F6E  6F38               	movwf	(_API_RW+56)& (0+255),b
 13605                           
 13606                           ;api.c: 57: API_RW[29] = 0;
 13607  001F70  0E00               	movlw	0
 13608  001F72  6F3B               	movwf	(_API_RW+59)& (0+255),b
 13609  001F74  0E00               	movlw	0
 13610  001F76  6F3A               	movwf	(_API_RW+58)& (0+255),b
 13611                           
 13612                           ;api.c: 58: API_RW[30] = 0;
 13613  001F78  0E00               	movlw	0
 13614  001F7A  6F3D               	movwf	(_API_RW+61)& (0+255),b
 13615  001F7C  0E00               	movlw	0
 13616  001F7E  6F3C               	movwf	(_API_RW+60)& (0+255),b
 13617                           
 13618                           ;api.c: 59: API_RW[31] = 0;
 13619  001F80  0E00               	movlw	0
 13620  001F82  6F3F               	movwf	(_API_RW+63)& (0+255),b
 13621  001F84  0E00               	movlw	0
 13622  001F86  6F3E               	movwf	(_API_RW+62)& (0+255),b
 13623                           
 13624                           ;api.c: 60: API_RW[32] = 0;
 13625  001F88  0E00               	movlw	0
 13626  001F8A  6F41               	movwf	(_API_RW+65)& (0+255),b
 13627  001F8C  0E00               	movlw	0
 13628  001F8E  6F40               	movwf	(_API_RW+64)& (0+255),b
 13629                           
 13630                           ;api.c: 61: API_RW[33] = 0;
 13631  001F90  0E00               	movlw	0
 13632  001F92  6F43               	movwf	(_API_RW+67)& (0+255),b
 13633  001F94  0E00               	movlw	0
 13634  001F96  6F42               	movwf	(_API_RW+66)& (0+255),b
 13635                           
 13636                           ;api.c: 62: API_RW[34] = 0;
 13637  001F98  0E00               	movlw	0
 13638  001F9A  6F45               	movwf	(_API_RW+69)& (0+255),b
 13639  001F9C  0E00               	movlw	0
 13640  001F9E  6F44               	movwf	(_API_RW+68)& (0+255),b
 13641                           
 13642                           ;api.c: 63: API_RW[35] = 0;
 13643  001FA0  0E00               	movlw	0
 13644  001FA2  6F47               	movwf	(_API_RW+71)& (0+255),b
 13645  001FA4  0E00               	movlw	0
 13646  001FA6  6F46               	movwf	(_API_RW+70)& (0+255),b
 13647                           
 13648                           ;api.c: 64: API_RW[36] = 0;
 13649  001FA8  0E00               	movlw	0
 13650  001FAA  6F49               	movwf	(_API_RW+73)& (0+255),b
 13651  001FAC  0E00               	movlw	0
 13652  001FAE  6F48               	movwf	(_API_RW+72)& (0+255),b
 13653                           
 13654                           ;api.c: 65: API_RW[37] = 0;
 13655  001FB0  0E00               	movlw	0
 13656  001FB2  6F4B               	movwf	(_API_RW+75)& (0+255),b
 13657  001FB4  0E00               	movlw	0
 13658  001FB6  6F4A               	movwf	(_API_RW+74)& (0+255),b
 13659                           
 13660                           ;api.c: 66: API_RW[38] = 0;
 13661  001FB8  0E00               	movlw	0
 13662  001FBA  6F4D               	movwf	(_API_RW+77)& (0+255),b
 13663  001FBC  0E00               	movlw	0
 13664  001FBE  6F4C               	movwf	(_API_RW+76)& (0+255),b
 13665                           
 13666                           ;api.c: 67: API_RW[39] = 1;
 13667  001FC0  0E00               	movlw	0
 13668  001FC2  6F4F               	movwf	(_API_RW+79)& (0+255),b
 13669  001FC4  0E01               	movlw	1
 13670  001FC6  6F4E               	movwf	(_API_RW+78)& (0+255),b
 13671                           
 13672                           ;api.c: 68: API_RW[40] = 1;
 13673  001FC8  0E00               	movlw	0
 13674  001FCA  6F51               	movwf	(_API_RW+81)& (0+255),b
 13675  001FCC  0E01               	movlw	1
 13676  001FCE  6F50               	movwf	(_API_RW+80)& (0+255),b
 13677                           
 13678                           ;api.c: 69: API_RW[41] = 0;
 13679  001FD0  0E00               	movlw	0
 13680  001FD2  6F53               	movwf	(_API_RW+83)& (0+255),b
 13681  001FD4  0E00               	movlw	0
 13682  001FD6  6F52               	movwf	(_API_RW+82)& (0+255),b
 13683                           
 13684                           ;api.c: 70: API_RW[42] = 0;
 13685  001FD8  0E00               	movlw	0
 13686  001FDA  6F55               	movwf	(_API_RW+85)& (0+255),b
 13687  001FDC  0E00               	movlw	0
 13688  001FDE  6F54               	movwf	(_API_RW+84)& (0+255),b
 13689                           
 13690                           ;api.c: 71: API_RW[43] = 0;
 13691  001FE0  0E00               	movlw	0
 13692  001FE2  6F57               	movwf	(_API_RW+87)& (0+255),b
 13693  001FE4  0E00               	movlw	0
 13694  001FE6  6F56               	movwf	(_API_RW+86)& (0+255),b
 13695                           
 13696                           ;api.c: 72: API_RW[44] = 0;
 13697  001FE8  0E00               	movlw	0
 13698  001FEA  6F59               	movwf	(_API_RW+89)& (0+255),b
 13699  001FEC  0E00               	movlw	0
 13700  001FEE  6F58               	movwf	(_API_RW+88)& (0+255),b
 13701                           
 13702                           ;api.c: 73: API_RW[45] = 1;
 13703  001FF0  0E00               	movlw	0
 13704  001FF2  6F5B               	movwf	(_API_RW+91)& (0+255),b
 13705  001FF4  0E01               	movlw	1
 13706  001FF6  6F5A               	movwf	(_API_RW+90)& (0+255),b
 13707                           
 13708                           ;api.c: 74: API_RW[46] = 1;
 13709  001FF8  0E00               	movlw	0
 13710  001FFA  6F5D               	movwf	(_API_RW+93)& (0+255),b
 13711  001FFC  0E01               	movlw	1
 13712  001FFE  6F5C               	movwf	(_API_RW+92)& (0+255),b
 13713                           
 13714                           ;api.c: 75: API_RW[47] = 1;
 13715  002000  0E00               	movlw	0
 13716  002002  6F5F               	movwf	(_API_RW+95)& (0+255),b
 13717  002004  0E01               	movlw	1
 13718  002006  6F5E               	movwf	(_API_RW+94)& (0+255),b
 13719                           
 13720                           ;api.c: 76: API_RW[48] = 1;
 13721  002008  0E00               	movlw	0
 13722  00200A  6F61               	movwf	(_API_RW+97)& (0+255),b
 13723  00200C  0E01               	movlw	1
 13724  00200E  6F60               	movwf	(_API_RW+96)& (0+255),b
 13725                           
 13726                           ;api.c: 77: API_RW[49] = 1;
 13727  002010  0E00               	movlw	0
 13728  002012  6F63               	movwf	(_API_RW+99)& (0+255),b
 13729  002014  0E01               	movlw	1
 13730  002016  6F62               	movwf	(_API_RW+98)& (0+255),b
 13731                           
 13732                           ;api.c: 78: API_RW[50] = 1;
 13733  002018  0E00               	movlw	0
 13734  00201A  6F65               	movwf	(_API_RW+101)& (0+255),b
 13735  00201C  0E01               	movlw	1
 13736  00201E  6F64               	movwf	(_API_RW+100)& (0+255),b
 13737                           
 13738                           ;api.c: 79: API_RW[51] = 1;
 13739  002020  0E00               	movlw	0
 13740  002022  6F67               	movwf	(_API_RW+103)& (0+255),b
 13741  002024  0E01               	movlw	1
 13742  002026  6F66               	movwf	(_API_RW+102)& (0+255),b
 13743                           
 13744                           ;api.c: 80: API_RW[52] = 1;
 13745  002028  0E00               	movlw	0
 13746  00202A  6F69               	movwf	(_API_RW+105)& (0+255),b
 13747  00202C  0E01               	movlw	1
 13748  00202E  6F68               	movwf	(_API_RW+104)& (0+255),b
 13749                           
 13750                           ;api.c: 81: API_RW[53] = 1;
 13751  002030  0E00               	movlw	0
 13752  002032  6F6B               	movwf	(_API_RW+107)& (0+255),b
 13753  002034  0E01               	movlw	1
 13754  002036  6F6A               	movwf	(_API_RW+106)& (0+255),b
 13755                           
 13756                           ;api.c: 82: API_RW[54] = 1;
 13757  002038  0E00               	movlw	0
 13758  00203A  6F6D               	movwf	(_API_RW+109)& (0+255),b
 13759  00203C  0E01               	movlw	1
 13760  00203E  6F6C               	movwf	(_API_RW+108)& (0+255),b
 13761                           
 13762                           ;api.c: 83: API_RW[55] = 1;
 13763  002040  0E00               	movlw	0
 13764  002042  6F6F               	movwf	(_API_RW+111)& (0+255),b
 13765  002044  0E01               	movlw	1
 13766  002046  6F6E               	movwf	(_API_RW+110)& (0+255),b
 13767                           
 13768                           ;api.c: 84: API_RW[56] = 1;
 13769  002048  0E00               	movlw	0
 13770  00204A  6F71               	movwf	(_API_RW+113)& (0+255),b
 13771  00204C  0E01               	movlw	1
 13772  00204E  6F70               	movwf	(_API_RW+112)& (0+255),b
 13773                           
 13774                           ;api.c: 85: API_RW[57] = 1;
 13775  002050  0E00               	movlw	0
 13776  002052  6F73               	movwf	(_API_RW+115)& (0+255),b
 13777  002054  0E01               	movlw	1
 13778  002056  6F72               	movwf	(_API_RW+114)& (0+255),b
 13779                           
 13780                           ;api.c: 86: API_RW[58] = 1;
 13781  002058  0E00               	movlw	0
 13782  00205A  6F75               	movwf	(_API_RW+117)& (0+255),b
 13783  00205C  0E01               	movlw	1
 13784  00205E  6F74               	movwf	(_API_RW+116)& (0+255),b
 13785                           
 13786                           ;api.c: 87: API_RW[59] = 1;
 13787  002060  0E00               	movlw	0
 13788  002062  6F77               	movwf	(_API_RW+119)& (0+255),b
 13789  002064  0E01               	movlw	1
 13790  002066  6F76               	movwf	(_API_RW+118)& (0+255),b
 13791                           
 13792                           ;api.c: 88: API_RW[60] = 1;
 13793  002068  0E00               	movlw	0
 13794  00206A  6F79               	movwf	(_API_RW+121)& (0+255),b
 13795  00206C  0E01               	movlw	1
 13796  00206E  6F78               	movwf	(_API_RW+120)& (0+255),b
 13797                           
 13798                           ;api.c: 89: API_RW[61] = 0;
 13799  002070  0E00               	movlw	0
 13800  002072  6F7B               	movwf	(_API_RW+123)& (0+255),b
 13801  002074  0E00               	movlw	0
 13802  002076  6F7A               	movwf	(_API_RW+122)& (0+255),b
 13803                           
 13804                           ;api.c: 90: API_RW[62] = 0;
 13805  002078  0E00               	movlw	0
 13806  00207A  6F7D               	movwf	(_API_RW+125)& (0+255),b
 13807  00207C  0E00               	movlw	0
 13808  00207E  6F7C               	movwf	(_API_RW+124)& (0+255),b
 13809                           
 13810                           ;api.c: 91: API_RW[63] = 0;
 13811  002080  0E00               	movlw	0
 13812  002082  6F7F               	movwf	(_API_RW+127)& (0+255),b
 13813  002084  0E00               	movlw	0
 13814  002086  6F7E               	movwf	(_API_RW+126)& (0+255),b
 13815                           
 13816                           ;api.c: 92: API_RW[64] = 0;
 13817  002088  0E00               	movlw	0
 13818  00208A  6F81               	movwf	(_API_RW+129)& (0+255),b
 13819  00208C  0E00               	movlw	0
 13820  00208E  6F80               	movwf	(_API_RW+128)& (0+255),b
 13821                           
 13822                           ;api.c: 93: API_RW[65] = 0;
 13823  002090  0E00               	movlw	0
 13824  002092  6F83               	movwf	(_API_RW+131)& (0+255),b
 13825  002094  0E00               	movlw	0
 13826  002096  6F82               	movwf	(_API_RW+130)& (0+255),b
 13827                           
 13828                           ;api.c: 94: API_RW[66] = 0;
 13829  002098  0E00               	movlw	0
 13830  00209A  6F85               	movwf	(_API_RW+133)& (0+255),b
 13831  00209C  0E00               	movlw	0
 13832  00209E  6F84               	movwf	(_API_RW+132)& (0+255),b
 13833                           
 13834                           ;api.c: 95: API_RW[67] = 0;
 13835  0020A0  0E00               	movlw	0
 13836  0020A2  6F87               	movwf	(_API_RW+135)& (0+255),b
 13837  0020A4  0E00               	movlw	0
 13838  0020A6  6F86               	movwf	(_API_RW+134)& (0+255),b
 13839                           
 13840                           ;api.c: 96: API_RW[68] = 0;
 13841  0020A8  0E00               	movlw	0
 13842  0020AA  6F89               	movwf	(_API_RW+137)& (0+255),b
 13843  0020AC  0E00               	movlw	0
 13844  0020AE  6F88               	movwf	(_API_RW+136)& (0+255),b
 13845                           
 13846                           ;api.c: 97: API_RW[69] = 0;
 13847  0020B0  0E00               	movlw	0
 13848  0020B2  6F8B               	movwf	(_API_RW+139)& (0+255),b
 13849  0020B4  0E00               	movlw	0
 13850  0020B6  6F8A               	movwf	(_API_RW+138)& (0+255),b
 13851                           
 13852                           ;api.c: 98: API_RW[70] = 1;
 13853  0020B8  0E00               	movlw	0
 13854  0020BA  6F8D               	movwf	(_API_RW+141)& (0+255),b
 13855  0020BC  0E01               	movlw	1
 13856  0020BE  6F8C               	movwf	(_API_RW+140)& (0+255),b
 13857                           
 13858                           ;api.c: 99: API_RW[71] = 1;
 13859  0020C0  0E00               	movlw	0
 13860  0020C2  6F8F               	movwf	(_API_RW+143)& (0+255),b
 13861  0020C4  0E01               	movlw	1
 13862  0020C6  6F8E               	movwf	(_API_RW+142)& (0+255),b
 13863                           
 13864                           ;api.c: 100: API_RW[72] = 1;
 13865  0020C8  0E00               	movlw	0
 13866  0020CA  6F91               	movwf	(_API_RW+145)& (0+255),b
 13867  0020CC  0E01               	movlw	1
 13868  0020CE  6F90               	movwf	(_API_RW+144)& (0+255),b
 13869                           
 13870                           ;api.c: 101: API_RW[73] = 1;
 13871  0020D0  0E00               	movlw	0
 13872  0020D2  6F93               	movwf	(_API_RW+147)& (0+255),b
 13873  0020D4  0E01               	movlw	1
 13874  0020D6  6F92               	movwf	(_API_RW+146)& (0+255),b
 13875                           
 13876                           ;api.c: 102: API_RW[74] = 1;
 13877  0020D8  0E00               	movlw	0
 13878  0020DA  6F95               	movwf	(_API_RW+149)& (0+255),b
 13879  0020DC  0E01               	movlw	1
 13880  0020DE  6F94               	movwf	(_API_RW+148)& (0+255),b
 13881                           
 13882                           ;api.c: 103: API_RW[75] = 1;
 13883  0020E0  0E00               	movlw	0
 13884  0020E2  6F97               	movwf	(_API_RW+151)& (0+255),b
 13885  0020E4  0E01               	movlw	1
 13886  0020E6  6F96               	movwf	(_API_RW+150)& (0+255),b
 13887                           
 13888                           ;api.c: 104: API_RW[76] = 1;
 13889  0020E8  0E00               	movlw	0
 13890  0020EA  6F99               	movwf	(_API_RW+153)& (0+255),b
 13891  0020EC  0E01               	movlw	1
 13892  0020EE  6F98               	movwf	(_API_RW+152)& (0+255),b
 13893                           
 13894                           ;api.c: 105: API_RW[77] = 1;
 13895  0020F0  0E00               	movlw	0
 13896  0020F2  6F9B               	movwf	(_API_RW+155)& (0+255),b
 13897  0020F4  0E01               	movlw	1
 13898  0020F6  6F9A               	movwf	(_API_RW+154)& (0+255),b
 13899                           
 13900                           ;api.c: 106: API_RW[78] = 1;
 13901  0020F8  0E00               	movlw	0
 13902  0020FA  6F9D               	movwf	(_API_RW+157)& (0+255),b
 13903  0020FC  0E01               	movlw	1
 13904  0020FE  6F9C               	movwf	(_API_RW+156)& (0+255),b
 13905                           
 13906                           ;api.c: 107: API_RW[79] = 1;
 13907  002100  0E00               	movlw	0
 13908  002102  6F9F               	movwf	(_API_RW+159)& (0+255),b
 13909  002104  0E01               	movlw	1
 13910  002106  6F9E               	movwf	(_API_RW+158)& (0+255),b
 13911                           
 13912                           ;api.c: 108: API_RW[80] = 0;
 13913  002108  0E00               	movlw	0
 13914  00210A  6FA1               	movwf	(_API_RW+161)& (0+255),b
 13915  00210C  0E00               	movlw	0
 13916  00210E  6FA0               	movwf	(_API_RW+160)& (0+255),b
 13917                           
 13918                           ;api.c: 109: API_RW[81] = 1;
 13919  002110  0E00               	movlw	0
 13920  002112  6FA3               	movwf	(_API_RW+163)& (0+255),b
 13921  002114  0E01               	movlw	1
 13922  002116  6FA2               	movwf	(_API_RW+162)& (0+255),b
 13923                           
 13924                           ;api.c: 110: API_RW[82] = 0;
 13925  002118  0E00               	movlw	0
 13926  00211A  6FA5               	movwf	(_API_RW+165)& (0+255),b
 13927  00211C  0E00               	movlw	0
 13928  00211E  6FA4               	movwf	(_API_RW+164)& (0+255),b
 13929                           
 13930                           ;api.c: 111: API_RW[83] = 0;
 13931  002120  0E00               	movlw	0
 13932  002122  6FA7               	movwf	(_API_RW+167)& (0+255),b
 13933  002124  0E00               	movlw	0
 13934  002126  6FA6               	movwf	(_API_RW+166)& (0+255),b
 13935                           
 13936                           ;api.c: 112: API_RW[84] = 0;
 13937  002128  0E00               	movlw	0
 13938  00212A  6FA9               	movwf	(_API_RW+169)& (0+255),b
 13939  00212C  0E00               	movlw	0
 13940  00212E  6FA8               	movwf	(_API_RW+168)& (0+255),b
 13941                           
 13942                           ;api.c: 113: API_RW[85] = 0;
 13943  002130  0E00               	movlw	0
 13944  002132  6FAB               	movwf	(_API_RW+171)& (0+255),b
 13945  002134  0E00               	movlw	0
 13946  002136  6FAA               	movwf	(_API_RW+170)& (0+255),b
 13947                           
 13948                           ;api.c: 114: API_RW[86] = 0;
 13949  002138  0E00               	movlw	0
 13950  00213A  6FAD               	movwf	(_API_RW+173)& (0+255),b
 13951  00213C  0E00               	movlw	0
 13952  00213E  6FAC               	movwf	(_API_RW+172)& (0+255),b
 13953                           
 13954                           ;api.c: 115: API_RW[87] = 1;
 13955  002140  0E00               	movlw	0
 13956  002142  6FAF               	movwf	(_API_RW+175)& (0+255),b
 13957  002144  0E01               	movlw	1
 13958  002146  6FAE               	movwf	(_API_RW+174)& (0+255),b
 13959                           
 13960                           ;api.c: 116: API_RW[88] = 0;
 13961  002148  0E00               	movlw	0
 13962  00214A  6FB1               	movwf	(_API_RW+177)& (0+255),b
 13963  00214C  0E00               	movlw	0
 13964  00214E  6FB0               	movwf	(_API_RW+176)& (0+255),b
 13965                           
 13966                           ;api.c: 117: API_RW[89] = 0;
 13967  002150  0E00               	movlw	0
 13968  002152  6FB3               	movwf	(_API_RW+179)& (0+255),b
 13969  002154  0E00               	movlw	0
 13970  002156  6FB2               	movwf	(_API_RW+178)& (0+255),b
 13971                           
 13972                           ;api.c: 118: API_RW[90] = 0;
 13973  002158  0E00               	movlw	0
 13974  00215A  6FB5               	movwf	(_API_RW+181)& (0+255),b
 13975  00215C  0E00               	movlw	0
 13976  00215E  6FB4               	movwf	(_API_RW+180)& (0+255),b
 13977                           
 13978                           ;api.c: 121: API[16] = 91;
 13979  002160  0E00               	movlw	0
 13980  002162  0101               	movlb	1	; () banked
 13981  002164  6F21               	movwf	(_API+33)& (0+255),b
 13982  002166  0E5B               	movlw	91
 13983  002168  6F20               	movwf	(_API+32)& (0+255),b
 13984                           
 13985                           ;api.c: 122: API[17] = 0;
 13986  00216A  0E00               	movlw	0
 13987  00216C  6F23               	movwf	(_API+35)& (0+255),b
 13988  00216E  0E00               	movlw	0
 13989  002170  6F22               	movwf	(_API+34)& (0+255),b
 13990                           
 13991                           ;api.c: 123: API[18] = 18587;
 13992  002172  0E48               	movlw	72
 13993  002174  6F25               	movwf	(_API+37)& (0+255),b
 13994  002176  0E9B               	movlw	155
 13995  002178  6F24               	movwf	(_API+36)& (0+255),b
 13996                           
 13997                           ;api.c: 124: API[19] = 800;
 13998  00217A  0E03               	movlw	3
 13999  00217C  6F27               	movwf	(_API+39)& (0+255),b
 14000  00217E  0E20               	movlw	32
 14001  002180  6F26               	movwf	(_API+38)& (0+255),b
 14002                           
 14003                           ;api.c: 125: API[20] = 9294;
 14004  002182  0E24               	movlw	36
 14005  002184  6F29               	movwf	(_API+41)& (0+255),b
 14006  002186  0E4E               	movlw	78
 14007  002188  6F28               	movwf	(_API+40)& (0+255),b
 14008                           
 14009                           ;api.c: 126: API[21] = 20;
 14010  00218A  0E00               	movlw	0
 14011  00218C  6F2B               	movwf	(_API+43)& (0+255),b
 14012  00218E  0E14               	movlw	20
 14013  002190  6F2A               	movwf	(_API+42)& (0+255),b
 14014                           
 14015                           ;api.c: 127: API[22] = 20;
 14016  002192  0E00               	movlw	0
 14017  002194  6F2D               	movwf	(_API+45)& (0+255),b
 14018  002196  0E14               	movlw	20
 14019  002198  6F2C               	movwf	(_API+44)& (0+255),b
 14020                           
 14021                           ;api.c: 128: API[23] = 200;
 14022  00219A  0E00               	movlw	0
 14023  00219C  6F2F               	movwf	(_API+47)& (0+255),b
 14024  00219E  0EC8               	movlw	200
 14025  0021A0  6F2E               	movwf	(_API+46)& (0+255),b
 14026                           
 14027                           ;api.c: 129: API[24] = 200;
 14028  0021A2  0E00               	movlw	0
 14029  0021A4  6F31               	movwf	(_API+49)& (0+255),b
 14030  0021A6  0EC8               	movlw	200
 14031  0021A8  6F30               	movwf	(_API+48)& (0+255),b
 14032                           
 14033                           ;api.c: 130: API[25] = 80;
 14034  0021AA  0E00               	movlw	0
 14035  0021AC  6F33               	movwf	(_API+51)& (0+255),b
 14036  0021AE  0E50               	movlw	80
 14037  0021B0  6F32               	movwf	(_API+50)& (0+255),b
 14038                           
 14039                           ;api.c: 131: API[26] = 45;
 14040  0021B2  0E00               	movlw	0
 14041  0021B4  6F35               	movwf	(_API+53)& (0+255),b
 14042  0021B6  0E2D               	movlw	45
 14043  0021B8  6F34               	movwf	(_API+52)& (0+255),b
 14044                           
 14045                           ;api.c: 132: API[27] = 20;
 14046  0021BA  0E00               	movlw	0
 14047  0021BC  6F37               	movwf	(_API+55)& (0+255),b
 14048  0021BE  0E14               	movlw	20
 14049  0021C0  6F36               	movwf	(_API+54)& (0+255),b
 14050                           
 14051                           ;api.c: 133: API[28] = 0;
 14052  0021C2  0E00               	movlw	0
 14053  0021C4  6F39               	movwf	(_API+57)& (0+255),b
 14054  0021C6  0E00               	movlw	0
 14055  0021C8  6F38               	movwf	(_API+56)& (0+255),b
 14056                           
 14057                           ;api.c: 134: API[29] = 0;
 14058  0021CA  0E00               	movlw	0
 14059  0021CC  6F3B               	movwf	(_API+59)& (0+255),b
 14060  0021CE  0E00               	movlw	0
 14061  0021D0  6F3A               	movwf	(_API+58)& (0+255),b
 14062                           
 14063                           ;api.c: 135: API[30] = 0;
 14064  0021D2  0E00               	movlw	0
 14065  0021D4  6F3D               	movwf	(_API+61)& (0+255),b
 14066  0021D6  0E00               	movlw	0
 14067  0021D8  6F3C               	movwf	(_API+60)& (0+255),b
 14068                           
 14069                           ;api.c: 136: API[31] = 0;
 14070  0021DA  0E00               	movlw	0
 14071  0021DC  6F3F               	movwf	(_API+63)& (0+255),b
 14072  0021DE  0E00               	movlw	0
 14073  0021E0  6F3E               	movwf	(_API+62)& (0+255),b
 14074                           
 14075                           ;api.c: 137: API[32] = 0;
 14076  0021E2  0E00               	movlw	0
 14077  0021E4  6F41               	movwf	(_API+65)& (0+255),b
 14078  0021E6  0E00               	movlw	0
 14079  0021E8  6F40               	movwf	(_API+64)& (0+255),b
 14080                           
 14081                           ;api.c: 138: API[33] = 0;
 14082  0021EA  0E00               	movlw	0
 14083  0021EC  6F43               	movwf	(_API+67)& (0+255),b
 14084  0021EE  0E00               	movlw	0
 14085  0021F0  6F42               	movwf	(_API+66)& (0+255),b
 14086                           
 14087                           ;api.c: 139: API[34] = 0;
 14088  0021F2  0E00               	movlw	0
 14089  0021F4  6F45               	movwf	(_API+69)& (0+255),b
 14090  0021F6  0E00               	movlw	0
 14091  0021F8  6F44               	movwf	(_API+68)& (0+255),b
 14092                           
 14093                           ;api.c: 140: API[35] = 0;
 14094  0021FA  0E00               	movlw	0
 14095  0021FC  6F47               	movwf	(_API+71)& (0+255),b
 14096  0021FE  0E00               	movlw	0
 14097  002200  6F46               	movwf	(_API+70)& (0+255),b
 14098                           
 14099                           ;api.c: 141: API[36] = 0;
 14100  002202  0E00               	movlw	0
 14101  002204  6F49               	movwf	(_API+73)& (0+255),b
 14102  002206  0E00               	movlw	0
 14103  002208  6F48               	movwf	(_API+72)& (0+255),b
 14104                           
 14105                           ;api.c: 142: API[37] = 0;
 14106  00220A  0E00               	movlw	0
 14107  00220C  6F4B               	movwf	(_API+75)& (0+255),b
 14108  00220E  0E00               	movlw	0
 14109  002210  6F4A               	movwf	(_API+74)& (0+255),b
 14110                           
 14111                           ;api.c: 143: API[38] = 0;
 14112  002212  0E00               	movlw	0
 14113  002214  6F4D               	movwf	(_API+77)& (0+255),b
 14114  002216  0E00               	movlw	0
 14115  002218  6F4C               	movwf	(_API+76)& (0+255),b
 14116                           
 14117                           ;api.c: 144: API[39] = 0;
 14118  00221A  0E00               	movlw	0
 14119  00221C  6F4F               	movwf	(_API+79)& (0+255),b
 14120  00221E  0E00               	movlw	0
 14121  002220  6F4E               	movwf	(_API+78)& (0+255),b
 14122                           
 14123                           ;api.c: 145: API[40] = 0;
 14124  002222  0E00               	movlw	0
 14125  002224  6F51               	movwf	(_API+81)& (0+255),b
 14126  002226  0E00               	movlw	0
 14127  002228  6F50               	movwf	(_API+80)& (0+255),b
 14128                           
 14129                           ;api.c: 146: API[41] = 0;
 14130  00222A  0E00               	movlw	0
 14131  00222C  6F53               	movwf	(_API+83)& (0+255),b
 14132  00222E  0E00               	movlw	0
 14133  002230  6F52               	movwf	(_API+82)& (0+255),b
 14134                           
 14135                           ;api.c: 147: API[42] = 0;
 14136  002232  0E00               	movlw	0
 14137  002234  6F55               	movwf	(_API+85)& (0+255),b
 14138  002236  0E00               	movlw	0
 14139  002238  6F54               	movwf	(_API+84)& (0+255),b
 14140                           
 14141                           ;api.c: 148: API[43] = 0;
 14142  00223A  0E00               	movlw	0
 14143  00223C  6F57               	movwf	(_API+87)& (0+255),b
 14144  00223E  0E00               	movlw	0
 14145  002240  6F56               	movwf	(_API+86)& (0+255),b
 14146                           
 14147                           ;api.c: 149: API[44] = 0;
 14148  002242  0E00               	movlw	0
 14149  002244  6F59               	movwf	(_API+89)& (0+255),b
 14150  002246  0E00               	movlw	0
 14151  002248  6F58               	movwf	(_API+88)& (0+255),b
 14152                           
 14153                           ;api.c: 150: API[45] = 0;
 14154  00224A  0E00               	movlw	0
 14155  00224C  6F5B               	movwf	(_API+91)& (0+255),b
 14156  00224E  0E00               	movlw	0
 14157  002250  6F5A               	movwf	(_API+90)& (0+255),b
 14158                           
 14159                           ;api.c: 151: API[46] = 150;
 14160  002252  0E00               	movlw	0
 14161  002254  6F5D               	movwf	(_API+93)& (0+255),b
 14162  002256  0E96               	movlw	150
 14163  002258  6F5C               	movwf	(_API+92)& (0+255),b
 14164                           
 14165                           ;api.c: 152: API[47] = 250;
 14166  00225A  0E00               	movlw	0
 14167  00225C  6F5F               	movwf	(_API+95)& (0+255),b
 14168  00225E  0EFA               	movlw	250
 14169  002260  6F5E               	movwf	(_API+94)& (0+255),b
 14170                           
 14171                           ;api.c: 153: API[48] = 0;
 14172  002262  0E00               	movlw	0
 14173  002264  6F61               	movwf	(_API+97)& (0+255),b
 14174  002266  0E00               	movlw	0
 14175  002268  6F60               	movwf	(_API+96)& (0+255),b
 14176                           
 14177                           ;api.c: 154: API[49] = 150;
 14178  00226A  0E00               	movlw	0
 14179  00226C  6F63               	movwf	(_API+99)& (0+255),b
 14180  00226E  0E96               	movlw	150
 14181  002270  6F62               	movwf	(_API+98)& (0+255),b
 14182                           
 14183                           ;api.c: 155: API[50] = 0;
 14184  002272  0E00               	movlw	0
 14185  002274  6F65               	movwf	(_API+101)& (0+255),b
 14186  002276  0E00               	movlw	0
 14187  002278  6F64               	movwf	(_API+100)& (0+255),b
 14188                           
 14189                           ;api.c: 156: API[51] = 0;
 14190  00227A  0E00               	movlw	0
 14191  00227C  6F67               	movwf	(_API+103)& (0+255),b
 14192  00227E  0E00               	movlw	0
 14193  002280  6F66               	movwf	(_API+102)& (0+255),b
 14194                           
 14195                           ;api.c: 157: API[52] = 250;
 14196  002282  0E00               	movlw	0
 14197  002284  6F69               	movwf	(_API+105)& (0+255),b
 14198  002286  0EFA               	movlw	250
 14199  002288  6F68               	movwf	(_API+104)& (0+255),b
 14200                           
 14201                           ;api.c: 158: API[53] = 1859;
 14202  00228A  0E07               	movlw	7
 14203  00228C  6F6B               	movwf	(_API+107)& (0+255),b
 14204  00228E  0E43               	movlw	67
 14205  002290  6F6A               	movwf	(_API+106)& (0+255),b
 14206                           
 14207                           ;api.c: 159: API[54] = 0;
 14208  002292  0E00               	movlw	0
 14209  002294  6F6D               	movwf	(_API+109)& (0+255),b
 14210  002296  0E00               	movlw	0
 14211  002298  6F6C               	movwf	(_API+108)& (0+255),b
 14212                           
 14213                           ;api.c: 160: API[55] = 0;
 14214  00229A  0E00               	movlw	0
 14215  00229C  6F6F               	movwf	(_API+111)& (0+255),b
 14216  00229E  0E00               	movlw	0
 14217  0022A0  6F6E               	movwf	(_API+110)& (0+255),b
 14218                           
 14219                           ;api.c: 161: API[56] = 1859;
 14220  0022A2  0E07               	movlw	7
 14221  0022A4  6F71               	movwf	(_API+113)& (0+255),b
 14222  0022A6  0E43               	movlw	67
 14223  0022A8  6F70               	movwf	(_API+112)& (0+255),b
 14224                           
 14225                           ;api.c: 162: API[57] = 0;
 14226  0022AA  0E00               	movlw	0
 14227  0022AC  6F73               	movwf	(_API+115)& (0+255),b
 14228  0022AE  0E00               	movlw	0
 14229  0022B0  6F72               	movwf	(_API+114)& (0+255),b
 14230                           
 14231                           ;api.c: 163: API[58] = 1859;
 14232  0022B2  0E07               	movlw	7
 14233  0022B4  6F75               	movwf	(_API+117)& (0+255),b
 14234  0022B6  0E43               	movlw	67
 14235  0022B8  6F74               	movwf	(_API+116)& (0+255),b
 14236                           
 14237                           ;api.c: 164: API[59] = 1859;
 14238  0022BA  0E07               	movlw	7
 14239  0022BC  6F77               	movwf	(_API+119)& (0+255),b
 14240  0022BE  0E43               	movlw	67
 14241  0022C0  6F76               	movwf	(_API+118)& (0+255),b
 14242                           
 14243                           ;api.c: 165: API[60] = 0;
 14244  0022C2  0E00               	movlw	0
 14245  0022C4  6F79               	movwf	(_API+121)& (0+255),b
 14246  0022C6  0E00               	movlw	0
 14247  0022C8  6F78               	movwf	(_API+120)& (0+255),b
 14248                           
 14249                           ;api.c: 166: API[61] = 0;
 14250  0022CA  0E00               	movlw	0
 14251  0022CC  6F7B               	movwf	(_API+123)& (0+255),b
 14252  0022CE  0E00               	movlw	0
 14253  0022D0  6F7A               	movwf	(_API+122)& (0+255),b
 14254                           
 14255                           ;api.c: 167: API[62] = 0;
 14256  0022D2  0E00               	movlw	0
 14257  0022D4  6F7D               	movwf	(_API+125)& (0+255),b
 14258  0022D6  0E00               	movlw	0
 14259  0022D8  6F7C               	movwf	(_API+124)& (0+255),b
 14260                           
 14261                           ;api.c: 168: API[63] = 1;
 14262  0022DA  0E00               	movlw	0
 14263  0022DC  6F7F               	movwf	(_API+127)& (0+255),b
 14264  0022DE  0E01               	movlw	1
 14265  0022E0  6F7E               	movwf	(_API+126)& (0+255),b
 14266                           
 14267                           ;api.c: 169: API[64] = 0;
 14268  0022E2  0E00               	movlw	0
 14269  0022E4  6F81               	movwf	(_API+129)& (0+255),b
 14270  0022E6  0E00               	movlw	0
 14271  0022E8  6F80               	movwf	(_API+128)& (0+255),b
 14272                           
 14273                           ;api.c: 170: API[65] = 0;
 14274  0022EA  0E00               	movlw	0
 14275  0022EC  6F83               	movwf	(_API+131)& (0+255),b
 14276  0022EE  0E00               	movlw	0
 14277  0022F0  6F82               	movwf	(_API+130)& (0+255),b
 14278                           
 14279                           ;api.c: 171: API[66] = 0;
 14280  0022F2  0E00               	movlw	0
 14281  0022F4  6F85               	movwf	(_API+133)& (0+255),b
 14282  0022F6  0E00               	movlw	0
 14283  0022F8  6F84               	movwf	(_API+132)& (0+255),b
 14284                           
 14285                           ;api.c: 172: API[67] = 0;
 14286  0022FA  0E00               	movlw	0
 14287  0022FC  6F87               	movwf	(_API+135)& (0+255),b
 14288  0022FE  0E00               	movlw	0
 14289  002300  6F86               	movwf	(_API+134)& (0+255),b
 14290                           
 14291                           ;api.c: 173: API[68] = 0;
 14292  002302  0E00               	movlw	0
 14293  002304  6F89               	movwf	(_API+137)& (0+255),b
 14294  002306  0E00               	movlw	0
 14295  002308  6F88               	movwf	(_API+136)& (0+255),b
 14296                           
 14297                           ;api.c: 174: API[69] = 1;
 14298  00230A  0E00               	movlw	0
 14299  00230C  6F8B               	movwf	(_API+139)& (0+255),b
 14300  00230E  0E01               	movlw	1
 14301  002310  6F8A               	movwf	(_API+138)& (0+255),b
 14302                           
 14303                           ;api.c: 175: API[70] = 0;
 14304  002312  0E00               	movlw	0
 14305  002314  6F8D               	movwf	(_API+141)& (0+255),b
 14306  002316  0E00               	movlw	0
 14307  002318  6F8C               	movwf	(_API+140)& (0+255),b
 14308                           
 14309                           ;api.c: 176: API[71] = 0;
 14310  00231A  0E00               	movlw	0
 14311  00231C  6F8F               	movwf	(_API+143)& (0+255),b
 14312  00231E  0E00               	movlw	0
 14313  002320  6F8E               	movwf	(_API+142)& (0+255),b
 14314                           
 14315                           ;api.c: 177: API[72] = 0;
 14316  002322  0E00               	movlw	0
 14317  002324  6F91               	movwf	(_API+145)& (0+255),b
 14318  002326  0E00               	movlw	0
 14319  002328  6F90               	movwf	(_API+144)& (0+255),b
 14320                           
 14321                           ;api.c: 178: API[73] = 0;
 14322  00232A  0E00               	movlw	0
 14323  00232C  6F93               	movwf	(_API+147)& (0+255),b
 14324  00232E  0E00               	movlw	0
 14325  002330  6F92               	movwf	(_API+146)& (0+255),b
 14326                           
 14327                           ;api.c: 179: API[74] = 0;
 14328  002332  0E00               	movlw	0
 14329  002334  6F95               	movwf	(_API+149)& (0+255),b
 14330  002336  0E00               	movlw	0
 14331  002338  6F94               	movwf	(_API+148)& (0+255),b
 14332                           
 14333                           ;api.c: 180: API[75] = 0;
 14334  00233A  0E00               	movlw	0
 14335  00233C  6F97               	movwf	(_API+151)& (0+255),b
 14336  00233E  0E00               	movlw	0
 14337  002340  6F96               	movwf	(_API+150)& (0+255),b
 14338                           
 14339                           ;api.c: 181: API[76] = 0;
 14340  002342  0E00               	movlw	0
 14341  002344  6F99               	movwf	(_API+153)& (0+255),b
 14342  002346  0E00               	movlw	0
 14343  002348  6F98               	movwf	(_API+152)& (0+255),b
 14344                           
 14345                           ;api.c: 182: API[77] = 0;
 14346  00234A  0E00               	movlw	0
 14347  00234C  6F9B               	movwf	(_API+155)& (0+255),b
 14348  00234E  0E00               	movlw	0
 14349  002350  6F9A               	movwf	(_API+154)& (0+255),b
 14350                           
 14351                           ;api.c: 183: API[78] = 0;
 14352  002352  0E00               	movlw	0
 14353  002354  6F9D               	movwf	(_API+157)& (0+255),b
 14354  002356  0E00               	movlw	0
 14355  002358  6F9C               	movwf	(_API+156)& (0+255),b
 14356                           
 14357                           ;api.c: 184: API[79] = 0;
 14358  00235A  0E00               	movlw	0
 14359  00235C  6F9F               	movwf	(_API+159)& (0+255),b
 14360  00235E  0E00               	movlw	0
 14361  002360  6F9E               	movwf	(_API+158)& (0+255),b
 14362                           
 14363                           ;api.c: 185: API[80] = 0;
 14364  002362  0E00               	movlw	0
 14365  002364  6FA1               	movwf	(_API+161)& (0+255),b
 14366  002366  0E00               	movlw	0
 14367  002368  6FA0               	movwf	(_API+160)& (0+255),b
 14368                           
 14369                           ;api.c: 186: API[81] = 0;
 14370  00236A  0E00               	movlw	0
 14371  00236C  6FA3               	movwf	(_API+163)& (0+255),b
 14372  00236E  0E00               	movlw	0
 14373  002370  6FA2               	movwf	(_API+162)& (0+255),b
 14374                           
 14375                           ;api.c: 187: API[82] = 1;
 14376  002372  0E00               	movlw	0
 14377  002374  6FA5               	movwf	(_API+165)& (0+255),b
 14378  002376  0E01               	movlw	1
 14379  002378  6FA4               	movwf	(_API+164)& (0+255),b
 14380                           
 14381                           ;api.c: 188: API[83] = 0;
 14382  00237A  0E00               	movlw	0
 14383  00237C  6FA7               	movwf	(_API+167)& (0+255),b
 14384  00237E  0E00               	movlw	0
 14385  002380  6FA6               	movwf	(_API+166)& (0+255),b
 14386                           
 14387                           ;api.c: 189: API[84] = 1;
 14388  002382  0E00               	movlw	0
 14389  002384  6FA9               	movwf	(_API+169)& (0+255),b
 14390  002386  0E01               	movlw	1
 14391  002388  6FA8               	movwf	(_API+168)& (0+255),b
 14392                           
 14393                           ;api.c: 190: API[85] = 0;
 14394  00238A  0E00               	movlw	0
 14395  00238C  6FAB               	movwf	(_API+171)& (0+255),b
 14396  00238E  0E00               	movlw	0
 14397  002390  6FAA               	movwf	(_API+170)& (0+255),b
 14398                           
 14399                           ;api.c: 191: API[86] = 0;
 14400  002392  0E00               	movlw	0
 14401  002394  6FAD               	movwf	(_API+173)& (0+255),b
 14402  002396  0E00               	movlw	0
 14403  002398  6FAC               	movwf	(_API+172)& (0+255),b
 14404                           
 14405                           ;api.c: 192: API[87] = 0;
 14406  00239A  0E00               	movlw	0
 14407  00239C  6FAF               	movwf	(_API+175)& (0+255),b
 14408  00239E  0E00               	movlw	0
 14409  0023A0  6FAE               	movwf	(_API+174)& (0+255),b
 14410                           
 14411                           ;api.c: 193: API[88] = 511;
 14412  0023A2  0E01               	movlw	1
 14413  0023A4  6FB1               	movwf	(_API+177)& (0+255),b
 14414  0023A6  69B0               	setf	(_API+176)& (0+255),b
 14415                           
 14416                           ;api.c: 194: API[89] = 0;
 14417  0023A8  0E00               	movlw	0
 14418  0023AA  6FB3               	movwf	(_API+179)& (0+255),b
 14419  0023AC  0E00               	movlw	0
 14420  0023AE  6FB2               	movwf	(_API+178)& (0+255),b
 14421                           
 14422                           ;api.c: 195: API[90] = 0;
 14423  0023B0  0E00               	movlw	0
 14424  0023B2  6FB5               	movwf	(_API+181)& (0+255),b
 14425  0023B4  0E00               	movlw	0
 14426  0023B6  6FB4               	movwf	(_API+180)& (0+255),b
 14427                           
 14428                           ; BSR set to: 1
 14429  0023B8  0012               	return		;funcret
 14430  0023BA                     __end_of_APIxInitialize:
 14431                           	opt stack 0
 14432                           tblptru	equ	0xFF8
 14433                           tblptrh	equ	0xFF7
 14434                           tblptrl	equ	0xFF6
 14435                           tablat	equ	0xFF5
 14436                           prodh	equ	0xFF4
 14437                           prodl	equ	0xFF3
 14438                           intcon	equ	0xFF2
 14439                           intcon2	equ	0xFF1
 14440                           postinc0	equ	0xFEE
 14441                           wreg	equ	0xFE8
 14442                           postinc1	equ	0xFE6
 14443                           postdec1	equ	0xFE5
 14444                           fsr1h	equ	0xFE2
 14445                           fsr1l	equ	0xFE1
 14446                           indf2	equ	0xFDF
 14447                           postinc2	equ	0xFDE
 14448                           postdec2	equ	0xFDD
 14449                           fsr2h	equ	0xFDA
 14450                           fsr2l	equ	0xFD9
 14451                           status	equ	0xFD8
 14452                           
 14453 ;; *************** function _tc_low *****************
 14454 ;; Defined at:
 14455 ;;		line 152 in file "../Main.c"
 14456 ;; Parameters:    Size  Location     Type
 14457 ;;		None
 14458 ;; Auto vars:     Size  Location     Type
 14459 ;;		None
 14460 ;; Return value:  Size  Location     Type
 14461 ;;                  1    wreg      void 
 14462 ;; Registers used:
 14463 ;;		None
 14464 ;; Tracked objects:
 14465 ;;		On entry : 0/0
 14466 ;;		On exit  : 0/0
 14467 ;;		Unchanged: 0/0
 14468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14469 ;;      Params:         0       0       0       0       0       0       0       0       0
 14470 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14471 ;;      Temps:          0      21       0       0       0       0       0       0       0
 14472 ;;      Totals:         0      21       0       0       0       0       0       0       0
 14473 ;;Total ram usage:       21 bytes
 14474 ;; Hardware stack levels used:    1
 14475 ;; Hardware stack levels required when called:    2
 14476 ;; This function calls:
 14477 ;;		Nothing
 14478 ;; This function is called by:
 14479 ;;		Interrupt level 1
 14480 ;; This function uses a non-reentrant model
 14481 ;;
 14482                           
 14483                           	psect	intcodelo
 14484  000018                     __pintcodelo:
 14485                           	opt stack 0
 14486  000018                     _tc_low:
 14487                           	opt stack 22
 14488                           
 14489                           ; BSR set to: 1
 14490                           ;incstack = 0
 14491  000018  804D               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 14492  00001A  CFD8 F098          	movff	status,??_tc_low
 14493  00001E  CFE8 F099          	movff	wreg,??_tc_low+1
 14494  000022  CFE0 F09A          	movff	bsr,??_tc_low+2
 14495  000026  CFFA F09B          	movff	pclath,??_tc_low+3
 14496  00002A  CFFB F09C          	movff	pclatu,??_tc_low+4
 14497  00002E  CFE9 F09D          	movff	fsr0l,??_tc_low+5
 14498  000032  CFEA F09E          	movff	fsr0h,??_tc_low+6
 14499  000036  CFE1 F09F          	movff	fsr1l,??_tc_low+7
 14500  00003A  CFE2 F0A0          	movff	fsr1h,??_tc_low+8
 14501  00003E  CFD9 F0A1          	movff	fsr2l,??_tc_low+9
 14502  000042  CFDA F0A2          	movff	fsr2h,??_tc_low+10
 14503  000046  CFF3 F0A3          	movff	prodl,??_tc_low+11
 14504  00004A  CFF4 F0A4          	movff	prodh,??_tc_low+12
 14505  00004E  CFF6 F0A5          	movff	tblptrl,??_tc_low+13
 14506  000052  CFF7 F0A6          	movff	tblptrh,??_tc_low+14
 14507  000056  CFF8 F0A7          	movff	tblptru,??_tc_low+15
 14508  00005A  CFF5 F0A8          	movff	tablat,??_tc_low+16
 14509  00005E  C04D  F0A9         	movff	btemp,??_tc_low+17
 14510  000062  C04E  F0AA         	movff	btemp+1,??_tc_low+18
 14511  000066  C04F  F0AB         	movff	btemp+2,??_tc_low+19
 14512  00006A  C050  F0AC         	movff	btemp+3,??_tc_low+20
 14513  00006E  C0AC  F050         	movff	??_tc_low+20,btemp+3
 14514  000072  C0AB  F04F         	movff	??_tc_low+19,btemp+2
 14515  000076  C0AA  F04E         	movff	??_tc_low+18,btemp+1
 14516  00007A  C0A9  F04D         	movff	??_tc_low+17,btemp
 14517  00007E  C0A8  FFF5         	movff	??_tc_low+16,tablat
 14518  000082  C0A7  FFF8         	movff	??_tc_low+15,tblptru
 14519  000086  C0A6  FFF7         	movff	??_tc_low+14,tblptrh
 14520  00008A  C0A5  FFF6         	movff	??_tc_low+13,tblptrl
 14521  00008E  C0A4  FFF4         	movff	??_tc_low+12,prodh
 14522  000092  C0A3  FFF3         	movff	??_tc_low+11,prodl
 14523  000096  C0A2  FFDA         	movff	??_tc_low+10,fsr2h
 14524  00009A  C0A1  FFD9         	movff	??_tc_low+9,fsr2l
 14525  00009E  C0A0  FFE2         	movff	??_tc_low+8,fsr1h
 14526  0000A2  C09F  FFE1         	movff	??_tc_low+7,fsr1l
 14527  0000A6  C09E  FFEA         	movff	??_tc_low+6,fsr0h
 14528  0000AA  C09D  FFE9         	movff	??_tc_low+5,fsr0l
 14529  0000AE  C09C  FFFB         	movff	??_tc_low+4,pclatu
 14530  0000B2  C09B  FFFA         	movff	??_tc_low+3,pclath
 14531  0000B6  C09A  FFE0         	movff	??_tc_low+2,bsr
 14532  0000BA  C099  FFE8         	movff	??_tc_low+1,wreg
 14533  0000BE  C098  FFD8         	movff	??_tc_low,status
 14534  0000C2  904D               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 14535  0000C4  0010               	retfie	
 14536  0000C6                     __end_of_tc_low:
 14537                           	opt stack 0
 14538                           pclatu	equ	0xFFB
 14539                           pclath	equ	0xFFA
 14540                           tblptru	equ	0xFF8
 14541                           tblptrh	equ	0xFF7
 14542                           tblptrl	equ	0xFF6
 14543                           tablat	equ	0xFF5
 14544                           prodh	equ	0xFF4
 14545                           prodl	equ	0xFF3
 14546                           intcon	equ	0xFF2
 14547                           intcon2	equ	0xFF1
 14548                           postinc0	equ	0xFEE
 14549                           fsr0h	equ	0xFEA
 14550                           fsr0l	equ	0xFE9
 14551                           wreg	equ	0xFE8
 14552                           postinc1	equ	0xFE6
 14553                           postdec1	equ	0xFE5
 14554                           fsr1h	equ	0xFE2
 14555                           fsr1l	equ	0xFE1
 14556                           bsr	equ	0xFE0
 14557                           indf2	equ	0xFDF
 14558                           postinc2	equ	0xFDE
 14559                           postdec2	equ	0xFDD
 14560                           fsr2h	equ	0xFDA
 14561                           fsr2l	equ	0xFD9
 14562                           status	equ	0xFD8
 14563                           
 14564 ;; *************** function _tc_high *****************
 14565 ;; Defined at:
 14566 ;;		line 156 in file "../Main.c"
 14567 ;; Parameters:    Size  Location     Type
 14568 ;;		None
 14569 ;; Auto vars:     Size  Location     Type
 14570 ;;		None
 14571 ;; Return value:  Size  Location     Type
 14572 ;;                  1    wreg      void 
 14573 ;; Registers used:
 14574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14575 ;; Tracked objects:
 14576 ;;		On entry : 0/0
 14577 ;;		On exit  : 0/0
 14578 ;;		Unchanged: 0/0
 14579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14580 ;;      Params:         0       0       0       0       0       0       0       0       0
 14581 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14582 ;;      Temps:         18       0       0       0       0       0       0       0       0
 14583 ;;      Totals:        18       0       0       0       0       0       0       0       0
 14584 ;;Total ram usage:       18 bytes
 14585 ;; Hardware stack levels used:    1
 14586 ;; Hardware stack levels required when called:    1
 14587 ;; This function calls:
 14588 ;;		_EUSART1_Receive_ISR
 14589 ;;		_EUSART1_Transmit_ISR
 14590 ;; This function is called by:
 14591 ;;		Interrupt level 2
 14592 ;; This function uses a non-reentrant model
 14593 ;;
 14594                           
 14595                           	psect	intcode
 14596  000008                     __pintcode:
 14597                           	opt stack 0
 14598  000008                     _tc_high:
 14599                           	opt stack 22
 14600                           
 14601                           ;incstack = 0
 14602  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14603  00000A  EDDA  F01B         	call	int_func,f	;refresh shadow registers
 14604                           pclatu	equ	0xFFB
 14605                           pclath	equ	0xFFA
 14606                           tblptru	equ	0xFF8
 14607                           tblptrh	equ	0xFF7
 14608                           tblptrl	equ	0xFF6
 14609                           tablat	equ	0xFF5
 14610                           prodh	equ	0xFF4
 14611                           prodl	equ	0xFF3
 14612                           intcon	equ	0xFF2
 14613                           intcon2	equ	0xFF1
 14614                           postinc0	equ	0xFEE
 14615                           fsr0h	equ	0xFEA
 14616                           fsr0l	equ	0xFE9
 14617                           wreg	equ	0xFE8
 14618                           postinc1	equ	0xFE6
 14619                           postdec1	equ	0xFE5
 14620                           fsr1h	equ	0xFE2
 14621                           fsr1l	equ	0xFE1
 14622                           bsr	equ	0xFE0
 14623                           indf2	equ	0xFDF
 14624                           postinc2	equ	0xFDE
 14625                           postdec2	equ	0xFDD
 14626                           fsr2h	equ	0xFDA
 14627                           fsr2l	equ	0xFD9
 14628                           status	equ	0xFD8
 14629                           
 14630                           	psect	intcode_body
 14631  0037B4                     __pintcode_body:
 14632                           	opt stack 22
 14633  0037B4                     int_func:
 14634                           	opt stack 22
 14635  0037B4  0006               	pop		; remove dummy address from shadow register refresh
 14636  0037B6  CFFA F001          	movff	pclath,??_tc_high
 14637  0037BA  CFFB F002          	movff	pclatu,??_tc_high+1
 14638  0037BE  CFE9 F003          	movff	fsr0l,??_tc_high+2
 14639  0037C2  CFEA F004          	movff	fsr0h,??_tc_high+3
 14640  0037C6  CFE1 F005          	movff	fsr1l,??_tc_high+4
 14641  0037CA  CFE2 F006          	movff	fsr1h,??_tc_high+5
 14642  0037CE  CFD9 F007          	movff	fsr2l,??_tc_high+6
 14643  0037D2  CFDA F008          	movff	fsr2h,??_tc_high+7
 14644  0037D6  CFF3 F009          	movff	prodl,??_tc_high+8
 14645  0037DA  CFF4 F00A          	movff	prodh,??_tc_high+9
 14646  0037DE  CFF6 F00B          	movff	tblptrl,??_tc_high+10
 14647  0037E2  CFF7 F00C          	movff	tblptrh,??_tc_high+11
 14648  0037E6  CFF8 F00D          	movff	tblptru,??_tc_high+12
 14649  0037EA  CFF5 F00E          	movff	tablat,??_tc_high+13
 14650  0037EE  C04D  F00F         	movff	btemp,??_tc_high+14
 14651  0037F2  C04E  F010         	movff	btemp+1,??_tc_high+15
 14652  0037F6  C04F  F011         	movff	btemp+2,??_tc_high+16
 14653  0037FA  C050  F012         	movff	btemp+3,??_tc_high+17
 14654                           
 14655                           ;Main.c: 158: if (INTCONbits.TMR0IF)
 14656  0037FE  A4F2               	btfss	intcon,2,c	;volatile
 14657  003800  D019               	goto	i2l106
 14658                           
 14659                           ;Main.c: 159: {
 14660                           ;Main.c: 160: if(Led1_Counter <= 100)
 14661  003802  502D               	movf	_Led1_Counter+1,w,c	;volatile
 14662  003804  E106               	bnz	i2l107
 14663  003806  0E65               	movlw	101
 14664  003808  5C2C               	subwf	_Led1_Counter,w,c	;volatile
 14665  00380A  B0D8               	btfsc	status,0,c
 14666  00380C  D002               	goto	i2l107
 14667                           
 14668                           ;Main.c: 161: {
 14669                           ;Main.c: 162: PORTAbits.RA4 = 1;
 14670  00380E  8880               	bsf	3968,4,c	;volatile
 14671                           
 14672                           ;Main.c: 163: }
 14673  003810  D001               	goto	i2l108
 14674  003812                     i2l107:
 14675                           
 14676                           ;Main.c: 164: else
 14677                           ;Main.c: 165: {
 14678                           ;Main.c: 166: PORTAbits.RA4 = 0;
 14679  003812  9880               	bcf	3968,4,c	;volatile
 14680  003814                     i2l108:
 14681                           
 14682                           ;Main.c: 167: }
 14683                           ;Main.c: 168: if(Led1_Counter >= 700)
 14684  003814  0EBC               	movlw	188
 14685  003816  5C2C               	subwf	_Led1_Counter,w,c	;volatile
 14686  003818  0E02               	movlw	2
 14687  00381A  582D               	subwfb	_Led1_Counter+1,w,c	;volatile
 14688  00381C  A0D8               	btfss	status,0,c
 14689  00381E  D004               	goto	i2l109
 14690                           
 14691                           ;Main.c: 169: {
 14692                           ;Main.c: 170: Led1_Counter = 0;
 14693  003820  0E00               	movlw	0
 14694  003822  6E2D               	movwf	_Led1_Counter+1,c	;volatile
 14695  003824  0E00               	movlw	0
 14696  003826  6E2C               	movwf	_Led1_Counter,c	;volatile
 14697  003828                     i2l109:
 14698                           
 14699                           ;Main.c: 171: }
 14700                           ;Main.c: 172: Led1_Counter++;
 14701  003828  4A2C               	infsnz	_Led1_Counter,f,c	;volatile
 14702  00382A  2A2D               	incf	_Led1_Counter+1,f,c	;volatile
 14703                           
 14704                           ;Main.c: 173: Update_State_Machine = 1;
 14705  00382C  0E01               	movlw	1
 14706  00382E  0100               	movlb	0	; () banked
 14707  003830  6F8D               	movwf	_Update_State_Machine& (0+255),b	;volatile
 14708                           
 14709                           ; BSR set to: 0
 14710                           ;Main.c: 174: INTCONbits.TMR0IF = 0;
 14711  003832  94F2               	bcf	intcon,2,c	;volatile
 14712  003834                     i2l106:
 14713                           
 14714                           ;Main.c: 175: }
 14715                           ;Main.c: 177: if (PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1) {
 14716                           
 14717                           ; BSR set to: 0
 14718  003834  BA9D               	btfsc	3997,5,c	;volatile
 14719  003836  AA9E               	btfss	3998,5,c	;volatile
 14720  003838  D002               	goto	i2l110
 14721                           
 14722                           ;Main.c: 178: EUSART1_Receive_ISR();
 14723  00383A  EC8C  F020         	call	_EUSART1_Receive_ISR	;wreg free
 14724  00383E                     i2l110:
 14725                           
 14726                           ;Main.c: 179: }
 14727                           ;Main.c: 180: if (PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1) {
 14728  00383E  B89D               	btfsc	3997,4,c	;volatile
 14729  003840  A89E               	btfss	3998,4,c	;volatile
 14730  003842  D002               	goto	i2l111
 14731                           
 14732                           ;Main.c: 181: EUSART1_Transmit_ISR();
 14733  003844  EC75  F020         	call	_EUSART1_Transmit_ISR	;wreg free
 14734  003848                     i2l111:
 14735  003848  C012  F050         	movff	??_tc_high+17,btemp+3
 14736  00384C  C011  F04F         	movff	??_tc_high+16,btemp+2
 14737  003850  C010  F04E         	movff	??_tc_high+15,btemp+1
 14738  003854  C00F  F04D         	movff	??_tc_high+14,btemp
 14739  003858  C00E  FFF5         	movff	??_tc_high+13,tablat
 14740  00385C  C00D  FFF8         	movff	??_tc_high+12,tblptru
 14741  003860  C00C  FFF7         	movff	??_tc_high+11,tblptrh
 14742  003864  C00B  FFF6         	movff	??_tc_high+10,tblptrl
 14743  003868  C00A  FFF4         	movff	??_tc_high+9,prodh
 14744  00386C  C009  FFF3         	movff	??_tc_high+8,prodl
 14745  003870  C008  FFDA         	movff	??_tc_high+7,fsr2h
 14746  003874  C007  FFD9         	movff	??_tc_high+6,fsr2l
 14747  003878  C006  FFE2         	movff	??_tc_high+5,fsr1h
 14748  00387C  C005  FFE1         	movff	??_tc_high+4,fsr1l
 14749  003880  C004  FFEA         	movff	??_tc_high+3,fsr0h
 14750  003884  C003  FFE9         	movff	??_tc_high+2,fsr0l
 14751  003888  C002  FFFB         	movff	??_tc_high+1,pclatu
 14752  00388C  C001  FFFA         	movff	??_tc_high,pclath
 14753  003890  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14754  003892  0011               	retfie		f
 14755  003894                     __end_of_tc_high:
 14756                           	opt stack 0
 14757                           pclatu	equ	0xFFB
 14758                           pclath	equ	0xFFA
 14759                           tblptru	equ	0xFF8
 14760                           tblptrh	equ	0xFF7
 14761                           tblptrl	equ	0xFF6
 14762                           tablat	equ	0xFF5
 14763                           prodh	equ	0xFF4
 14764                           prodl	equ	0xFF3
 14765                           intcon	equ	0xFF2
 14766                           intcon2	equ	0xFF1
 14767                           postinc0	equ	0xFEE
 14768                           fsr0h	equ	0xFEA
 14769                           fsr0l	equ	0xFE9
 14770                           wreg	equ	0xFE8
 14771                           postinc1	equ	0xFE6
 14772                           postdec1	equ	0xFE5
 14773                           fsr1h	equ	0xFE2
 14774                           fsr1l	equ	0xFE1
 14775                           bsr	equ	0xFE0
 14776                           indf2	equ	0xFDF
 14777                           postinc2	equ	0xFDE
 14778                           postdec2	equ	0xFDD
 14779                           fsr2h	equ	0xFDA
 14780                           fsr2l	equ	0xFD9
 14781                           status	equ	0xFD8
 14782                           
 14783 ;; *************** function _EUSART1_Transmit_ISR *****************
 14784 ;; Defined at:
 14785 ;;		line 184 in file "../eusart1.c"
 14786 ;; Parameters:    Size  Location     Type
 14787 ;;		None
 14788 ;; Auto vars:     Size  Location     Type
 14789 ;;		None
 14790 ;; Return value:  Size  Location     Type
 14791 ;;                  1    wreg      void 
 14792 ;; Registers used:
 14793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14794 ;; Tracked objects:
 14795 ;;		On entry : 0/0
 14796 ;;		On exit  : 0/0
 14797 ;;		Unchanged: 0/0
 14798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14799 ;;      Params:         0       0       0       0       0       0       0       0       0
 14800 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14801 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14802 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14803 ;;Total ram usage:        0 bytes
 14804 ;; Hardware stack levels used:    1
 14805 ;; This function calls:
 14806 ;;		Nothing
 14807 ;; This function is called by:
 14808 ;;		_tc_high
 14809 ;; This function uses a non-reentrant model
 14810 ;;
 14811                           
 14812                           	psect	text44
 14813  0040EA                     __ptext44:
 14814                           	opt stack 0
 14815  0040EA                     _EUSART1_Transmit_ISR:
 14816                           	opt stack 22
 14817                           
 14818                           ;eusart1.c: 187: if (sizeof (eusart1TxBuffer) > eusart1TxBufferRemaining) {
 14819                           
 14820                           ;incstack = 0
 14821  0040EA  0E7E               	movlw	126
 14822  0040EC  6042               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
 14823  0040EE  D012               	goto	i2l560
 14824                           
 14825                           ;eusart1.c: 188: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 14826  0040F0  5043               	movf	_eusart1TxTail,w,c
 14827  0040F2  0D01               	mullw	1
 14828  0040F4  0E7E               	movlw	low _eusart1TxBuffer
 14829  0040F6  24F3               	addwf	prodl,w,c
 14830  0040F8  6ED9               	movwf	fsr2l,c
 14831  0040FA  0E04               	movlw	high _eusart1TxBuffer
 14832  0040FC  20F4               	addwfc	prodh,w,c
 14833  0040FE  6EDA               	movwf	fsr2h,c
 14834  004100  50DF               	movf	indf2,w,c
 14835  004102  6EAD               	movwf	4013,c	;volatile
 14836  004104  2A43               	incf	_eusart1TxTail,f,c
 14837                           
 14838                           ;eusart1.c: 189: if (sizeof (eusart1TxBuffer) <= eusart1TxTail) {
 14839  004106  0E7D               	movlw	125
 14840  004108  6443               	cpfsgt	_eusart1TxTail,c
 14841  00410A  D002               	goto	i2l561
 14842                           
 14843                           ;eusart1.c: 190: eusart1TxTail = 0;
 14844  00410C  0E00               	movlw	0
 14845  00410E  6E43               	movwf	_eusart1TxTail,c
 14846  004110                     i2l561:
 14847                           
 14848                           ;eusart1.c: 191: }
 14849                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 14850  004110  2A42               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 14851                           
 14852                           ;eusart1.c: 193: } else {
 14853  004112  0012               	return	
 14854  004114                     i2l560:
 14855                           
 14856                           ;eusart1.c: 194: PIE1bits.TX1IE = 0;
 14857  004114  989D               	bcf	3997,4,c	;volatile
 14858  004116  0012               	return	
 14859  004118                     __end_of_EUSART1_Transmit_ISR:
 14860                           	opt stack 0
 14861                           pclatu	equ	0xFFB
 14862                           pclath	equ	0xFFA
 14863                           tblptru	equ	0xFF8
 14864                           tblptrh	equ	0xFF7
 14865                           tblptrl	equ	0xFF6
 14866                           tablat	equ	0xFF5
 14867                           prodh	equ	0xFF4
 14868                           prodl	equ	0xFF3
 14869                           intcon	equ	0xFF2
 14870                           intcon2	equ	0xFF1
 14871                           postinc0	equ	0xFEE
 14872                           fsr0h	equ	0xFEA
 14873                           fsr0l	equ	0xFE9
 14874                           wreg	equ	0xFE8
 14875                           postinc1	equ	0xFE6
 14876                           postdec1	equ	0xFE5
 14877                           fsr1h	equ	0xFE2
 14878                           fsr1l	equ	0xFE1
 14879                           bsr	equ	0xFE0
 14880                           indf2	equ	0xFDF
 14881                           postinc2	equ	0xFDE
 14882                           postdec2	equ	0xFDD
 14883                           fsr2h	equ	0xFDA
 14884                           fsr2l	equ	0xFD9
 14885                           status	equ	0xFD8
 14886                           
 14887 ;; *************** function _EUSART1_Receive_ISR *****************
 14888 ;; Defined at:
 14889 ;;		line 198 in file "../eusart1.c"
 14890 ;; Parameters:    Size  Location     Type
 14891 ;;		None
 14892 ;; Auto vars:     Size  Location     Type
 14893 ;;		None
 14894 ;; Return value:  Size  Location     Type
 14895 ;;                  1    wreg      void 
 14896 ;; Registers used:
 14897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14898 ;; Tracked objects:
 14899 ;;		On entry : 0/0
 14900 ;;		On exit  : 0/0
 14901 ;;		Unchanged: 0/0
 14902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14903 ;;      Params:         0       0       0       0       0       0       0       0       0
 14904 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14905 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14906 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14907 ;;Total ram usage:        0 bytes
 14908 ;; Hardware stack levels used:    1
 14909 ;; This function calls:
 14910 ;;		Nothing
 14911 ;; This function is called by:
 14912 ;;		_tc_high
 14913 ;; This function uses a non-reentrant model
 14914 ;;
 14915                           
 14916                           	psect	text45
 14917  004118                     __ptext45:
 14918                           	opt stack 0
 14919  004118                     _EUSART1_Receive_ISR:
 14920                           	opt stack 22
 14921                           
 14922                           ;eusart1.c: 199: if (1 == RCSTA1bits.OERR) {
 14923                           
 14924                           ;incstack = 0
 14925  004118  A2AB               	btfss	4011,1,c	;volatile
 14926  00411A  D002               	goto	i2l566
 14927                           
 14928                           ;eusart1.c: 202: RCSTA1bits.CREN = 0;
 14929  00411C  98AB               	bcf	4011,4,c	;volatile
 14930                           
 14931                           ;eusart1.c: 203: RCSTA1bits.CREN = 1;
 14932  00411E  88AB               	bsf	4011,4,c	;volatile
 14933  004120                     i2l566:
 14934                           
 14935                           ;eusart1.c: 204: }
 14936                           ;eusart1.c: 207: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 14937  004120  5041               	movf	_eusart1RxHead,w,c
 14938  004122  0D01               	mullw	1
 14939  004124  0E00               	movlw	low _eusart1RxBuffer
 14940  004126  24F3               	addwf	prodl,w,c
 14941  004128  6ED9               	movwf	fsr2l,c
 14942  00412A  0E04               	movlw	high _eusart1RxBuffer
 14943  00412C  20F4               	addwfc	prodh,w,c
 14944  00412E  6EDA               	movwf	fsr2h,c
 14945  004130  CFAE FFDF          	movff	4014,indf2	;volatile
 14946  004134  2A41               	incf	_eusart1RxHead,f,c
 14947                           
 14948                           ;eusart1.c: 208: if (sizeof (eusart1RxBuffer) <= eusart1RxHead) {
 14949  004136  0E7D               	movlw	125
 14950  004138  6441               	cpfsgt	_eusart1RxHead,c
 14951  00413A  D002               	goto	i2l567
 14952                           
 14953                           ;eusart1.c: 209: eusart1RxHead = 0;
 14954  00413C  0E00               	movlw	0
 14955  00413E  6E41               	movwf	_eusart1RxHead,c
 14956  004140                     i2l567:
 14957                           
 14958                           ;eusart1.c: 210: }
 14959                           ;eusart1.c: 211: eusart1RxCount++;
 14960  004140  2A3F               	incf	_eusart1RxCount,f,c	;volatile
 14961  004142  0012               	return		;funcret
 14962  004144                     __end_of_EUSART1_Receive_ISR:
 14963                           	opt stack 0
 14964                           pclatu	equ	0xFFB
 14965                           pclath	equ	0xFFA
 14966                           tblptru	equ	0xFF8
 14967                           tblptrh	equ	0xFF7
 14968                           tblptrl	equ	0xFF6
 14969                           tablat	equ	0xFF5
 14970                           prodh	equ	0xFF4
 14971                           prodl	equ	0xFF3
 14972                           intcon	equ	0xFF2
 14973                           intcon2	equ	0xFF1
 14974                           postinc0	equ	0xFEE
 14975                           fsr0h	equ	0xFEA
 14976                           fsr0l	equ	0xFE9
 14977                           wreg	equ	0xFE8
 14978                           postinc1	equ	0xFE6
 14979                           postdec1	equ	0xFE5
 14980                           fsr1h	equ	0xFE2
 14981                           fsr1l	equ	0xFE1
 14982                           bsr	equ	0xFE0
 14983                           indf2	equ	0xFDF
 14984                           postinc2	equ	0xFDE
 14985                           postdec2	equ	0xFDD
 14986                           fsr2h	equ	0xFDA
 14987                           fsr2l	equ	0xFD9
 14988                           status	equ	0xFD8
 14989                           pclatu	equ	0xFFB
 14990                           pclath	equ	0xFFA
 14991                           tblptru	equ	0xFF8
 14992                           tblptrh	equ	0xFF7
 14993                           tblptrl	equ	0xFF6
 14994                           tablat	equ	0xFF5
 14995                           prodh	equ	0xFF4
 14996                           prodl	equ	0xFF3
 14997                           intcon	equ	0xFF2
 14998                           intcon2	equ	0xFF1
 14999                           postinc0	equ	0xFEE
 15000                           fsr0h	equ	0xFEA
 15001                           fsr0l	equ	0xFE9
 15002                           wreg	equ	0xFE8
 15003                           postinc1	equ	0xFE6
 15004                           postdec1	equ	0xFE5
 15005                           fsr1h	equ	0xFE2
 15006                           fsr1l	equ	0xFE1
 15007                           bsr	equ	0xFE0
 15008                           indf2	equ	0xFDF
 15009                           postinc2	equ	0xFDE
 15010                           postdec2	equ	0xFDD
 15011                           fsr2h	equ	0xFDA
 15012                           fsr2l	equ	0xFD9
 15013                           status	equ	0xFD8
 15014                           
 15015                           	psect	rparam
 15016  0000                     pclatu	equ	0xFFB
 15017                           pclath	equ	0xFFA
 15018                           tblptru	equ	0xFF8
 15019                           tblptrh	equ	0xFF7
 15020                           tblptrl	equ	0xFF6
 15021                           tablat	equ	0xFF5
 15022                           prodh	equ	0xFF4
 15023                           prodl	equ	0xFF3
 15024                           intcon	equ	0xFF2
 15025                           intcon2	equ	0xFF1
 15026                           postinc0	equ	0xFEE
 15027                           fsr0h	equ	0xFEA
 15028                           fsr0l	equ	0xFE9
 15029                           wreg	equ	0xFE8
 15030                           postinc1	equ	0xFE6
 15031                           postdec1	equ	0xFE5
 15032                           fsr1h	equ	0xFE2
 15033                           fsr1l	equ	0xFE1
 15034                           bsr	equ	0xFE0
 15035                           indf2	equ	0xFDF
 15036                           postinc2	equ	0xFDE
 15037                           postdec2	equ	0xFDD
 15038                           fsr2h	equ	0xFDA
 15039                           fsr2l	equ	0xFD9
 15040                           status	equ	0xFD8
 15041                           
 15042                           	psect	temp
 15043  00004D                     btemp:
 15044                           	opt stack 0
 15045  00004D                     	ds	1
 15046  0000                     int$flags	set	btemp
 15047  0000                     wtemp6	set	btemp+1
 15048                           pclatu	equ	0xFFB
 15049                           pclath	equ	0xFFA
 15050                           tblptru	equ	0xFF8
 15051                           tblptrh	equ	0xFF7
 15052                           tblptrl	equ	0xFF6
 15053                           tablat	equ	0xFF5
 15054                           prodh	equ	0xFF4
 15055                           prodl	equ	0xFF3
 15056                           intcon	equ	0xFF2
 15057                           intcon2	equ	0xFF1
 15058                           postinc0	equ	0xFEE
 15059                           fsr0h	equ	0xFEA
 15060                           fsr0l	equ	0xFE9
 15061                           wreg	equ	0xFE8
 15062                           postinc1	equ	0xFE6
 15063                           postdec1	equ	0xFE5
 15064                           fsr1h	equ	0xFE2
 15065                           fsr1l	equ	0xFE1
 15066                           bsr	equ	0xFE0
 15067                           indf2	equ	0xFDF
 15068                           postinc2	equ	0xFDE
 15069                           postdec2	equ	0xFDD
 15070                           fsr2h	equ	0xFDA
 15071                           fsr2l	equ	0xFD9
 15072                           status	equ	0xFD8


Data Sizes:
    Strings     45
    Constant    47
    Data        11
    BSS         1648
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      76
    BANK0           160     40     102
    BANK1           256      0     182
    BANK2           256      0     182
    BANK3           256      0     182
    BANK4           256      0     252
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 10
		 -> STR_8(CODE[10]), STR_7(CODE[7]), STR_6(CODE[7]), STR_5(CODE[7]), 
		 -> STR_4(CODE[7]), STR_3(CODE[7]), STR_2(CODE[7]), STR_1(CODE[7]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    pLen	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 

    pData	PTR unsigned char  size(2) Largest target is 10
		 -> NULL(NULL[0]), Data(BANK0[10]), 


Critical Paths under _main in COMRAM

    _Update_StateMchn->_SETxPWM
    _Train_Move_Right_Start->_SETxPWM
    _Train_Move_Right_Brake->_SETxPWM
    _Train_Move_Left_Start->_SETxPWM
    _Train_Move_Left_Brake->_SETxPWM
    _Right_Mountain_From_The_Right->_SETxPWM
    _Right_Mountain_From_The_Left->_SETxPWM
    _Left_Mountain_From_The_Right->_SETxPWM
    _Left_Mountain_From_The_Left->_SETxPWM
    _SETxPWM->_SETxAPIxVAL
    _Junction->_SETxAPIxVAL
    _Red_Led->_SETxAPIxVAL
    _Green_Led->_SETxAPIxVAL
    _EEPROMxSTORE->_Eeprom_Store
    _Debounce_Inputs->_SETxAPIxVAL
    _SetDCPWM1->_GETxAPIxVAL
    _READxRECEIVEDxMESSAGE->_TranslateMessage
    _TranslateMessage->_atoi
    _TranslateMessage->_printf
    _atoi->___wmul
    _SETxAPIxVALxNoxRET->_GETxAPIxVAL
    _Init_Pwm->_SETxAPIxVAL
    _SETxAPIxVAL->_SENDxMESSAGE
    _EEPROMxREAD->_Eeprom_Read
    _SendMessage->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _tc_low in COMRAM

    None.

Critical Paths under _tc_high in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_READxRECEIVEDxMESSAGE
    _Update_StateMchn->_Train_Path
    _Train_Path->_Train_Move_Left_Brake
    _Train_Path->_Train_Move_Left_Start
    _Train_Path->_Train_Move_Right_Brake
    _Train_Path->_Train_Move_Right_Start
    _READxRECEIVEDxMESSAGE->_printf
    _TranslateMessage->_printf
    _DIAGNOSTICxTOxPC->_SendMessage
    _SendMessage->_printf

Critical Paths under _tc_low in BANK0

    None.

Critical Paths under _tc_high in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tc_low in BANK1

    None.

Critical Paths under _tc_high in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tc_low in BANK2

    None.

Critical Paths under _tc_high in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tc_low in BANK3

    None.

Critical Paths under _tc_high in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _tc_low in BANK4

    None.

Critical Paths under _tc_high in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _tc_low in BANK5

    None.

Critical Paths under _tc_high in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _tc_low in BANK6

    None.

Critical Paths under _tc_high in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _tc_low in BANK7

    None.

Critical Paths under _tc_high in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  726907
                                             38 BANK0      2     2      0
                     _APIxInitialize
                   _DIAGNOSTICxTOxPC
                        _EEPROMxREAD
                 _EUSART1_Initialize
                           _Init_Pwm
                        _Init_Timers
              _READxRECEIVEDxMESSAGE
                   _Update_StateMchn
 ---------------------------------------------------------------------------------
 (1) _Update_StateMchn                                     5     5      0  684024
                                             25 BANK0      5     5      0
                    _Debounce_Inputs
                       _EEPROMxSTORE
                        _GETxAPIxVAL
                          _Green_Led
                           _Junction
                            _Red_Led
                        _SETxAPIxVAL
                 _SETxAPIxVALxNoxRET
                            _SETxPWM
                         _Train_Path
 ---------------------------------------------------------------------------------
 (2) _Train_Path                                           2     1      1  522244
                                             23 BANK0      2     1      1
                        _GETxAPIxVAL
                           _Junction
        _Left_Mountain_From_The_Left
       _Left_Mountain_From_The_Right
       _Right_Mountain_From_The_Left
      _Right_Mountain_From_The_Right
                        _SETxAPIxVAL
              _Train_Move_Left_Brake
              _Train_Move_Left_Start
             _Train_Move_Right_Brake
             _Train_Move_Right_Start
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Start                               2     2      0   64929
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Right_Brake                               2     2      0   64929
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Start                                2     2      0   64929
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Train_Move_Left_Brake                                2     2      0   64929
                                             21 BANK0      2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Right                        1     1      0   49620
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Right_Mountain_From_The_Left                         1     1      0   49620
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Right                         1     1      0   49620
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (3) _Left_Mountain_From_The_Left                          1     1      0   49620
                                             21 BANK0      1     1      0
                        _GETxAPIxVAL
                            _SETxPWM
 ---------------------------------------------------------------------------------
 (4) _SETxPWM                                              7     4      3   34106
                                             30 COMRAM     7     4      3
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (3) _Junction                                             2     1      1   31962
                                             30 COMRAM     2     1      1
                        _GETxAPIxVAL
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Red_Led                                              2     2      0   15399
                                             30 COMRAM     2     2      0
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _Green_Led                                            2     2      0   15399
                                             30 COMRAM     2     2      0
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (2) _EEPROMxSTORE                                        12    10      2     660
                                             26 COMRAM    10     8      2
                                             21 BANK0      2     2      0
                       _Eeprom_Store
 ---------------------------------------------------------------------------------
 (3) _Eeprom_Store                                         8     4      4     372
                                             18 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Debounce_Inputs                                      2     2      0   30933
                                             30 COMRAM     2     2      0
                        _GETxAPIxVAL
                        _SETxAPIxVAL
                          _SetDCPWM1
 ---------------------------------------------------------------------------------
 (3) _SetDCPWM1                                            6     4      2     144
                                             20 COMRAM     6     4      2
                        _GETxAPIxVAL (ARG)
 ---------------------------------------------------------------------------------
 (1) _READxRECEIVEDxMESSAGE                                4     4      0   24574
                                             34 BANK0      4     4      0
                       _EUSART1_Read
                   _TranslateMessage
                             _printf
 ---------------------------------------------------------------------------------
 (2) _TranslateMessage                                     4     4      0   22403
                                             31 COMRAM     4     4      0
                         _GETxAPIxRW
                        _GETxAPIxVAL
                       _SENDxMESSAGE
                 _SETxAPIxVALxNoxRET
                               _atoi
                             _printf
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    1115
                                             24 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                             18 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     412
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _SETxAPIxVALxNoxRET                                   6     2      4    2464
                                             20 COMRAM     6     2      4
                        _GETxAPIxVAL (ARG)
 ---------------------------------------------------------------------------------
 (5) _GETxAPIxVAL                                          2     0      2   15421
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _GETxAPIxRW                                           2     0      2     121
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         1     1      0      24
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_Timers                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init_Pwm                                             0     0      0   15368
                        _SETxAPIxVAL
 ---------------------------------------------------------------------------------
 (5) _SETxAPIxVAL                                          6     2      4   15368
                                             24 COMRAM     6     2      4
                       _SENDxMESSAGE
 ---------------------------------------------------------------------------------
 (6) _SENDxMESSAGE                                         6     2      4     782
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Initialize                                   2     2      0      45
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _EEPROMxREAD                                          7     5      2     395
                                             26 COMRAM     7     5      2
                        _Eeprom_Read
 ---------------------------------------------------------------------------------
 (2) _Eeprom_Read                                          8     6      2     236
                                             18 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (1) _DIAGNOSTICxTOxPC                                     4     4      0    2389
                                             31 COMRAM     4     4      0
                        _SendMessage
 ---------------------------------------------------------------------------------
 (2) _SendMessage                                          4     0      4    2389
                                             34 BANK0      4     0      4
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              23    17      6    2147
                                             30 COMRAM     1     1      0
                                             21 BANK0     13     7      6
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0      31
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     412
                                             25 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     421
                                             18 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _APIxInitialize                                       2     2      0     112
                                             18 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _tc_low                                              21    21      0       0
                                              0 BANK0     21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _tc_high                                             18    18      0       0
                                              0 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _APIxInitialize
   _DIAGNOSTICxTOxPC
     _SendMessage
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
   _EEPROMxREAD
     _Eeprom_Read
   _EUSART1_Initialize
   _Init_Pwm
     _SETxAPIxVAL
       _SENDxMESSAGE
   _Init_Timers
   _READxRECEIVEDxMESSAGE
     _EUSART1_Read
     _TranslateMessage
       _GETxAPIxRW
       _GETxAPIxVAL
       _SENDxMESSAGE
       _SETxAPIxVALxNoxRET
         _GETxAPIxVAL (ARG)
       _atoi
         ___wmul
         _isdigit
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
   _Update_StateMchn
     _Debounce_Inputs
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
       _SetDCPWM1
         _GETxAPIxVAL (ARG)
     _EEPROMxSTORE
       _Eeprom_Store
     _GETxAPIxVAL
     _Green_Led
       _SETxAPIxVAL
         _SENDxMESSAGE
     _Junction
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
     _Red_Led
       _SETxAPIxVAL
         _SENDxMESSAGE
     _SETxAPIxVAL
       _SENDxMESSAGE
     _SETxAPIxVALxNoxRET
       _GETxAPIxVAL (ARG)
     _SETxPWM
       _GETxAPIxVAL
       _SETxAPIxVAL
         _SENDxMESSAGE
     _Train_Path
       _GETxAPIxVAL
       _Junction
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
       _Left_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Left_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Right_Mountain_From_The_Left
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Right_Mountain_From_The_Right
         _GETxAPIxVAL
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _SETxAPIxVAL
         _SENDxMESSAGE
       _Train_Move_Left_Brake
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Train_Move_Left_Start
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Train_Move_Right_Brake
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE
       _Train_Move_Right_Start
         _GETxAPIxVAL
         _SETxAPIxVAL
           _SENDxMESSAGE
         _SETxPWM
           _GETxAPIxVAL
           _SETxAPIxVAL
             _SENDxMESSAGE

 _tc_low (ROOT)

 _tc_high (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0     2F8      21       37.1%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      FC      13       98.4%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      B6      11       71.1%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      B6       9       71.1%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      B6       7       71.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     28      66       5       63.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      4C       1       80.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3D0      20        0.0%
DATA                 0      0     6C8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Wed Dec 06 23:36:16 2017

                  _eusart1TxBufferRemaining 0042                           ?_DIAGNOSTICxTOxPC 0001  
                                        l90 3C96                                          l92 3CAE  
                                        l93 3CBE                                 __CFG_BOR$ON 000000  
                                        bsr 000FE0                         ___wmul@multiplicand 0015  
                               __CFG_BORV$1 000000                                 ?_GETxAPIxRW 0013  
                              __CFG_CP0$OFF 000000                          ??_DIAGNOSTICxTOxPC 0020  
                              __CFG_CP1$OFF 000000                                __CFG_CP2$OFF 000000  
                              __CFG_CP3$OFF 000000                                         l202 09BE  
                                       l211 0B1C                                         l220 0B84  
                                       l301 1228                                         l221 0BB6  
                                       l205 09FE                                         l302 122C  
                                       l230 0D50                                         l222 0BE0  
                                       l303 1236                                         l231 0D7A  
                                       l223 0C0A                                         l207 0A3E  
                                       l400 2488                                         l320 13EE  
                                       l312 1374                                         l304 123C  
                                       l240 0F68                                         l232 0DA4  
                                       l224 0C34                                         l401 2446  
                                       l217 1420                                         l321 13A0  
                                       l305 127A                                         l241 0F70  
                                       l233 0DCE                                         l225 0C60  
                                       l209 0AC8                                         l306 12D8  
                                       l250 1042                                         l242 0F8C  
                                       l234 0DF8                                         l226 0C88  
                                       l218 0B74                                         l323 13A4  
                                       l315 1382                                         l307 12DC  
                                       l235 0E22                                         l227 0C98  
                                       l412 24C4                                         l420 24B6  
                                       l404 245C                                         l332 1590  
                                       l324 13B0                                         l308 1328  
                                       l260 1074                                         l244 0FA6  
                                       l236 0E4E                                         l228 0D16  
                                       l413 24A4                                         l333 149A  
                                       l325 1414                                         l261 1080  
                                       l253 1050                                         l245 0FAA  
                                       l237 0E58                                         l229 0D26  
                                       l406 2468                                         l326 16F2  
                                       l342 14EE                                         l318 13BE  
                                       l246 0FF6                                         l190 08BE  
                                       l191 16DA                                         l351 1542  
                                       l319 139C                                         l271 1288  
                                       l263 10FC                                         l255 108E  
                                       l239 0F34                                         l424 268E  
                                       l416 24AA                                         l408 2474  
                                       l360 1666                                         l328 155E  
                                       l336 14B6                                         l280 12B8  
                                       l264 10D6                                         l256 1068  
                                       l192 08C6                                         l441 2588  
                                       l425 24E0                                         l361 15E8  
                                       l345 150A                                         l329 1472  
                                       l273 1178                                         l265 112C  
                                       l257 10BE                                         l193 0904  
                                       l418 24B0                                         l290 11F8  
                                       l282 11BA                                         l266 10DA  
                                       l258 106C                                         l443 25A0  
                                       l371 164A                                         l355 15D2  
                                       l339 14D2                                         l267 10DE  
                                       l259 1070                                         l187 088A  
                                       l436 2544                                         l364 1682  
                                       l348 1526                                         l276 115A  
                                       l268 10E2                                         l196 0942  
                                       l541 40E2                                         l461 265E  
                                       l365 1612                                         l277 1162  
                                       l269 10EE                                         l622 357A  
                                       l446 25B8                                         l358 15E0  
                                       l286 11A8                                         l278 1166  
                                       l623 34EA                                         l463 2676  
                                       l439 2570                                         l391 23FC  
                                       l375 16C4                                         l279 116A  
                                       l199 0980                                         l640 2BB0  
                                       l616 3564                                         l632 355A  
                                       l472 26B0                                         l456 2616  
                                       l368 162E                                         l296 11EA  
                                       l288 11AC                                         l641 2B48  
                                       l617 348E                                         l385 273C  
                                       l481 26F4                                         l457 262E  
                                       l393 2408                                         l626 3500  
                                       l618 34E6                                         l474 26B6  
                                       l378 16D2                                         l298 124A  
                                       l539 40BA                                         l651 2BF2  
                                       l643 2B64                                         l627 3530  
                                       l491 271C                                         l483 26FC  
                                       l459 2646                                         l387 2428  
                                       l395 2414                                         l628 351A  
                                       l468 26D0                                         l476 26BC  
                                       l388 23E4                                         l661 3C26  
                                       l653 2C0E                                         l645 2B80  
                                       l629 350A                                         l901 1A42  
                                       l493 2724                                         l485 2704  
                                       l469 26AA                                         l389 23F4  
                                       l910 1AC0                                         l902 19EA  
                                       l398 2790                                         l743 3EE0  
                                       l735 395C                                         l647 2B9A  
                                       l911 1A68                                         l903 1A0C  
                                       l751 2AD6                                         l495 2734  
                                       l487 270C                                         l479 26EC  
                                       l736 38C2                                         l920 1AE6  
                                       l912 1A8A                                         l760 3E80  
                                       l752 2996                                         l824 3DA2  
                                       l832 3D76                                         l840 3D18  
                                       l921 1B08                                         l833 3D8E  
                                       l489 2714                                         l746 3EFA  
                                       l930 1B86                                         l906 1A22  
                                       l754 2ABC                                         l826 3DBC  
                                       l834 3D9E                                         l842 3D32  
                                       l850 3D14                                         l915 1AA0  
                                       l907 1A2C                                         l924 1B1E  
                                       l916 1AAA                                         l828 3D56  
                                       l844 3CCC                                         l933 1B9C  
                                       l925 1B28                                         l861 17CC  
                                       l765 3EA8                                         l829 3D6E  
                                       l845 3CE4                                         l942 1C1A  
                                       l934 1BA6                                         l870 183C  
                                       l862 17EE                                         l951 1C98  
                                       l943 1C24                                         l919 1B3E  
                                       l871 185E                                         l960 1D16  
                                       l952 1CA2                                         l928 1BBC  
                                       l880 18CE                                         l856 1804  
                                       l848 3CEC                                         l961 1D20  
                                       l937 1C3A                                         l929 1B64  
                                       l865 1874                                         l857 17AC  
                                       l849 3D04                                         l970 1D90  
                                       l946 1CB8                                         l938 1BE2  
                                       l874 18E4                                         l866 181C  
                                       l858 17B6                                         l955 1D36  
                                       l947 1C60                                         l939 1C04  
                                       l883 1954                                         l875 188C  
                                       l867 1826                                         l964 1DA6  
                                       l956 1CDE                                         l948 1C82  
                                       l892 19C4                                         l884 18FC  
                                       l876 1896                                         l973 1E16  
                                       l965 1D4E                                         l957 1D00  
                                       l893 196C                                         l885 1906  
                                       _API 0100                                         l982 1E86  
                                       l974 1DBE                                         l966 1D70  
                                       l894 198E                                         l983 1E2E  
                                       l975 1DE0                                         l879 18AC  
                                       l984 1E50                                         l888 191C  
                                       l969 1D86                                         l897 19A4  
                                       l889 193E                                         l978 1DF6  
                                       l898 19AE                                         l987 1E66  
                                       l979 1E00                                         l988 1E70  
                              __CFG_CPB$OFF 000000                                _Stop_Program 0087  
                                       _PR2 000FCB                                __CFG_CPD$OFF 000000  
              Eeprom_Read@Location_Low_Byte 0015                                         prod 000FF3  
                                       wreg 000FE8                      ?_READxRECEIVEDxMESSAGE 0001  
          Train_Move_Right_Start@Return_Val 00C1                                ?_GETxAPIxVAL 0013  
                           APIxInitialize@i 0013                                __CFG_LVP$OFF 000000  
       __end_of_Left_Mountain_From_The_Left 36A4                 _Left_Mountain_From_The_Left 3592  
                              __CFG_WDT$OFF 000000                                        l1010 281A  
                                      l1011 279E                                        l1020 2868  
                                      l1100 37B0       __end_of_Right_Mountain_From_The_Right 336A  
    __size_of_Right_Mountain_From_The_Right 0114               _Right_Mountain_From_The_Right 3256  
                                      l1013 27DC                                        l1101 36DE  
                                      l1006 295C                                        l1102 3732  
                                      l1023 2970                                        l1015 28C4  
                                      l1007 2798                                        l1111 3798  
                                      l1024 28CA                                        l1008 28B6  
                                      l1112 379C                                        l1025 28F4  
                                      l1017 28A6                                        l1201 33A0  
                                      l1121 2D5E                                        l1026 2902  
                                      l1018 282A                                        l1130 2D26  
                                      l1122 2C3A                                        l1203 347A  
                                      l1131 2D50                                        l1123 2C6E  
                                      l1051 2FD6                                        l1212 3438  
                                      l1204 33A6                                        l1124 2D7A  
                                      l1052 2EC0                                        l1109 376E  
                                      l1205 33FA                                        l1125 2C98  
                                      l1061 2FD0                                        l1053 2EDE  
                                      l1214 3462                                        l1070 325C  
                                      l1054 2FF2                                        l1230 2DDE  
                                      l1215 3466                                        l1127 2C9E  
                                      l1055 2EEC                                        l1231 2E06  
                                      l1128 2CC6                                        l1056 2F3E  
                                      l1224 2E9E                                        l1232 2E14  
                                      l1160 3020                                        l1073 328C  
                                      l1129 2CD4                                        l1057 2F66  
                                      l1233 2E66                                        l1225 2D80  
                                      l1161 3074                                        l1058 2F70  
                                      l1234 2E90                                        l1226 2DAE  
                                      l1162 309C                                        l1075 3366  
                                      l1059 2FA8                                        l1227 2EBA  
                                      l1163 30AA                                        l1172 3692  
                                      l1180 3622                                        l1084 3326  
                                      l1076 3292                                        l1228 2DD8  
                                      l1156 310C                                        l1164 30DC  
                                      l1261 3138                                        l1245 3A6C  
                                      l1173 3598                                        l1069 3358  
                                      l1077 32E8                                        l1165 3102  
                                      l1157 2FF8                                        l1270 319C  
                                      l1262 3148                                        l1246 3AAA  
                                      l1190 368C                                        l1094 37A2  
                                      l1086 334E                                        l1158 3016  
                                      l1095 36AA                                        l1087 3352  
                                      l1159 3128                                        l1176 35C8  
                                      l1274 31DE                                        l1450 396C  
                                      l1178 36A0                                        l1098 36D8  
                                      l1275 3230                                        l1451 3968  
                                      l1187 3660                                        l1179 35CE  
                                      l1276 31E4                                        l1268 3174  
                                      l1453 39AC                                        l1189 3688  
                                      l1197 346C                                        l1710 3F32  
                                      l1198 3370                                        l1711 3F2A  
                                      l1631 41C8                                        l1720 4014  
                                      l1456 39F8                                        l1721 400C  
                                      l1457 39BE                                        l1714 3F52  
                                      l1715 3F5C                                        l1459 3A2A  
                                      l1724 402C                                        l1725 4036  
                                      l7200 4222                                        l9030 1604  
                                      l7506 2D58                                        l7370 2EE6  
                                      l7338 30A4                                        l7614 3458  
                                      l7454 2E98                                        l7810 39F4  
                                      l8506 2B9A                                        l5964 1EA6  
                                      l5974 1F06                                        l5982 38BA  
                                      l8518 2BF2                                        l7558 367E  
                                      l7726 378E                                        l7670 3344  
                                      l8630 0C5C                                        l7764 31A0  
                                      l8724 0F34                                        l7854 298E  
                                      l8752 103A                                        l8498 2B64  
                                      l8934 148C                                        l8892 136C  
                                      STR_1 083A                                        STR_2 0841  
                                      STR_3 0848                                        STR_4 084F  
                                      STR_5 0856                                        STR_6 0848  
                                      STR_7 084F                                        STR_8 0830  
            Right_Mountain_From_The_Left@rc 00AD                                        u4125 4086  
                                      u7000 3392                                        u5360 1F06  
                                      u8000 3D9A                                        u8010 3DCE  
                                      u7210 3762                                        u7050 342C  
                                      u7130 331A                                        u8100 2424  
                                      u5390 3944                                        u6600 3F86  
                                      u7400 3EB0                                        u7160 36CA  
                                      u7080 327E                                        u8018 3DD0  
                                      u8050 3D10                                        u6610 3A5A  
                                      u7500 187C                                        u8060 3D44  
                                      u6710 4018                                        u7270 31CC  
                                      u7430 2A16                                        u9110 103A  
                                      u7600 19CE                                        u7440 2AC0  
                                      u9200 1398                                        u7290 323A  
                                      u7530 18EC                                        u7506 187E  
                                      u8250 256C                                        u9050 0F64  
                                      u6740 4060                                        u7380 3E88  
                                      u8068 3D46                                        u8340 262A  
                                      u8260 2584                                        u6590 3E46  
                                      u7710 1B46                                        u7630 1A4A  
                                      u7470 180C                                        u8350 2642  
                                      u8270 259C                                        u6680 3F36  
                                      u7800 1C44                                        u7720 1B48  
                                      u7640 1A4C                                        u7560 195C  
                                      u7536 18EE                                        u6920 35BA  
                                      u8360 265A                                        u8370 2672  
                                      u9170 1304                                        u9090 0FD2  
                                      u8540 2B70                                        u7900 1DAE  
                                      u7476 180E                                        u7830 1CC0  
                                      u7750 1BC4                                        u7670 1AC8  
                                      u7590 19CC                                        u7566 195E  
                                      u9190 136C                                        u9600 3BAE  
                                      u7840 1CC2                                        u7760 1BC6  
                                      u7680 1ACA                                        u8720 0A6E  
                                      u9610 3C1C                                        u9530 34D2  
                                      u7930 1E1E                                        u7906 1DB0  
                                      u6970 3654                                        u8730 0AF8  
                                      u8580 2BFE                                        u9380 15B8  
                                      u7870 1D3E                                        u7790 1C42  
                                      u7960 1E8E                                        u7936 1E20  
                                      u8760 0B5C                                        u9490 16AA  
                                      u7876 1D40                                        u7966 1E90  
                                      u9647 3C88                                        u8970 0E4A  
                              __CFG_WDTPS$1 000000                                        _TXIF 007CF4  
                                      _Data 008E                                __CFG_PWRT$ON 000000  
                    __end_of_APIxInitialize 23BA              __size_of_Train_Move_Left_Brake 0146  
             __end_of_Train_Move_Left_Brake 2D7E                                        _pLen 0076  
                                      _atoi 3966                                        _main 3C2C  
                             ?_EUSART1_Read 0001              __size_of_Train_Move_Left_Start 0138  
                     _Update_StateMchn$2184 00B3                       _Update_StateMchn$2185 00B5  
                           __end_of_SETxPWM 3AE0                                        fsr0h 000FEA  
                                      fsr1h 000FE2                                        fsr2h 000FDA  
                                      fsr0l 000FE9                                        indf2 000FDF  
                                      fsr1l 000FE1                                        fsr2l 000FD9  
                                      btemp 004D               __end_of_Train_Move_Left_Start 2FF6  
                                      prodh 000FF4                                        prodl 000FF3  
                                      start 00C6                             __end_of_DataLen 0830  
                       __end_of_Eeprom_Read 3F14                               __CFG_IESO$OFF 000000  
                           __end_of_ApiList 0825                 EUSART1_Initialize@baud_rate 0013  
                        Green_Led@Operation 0020                               __CFG_MCLRE$ON 000000  
                              ___param_bank 000000                        Eeprom_Store@Location 0013  
                             ??_Init_Timers 0013                             __end_of_Red_Led 3D52  
                             __CFG_PLLDIV$5 000000                             EEPROMxREAD@Data 001F  
                      __end_of_EEPROMxSTORE 2AE0                              __CFG_CCP2MX$ON 000000  
                                     ?_atoi 0019                                       ?_main 0001  
                                     _EEADR 000FA9                                       _CMCON 000FB4  
                          Red_Led@Operation 0020                                       _T0CON 000FD5  
                __end_of_SETxAPIxVALxNoxRET 407C                                       _T2CON 000FCA  
                           __end_of___lwdiv 3F66                                SETxPWM@speed 001F  
                                     i2l110 383E                                       i2l111 3848  
                           __end_of___lwmod 4040                                       i2l106 3834  
                                     i2l107 3812                                       i2l108 3814  
                                     i2l109 3828                                       i2l560 4114  
                                     i2l561 4110                                       i2l566 4120  
                                     i2l567 4140                                       _TMR0H 000FD7  
                                     _TMR0L 000FD6                                       _SPBRG 000FAF  
                             __CFG_USBDIV$2 000000                                       _TRISA 000F92  
                                     _TRISB 000F93                                       _TRISC 000F94  
                                     _TRISD 000F95                                       _TRISE 000F96  
                             __CFG_WRT0$OFF 000000                               __CFG_WRT1$OFF 000000  
                             __CFG_WRT2$OFF 000000                               __CFG_WRT3$OFF 000000  
                      _EUSART1_Transmit_ISR 40EA                              __CFG_EBTR0$OFF 000000  
                            __CFG_FCMEN$OFF 000000                              __CFG_EBTR1$OFF 000000  
                            __CFG_EBTR2$OFF 000000                              __CFG_EBTR3$OFF 000000  
                              _WritePointer 0074                               __CFG_WRTB$OFF 000000  
                             __CFG_WRTC$OFF 000000                               __CFG_WRTD$OFF 000000  
                                     _pData 0078                              __CFG_EBTRB$OFF 000000  
                           __end_of_dpowers 082F                             __end_of_isdigit 41D0  
                           __end_of_tc_high 3894                                       atoi@a 001E  
                                     atoi@s 0019                                       _putch 4220  
                                     pclath 000FFA                                       tablat 000FF5  
                           ?_APIxInitialize 0001                              ??_EUSART1_Read 0013  
                                     status 000FD8                                       wtemp6 004E  
 Train_Move_Left_Brake@Train_Move_Wait_Time 0064                   __size_of_TranslateMessage 0158  
                       __size_of_GETxAPIxRW 001C                              __CFG_ICPRT$OFF 000000  
                      __end_of_Eeprom_Store 3EB8                                  _ReadActive 006E  
                      __size_of_EEPROMxREAD 00D2                             __initialization 3AE0  
                              __end_of_atoi 3A34                  __end_of_EUSART1_Initialize 3FFE  
                              __end_of_main 3CC8                               ??_SendMessage 0020  
                          __end_of_Init_Pwm 416C                                      ??_atoi 001B  
                                    ??_main 00BE                         __end_of_Init_Timers 4220  
                             __activetblptr 000002                      Eeprom_Read@Return_Data 0019  
                          __end_of_Junction 2974                                _Led1_Counter 002C  
                         _Green_Led_Counter 002A                       ?_EUSART1_Transmit_ISR 0001  
                         ?_Update_StateMchn 0001                          ??_Update_StateMchn 00B1  
                                    _ADCON1 000FC1                                      _EEDATA 000FA8  
                                    _CCPR1L 000FBE                                   ??_SETxPWM 0022  
                                    _EECON2 000FA7                                      ?_putch 0001  
                                    _API_RW 0200                          __size_of_Green_Led 008A  
                               _Eeprom_Read 3EB8                                      _INTCON 000FF2  
                   ?_Train_Move_Right_Brake 0001                                      _RCREG1 000FAE  
                                    _SPBRGH 000FB0                          __size_of_SetDCPWM1 003A  
                   ?_Train_Move_Right_Start 0001                                      _TXREG1 000FAD  
            ?_Right_Mountain_From_The_Right 0001                                   ??_Red_Led 001F  
                            __CFG_XINST$OFF 000000             Train_Move_Left_Brake@Return_Val 00C2  
                                    ___wmul 416C                              __CFG_STVREN$ON 000000  
                           _Train_Pos1_Temp 0086                             _Train_Pos2_Temp 0085  
                                 ??___lwdiv 0017                                   ??___lwmod 001E  
                                    clear_0 3B28                                      clear_1 3B3A  
                                    clear_2 3B46                                _DelayCounter 0070  
                                    clear_3 3B52                                      clear_4 3B5E  
                                    clear_5 3B6A                                      clear_6 3B76  
                                    _tc_low 0018                                      _printf 312C  
                            _Switch_Moutain 002E                                  _Train_Path 23BA  
   Right_Mountain_From_The_Right@Return_Val 004B      Left_Mountain_From_The_Right@Return_Val 004A  
                              __pdataCOMRAM 0048                              _Switch_Program 008B  
                                 ??_isdigit 0013                                   ??_tc_high 0001  
                       __end_of_SendMessage 41B2                   _Activate_Controls_Counter 007A  
                              __mediumconst 0000                                      tblptrh 000FF7  
                                    tblptrl 000FF6                                      tblptru 000FF8  
                              ?_SETxAPIxVAL 0019                   _Button_Contact_Counter_LB 0033  
                 _Button_Contact_Counter_LF 0032                   _Button_Contact_Counter_RB 0031  
                 _Button_Contact_Counter_RF 0030              __end_of_Train_Move_Right_Brake 2EBE  
                           _eusart1RxBuffer 0400                        __size_of_GETxAPIxVAL 001C  
                           _eusart1TxBuffer 047E              __end_of_Train_Move_Right_Start 312C  
                      _Train_Move_Pwm_Count 007E                                  __accesstop 0060  
                   __end_of__initialization 3B7C                             __CFG_PBADEN$OFF 000000  
                             ___rparam_used 000001                       __size_of_EEPROMxSTORE 016C  
                             _Received_Data 0084                              __pcstackCOMRAM 0001  
                              __pidataBANK0 422C                                 _Init_Timers 4208  
                             __end_of_putch 422C                           __end_of_Green_Led 3DDC  
                               _ReadPointer 0072                                ??_GETxAPIxRW 0015  
                   ??_READxRECEIVEDxMESSAGE 00BA                        __end_of_EUSART1_Read 40EA  
                         __end_of_SetDCPWM1 40B6                             _Red_Led_Counter 0028  
                    ??_EUSART1_Transmit_ISR 0001  Train_Move_Right_Start@Train_Move_Wait_Time 0062  
                  __size_of_Debounce_Inputs 0786                 __end_of_EUSART1_Receive_ISR 4144  
          Train_Move_Right_Brake@Return_Val 00C0                               ?_SENDxMESSAGE 0013  
                 __size_of_DIAGNOSTICxTOxPC 00A2                                     ??_putch 0013  
                             _eusart1RxHead 0041                               _eusart1TxHead 0044  
                     __size_of_Eeprom_Store 0068                 Junction@Junction_Left_Right 0020  
                             _eusart1RxTail 0040                                  __pbssBANK0 0060  
                                __pbssBANK1 0100                                  __pbssBANK2 0200  
                                __pbssBANK3 0300                                  __pbssBANK4 0400  
                             _eusart1TxTail 0043                                _EEPROMxSTORE 2974  
                                 ?_Init_Pwm 0001                            _TranslateMessage 2AE0  
                        __end_of_GETxAPIxRW 4208                            GETxAPIxVAL@index 0013  
                          SETxAPIxVAL@index 0019                                   ?_Junction 001F  
                          SETxAPIxVAL@value 001B        __size_of_Left_Mountain_From_The_Left 0112  
                                   ?___wmul 0013                            SendMessage@index 00BA  
                          SendMessage@value 00BC                                     _CCP1CON 000FBD  
                               _SendMessage 4192                                     ?_tc_low 0001  
                                   ?_printf 00AD                                 ?_Train_Path 00AF  
                              _Eeprom_Store 3E50                                     _INTCON2 000FF1  
 Train_Move_Left_Start@Train_Move_Wait_Time 0066                              ??_SENDxMESSAGE 0017  
                          ??_APIxInitialize 0013                                     _SETxPWM 3A34  
                          SETxPWM@direction 0021                                     _DataLen 082F  
                                   _ApiList 0801                          _SETxAPIxVALxNoxRET 4040  
                           __CFG_VREGEN$OFF 000000                                  ??_Init_Pwm 001F  
                         Eeprom_Store@Value 0015                                     _Red_Led 3CC8  
                     _Train_Move_Left_Brake 2C38                                  ??_Junction 0020  
                                   __Hparam 0000                         ?_SETxAPIxVALxNoxRET 0015  
                     _Train_Move_Left_Start 2EBE                                     __Lparam 0000  
                      _Message_To_Translate 0082                             __size_of___wmul 0026  
                                   ___lwdiv 3F14                                     ___lwmod 3FFE  
                              __psmallconst 0800                                     __pcinit 3AE0  
                                   __ramtop 0800                             __size_of_tc_low 00AE  
                                   __ptext0 3C2C                                     __ptext1 085E  
                                   __ptext2 23BA                                     __ptext3 2FF6  
                                   __ptext4 2D7E                                     __ptext5 2EBE  
                                   __ptext6 2C38                                     __ptext7 3256  
                                   __ptext8 336A                                     __ptext9 36A4  
                      Train_Path@Return_Val 00C4                             __size_of_printf 012A  
                                   _dpowers 0825                                     _isdigit 41B2  
                                   _tc_high 0008                        ??_SETxAPIxVALxNoxRET 0019  
                        _EUSART1_Initialize 3FB6                   _Train_Move_Pwm_Fast_Count 0068  
                            __pintcode_body 37B4                        end_of_initialization 3B7C  
                           _Switch_Junction 002F                                ?_Eeprom_Read 0013  
                         ??_Debounce_Inputs 001F                         ?_EUSART1_Initialize 0001  
                      __size_of_SETxAPIxVAL 0050                               __Lmediumconst 0000  
                                   int_func 37B4                            SETxPWM@pwm_speed 0024  
                             ??_EEPROMxREAD 001D                   __size_of_Update_StateMchn 0EBA  
                       __size_of_Train_Path 03DA                                   _RCSTAbits 000FAB  
                                   printf@c 00B9                                     printf@f 00AD  
                                   postdec1 000FE5                                     postdec2 000FDD  
                                   postinc0 000FEE                                     postinc1 000FE6  
                                   postinc2 000FDE                       __size_of_EUSART1_Read 0034  
                      EEPROMxSTORE@api_list 00AD              Left_Mountain_From_The_Right@rc 00AD  
                      ??_EUSART1_Initialize 0013                                   _PORTAbits 000F80  
                                 _PORTBbits 000F81                                   _PORTCbits 000F82  
                                 _PORTDbits 000F83                                   _PORTEbits 000F84  
                                 _TRISAbits 000F92                                   _TRISBbits 000F93  
                                 _TRISCbits 000F94                                   _TRISDbits 000F95  
                                 _TRISEbits 000F96                         Eeprom_Read@Location 0013  
                          _DIAGNOSTICxTOxPC 3B8A                Junction@Junction_Switch_Time 006A  
                    ?_Train_Move_Left_Brake 0001                                _EUSART1_Read 40B6  
                                 _TXSTAbits 000FAC                      ?_Train_Move_Left_Start 0001  
                               _Switch_Main 00C5                                 _Switch_Init 008C  
                             EEPROMxSTORE@i 00AE                        __end_of_SENDxMESSAGE 3E50  
                       __end_of_EEPROMxREAD 3966                                ?_Init_Timers 0001  
                               _WriteActive 006C                                   _Comm_List 04FC  
                        Junction@Return_Val 004C                              __end_of___wmul 4192  
                               _BAUDCONbits 000FB8                               __pidataCOMRAM 4232  
               _Train_Move_Right_Brake$2189 00AD                        _Update_State_Machine 008D  
                            __end_of_tc_low 00C6                    __end_of_TranslateMessage 2C38  
               _Button_Contact_Counter_Stop 0035                              __end_of_printf 3256  
            __size_of_READxRECEIVEDxMESSAGE 0114                                   _Green_Led 3D52  
             __end_of_READxRECEIVEDxMESSAGE 3592                         start_initialization 3AE0  
                             ??_GETxAPIxVAL 0015                                   _SetDCPWM1 407C  
                           SetDCPWM1@DCycle 0019                      _Mountain_Delay_Counter 0026  
              ?_Left_Mountain_From_The_Left 0001               Eeprom_Store@Location_Low_Byte 0017  
                         __size_of_Init_Pwm 0028               Eeprom_Read@Location_High_Byte 0017  
                         __size_of_Junction 01E0                                    ??___wmul 0017  
                               __pdataBANK0 00C0                            __CFG_LPT1OSC$OFF 000000  
                              ?_SendMessage 00BA                                    ??_tc_low 0098  
                                  ??_printf 001F                              _eusart1RxCount 003F  
                              ??_Train_Path 0026                                  ?_Green_Led 0001  
                               __pbssBIGRAM 04FC                                 __pbssCOMRAM 0026  
             __size_of_EUSART1_Transmit_ISR 002E                               __pcstackBANK0 0098  
                                ?_SetDCPWM1 0015  Train_Move_Right_Brake@Train_Move_Wait_Time 0060  
                              _isdigit$1841 0014                                    ?_SETxPWM 001F  
              __size_of_EUSART1_Receive_ISR 002C                         __end_of_GETxAPIxVAL 41EC  
             ??_Left_Mountain_From_The_Left 0026                        __size_of_Eeprom_Read 005C  
                               _EEPROMxREAD 3894                                    ?_Red_Led 0001  
                          _Update_StateMchn 085E                            ___lwdiv@dividend 0013  
     Left_Mountain_From_The_Left@Return_Val 0049      Right_Mountain_From_The_Left@Return_Val 0048  
                        __end_of_Train_Path 2794                                   __pintcode 0008  
                                  ?___lwdiv 0013        __end_of_Left_Mountain_From_The_Right 37B4  
     __size_of_Left_Mountain_From_The_Right 0110                _Left_Mountain_From_The_Right 36A4  
                                  ?___lwmod 001A                                 __pintcodelo 0018  
                           GETxAPIxRW@index 0013                             _Debounce_Inputs 1718  
                               __smallconst 0800                    ??_Train_Move_Right_Brake 0026  
                                  ?_isdigit 0001                                    ?_tc_high 0001  
           Right_Mountain_From_The_Right@rc 00AD                    ??_Train_Move_Right_Start 0026  
                     TranslateMessage@Index 0022                       Junction@Straight_Bend 001F  
                     TranslateMessage@Value 0020                _Button_Contact_Counter_Start 0036  
                  _Reed_Contact_LMD_Counter 0039                            ___lwdiv@quotient 0018  
                _Train_Move_Left_Brake$2187 00AD                              __size_of_putch 000C  
               _Train_Move_Right_Start$2188 00AD                              ___wmul@product 0017  
                     __size_of_SENDxMESSAGE 0074        __end_of_Right_Mountain_From_The_Left 347E  
     __size_of_Right_Mountain_From_The_Left 0114                _Right_Mountain_From_The_Left 336A  
                                  _PIE1bits 000F9D                              _Adjust_Counter 007C  
             Left_Mountain_From_The_Left@rc 00AD                                    _PIR1bits 000F9E  
                                  _PIR2bits 000FA1              Eeprom_Store@Location_High_Byte 0019  
                                  _RCONbits 000FD0                              Train_Path@From 00B0  
                  __end_of_DIAGNOSTICxTOxPC 3C2C                        __size_of_Init_Timers 0018  
             ?_Left_Mountain_From_The_Right 0001                           ___wmul@multiplier 0013  
                         SENDxMESSAGE@index 0013                           SENDxMESSAGE@value 0015  
                               ??_Green_Led 001F                                  printf@flag 00B5  
                                printf@prec 00B6                                EEPROMxREAD@i 0021  
               __size_of_SETxAPIxVALxNoxRET 003C                                 ??_SetDCPWM1 0017  
                               _GETxAPIxVAL 41D0                               ??_SETxAPIxVAL 001D  
                              _SENDxMESSAGE 3DDC                                   copy_data0 3AF4  
                                 copy_data1 3B14                     ??_Train_Move_Left_Brake 0026  
                  _Reed_Contact_LMU_Counter 003A                            __size_of_SETxPWM 00AC  
                   ??_Train_Move_Left_Start 0026                          SetDCPWM1@dutycycle 0015  
                                  _Init_Pwm 4144                       EUSART1_Read@readValue 0013  
                                _EECON1bits 000FA6                     __size_of_APIxInitialize 051C  
                                  __Hrparam 0000                                    _Junction 2794  
                          __size_of_Red_Led 008A               ?_Right_Mountain_From_The_Left 0001  
                                  __Lrparam 0000                                    _TrSwitch 0081  
                                  _RxSwitch 0083                    _Reed_Contact_RMD_Counter 0037  
                   __end_of_Debounce_Inputs 1E9E                 __size_of_EUSART1_Initialize 0048  
                          __size_of___lwdiv 0052                            __size_of___lwmod 0042  
                         _Switch_Train_Path 0088                           _Switch_Train_Move 0080  
                          _Switch_Adjust_LB 0046                            _Switch_Adjust_LF 0045  
                          _Switch_Adjust_RB 008A                            _Switch_Adjust_RF 0089  
                      __size_of_SendMessage 0020                           ?_TranslateMessage 0001  
                                _API_EEPROM 0300             __size_of_Train_Move_Right_Brake 0140  
                          __size_of_isdigit 001E                            __size_of_tc_high 388C  
                        ??_TranslateMessage 0020                             ___lwdiv@divisor 0015  
           __size_of_Train_Move_Right_Start 0136                             ___lwdiv@counter 0017  
                                  __ptext10 3592                                    __ptext11 3A34  
                                  __ptext20 2AE0                                    __ptext12 2794  
                                  __ptext21 3966                                    __ptext13 3CC8  
                                  __ptext30 3F66                                    __ptext22 41B2  
                                  __ptext14 3D52                                    __ptext31 3DDC  
                                  __ptext23 416C                                    __ptext15 2974  
                                  __ptext40 3F14                                    __ptext32 3FB6  
                                  __ptext24 4040                                    __ptext16 3E50  
                                  __ptext41 1E9E                                    __ptext33 3894  
                                  __ptext25 41D0                                    __ptext17 1718  
                                  __ptext34 3EB8                                    __ptext26 41EC  
                                  __ptext18 407C                                    __ptext35 3B8A  
                                  __ptext27 40B6                                    __ptext19 347E  
                                  __ptext44 40EA                                    __ptext36 4192  
                                  __ptext28 4208                                    __ptext45 4118  
                                  __ptext37 312C                                    __ptext29 4144  
                                  __ptext38 4220                                    __ptext39 3FFE  
                             ?_EEPROMxSTORE 001B                               __size_of_atoi 00CE  
                             __size_of_main 009C                         __end_of_SETxAPIxVAL 3FB6  
                   _Reed_Contact_LB_Counter 003D                                    int$flags 004D  
                   _Reed_Contact_LF_Counter 003E                                    atoi@sign 001D  
                _Train_Move_Left_Start$2186 00AD                    _Reed_Contact_RMU_Counter 0038  
                                 printf@val 00B7                         _EUSART1_Receive_ISR 4118  
                                _GETxAPIxRW 41EC                       __CFG_CPUDIV$OSC2_PLL3 000000  
                                 putch@data 0013                               ?_Eeprom_Store 0013  
                  __end_of_Update_StateMchn 1718                                  _INTCONbits 000FF2  
           ??_Right_Mountain_From_The_Right 0026              ??_Left_Mountain_From_The_Right 0026  
                     _READxRECEIVEDxMESSAGE 347E                                    isdigit@c 0015  
                   _Reed_Contact_RB_Counter 003B                              ??_EEPROMxSTORE 001D  
                                  intlevel1 0000                                    intlevel2 0000  
                      ?_EUSART1_Receive_ISR 0001                            ___lwmod@dividend 001A  
                              ?_EEPROMxREAD 001B                                  _RCSTA1bits 000FAB  
                   _Reed_Contact_RF_Counter 003C                      _Train_Move_Right_Brake 2D7E  
              __end_of_EUSART1_Transmit_ISR 4118                      _Train_Move_Right_Start 2FF6  
           Train_Move_Left_Start@Return_Val 00C3                                Train_Path@To 00AF  
                                  printf@ap 00B3                            ?_Debounce_Inputs 0001  
                  _Switch_Activate_Controls 0047              ??_Right_Mountain_From_The_Left 0026  
                            ??_Eeprom_Store 0017                             ___lwmod@divisor 001C  
                           ___lwmod@counter 001E                     SETxAPIxVALxNoxRET@index 0015  
                               _SETxAPIxVAL 3F66                     SETxAPIxVALxNoxRET@value 0017  
                             ??_Eeprom_Read 0015                          __CFG_FOSC$HSPLL_HS 000000  
                     ??_EUSART1_Receive_ISR 0001                              _APIxInitialize 1E9E  
             _Button_Contact_Counter_Middle 0034  
